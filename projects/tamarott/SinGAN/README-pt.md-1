{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[Projeto](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Materiais suplementares](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Palestra (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Implementação oficial em pytorch do artigo: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### Prêmio de melhor artigo do ICCV 2019 (Marr prize)\n\n\n## Amostras aleatórias de uma *única* imagem\nCom o SinGAN, você pode treinar um modelo generativo a partir de uma única imagem natural e, em seguida, gerar amostras aleatórias a partir da imagem fornecida, por exemplo:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## Aplicações do SinGAN\nO SinGAN também pode ser usado para uma série de tarefas de manipulação de imagens, por exemplo:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nIsso é feito injetando uma imagem no modelo já treinado. Veja a seção 4 do nosso [artigo](https://arxiv.org/pdf/1905.01164.pdf) para mais detalhes.\n\n\n### Citação\nSe você utilizar este código em sua pesquisa, por favor cite nosso artigo:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar e Dekel, Tali e Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Código\n\n### Instalar dependências\n\n```\npython -m pip install -r requirements.txt\n```\n\nEste código foi testado com python 3.6, torch 1.4\n\nAtenção: o código atualmente suporta apenas torch 1.4 ou anterior devido ao esquema de otimização.\n\nPara versões mais recentes do torch, você pode tentar este repositório: https://github.com/kligvasser/SinGAN (os resultados podem não ser necessariamente idênticos à implementação oficial).\n\n\n###  Treinar\nPara treinar o modelo SinGAN em sua própria imagem, coloque a imagem desejada para treino em Input/Images e execute\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nIsso também utilizará o modelo treinado resultante para gerar amostras aleatórias a partir da escala mais grosseira (n=0).\n\nPara executar este código em uma máquina cpu, especifique `--not_cuda` ao chamar `main_train.py`\n\n###  Amostras aleatórias\nPara gerar amostras aleatórias a partir de qualquer escala inicial de geração, primeiro treine o modelo SinGAN na imagem desejada (como descrito acima), depois execute\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\natenção: para usar o modelo completo, especifique a escala inicial de geração como 0, para iniciar a geração a partir da segunda escala, especifique 1 e assim por diante.\n\n###  Amostras aleatórias de tamanhos arbitrários\nPara gerar amostras aleatórias de tamanhos arbitrários, primeiro treine o modelo SinGAN na imagem desejada (como descrito acima), depois execute\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animação a partir de uma única imagem\n\nPara gerar uma animação curta a partir de uma única imagem, execute\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nIsso iniciará automaticamente uma nova fase de treinamento com modo de preenchimento de ruído.\n\n###  Harmonização\n\nPara harmonizar um objeto colado em uma imagem (veja exemplo na Fig. 13 do [nosso artigo](https://arxiv.org/pdf/1905.01164.pdf)), primeiro treine o modelo SinGAN na imagem de fundo desejada (como descrito acima), depois salve a imagem de referência colada de forma ingênua e sua máscara binária em \"Input/Harmonization\" (veja as imagens salvas como exemplo). Execute o comando\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nObserve que diferentes escalas de injeção produzirão diferentes efeitos de harmonização. A escala de injeção mais grosseira equivale a 1.\n\n###  Edição\n\nPara editar uma imagem (veja exemplo na Fig. 12 do [nosso artigo](https://arxiv.org/pdf/1905.01164.pdf)), primeiro treine o modelo SinGAN na imagem não editada desejada (como descrito acima), depois salve a edição ingênua como uma imagem de referência em \"Input/Editing\" com o mapa binário correspondente (veja as imagens salvas como exemplo). Execute o comando\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "status": "ok"
}