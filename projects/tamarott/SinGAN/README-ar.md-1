{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# سينجان (SinGAN)\n\n[المشروع](https://tamarott.github.io/SinGAN.htm) | [أركايف](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [مواد إضافية](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [محاضرة (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191)\n### التطبيق الرسمي بـ pytorch للورقة: \"سينجان: تعلم نموذج توليدي من صورة طبيعية واحدة\"\n#### جائزة أفضل ورقة ICCV 2019 (جائزة مار)\n\n## عينات عشوائية من *صورة واحدة*\nباستخدام سينجان، يمكنك تدريب نموذج توليدي من صورة طبيعية واحدة، ثم توليد عينات عشوائية من الصورة المُعطاة، على سبيل المثال:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n## تطبيقات سينجان\nيمكن استخدام سينجان أيضًا في مجموعة من مهام معالجة الصور، على سبيل المثال:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nيتم ذلك عن طريق حقن صورة في النموذج المدرب مسبقًا. راجع القسم 4 في [ورقتنا](https://arxiv.org/pdf/1905.01164.pdf) لمزيد من التفاصيل.\n\n### الاقتباس\nإذا استخدمت هذا الكود في بحثك، يرجى اقتباس ورقتنا:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## الكود\n\n### تثبيت المتطلبات\n\n```\npython -m pip install -r requirements.txt\n```\n\nتم اختبار هذا الكود مع بايثون 3.6، وتورش 1.4\n\nيرجى الملاحظة: الكود يدعم حاليًا تورش 1.4 أو أقدم فقط بسبب نظام التحسين المستخدم.\n\nلإصدارات تورش الأحدث، يمكنك تجربة هذا المستودع: https://github.com/kligvasser/SinGAN (قد لا تكون النتائج متطابقة مع التطبيق الرسمي).\n\n### التدريب\nلتدريب نموذج سينجان على صورتك الخاصة، ضع صورة التدريب المطلوبة تحت Input/Images، ثم نفذ\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nسيقوم ذلك أيضًا باستخدام النموذج المدرب الناتج لتوليد عينات عشوائية بدءًا من أوسع مقياس (n=0).\n\nلتشغيل هذا الكود على جهاز بدون وحدة معالجة رسومات، حدد `--not_cuda` عند استدعاء `main_train.py`\n\n### عينات عشوائية\nلتوليد عينات عشوائية من أي مقياس توليدي ابتدائي، يجب أولاً تدريب نموذج سينجان على الصورة المطلوبة (كما هو موضح أعلاه)، ثم نفذ\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\nتنبيه: لاستخدام النموذج الكامل، حدد مقياس بدء التوليد بـ 0، وللبدء من المقياس الثاني، حدده 1، وهكذا.\n\n### عينات عشوائية بأحجام عشوائية\nلتوليد عينات عشوائية بأحجام عشوائية، يجب أولاً تدريب نموذج سينجان على الصورة المطلوبة (كما هو موضح أعلاه)، ثم نفذ\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n### تحريك صورة واحدة\n\nلتوليد تحريك قصير من صورة واحدة، نفذ\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nسيبدأ ذلك تلقائيًا مرحلة تدريب جديدة بوضع حشو الضوضاء.\n\n### التناسق اللوني (Harmonization)\n\nلمواءمة كائن ملصق مع صورة (انظر المثال في الشكل 13 في [ورقتنا](https://arxiv.org/pdf/1905.01164.pdf))، يرجى أولاً تدريب نموذج سينجان على صورة الخلفية المطلوبة (كما هو موضح أعلاه)، ثم احفظ صورة المرجع الملصقة ببساطة وقناعها الثنائي تحت \"Input/Harmonization\" (انظر الصور المحفوظة كمثال). نفذ الأمر\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nيرجى الملاحظة أن مقياس الحقن المختلف سينتج تأثيرات تناسق مختلفة. أوسع مقياس حقن يساوي 1.\n\n### التحرير\n\nلتحرير صورة (انظر المثال في الشكل 12 في [ورقتنا](https://arxiv.org/pdf/1905.01164.pdf))، يرجى أولاً تدريب نموذج سينجان على الصورة غير المعدلة المطلوبة (كما هو موضح أعلاه)، ثم احفظ التعديل البسيط كصورة مرجعية تحت \"Input/Editing\" مع خريطة ثنائية مقابلة (انظر الصور المحفوظة كمثال). نفذ الأمر\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>\n```",
  "status": "ok"
}