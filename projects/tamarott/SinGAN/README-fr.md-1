{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[Projet](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Matériaux supplémentaires](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Présentation (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Implémentation officielle de SinGAN en pytorch, article : \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### Prix du meilleur article ICCV 2019 (Marr prize)\n\n\n## Échantillons aléatoires à partir d’une *seule* image\nAvec SinGAN, vous pouvez entraîner un modèle génératif à partir d’une seule image naturelle, puis générer des échantillons aléatoires à partir de l’image donnée, par exemple :\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## Applications de SinGAN\nSinGAN peut également être utilisé pour une série de tâches de manipulation d’images, par exemple :\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nCela se fait en injectant une image dans le modèle déjà entraîné. Voir la section 4 de notre [article](https://arxiv.org/pdf/1905.01164.pdf) pour plus de détails.\n\n\n### Citation\nSi vous utilisez ce code dans le cadre de vos recherches, veuillez citer notre article :\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Installer les dépendances\n\n```\npython -m pip install -r requirements.txt\n```\n\nCe code a été testé avec python 3.6, torch 1.4\n\nVeuillez noter : le code ne supporte actuellement que torch 1.4 ou antérieur à cause du schéma d’optimisation.\n\nPour les versions ultérieures de torch, vous pouvez essayer ce dépôt : https://github.com/kligvasser/SinGAN (les résultats ne seront pas nécessairement identiques à l’implémentation officielle).\n\n\n### Entraînement\nPour entraîner le modèle SinGAN sur votre propre image, placez l’image d’entraînement souhaitée dans Input/Images, puis lancez\n\n```\npython main_train.py --input_name <nom_du_fichier_image>\n```\n\nCela utilisera également le modèle entraîné pour générer des échantillons aléatoires à partir de l’échelle la plus grossière (n=0).\n\nPour exécuter ce code sur une machine CPU, spécifiez `--not_cuda` lors de l’appel de `main_train.py`\n\n### Échantillons aléatoires\nPour générer des échantillons aléatoires à partir de n’importe quelle échelle de génération, veuillez d’abord entraîner le modèle SinGAN sur l’image désirée (comme décrit ci-dessus), puis lancez \n\n```\npython random_samples.py --input_name <nom_du_fichier_image_d_entrainement> --mode random_samples --gen_start_scale <numéro_de_l_échelle_de_départ>\n```\n\nattention : pour utiliser le modèle complet, spécifiez l’échelle de génération de départ à 0, pour commencer à la deuxième échelle, spécifiez 1, et ainsi de suite. \n\n### Échantillons aléatoires de tailles arbitraires\nPour générer des échantillons aléatoires de tailles arbitraires, veuillez d’abord entraîner le modèle SinGAN sur l’image souhaitée (comme décrit ci-dessus), puis lancez \n\n```\npython random_samples.py --input_name <nom_du_fichier_image_d_entrainement> --mode random_samples_arbitrary_sizes --scale_h <facteur_de_redimensionnement_horizontal> --scale_v <facteur_de_redimensionnement_vertical>\n```\n\n### Animation à partir d’une seule image\n\nPour générer une courte animation à partir d’une seule image, lancez\n\n```\npython animation.py --input_name <nom_du_fichier_image> \n```\n\nCela démarrera automatiquement une nouvelle phase d’entraînement avec un mode de padding bruit.\n\n### Harmonisation\n\nPour harmoniser un objet collé dans une image (voir exemple Fig. 13 dans [notre article](https://arxiv.org/pdf/1905.01164.pdf)), veuillez d’abord entraîner le modèle SinGAN sur l’image de fond souhaitée (comme décrit ci-dessus), puis sauvegardez l’image de référence collée naïvement et son masque binaire sous \"Input/Harmonization\" (voir les images enregistrées pour un exemple). Exécutez la commande\n\n```\npython harmonization.py --input_name <nom_du_fichier_image_d_entrainement> --ref_name <nom_du_fichier_image_référence_collée_naïvement> --harmonization_start_scale <échelle_d_injection>\n\n```\n\nVeuillez noter que différentes échelles d’injection produiront des effets d’harmonisation différents. L’échelle d’injection la plus grossière est égale à 1. \n\n### Édition\n\nPour éditer une image (voir exemple Fig. 12 dans [notre article](https://arxiv.org/pdf/1905.01164.pdf)), veuillez d’abord entraîner le modèle SinGAN sur l’image non éditée souhaitée (comme décrit ci-dessus), puis sauvegardez l’édition naïve comme image de référence sous \"Input/Editing\" avec une carte binaire correspondante (voir les images enregistrées pour un exemple). Exécutez la commande\n\n```\npython editing.py --input_name <nom_du_fichier_image_d_entrainement> --ref_name <nom_du_fichier_image_éditée> --editing_start_scale <échelle_d_injection>",
  "status": "ok"
}