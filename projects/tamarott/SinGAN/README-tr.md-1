{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[Proje](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Ek materyaller](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Konuşma (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Makalenin resmi pytorch uygulaması: \"SinGAN: Tek Bir Doğal Görüntüden Üretken Model Öğrenimi\"\n#### ICCV 2019 En İyi Makale Ödülü (Marr ödülü)\n\n\n## *Tek bir* görüntüden rastgele örnekler\nSinGAN ile, tek bir doğal görüntüden üretken bir model eğitebilir ve ardından verilen görüntüden rastgele örnekler oluşturabilirsiniz, örneğin:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN'ın uygulamaları\nSinGAN ayrıca bir dizi görüntü manipülasyon görevi için de kullanılabilir, örneğin:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nBu, görüntünün önceden eğitilmiş modele enjekte edilmesiyle yapılır. Daha fazla ayrıntı için makalemizin [bölüm 4](https://arxiv.org/pdf/1905.01164.pdf)'üne bakınız.\n\n\n### Atıf\nBu kodu araştırmanızda kullanırsanız, lütfen makalemize atıfta bulunun:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Kod\n\n### Bağımlılıkları yükleyin\n\n```\npython -m pip install -r requirements.txt\n```\n\nBu kod python 3.6, torch 1.4 ile test edilmiştir.\n\nLütfen dikkat: Kod şu anda yalnızca torch 1.4 veya daha önceki sürümleri desteklemektedir, bunun nedeni optimizasyon şemasıdır.\n\nDaha yeni torch sürümleri için şu depoyu deneyebilirsiniz: https://github.com/kligvasser/SinGAN (sonuçlar resmi uygulamayla birebir aynı olmayabilir).\n\n\n###  Eğitim\nSinGAN modelini kendi görüntünüzde eğitmek için, istediğiniz eğitim görüntüsünü Input/Images klasörüne koyun ve şunu çalıştırın:\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nBu, ayrıca en kaba ölçekten (n=0) başlayarak rastgele örnekler üretmek için eğitilen modeli kullanacaktır.\n\nBu kodu bir cpu makinede çalıştırmak için, `main_train.py` çağrılırken `--not_cuda` belirtin.\n\n###  Rastgele örnekler\nHerhangi bir başlangıç üretim ölçeğinden rastgele örnekler oluşturmak için, lütfen önce SinGAN modelini istenen görüntüde eğitin (yukarıda açıklandığı gibi), ardından şunu çalıştırın:\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\ndikkat: tam modeli kullanmak için, üretim başlangıç ölçeğini 0 olarak belirtin, üretime ikinci ölçekten başlamak için 1 olarak belirtin, vb.\n\n###  İsteğe bağlı boyutlarda rastgele örnekler\nİsteğe bağlı boyutlarda rastgele örnekler oluşturmak için, lütfen önce SinGAN modelini istenen görüntüde eğitin (yukarıda açıklandığı gibi), ardından şunu çalıştırın:\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <yatay ölçekleme faktörü> --scale_v <dikey ölçekleme faktörü>\n```\n\n###  Tek bir görüntüden animasyon\n\nTek bir görüntüden kısa bir animasyon oluşturmak için şunu çalıştırın:\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nBu, otomatik olarak gürültü dolgulu yeni bir eğitim aşaması başlatacaktır.\n\n###  Harmanlama\n\nBir görsele yapıştırılmış bir nesneyi görüntüye uyumlu hale getirmek için (örnek için bkz. Şekil 13 [makalemizde](https://arxiv.org/pdf/1905.01164.pdf)), lütfen önce SinGAN modelini istenen arka plan görüntüsünde eğitin (yukarıda açıklandığı gibi), ardından referans olarak kaba şekilde yapıştırılmış görüntüyü ve onun ikili maskesini \"Input/Harmonization\" altına kaydedin (örnek için kaydedilmiş görüntülere bakınız). Komutu çalıştırın:\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <ölçek enjekte edilecek>\n\n```\n\nFarklı enjeksiyon ölçeklerinin farklı harmanlama etkileri oluşturacağını lütfen unutmayın. En kaba enjeksiyon ölçeği 1'e eşittir.\n\n###  Düzenleme\n\nBir görüntüyü düzenlemek için (örnek için bkz. Şekil 12 [makalemizde](https://arxiv.org/pdf/1905.01164.pdf)), lütfen önce SinGAN modelini istenen düzenlenmemiş görüntüde eğitin (yukarıda açıklandığı gibi), ardından kaba düzenlemeyi referans görüntü olarak \"Input/Editing\" altına ilgili bir ikili harita ile kaydedin (örnek için kaydedilmiş görüntülere bakınız). Komutu çalıştırın:\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <ölçek enjekte edilecek>",
  "status": "ok"
}