{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# سین‌گن (SinGAN)\n\n[پروژه](https://tamarott.github.io/SinGAN.htm) | [آرکایو](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [مواد تکمیلی](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [سخنرانی (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191)\n### پیاده‌سازی رسمی pytorch از مقاله: \"سین‌گن: یادگیری یک مدل مولد از یک تصویر طبیعی منفرد\"\n#### برنده جایزه بهترین مقاله ICCV 2019 (جایزه Marr)\n\n## نمونه‌های تصادفی از *یک* تصویر\nبا سین‌گن، شما می‌توانید یک مدل مولد را فقط از یک تصویر طبیعی آموزش دهید، و سپس نمونه‌های تصادفی از همان تصویر تولید کنید، برای مثال:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n## کاربردهای سین‌گن\nسین‌گن همچنین می‌تواند برای مجموعه‌ای از وظایف دستکاری تصویر مورد استفاده قرار گیرد، برای مثال:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nاین کار با تزریق یک تصویر به مدل آموزش‌دیده انجام می‌شود. برای جزئیات بیشتر به بخش ۴ مقاله ما [اینجا](https://arxiv.org/pdf/1905.01164.pdf) مراجعه کنید.\n\n### ارجاع\nاگر از این کد در پژوهش خود استفاده می‌کنید، لطفاً به مقاله ما ارجاع دهید:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## کد\n\n### نصب پیش‌نیازها\n\n```\npython -m pip install -r requirements.txt\n```\n\nاین کد با python 3.6 و torch 1.4 تست شده است.\n\nتوجه داشته باشید: این کد فعلاً فقط از torch 1.4 یا نسخه‌های قبل‌تر پشتیبانی می‌کند به دلیل طرح بهینه‌سازی.\n\nبرای نسخه‌های جدیدتر torch، می‌توانید این مخزن را امتحان کنید: https://github.com/kligvasser/SinGAN (نتایج الزاماً با پیاده‌سازی رسمی یکسان نخواهد بود).\n\n### آموزش\nبرای آموزش مدل سین‌گن روی تصویر دلخواه خود، تصویر مورد نظر را در پوشه Input/Images قرار دهید و اجرا کنید\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nاین کار همچنین مدل آموزش‌دیده را به کار می‌گیرد تا نمونه‌های تصادفی از مقیاس خشن‌تر (n=0) تولید کند.\n\nبرای اجرای این کد روی سیستم cpu، هنگام اجرای `main_train.py` گزینه `--not_cuda` را مشخص کنید.\n\n### نمونه‌های تصادفی\nبرای تولید نمونه‌های تصادفی از هر مقیاس شروع تولید، ابتدا مدل سین‌گن را روی تصویر مورد نظر آموزش دهید (طبق توضیحات بالا)، سپس اجرا کنید\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\nتوجه کنید: برای استفاده از مدل کامل، عدد مقیاس شروع تولید را 0 قرار دهید، برای شروع از مقیاس دوم، آن را 1 قرار دهید و به همین ترتیب.\n\n### نمونه‌های تصادفی با اندازه دلخواه\nبرای تولید نمونه‌های تصادفی با اندازه‌های دلخواه، ابتدا مدل سین‌گن را روی تصویر مورد نظر آموزش دهید (طبق توضیحات بالا)، سپس اجرا کنید\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n### انیمیشن از یک تصویر منفرد\n\nبرای تولید یک انیمیشن کوتاه از یک تصویر منفرد، اجرا کنید\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nاین کار به طور خودکار یک مرحله آموزش جدید با حالت padding نویزی را آغاز می‌کند.\n\n### یکسان‌سازی (Harmonization)\n\nبرای یکسان‌سازی یک شیء چسبانده شده در یک تصویر (نمونه‌ای را در شکل ۱۳ مقاله [ما](https://arxiv.org/pdf/1905.01164.pdf) ببینید)، ابتدا مدل سین‌گن را روی تصویر پس‌زمینه دلخواه آموزش دهید (طبق توضیحات بالا)، سپس تصویر مرجع چسبانده‌شده و ماسک دودویی آن را در پوشه \"Input/Harmonization\" ذخیره کنید (برای نمونه به تصاویر ذخیره‌شده مراجعه کنید). دستور زیر را اجرا کنید\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nتوجه داشته باشید که مقیاس تزریق متفاوت، اثرات یکسان‌سازی متفاوتی ایجاد می‌کند. خشن‌ترین مقیاس تزریق برابر با 1 است.\n\n### ویرایش\n\nبرای ویرایش یک تصویر (نمونه‌ای را در شکل ۱۲ مقاله [ما](https://arxiv.org/pdf/1905.01164.pdf) ببینید)، ابتدا مدل سین‌گن را روی تصویر اصلی (ویرایش‌نشده) آموزش دهید (طبق توضیحات بالا)، سپس ویرایش ساده را به عنوان تصویر مرجع همراه با نقشه دودویی مربوطه در پوشه \"Input/Editing\" ذخیره کنید (برای نمونه به تصاویر ذخیره‌شده مراجعه کنید). دستور زیر را اجرا کنید\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>\n```",
  "status": "ok"
}