{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[Проект](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Дополнительные материалы](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Доклад (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Официальная реализация на pytorch статьи: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### Лучшая статья ICCV 2019 (приз Марра)\n\n\n## Случайные выборки из *одного* изображения\nС помощью SinGAN вы можете обучить генеративную модель на одном натуральном изображении, а затем генерировать случайные выборки из данного изображения, например:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## Применения SinGAN\nSinGAN также может использоваться для различных задач манипуляции изображениями, например:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nЭто достигается путем внедрения изображения в уже обученную модель. Подробнее смотрите в разделе 4 нашей [статьи](https://arxiv.org/pdf/1905.01164.pdf).\n\n\n### Цитирование\nЕсли вы используете этот код в своих исследованиях, пожалуйста, цитируйте нашу статью:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Код\n\n### Установка зависимостей\n\n```\npython -m pip install -r requirements.txt\n```\n\nЭтот код был протестирован с python 3.6, torch 1.4\n\nОбратите внимание: на данный момент код поддерживает только torch 1.4 или более ранние версии из-за используемой схемы оптимизации.\n\nДля более поздних версий torch вы можете попробовать этот репозиторий: https://github.com/kligvasser/SinGAN (результаты могут отличаться от официальной реализации).\n\n\n###  Обучение\nЧтобы обучить модель SinGAN на вашем изображении, поместите нужное изображение для обучения в папку Input/Images и запустите\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nЭто также использует полученную обученную модель для генерации случайных выборок, начиная с самого грубого масштаба (n=0).\n\nЧтобы запустить этот код на процессоре, укажите `--not_cuda` при запуске `main_train.py`\n\n###  Случайные выборки\nЧтобы сгенерировать случайные выборки с любого начального масштаба генерации, сначала обучите модель SinGAN на нужном изображении (как описано выше), затем запустите \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\nобратите внимание: чтобы использовать полную модель, укажите начальный масштаб генерации равным 0; чтобы начать генерацию со второго масштаба, укажите 1 и так далее. \n\n###  Случайные выборки произвольных размеров\nЧтобы сгенерировать случайные выборки произвольных размеров, сначала обучите модель SinGAN на нужном изображении (как описано выше), затем запустите \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Анимация из одного изображения\n\nЧтобы сгенерировать короткую анимацию из одного изображения, выполните\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nЭто автоматически запустит новый этап обучения в режиме заполнения шумом.\n\n###  Гармонизация\n\nЧтобы гармонично вставить объект в изображение (см. пример на рис. 13 в [нашей статье](https://arxiv.org/pdf/1905.01164.pdf)), сначала обучите модель SinGAN на нужном фоновом изображении (как описано выше), затем сохраните наивно вставленное референсное изображение и его бинарную маску в папку \"Input/Harmonization\" (см. сохранённые изображения для примера). Выполните команду\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nОбратите внимание, что разные масштабы внедрения дадут разные эффекты гармонизации. Самый грубый масштаб внедрения равен 1. \n\n###  Редактирование\n\nЧтобы отредактировать изображение (см. пример на рис. 12 в [нашей статье](https://arxiv.org/pdf/1905.01164.pdf)), сначала обучите модель SinGAN на нужном неотредактированном изображении (как описано выше), затем сохраните наивное редактирование в виде референсного изображения в папке \"Input/Editing\" с соответствующей бинарной картой (см. сохранённые изображения для примера). Выполните команду\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "status": "ok"
}