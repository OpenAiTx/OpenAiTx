{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Officiële PyTorch-implementatie van het artikel: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prijs)\n\n\n## Willekeurige samples van een *enkele* afbeelding\nMet SinGAN kun je een generatief model trainen op basis van één enkele natuurlijke afbeelding, en vervolgens willekeurige samples genereren van de gegeven afbeelding, bijvoorbeeld:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## Toepassingen van SinGAN\nSinGAN kan ook worden gebruikt voor verschillende beeldbewerkingsdoeleinden, bijvoorbeeld:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nDit wordt gedaan door een afbeelding te injecteren in het reeds getrainde model. Zie sectie 4 in ons [artikel](https://arxiv.org/pdf/1905.01164.pdf) voor meer details.\n\n\n### Referentie\nAls je deze code gebruikt voor je onderzoek, citeer dan ons artikel:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Afhankelijkheden installeren\n\n```\npython -m pip install -r requirements.txt\n```\n\nDeze code is getest met python 3.6, torch 1.4\n\nLet op: de code ondersteunt momenteel alleen torch 1.4 of ouder vanwege het optimalisatieschema.\n\nVoor latere torch-versies kun je deze repository proberen: https://github.com/kligvasser/SinGAN (de resultaten zullen niet noodzakelijk identiek zijn aan de officiële implementatie).\n\n\n###  Trainen\nOm een SinGAN-model te trainen op je eigen afbeelding, plaats je de gewenste trainingsafbeelding onder Input/Images en voer je uit\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nDit gebruikt ook het resulterende getrainde model om willekeurige samples te genereren vanaf de grofste schaal (n=0).\n\nOm deze code op een CPU-machine uit te voeren, geef je `--not_cuda` op bij het aanroepen van `main_train.py`\n\n###  Willekeurige samples\nOm willekeurige samples te genereren vanaf elke gewenste generatieschaal, train eerst het SinGAN-model op de gewenste afbeelding (zoals hierboven beschreven), voer vervolgens uit \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\nLet op: om het volledige model te gebruiken, stel je de generation start scale in op 0, om te starten vanaf de tweede schaal stel je hem in op 1, enzovoort. \n\n###  Willekeurige samples van willekeurige grootte\nOm willekeurige samples van willekeurige grootte te genereren, train eerst het SinGAN-model op de gewenste afbeelding (zoals hierboven beschreven), voer vervolgens uit \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animatie uit één enkele afbeelding\n\nOm een korte animatie te genereren uit een enkele afbeelding, voer uit\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nDit zal automatisch een nieuwe trainingsfase starten met noise padding-modus.\n\n###  Harmonisatie\n\nOm een geplakt object te harmoniseren in een afbeelding (Zie voorbeeld in Fig. 13 in [ons artikel](https://arxiv.org/pdf/1905.01164.pdf)), train eerst het SinGAN-model op de gewenste achtergrondafbeelding (zoals hierboven beschreven), sla vervolgens de simpelweg geplakte referentieafbeelding en het bijbehorende binaire masker op onder \"Input/Harmonization\" (zie opgeslagen afbeeldingen voor een voorbeeld). Voer het commando uit\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nLet op dat verschillende injectieschalen verschillende harmonisatie-effecten opleveren. De grofste injectieschaal is gelijk aan 1. \n\n###  Bewerken\n\nOm een afbeelding te bewerken, (Zie voorbeeld in Fig. 12 in [ons artikel](https://arxiv.org/pdf/1905.01164.pdf)), train eerst het SinGAN-model op de gewenste onbewerkte afbeelding (zoals hierboven beschreven), sla vervolgens de simpele bewerking op als referentieafbeelding onder \"Input/Editing\" met een bijbehorende binaire map (zie opgeslagen afbeeldingen voor een voorbeeld). Voer het commando uit\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>\n```",
  "status": "ok"
}