{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[專案](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [補充資料](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [演講 (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### 論文官方 pytorch 實現：\"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 最佳論文獎 (Marr prize)\n\n## 從*單一*影像隨機取樣\n使用 SinGAN，您可以從單一自然影像訓練出生成模型，然後從該影像產生隨機樣本，例如：\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n## SinGAN 的應用\nSinGAN 也可用於多種影像操作任務，例如：\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\n這是透過將影像注入已訓練好的模型來實現。詳情請參考我們[論文](https://arxiv.org/pdf/1905.01164.pdf)第 4 節。\n\n### 引用\n如果您在研究中使用本程式碼，請引用我們的論文：\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## 程式碼\n\n### 安裝相依套件\n\n```\npython -m pip install -r requirements.txt\n```\n\n本程式碼經 Python 3.6、torch 1.4 測試。\n\n請注意：目前僅支援 torch 1.4 或更早版本，這是由於優化方案所致。\n\n如需支援新版 torch，可嘗試此倉庫：https://github.com/kligvasser/SinGAN（結果不一定與官方實現完全一致）。\n\n### 訓練\n若要在自有影像上訓練 SinGAN 模型，請將欲訓練影像置於 Input/Images 資料夾下，並執行\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\n這也會使用訓練完成的模型自最粗尺度 (n=0) 開始產生隨機樣本。\n\n若欲於 CPU 設備執行，請在呼叫 `main_train.py` 時指定 `--not_cuda`\n\n### 隨機取樣\n若要從任意起始生成尺度產生隨機樣本，請先依上述步驟於欲用影像上訓練 SinGAN 模型，然後執行\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\n注意：若要使用完整模型，請將 generation start scale 設為 0；若要自第二尺度起始，請設為 1，依此類推。\n\n### 任意尺寸的隨機取樣\n若要產生任意尺寸的隨機樣本，請先依上述步驟於欲用影像上訓練 SinGAN 模型，然後執行\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n### 從單一影像生成動畫\n\n若要從單一影像產生短動畫，請執行\n\n```\npython animation.py --input_name <input_file_name> \n```\n\n這將自動以噪聲填補模式啟動新訓練階段。\n\n### 融合\n\n若要將貼上的物件與影像融合（請參見[論文](https://arxiv.org/pdf/1905.01164.pdf)圖 13 範例），請先在欲用背景影像上訓練 SinGAN 模型（如前述），然後將經簡單貼上的參考影像及其二值遮罩存至 \"Input/Harmonization\" 目錄下（可參考範例影像）。執行指令\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\n請注意，注入的尺度不同將產生不同的融合效果。最粗的注入尺度為 1。\n\n### 編輯\n\n若要編輯影像（請參見[論文](https://arxiv.org/pdf/1905.01164.pdf)圖 12 範例），請先於欲用非編輯影像上訓練 SinGAN 模型（如前述），然後將簡單編輯結果存為參考影像於 \"Input/Editing\" 目錄下，並附上對應二值圖（可參考範例影像）。執行指令\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>\n```",
  "status": "ok"
}