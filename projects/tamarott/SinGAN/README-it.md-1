{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[Progetto](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Materiali supplementari](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Implementazione ufficiale in pytorch del paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Campioni casuali da una *singola* immagine\nCon SinGAN, puoi addestrare un modello generativo a partire da una singola immagine naturale, e poi generare campioni casuali dall'immagine fornita, ad esempio:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## Applicazioni di SinGAN\nSinGAN può essere utilizzato anche per una serie di compiti di manipolazione delle immagini, ad esempio:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nQuesto viene fatto iniettando un'immagine nel modello già addestrato. Vedi la sezione 4 del nostro [paper](https://arxiv.org/pdf/1905.01164.pdf) per maggiori dettagli.\n\n\n### Citazione\nSe utilizzi questo codice per la tua ricerca, cita il nostro paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Codice\n\n### Installare le dipendenze\n\n```\npython -m pip install -r requirements.txt\n```\n\nQuesto codice è stato testato con python 3.6, torch 1.4\n\nNota bene: il codice attualmente supporta solo torch 1.4 o versioni precedenti a causa dello schema di ottimizzazione.\n\nPer versioni torch successive, puoi provare questo repository: https://github.com/kligvasser/SinGAN (i risultati non saranno necessariamente identici all'implementazione ufficiale).\n\n\n###  Addestramento\nPer addestrare il modello SinGAN su una tua immagine, inserisci l'immagine desiderata per l'addestramento nella cartella Input/Images, ed esegui\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nQuesto utilizzerà anche il modello addestrato risultante per generare campioni casuali a partire dalla scala più grossolana (n=0).\n\nPer eseguire questo codice su una macchina cpu, specifica `--not_cuda` quando richiami `main_train.py`\n\n###  Campioni casuali\nPer generare campioni casuali da qualsiasi scala di generazione iniziale, per prima cosa addestra il modello SinGAN sull'immagine desiderata (come descritto sopra), poi esegui \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\nAttenzione: per usare il modello completo, specifica che la scala di inizio generazione sia 0, per iniziare la generazione dalla seconda scala, specifica 1, e così via. \n\n###  Campioni casuali di dimensioni arbitrarie\nPer generare campioni casuali di dimensioni arbitrarie, per prima cosa addestra il modello SinGAN sull'immagine desiderata (come descritto sopra), poi esegui \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <fattore di scala orizzontale> --scale_v <fattore di scala verticale>\n```\n\n###  Animazione da una singola immagine\n\nPer generare una breve animazione da una singola immagine, esegui\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nQuesto farà partire automaticamente una nuova fase di addestramento con la modalità padding del rumore.\n\n###  Armonizzazione\n\nPer armonizzare un oggetto incollato in un'immagine (vedi esempio in Fig. 13 del [nostro paper](https://arxiv.org/pdf/1905.01164.pdf)), per prima cosa addestra il modello SinGAN sull'immagine di sfondo desiderata (come descritto sopra), poi salva l'immagine di riferimento incollata naïfamente e la sua maschera binaria sotto \"Input/Harmonization\" (vedi immagini salvate come esempio). Esegui il comando\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scala da iniettare>\n\n```\n\nNota che diverse scale di iniezione produrranno effetti di armonizzazione differenti. La scala di iniezione più grossolana è uguale a 1. \n\n###  Editing\n\nPer modificare un'immagine, (vedi esempio in Fig. 12 del [nostro paper](https://arxiv.org/pdf/1905.01164.pdf)), per prima cosa addestra il modello SinGAN sull'immagine non modificata desiderata (come descritto sopra), poi salva la modifica naïf come immagine di riferimento sotto \"Input/Editing\" con una mappa binaria corrispondente (vedi immagini salvate come esempio). Esegui il comando\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scala da iniettare>",
  "status": "ok"
}