{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[Projekt](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Zusätzliche Materialien](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Vortrag (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Offizielle Pytorch-Implementierung des Papers: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best Paper Award (Marr-Preis)\n\n\n## Zufällige Beispiele aus einem *einzelnen* Bild\nMit SinGAN kann ein generatives Modell aus einem einzigen natürlichen Bild trainiert werden und anschließend können zufällige Beispiele aus dem gegebenen Bild generiert werden, zum Beispiel:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## Anwendungen von SinGAN\nSinGAN kann auch für eine Reihe von Bildmanipulationsaufgaben verwendet werden, zum Beispiel:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nDies geschieht, indem ein Bild in das bereits trainierte Modell eingespeist wird. Siehe Abschnitt 4 in unserem [Paper](https://arxiv.org/pdf/1905.01164.pdf) für weitere Details.\n\n\n### Zitation\nWenn Sie diesen Code für Ihre Forschung verwenden, zitieren Sie bitte unser Paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar und Dekel, Tali und Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Abhängigkeiten installieren\n\n```\npython -m pip install -r requirements.txt\n```\n\nDieser Code wurde mit Python 3.6, torch 1.4 getestet.\n\nBitte beachten: Der Code unterstützt derzeit nur torch 1.4 oder früher aufgrund des Optimierungsschemas.\n\nFür spätere Torch-Versionen können Sie dieses Repository ausprobieren: https://github.com/kligvasser/SinGAN (die Ergebnisse sind nicht zwangsläufig identisch mit der offiziellen Implementierung).\n\n\n###  Training\nUm das SinGAN-Modell mit Ihrem eigenen Bild zu trainieren, legen Sie das gewünschte Trainingsbild unter Input/Images ab und führen Sie aus:\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nDas resultierende trainierte Modell wird auch verwendet, um zufällige Beispiele zu generieren, beginnend mit der gröbsten Skala (n=0).\n\nUm diesen Code auf einer CPU-Maschine auszuführen, geben Sie `--not_cuda` an, wenn Sie `main_train.py` aufrufen.\n\n###  Zufällige Beispiele\nUm zufällige Beispiele von einer beliebigen Start-Generationsskala zu generieren, trainieren Sie bitte zuerst das SinGAN-Modell auf dem gewünschten Bild (wie oben beschrieben) und führen Sie dann aus\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\nAchtung: Um das vollständige Modell zu verwenden, setzen Sie die Start-Generationsskala auf 0. Um die Generierung von der zweiten Skala zu starten, setzen Sie sie auf 1 usw.\n\n###  Zufällige Beispiele beliebiger Größe\nUm zufällige Beispiele beliebiger Größe zu generieren, trainieren Sie bitte zuerst das SinGAN-Modell auf dem gewünschten Bild (wie oben beschrieben) und führen Sie dann aus\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontaler Skalierungsfaktor> --scale_v <vertikaler Skalierungsfaktor>\n```\n\n###  Animation aus einem einzelnen Bild\n\nUm eine kurze Animation aus einem einzelnen Bild zu generieren, führen Sie aus\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nDadurch wird automatisch eine neue Trainingsphase mit Noise-Padding-Modus gestartet.\n\n###  Harmonisierung\n\nUm ein eingefügtes Objekt in ein Bild zu harmonisieren (siehe Beispiel in Abb. 13 in [unserem Paper](https://arxiv.org/pdf/1905.01164.pdf)), trainieren Sie bitte zuerst das SinGAN-Modell auf dem gewünschten Hintergrundbild (wie oben beschrieben), speichern Sie dann das naiv eingefügte Referenzbild und dessen binäre Maske unter \"Input/Harmonization\" (siehe gespeicherte Bilder als Beispiel). Führen Sie den Befehl aus\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <Skala zum Injizieren>\n\n```\n\nBitte beachten Sie, dass verschiedene Injektionsskalen zu unterschiedlichen Harmonisierungseffekten führen. Die gröbste Injektionsskala entspricht 1.\n\n###  Bearbeitung\n\nUm ein Bild zu bearbeiten (siehe Beispiel in Abb. 12 in [unserem Paper](https://arxiv.org/pdf/1905.01164.pdf)), trainieren Sie bitte zuerst das SinGAN-Modell auf dem gewünschten unbearbeiteten Bild (wie oben beschrieben), speichern Sie dann die naive Bearbeitung als Referenzbild unter \"Input/Editing\" mit einer entsprechenden binären Karte (siehe gespeicherte Bilder als Beispiel). Führen Sie den Befehl aus\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <Skala zum Injizieren>",
  "status": "ok"
}