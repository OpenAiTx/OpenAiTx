{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[Proyek](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Materi tambahan](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Implementasi pytorch resmi dari makalah: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Sampel acak dari *satu* gambar\nDengan SinGAN, Anda dapat melatih model generatif dari satu gambar alami, dan kemudian menghasilkan sampel acak dari gambar yang diberikan, contohnya:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## Aplikasi SinGAN\nSinGAN juga dapat digunakan untuk berbagai tugas manipulasi gambar, misalnya:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nIni dilakukan dengan menyuntikkan sebuah gambar ke model yang sudah dilatih. Lihat bagian 4 di [makalah kami](https://arxiv.org/pdf/1905.01164.pdf) untuk detail lebih lanjut.\n\n\n### Sitasi\nJika Anda menggunakan kode ini untuk penelitian Anda, mohon sitasi makalah kami:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar dan Dekel, Tali dan Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Kode\n\n### Instalasi dependensi\n\n```\npython -m pip install -r requirements.txt\n```\n\nKode ini diuji dengan python 3.6, torch 1.4\n\nCatatan: kode saat ini hanya mendukung torch 1.4 atau sebelumnya karena skema optimisasi.\n\nUntuk versi torch yang lebih baru, Anda bisa mencoba repositori ini: https://github.com/kligvasser/SinGAN (hasilnya tidak selalu identik dengan implementasi resmi).\n\n\n###  Pelatihan\nUntuk melatih model SinGAN pada gambar Anda sendiri, letakkan gambar pelatihan yang diinginkan di bawah Input/Images, dan jalankan\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nIni juga akan menggunakan model hasil pelatihan untuk menghasilkan sampel acak dimulai dari skala paling kasar (n=0).\n\nUntuk menjalankan kode ini pada mesin cpu, tentukan `--not_cuda` saat memanggil `main_train.py`\n\n###  Sampel acak\nUntuk menghasilkan sampel acak dari skala generasi awal manapun, silakan latih dulu model SinGAN pada gambar yang diinginkan (seperti dijelaskan di atas), lalu jalankan \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\nperhatikan: untuk menggunakan model penuh, tentukan skala mulai generasi menjadi 0, untuk memulai dari skala kedua, tentukan menjadi 1, dan seterusnya. \n\n###  Sampel acak dengan ukuran sembarang\nUntuk menghasilkan sampel acak dengan ukuran sembarang, silakan latih dulu model SinGAN pada gambar yang diinginkan (seperti dijelaskan di atas), lalu jalankan\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animasi dari satu gambar\n\nUntuk menghasilkan animasi pendek dari satu gambar, jalankan\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nIni akan otomatis memulai fase pelatihan baru dengan mode noise padding.\n\n###  Harmonisasi\n\nUntuk mengharmonisasi objek yang ditempel ke dalam sebuah gambar (Lihat contoh pada Gbr. 13 di [makalah kami](https://arxiv.org/pdf/1905.01164.pdf)), silakan latih terlebih dahulu model SinGAN pada gambar latar belakang yang diinginkan (seperti dijelaskan di atas), kemudian simpan gambar referensi yang ditempel secara naif dan mask biner-nya di bawah \"Input/Harmonization\" (lihat gambar tersimpan untuk contoh). Jalankan perintah\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPerlu dicatat bahwa skala injeksi yang berbeda akan menghasilkan efek harmonisasi yang berbeda. Skala injeksi paling kasar sama dengan 1. \n\n###  Editing\n\nUntuk mengedit sebuah gambar, (Lihat contoh pada Gbr. 12 di [makalah kami](https://arxiv.org/pdf/1905.01164.pdf)), silakan latih terlebih dahulu model SinGAN pada gambar yang belum diedit (seperti dijelaskan di atas), lalu simpan hasil edit naif sebagai gambar referensi di bawah \"Input/Editing\" dengan peta biner yang sesuai (lihat gambar tersimpan untuk contoh). Jalankan perintah\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>\n```",
  "status": "ok"
}