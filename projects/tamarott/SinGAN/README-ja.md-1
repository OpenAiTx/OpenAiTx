{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[プロジェクト](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [補足資料](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [講演 (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### 論文「SinGAN: Learning a Generative Model from a Single Natural Image」の公式pytorch実装\n#### ICCV 2019 最優秀論文賞（Marr賞）\n\n\n## *1枚*の画像からのランダムサンプル\nSinGANでは、1枚の自然画像から生成モデルを学習し、その画像からランダムサンプルを生成することができます。例えば：\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGANの応用例\nSinGANは、画像操作の様々なタスクにも利用できます。例えば：\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nこれは、すでに学習済みのモデルに画像を注入することで実現されます。詳細は[論文](https://arxiv.org/pdf/1905.01164.pdf)のセクション4をご覧ください。\n\n\n### 引用\nこのコードを研究等で使用する場合は、以下の論文を引用してください：\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## コード\n\n### 依存関係のインストール\n\n```\npython -m pip install -r requirements.txt\n```\n\nこのコードはpython 3.6、torch 1.4でテストされています。\n\nご注意：このコードは最適化手法の都合上、現在はtorch 1.4以前のみサポートしています。\n\nそれ以降のtorchバージョンを利用する場合は、こちらのリポジトリをご参照ください: https://github.com/kligvasser/SinGAN （結果は公式実装と必ずしも同一ではありません）。\n\n\n###  学習\nご自身の画像でSinGANモデルを学習するには、学習させたい画像をInput/Images下に置き、次のコマンドを実行してください。\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nこれにより、学習済みモデルを用いて最も粗いスケール（n=0）からランダムサンプルも自動生成されます。\n\nCPUマシンでこのコードを実行する場合は、`main_train.py`実行時に`--not_cuda`を指定してください。\n\n###  ランダムサンプル生成\n任意の生成スケールからランダムサンプルを生成するには、まず目的の画像でSinGANモデルを学習させ（上記参照）、次に\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\nにて実行してください。\n\n注意：モデル全体を利用する場合は、生成開始スケールを0に、2番目のスケールから生成を始めたい場合は1を指定してください。\n\n###  任意サイズのランダムサンプル生成\n任意のサイズでランダムサンプルを生成するには、まず目的の画像でSinGANモデルを学習させ（上記参照）、次に\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\nを実行してください。\n\n###  1枚の画像からのアニメーション生成\n\n1枚の画像から短いアニメーションを生成するには、次のコマンドを実行してください。\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nこれにより、ノイズパディングモードで新たな学習フェーズが自動的に開始されます。\n\n###  ハーモナイゼーション\n\n画像内に貼り付けたオブジェクトを自然になじませるには（[論文](https://arxiv.org/pdf/1905.01164.pdf)のFig.13参照）、まず目的の背景画像でSinGANモデルを学習させ（上記参照）、次に単純に貼り付けた参照画像とそのバイナリマスクを \"Input/Harmonization\" に保存してください（保存例はサンプル画像を参照）。以下のコマンドを実行します。\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\n注：異なる注入スケールで異なるハーモナイゼーション効果が得られます。一番粗い注入スケールは1です。\n\n###  編集\n\n画像を編集するには（[論文](https://arxiv.org/pdf/1905.01164.pdf)のFig.12参照）、まず編集前の画像でSinGANモデルを学習させ（上記参照）、次に単純に編集した画像を参照画像として \"Input/Editing\" に対応するバイナリマップとともに保存してください（サンプル画像を参照）。以下のコマンドを実行します。\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "status": "ok"
}