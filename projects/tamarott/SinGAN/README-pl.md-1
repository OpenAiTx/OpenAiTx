{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[Projekt](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Materiały uzupełniające](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Wykład (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Oficjalna implementacja pytorch artykułu: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Nagroda za najlepszy artykuł (Marr prize)\n\n\n## Przykładowe losowe obrazy z *pojedynczego* zdjęcia\nDzięki SinGAN możesz wytrenować generatywny model na podstawie pojedynczego naturalnego obrazu, a następnie generować losowe próbki z danego obrazu, na przykład:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## Zastosowania SinGAN\nSinGAN może być również używany do różnych zadań związanych z manipulacją obrazem, na przykład:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nOdbywa się to poprzez wstrzyknięcie obrazu do już wytrenowanego modelu. Zobacz sekcję 4 w naszym [artykule](https://arxiv.org/pdf/1905.01164.pdf) po więcej szczegółów.\n\n\n### Cytowanie\nJeśli używasz tego kodu w swoich badaniach, prosimy o cytowanie naszego artykułu:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Kod\n\n### Instalacja zależności\n\n```\npython -m pip install -r requirements.txt\n```\n\nTen kod był testowany z python 3.6, torch 1.4\n\nUwaga: kod obecnie obsługuje tylko torch 1.4 lub wcześniejsze ze względu na zastosowany schemat optymalizacji.\n\nDla późniejszych wersji torch możesz spróbować tego repozytorium: https://github.com/kligvasser/SinGAN (wyniki nie muszą być identyczne z oficjalną implementacją).\n\n\n###  Trening\nAby wytrenować model SinGAN na własnym obrazie, umieść wybrany obraz treningowy w katalogu Input/Images i uruchom\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nTo również wykorzysta wytrenowany model do generowania losowych próbek zaczynając od najgrubszej skali (n=0).\n\nAby uruchomić ten kod na maszynie z CPU, dodaj `--not_cuda` podczas uruchamiania `main_train.py`\n\n###  Losowe próbki\nAby wygenerować losowe próbki z dowolnej początkowej skali generacji, najpierw wytrenuj model SinGAN na wybranym obrazie (jak opisano powyżej), następnie uruchom \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\nUwaga: aby użyć pełnego modelu, ustaw początkową skalę generacji na 0, aby zacząć generację od drugiej skali, ustaw 1 itd.\n\n###  Losowe próbki o dowolnych rozmiarach\nAby wygenerować losowe próbki o dowolnych rozmiarach, najpierw wytrenuj model SinGAN na wybranym obrazie (jak opisano powyżej), następnie uruchom \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animacja z pojedynczego obrazu\n\nAby wygenerować krótką animację z pojedynczego obrazu, uruchom\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nTo automatycznie rozpocznie nową fazę treningową z trybem noise padding.\n\n###  Harmonizacja\n\nAby wtopić wklejony obiekt w obraz (zobacz przykład na rys. 13 w [naszym artykule](https://arxiv.org/pdf/1905.01164.pdf)), najpierw wytrenuj model SinGAN na wybranym obrazie tła (jak opisano powyżej), następnie zapisz naiwnie wklejony obraz referencyjny i jego binarną maskę w \"Input/Harmonization\" (zobacz zapisane obrazy jako przykład). Uruchom polecenie\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nUwaga: różne skale wstrzyknięcia dadzą różne efekty harmonizacji. Najgrubsza skala wstrzyknięcia to 1.\n\n###  Edycja\n\nAby edytować obraz (zobacz przykład na rys. 12 w [naszym artykule](https://arxiv.org/pdf/1905.01164.pdf)), najpierw wytrenuj model SinGAN na wybranym nieedytowanym obrazie (jak opisano powyżej), następnie zapisz naiwną edycję jako obraz referencyjny w \"Input/Editing\" wraz z odpowiadającą mu binarną mapą (zobacz zapisane obrazy jako przykład). Uruchom polecenie\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "status": "ok"
}