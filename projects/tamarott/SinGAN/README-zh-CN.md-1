{
  "id": 1,
  "origin": "# SinGAN\n\n[Project](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [Supplementary materials](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [Talk (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### Official pytorch implementation of the paper: \"SinGAN: Learning a Generative Model from a Single Natural Image\"\n#### ICCV 2019 Best paper award (Marr prize)\n\n\n## Random samples from a *single* image\nWith SinGAN, you can train a generative model from a single natural image, and then generate random samples from the given image, for example:\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN's applications\nSinGAN can be also used for a line of image manipulation tasks, for example:\n ![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\nThis is done by injecting an image to the already trained model. See section 4 in our [paper](https://arxiv.org/pdf/1905.01164.pdf) for more details.\n\n\n### Citation\nIf you use this code for your research, please cite our paper:\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## Code\n\n### Install dependencies\n\n```\npython -m pip install -r requirements.txt\n```\n\nThis code was tested with python 3.6, torch 1.4\n\nPlease note: the code currently only supports torch 1.4 or earlier because of the optimization scheme.\n\nFor later torch versions, you may try this repository: https://github.com/kligvasser/SinGAN (results won't necessarily be identical to the official implementation).\n\n\n###  Train\nTo train SinGAN model on your own image, put the desired training image under Input/Images, and run\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\nThis will also use the resulting trained model to generate random samples starting from the coarsest scale (n=0).\n\nTo run this code on a cpu machine, specify `--not_cuda` when calling `main_train.py`\n\n###  Random samples\nTo generate random samples from any starting generation scale, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\npay attention: for using the full model, specify the generation start scale to be 0, to start the generation from the second scale, specify it to be 1, and so on. \n\n###  Random samples of arbitrary sizes\nTo generate random samples of arbitrary sizes, please first train SinGAN model on the desired image (as described above), then run \n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n###  Animation from a single image\n\nTo generate short animation from a single image, run\n\n```\npython animation.py --input_name <input_file_name> \n```\n\nThis will automatically start a new training phase with noise padding mode.\n\n###  Harmonization\n\nTo harmonize a pasted object into an image (See example in Fig. 13 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired background image (as described above), then save the naively pasted reference image and it's binary mask under \"Input/Harmonization\" (see saved images for an example). Run the command\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\nPlease note that different injection scale will produce different harmonization effects. The coarsest injection scale equals 1. \n\n###  Editing\n\nTo edit an image, (See example in Fig. 12 in [our paper](https://arxiv.org/pdf/1905.01164.pdf)), please first train SinGAN model on the desired non-edited image (as described above), then save the naive edit as a reference image under \"Input/Editing\" with a corresponding binary map (see saved images for an example). Run the command\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "origin_sha": "WBYBAX/rAWvXc6ASkSueAHHWs8nzqFsy7WJit8teMbQ=",
  "translate": "# SinGAN\n\n[项目](https://tamarott.github.io/SinGAN.htm) | [Arxiv](https://arxiv.org/pdf/1905.01164.pdf) | [CVF](http://openaccess.thecvf.com/content_ICCV_2019/papers/Shaham_SinGAN_Learning_a_Generative_Model_From_a_Single_Natural_Image_ICCV_2019_paper.pdf) | [补充材料](https://openaccess.thecvf.com/content_ICCV_2019/supplemental/Shaham_SinGAN_Learning_a_ICCV_2019_supplemental.pdf) | [报告 (ICCV`19)](https://youtu.be/mdAcPe74tZI?t=3191) \n### 论文官方 pytorch 实现：“SinGAN: Learning a Generative Model from a Single Natural Image”\n#### ICCV 2019 最佳论文奖（Marr 奖）\n\n\n## 来自*单张*图像的随机样本\n使用 SinGAN，你可以从单张自然图像训练生成模型，然后从该图像生成随机样本，例如：\n\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/teaser.PNG)\n\n\n## SinGAN 的应用\nSinGAN 还可以用于一系列图像操作任务，例如：\n![](https://raw.githubusercontent.com/tamarott/SinGAN/master/imgs/manipulation.PNG)\n通过将一张图像注入已训练好的模型实现。更多细节请参见我们[论文](https://arxiv.org/pdf/1905.01164.pdf)的第4节。\n\n\n### 引用\n如果你在研究中使用了本代码，请引用我们的论文：\n\n```\n@inproceedings{rottshaham2019singan,\n  title={SinGAN: Learning a Generative Model from a Single Natural Image},\n  author={Rott Shaham, Tamar and Dekel, Tali and Michaeli, Tomer},\n  booktitle={Computer Vision (ICCV), IEEE International Conference on},\n  year={2019}\n}\n```\n\n## 代码\n\n### 安装依赖项\n\n```\npython -m pip install -r requirements.txt\n```\n\n本代码在 python 3.6, torch 1.4 下测试通过\n\n请注意：由于优化方案，目前代码仅支持 torch 1.4 或更早版本。\n\n对于更高版本的 torch，可以尝试此仓库：https://github.com/kligvasser/SinGAN（结果不一定与官方实现完全一致）。\n\n\n### 训练\n要在自己的图像上训练 SinGAN 模型，请将所需训练图像放入 Input/Images 目录下，并运行\n\n```\npython main_train.py --input_name <input_file_name>\n```\n\n这还会利用训练好的模型，从最粗尺度（n=0）开始生成随机样本。\n\n如需在 CPU 机器上运行代码，调用 `main_train.py` 时加上 `--not_cuda` 参数\n\n### 随机样本\n要从任意起始生成尺度生成随机样本，请先按上述方式在目标图像上训练 SinGAN 模型，然后运行\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples --gen_start_scale <generation start scale number>\n```\n\n注意：如需使用完整模型，将生成起始尺度指定为 0；如需从第二个尺度开始，指定为 1，依此类推。\n\n### 任意尺寸的随机样本\n要生成任意尺寸的随机样本，请先按上述方式在目标图像上训练 SinGAN 模型，然后运行\n\n```\npython random_samples.py --input_name <training_image_file_name> --mode random_samples_arbitrary_sizes --scale_h <horizontal scaling factor> --scale_v <vertical scaling factor>\n```\n\n### 单张图片生成动画\n\n要从单张图片生成短动画，运行\n\n```\npython animation.py --input_name <input_file_name> \n```\n\n这会自动用噪声填充模式开始新的训练阶段。\n\n### 协调（Harmonization）\n\n要将粘贴的对象协调到一张图片中（见我们[论文](https://arxiv.org/pdf/1905.01164.pdf)中图13的示例），请先按上述方式在目标背景图像上训练 SinGAN 模型，然后将简单粘贴的参考图像及其二值掩码保存在 \"Input/Harmonization\" 目录下（可参考已保存图片示例）。运行命令\n\n```\npython harmonization.py --input_name <training_image_file_name> --ref_name <naively_pasted_reference_image_file_name> --harmonization_start_scale <scale to inject>\n\n```\n\n请注意，不同注入尺度会产生不同的协调效果。最粗的注入尺度为 1。\n\n### 编辑\n\n要编辑图片（见我们[论文](https://arxiv.org/pdf/1905.01164.pdf)中图12的示例），请先按上述方式在目标未编辑图像上训练 SinGAN 模型，然后将简单编辑的图片作为参考图像保存在 \"Input/Editing\" 目录下，并配以相应的二值图（可参考已保存图片示例）。运行命令\n\n```\npython editing.py --input_name <training_image_file_name> --ref_name <edited_image_file_name> --editing_start_scale <scale to inject>",
  "status": "ok"
}