[
  {
    "Id": 1,
    "Content": "<div align=\"center\">\n\n# 2D Triangle Splatting for Direct Differentiable Mesh Training\n\n[Arxiv][1] | [Project Page][4]\n\nKaifeng Sheng*, Zheng Zhou*, Yingliang Peng, Qianwei Wang (*Equal Contribution)\n\nAmap, Alibaba Group\n\n</div>\n\n## - Project Overview\n\nOfficial implementation of [2DTS][1] (2D Triangle Splatting for Direct Differentiable Mesh Training)\n\nWe provide a complete training pipeline for 2DTS, a differentiable 3D Geometric Representation adapted from [3DGS][2] (3D Gaussian Splatting) that replace the primitives from Gaussians to triangles, while retaining the full differentiability of the model.\nThe proposed method is capable of producing triangle meshes with high visual fidelity through an end-to-end training pipeline.\n\n![demo_image](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/demo_image.png)\n\nOur method can be applied to large-scale datasets, such as MatrixCity, which contains 6000+ images. Such datasets are challenging for existing mesh reconstruction methods, but our method can handle them efficiently.\nThe reconstructed meshes can be directly used in modern game engines, such as Blender, for relighting, shadow rendering, and other advanced rendering effects. See the following image for an example of relighting effect on a reconstructed mesh from MatrixCity dataset:\n\n![relighting_image](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/relighting_image.png)\n\n## - Abstract\n\nDifferentiable rendering with 3D Gaussian primitives has emerged as a powerful method for reconstructing high-fidelity 3D scenes from multi-view images.\nWhile it offers improvements over NeRF-based methods, this representation still encounters challenges with rendering speed and advanced rendering effects, such as relighting and shadow rendering, compared to mesh-based models.\nIn this paper, we propose 2D Triangle Splatting (2DTS), a novel method that replaces 3D Gaussian primitives with 2D triangle facelets.\nThis representation naturally forms a discrete mesh-like structure while retaining the benefits of continuous volumetric modeling.\nBy incorporating a compactness parameter into the triangle primitives, we enable direct training of photorealistic meshes.\nOur experimental results demonstrate that our triangle-based method, in its vanilla version (without compactness tuning), achieves higher fidelity compared to state-of-the-art Gaussian-based methods.\nFurthermore, our approach produces reconstructed meshes with superior visual quality compared to existing mesh reconstruction methods.\n\n## - Installation\n\n1. Install CUDA 12.4 or higher (remember to set the environment variable `CUDA_HOME` to the CUDA installation path);\n2. Clone the repository: `git clone https://github.com/GaodeRender/diff_recon.git; cd diff_recon`;\n3. Create new conda environment with Python 3.12: `conda create -n 2dts python=3.12`;\n   Activate the environment: `conda activate 2dts`;\n4. Install dependencies: `pip install -r requirements.txt --no-cache-dir`;\n5. Execute `pip install . --no-cache-dir` in the project root directory;\n\n\n## - Usage\n### Training\nExecute `run_experiments.py` to train 2DTS models on one of Mip-NeRF 360, NerfSynthetic, Tanks and Temples, DeepBlending or MatrixCity datasets by running the following command: ",
    "ContentSha": "if/2rD7pDZp/MPzKGTqKCj9bNxecJald7M6qJStHXow=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<div align=\"center\">\n\n# 2D Triangle Splatting for Direct Differentiable Mesh Training\n\n[Arxiv][1] | [Project Page][4]\n\nKaifeng Sheng*, Zheng Zhou*, Yingliang Peng, Qianwei Wang (*Equal Contribution)\n\nAmap, Alibaba Group\n\n</div>\n\n## - Project Overview\n\nOfficial implementation of [2DTS][1] (2D Triangle Splatting for Direct Differentiable Mesh Training)\n\nWe provide a complete training pipeline for 2DTS, a differentiable 3D Geometric Representation adapted from [3DGS][2] (3D Gaussian Splatting) that replaces the primitives from Gaussians to triangles, while retaining the full differentiability of the model.\nThe proposed method is capable of producing triangle meshes with high visual fidelity through an end-to-end training pipeline.\n\n![demo_image](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/demo_image.png)\n\nOur method can be applied to large-scale datasets, such as MatrixCity, which contains 6000+ images. Such datasets are challenging for existing mesh reconstruction methods, but our method can handle them efficiently.\nThe reconstructed meshes can be directly used in modern game engines, such as Blender, for relighting, shadow rendering, and other advanced rendering effects. See the following image for an example of relighting effect on a reconstructed mesh from MatrixCity dataset:\n\n![relighting_image](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/relighting_image.png)\n\n## - Abstract\n\nDifferentiable rendering with 3D Gaussian primitives has emerged as a powerful method for reconstructing high-fidelity 3D scenes from multi-view images.\nWhile it offers improvements over NeRF-based methods, this representation still encounters challenges with rendering speed and advanced rendering effects, such as relighting and shadow rendering, compared to mesh-based models.\nIn this paper, we propose 2D Triangle Splatting (2DTS), a novel method that replaces 3D Gaussian primitives with 2D triangle facelets.\nThis representation naturally forms a discrete mesh-like structure while retaining the benefits of continuous volumetric modeling.\nBy incorporating a compactness parameter into the triangle primitives, we enable direct training of photorealistic meshes.\nOur experimental results demonstrate that our triangle-based method, in its vanilla version (without compactness tuning), achieves higher fidelity compared to state-of-the-art Gaussian-based methods.\nFurthermore, our approach produces reconstructed meshes with superior visual quality compared to existing mesh reconstruction methods.\n\n## - Installation\n\n1. Install CUDA 12.4 or higher (remember to set the environment variable `CUDA_HOME` to the CUDA installation path);\n2. Clone the repository: `git clone https://github.com/GaodeRender/diff_recon.git; cd diff_recon`;\n3. Create new conda environment with Python 3.12: `conda create -n 2dts python=3.12`;\n   Activate the environment: `conda activate 2dts`;\n4. Install dependencies: `pip install -r requirements.txt --no-cache-dir`;\n5. Execute `pip install . --no-cache-dir` in the project root directory;\n\n\n## - Usage\n### Training\nExecute `run_experiments.py` to train 2DTS models on one of Mip-NeRF 360, NerfSynthetic, Tanks and Temples, DeepBlending or MatrixCity datasets by running the following command:",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "94MDjHJY1ZLwHNTLIEUIfk7TMc9cq1L/1FmwhqBTe/k=",
        "originContent": "<div align=\"center\">",
        "translatedContent": "<div align=\"center\">"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "pi3OIWEQMS64ldECVrk+mfxyScaDigRc05o7yVDQI5U=",
        "originContent": "# 2D Triangle Splatting for Direct Differentiable Mesh Training",
        "translatedContent": "# 2D Triangle Splatting for Direct Differentiable Mesh Training"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "7ncplzjTvNi9tsaUkQH1rHVoCUc9ymHctBXmFU9pYvU=",
        "originContent": "[Arxiv][1] | [Project Page][4]",
        "translatedContent": "[Arxiv][1] | [Project Page][4]"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "xJRucS51AoqtTdD9V8aSoqclKbF+vKDQfFjRRRd4LEs=",
        "originContent": "Kaifeng Sheng*, Zheng Zhou*, Yingliang Peng, Qianwei Wang (*Equal Contribution)",
        "translatedContent": "Kaifeng Sheng*, Zheng Zhou*, Yingliang Peng, Qianwei Wang (*Equal Contribution)"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "NEfSkkQ7OdNDCAyjBf6hdNeupSht/7eZKQaRNyxJ5PM=",
        "originContent": "Amap, Alibaba Group",
        "translatedContent": "Amap, Alibaba Group"
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "qsMmUbEPVnxGG5tPJV1vsfpoWbU2jYvZpRr5IKshzyM=",
        "originContent": "</div>",
        "translatedContent": "</div>"
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "ftIvToZsmo3VaAeWnBQwJgyNiLx4FpqvbiabDEJhh5c=",
        "originContent": "## - Project Overview",
        "translatedContent": "## - Project Overview"
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "GQGW6SVSgeRWJKvUq8LhRiITlesJMvDQmOcR57CoajI=",
        "originContent": "Official implementation of [2DTS][1] (2D Triangle Splatting for Direct Differentiable Mesh Training)",
        "translatedContent": "Official implementation of [2DTS][1] (2D Triangle Splatting for Direct Differentiable Mesh Training)"
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "dvm6s+ec4AO1e8rtSu4XaoVvEv6xJLWcDUiUAn1NZu0=",
        "originContent": "We provide a complete training pipeline for 2DTS, a differentiable 3D Geometric Representation adapted from [3DGS][2] (3D Gaussian Splatting) that replace the primitives from Gaussians to triangles, while retaining the full differentiability of the model.",
        "translatedContent": "We provide a complete training pipeline for 2DTS, a differentiable 3D Geometric Representation adapted from [3DGS][2] (3D Gaussian Splatting) that replaces the primitives from Gaussians to triangles, while retaining the full differentiability of the model."
      },
      {
        "row": 18,
        "rowsha": "TKaDdw47ShZ0jTOrVeRLjH4BdQ/EPy7qYluyIgCpaZ4=",
        "originContent": "The proposed method is capable of producing triangle meshes with high visual fidelity through an end-to-end training pipeline.",
        "translatedContent": "The proposed method is capable of producing triangle meshes with high visual fidelity through an end-to-end training pipeline."
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 20,
        "rowsha": "tZWIvbrmhTZYajKu1CEkUQi+ENJeRHizG9HckjeG3/I=",
        "originContent": "![demo_image](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/demo_image.png)",
        "translatedContent": "![demo_image](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/demo_image.png)"
      },
      {
        "row": 21,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 22,
        "rowsha": "6XkwdHChcuqIgBwtGn0bf/OwcntY2Ue+jiwVT4PTxmU=",
        "originContent": "Our method can be applied to large-scale datasets, such as MatrixCity, which contains 6000+ images. Such datasets are challenging for existing mesh reconstruction methods, but our method can handle them efficiently.",
        "translatedContent": "Our method can be applied to large-scale datasets, such as MatrixCity, which contains 6000+ images. Such datasets are challenging for existing mesh reconstruction methods, but our method can handle them efficiently."
      },
      {
        "row": 23,
        "rowsha": "Nqm4QPov5fPhjrknd64LWzAubaMBk8ziateFZDWER5Y=",
        "originContent": "The reconstructed meshes can be directly used in modern game engines, such as Blender, for relighting, shadow rendering, and other advanced rendering effects. See the following image for an example of relighting effect on a reconstructed mesh from MatrixCity dataset:",
        "translatedContent": "The reconstructed meshes can be directly used in modern game engines, such as Blender, for relighting, shadow rendering, and other advanced rendering effects. See the following image for an example of relighting effect on a reconstructed mesh from MatrixCity dataset:"
      },
      {
        "row": 24,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "8gsFtSQT/DW2TrQbW9v3MvQkLarYLgugM2pGAx3vcAY=",
        "originContent": "![relighting_image](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/relighting_image.png)",
        "translatedContent": "![relighting_image](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/relighting_image.png)"
      },
      {
        "row": 26,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 27,
        "rowsha": "PKLJPUAq1+jmKyMBtFQnzFBgbeclWoshqASpjeSVkJU=",
        "originContent": "## - Abstract",
        "translatedContent": "## - Abstract"
      },
      {
        "row": 28,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 29,
        "rowsha": "ETnlEmMCU4K4x7tLQw1Iv59jvh93qjtEA+YW/jYdg3M=",
        "originContent": "Differentiable rendering with 3D Gaussian primitives has emerged as a powerful method for reconstructing high-fidelity 3D scenes from multi-view images.",
        "translatedContent": "Differentiable rendering with 3D Gaussian primitives has emerged as a powerful method for reconstructing high-fidelity 3D scenes from multi-view images."
      },
      {
        "row": 30,
        "rowsha": "WLj/jGMHgdH1/VE7PshhT2ht/MC2QD+BZ74Nb3S0ABY=",
        "originContent": "While it offers improvements over NeRF-based methods, this representation still encounters challenges with rendering speed and advanced rendering effects, such as relighting and shadow rendering, compared to mesh-based models.",
        "translatedContent": "While it offers improvements over NeRF-based methods, this representation still encounters challenges with rendering speed and advanced rendering effects, such as relighting and shadow rendering, compared to mesh-based models."
      },
      {
        "row": 31,
        "rowsha": "frRD9sSPoxsQJ4G929OKxHaH98HXsLjIkxl0RvNT9h8=",
        "originContent": "In this paper, we propose 2D Triangle Splatting (2DTS), a novel method that replaces 3D Gaussian primitives with 2D triangle facelets.",
        "translatedContent": "In this paper, we propose 2D Triangle Splatting (2DTS), a novel method that replaces 3D Gaussian primitives with 2D triangle facelets."
      },
      {
        "row": 32,
        "rowsha": "dGQqkwZ57lEqrMxXq0bxw53pD489fe+SW/1xQ0QRXOg=",
        "originContent": "This representation naturally forms a discrete mesh-like structure while retaining the benefits of continuous volumetric modeling.",
        "translatedContent": "This representation naturally forms a discrete mesh-like structure while retaining the benefits of continuous volumetric modeling."
      },
      {
        "row": 33,
        "rowsha": "LvIpZKlCcFoiqv/AABBP2rKURfHUmR0ZZV+37bk07qI=",
        "originContent": "By incorporating a compactness parameter into the triangle primitives, we enable direct training of photorealistic meshes.",
        "translatedContent": "By incorporating a compactness parameter into the triangle primitives, we enable direct training of photorealistic meshes."
      },
      {
        "row": 34,
        "rowsha": "GV/0nRGG+/UC2sIZXZhPGrCLe4Xc2GlqLqUcEG8gSqQ=",
        "originContent": "Our experimental results demonstrate that our triangle-based method, in its vanilla version (without compactness tuning), achieves higher fidelity compared to state-of-the-art Gaussian-based methods.",
        "translatedContent": "Our experimental results demonstrate that our triangle-based method, in its vanilla version (without compactness tuning), achieves higher fidelity compared to state-of-the-art Gaussian-based methods."
      },
      {
        "row": 35,
        "rowsha": "/TOeV354K7qAdOtUYZpajjraMoQhiNiyW6lemaGBSdo=",
        "originContent": "Furthermore, our approach produces reconstructed meshes with superior visual quality compared to existing mesh reconstruction methods.",
        "translatedContent": "Furthermore, our approach produces reconstructed meshes with superior visual quality compared to existing mesh reconstruction methods."
      },
      {
        "row": 36,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 37,
        "rowsha": "m1Una/6rXYJmwyLlHLntOx9xNLszr84RcYFf+d/R6xs=",
        "originContent": "## - Installation",
        "translatedContent": "## - Installation"
      },
      {
        "row": 38,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 39,
        "rowsha": "pw8ESFv7FeCYxTn+L24YiLwhxn5SsyWo6Ndsp6gu8QU=",
        "originContent": "1. Install CUDA 12.4 or higher (remember to set the environment variable `CUDA_HOME` to the CUDA installation path);",
        "translatedContent": "1. Install CUDA 12.4 or higher (remember to set the environment variable `CUDA_HOME` to the CUDA installation path);"
      },
      {
        "row": 40,
        "rowsha": "MieSmatRKOYubiWoCmBMNtsnjCWr0p2uZ0acEyhTq7s=",
        "originContent": "2. Clone the repository: `git clone https://github.com/GaodeRender/diff_recon.git; cd diff_recon`;",
        "translatedContent": "2. Clone the repository: `git clone https://github.com/GaodeRender/diff_recon.git; cd diff_recon`;"
      },
      {
        "row": 41,
        "rowsha": "dMMONSY4oYtgmAhBzfBBPpw5kmlfH9/WAZL/QklnP6A=",
        "originContent": "3. Create new conda environment with Python 3.12: `conda create -n 2dts python=3.12`;",
        "translatedContent": "3. Create new conda environment with Python 3.12: `conda create -n 2dts python=3.12`;"
      },
      {
        "row": 42,
        "rowsha": "J9dThTTiC8bq9wIPmmQUKoLWbnfsF7YTXbf7kHS3uqI=",
        "originContent": "   Activate the environment: `conda activate 2dts`;",
        "translatedContent": "   Activate the environment: `conda activate 2dts`;"
      },
      {
        "row": 43,
        "rowsha": "lio5do3A7sPTVeKiW9vQ5JGnJcBzSYd4wxiO6yzJ+nY=",
        "originContent": "4. Install dependencies: `pip install -r requirements.txt --no-cache-dir`;",
        "translatedContent": "4. Install dependencies: `pip install -r requirements.txt --no-cache-dir`;"
      },
      {
        "row": 44,
        "rowsha": "jTrY0df1HAZmDYKEor5u63CVj3/+kPyNDPfXKvy/eF4=",
        "originContent": "5. Execute `pip install . --no-cache-dir` in the project root directory;",
        "translatedContent": "5. Execute `pip install . --no-cache-dir` in the project root directory;"
      },
      {
        "row": 45,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 46,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 47,
        "rowsha": "nNAD/LU/s0yYQixj5Zlq702l1rkGpLmdZ9SslVt5ab4=",
        "originContent": "## - Usage",
        "translatedContent": "## - Usage"
      },
      {
        "row": 48,
        "rowsha": "cNKS2XI0q3UNj4+rlFmjA0lefbWomrdh7j5BPCDMKNw=",
        "originContent": "### Training",
        "translatedContent": "### Training"
      },
      {
        "row": 49,
        "rowsha": "VqTIh2b/wmtldxiUK9mKfL7uveRHn3QaX/j+nbbwUB8=",
        "originContent": "Execute `run_experiments.py` to train 2DTS models on one of Mip-NeRF 360, NerfSynthetic, Tanks and Temples, DeepBlending or MatrixCity datasets by running the following command: ",
        "translatedContent": "Execute `run_experiments.py` to train 2DTS models on one of Mip-NeRF 360, NerfSynthetic, Tanks and Temples, DeepBlending or MatrixCity datasets by running the following command:"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "```bash\npython run_experiments.py --type {experiment_type} --dataset_path /path/to/dataset --num_workers 0\n```",
    "ContentSha": "gRyGyi8S/KFr+gNcwgxjNMQTeOWGV7kpA3tH6/SJixw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```bash\npython run_experiments.py --type {experiment_type} --dataset_path /path/to/dataset --num_workers 0\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "rTMjNc+qNIxb1xXDR5hEYiJw1fc4muBwuBsTXVIaIho=",
        "originContent": "```bash",
        "translatedContent": "```bash"
      },
      {
        "row": 2,
        "rowsha": "OMIpMpqBa4e+V6ptPYvxvk09+g1shqTHIfbDrN7IKhM=",
        "originContent": "python run_experiments.py --type {experiment_type} --dataset_path /path/to/dataset --num_workers 0",
        "translatedContent": "python run_experiments.py --type {experiment_type} --dataset_path /path/to/dataset --num_workers 0"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 3,
    "Content": "`experiment_type` can be one of `MipNerf360`, `NerfSynthetic`, `NerfSynthetic_mesh`, `TanksAndBlending` or `MatrixCity_mesh`.\n\nThe script requires the dataset to be downloaded beforehand, and the dataset path should point to the root directory of the dataset.\nFor example, if you want to train a mesh model on the NerfSynthetic dataset, and have the dataset stored in `./data/nerf_synthetic`, you can run the following command:",
    "ContentSha": "uZdqWVoYhMW6kIAsC59YypEgksY6JuzjxbFUfk988bI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "`experiment_type` can be one of `MipNerf360`, `NerfSynthetic`, `NerfSynthetic_mesh`, `TanksAndBlending` or `MatrixCity_mesh`.\n\nThe script requires the dataset to be downloaded beforehand, and the dataset path should point to the root directory of the dataset.\nFor example, if you want to train a mesh model on the NerfSynthetic dataset, and have the dataset stored in `./data/nerf_synthetic`, you can run the following command:",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "u9PsdR/wZabcoMwVyh7VD90SSf9PnAQl+yk4ICMkPos=",
        "originContent": "`experiment_type` can be one of `MipNerf360`, `NerfSynthetic`, `NerfSynthetic_mesh`, `TanksAndBlending` or `MatrixCity_mesh`.",
        "translatedContent": "`experiment_type` can be one of `MipNerf360`, `NerfSynthetic`, `NerfSynthetic_mesh`, `TanksAndBlending` or `MatrixCity_mesh`."
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "mIm5QgKzavcwI6QiI7cJSSWAUjejs+0ZV8SUnpKuzAY=",
        "originContent": "The script requires the dataset to be downloaded beforehand, and the dataset path should point to the root directory of the dataset.",
        "translatedContent": "The script requires the dataset to be downloaded beforehand, and the dataset path should point to the root directory of the dataset."
      },
      {
        "row": 4,
        "rowsha": "jthhKXAYeFRLwOB7iIK3bHpKsUX5S2yslRbzD6nGnSw=",
        "originContent": "For example, if you want to train a mesh model on the NerfSynthetic dataset, and have the dataset stored in `./data/nerf_synthetic`, you can run the following command:",
        "translatedContent": "For example, if you want to train a mesh model on the NerfSynthetic dataset, and have the dataset stored in `./data/nerf_synthetic`, you can run the following command:"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 4,
    "Content": "```bash\npython run_experiments.py --type NerfSynthetic_mesh --dataset_path ./data/nerf_synthetic --num_workers 0\n```",
    "ContentSha": "72AQ3AbX5CjnBIgtywtI6FOWmEG0Dj/E7fw3EIO9c80=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```bash\npython run_experiments.py --type NerfSynthetic_mesh --dataset_path ./data/nerf_synthetic --num_workers 0\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "rTMjNc+qNIxb1xXDR5hEYiJw1fc4muBwuBsTXVIaIho=",
        "originContent": "```bash",
        "translatedContent": "```bash"
      },
      {
        "row": 2,
        "rowsha": "niR+xRUpQOwX+xxB5XI/CRiHmauOZ/TlXTx46+x5MVE=",
        "originContent": "python run_experiments.py --type NerfSynthetic_mesh --dataset_path ./data/nerf_synthetic --num_workers 0",
        "translatedContent": "python run_experiments.py --type NerfSynthetic_mesh --dataset_path ./data/nerf_synthetic --num_workers 0"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 5,
    "Content": "\n### Logs\nTraining logs will be saved in the `./outputs` directory. You can use TensorBoard to visualize the training process:",
    "ContentSha": "H1kAOTuYXklyJyFV3tzFp4rLhcU1WJeywvh3ucZxo8w=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### Logs  \nTraining logs will be saved in the `./outputs` directory. You can use TensorBoard to visualize the training process:\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Logs  "
      },
      {
        "row": 2,
        "rowsha": "FYBXa26VcF7EW5sY/2bdoDcqENjbhsgMx6G8EnoinJM=",
        "originContent": "### Logs",
        "translatedContent": "Training logs will be saved in the `./outputs` directory. You can use TensorBoard to visualize the training process:"
      },
      {
        "row": 3,
        "rowsha": "IrR0wfXsXatqtzYAz4wwfXSPL7lTilW5cz3JDDo3GNo=",
        "originContent": "Training logs will be saved in the `./outputs` directory. You can use TensorBoard to visualize the training process:",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 6,
    "Content": "```bash\ntensorboard --logdir ./outputs\n```",
    "ContentSha": "JxI0/a8MsWwpjJRhFwYARzBDBrw/BVkdsf+kr/jTR/w=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```bash\ntensorboard --logdir ./outputs\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "rTMjNc+qNIxb1xXDR5hEYiJw1fc4muBwuBsTXVIaIho=",
        "originContent": "```bash",
        "translatedContent": "```bash"
      },
      {
        "row": 2,
        "rowsha": "eycX9Xoon6+ncB96dQZiVxIiWWSkfk8y+yEkRg04bOM=",
        "originContent": "tensorboard --logdir ./outputs",
        "translatedContent": "tensorboard --logdir ./outputs"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 7,
    "Content": "\n### Rendering\nWe provide an interactive web viewer based on [Viser Viewer][3] for visualizing the trained triangle splats and meshes.\nYou can run the viewer by executing the following command:",
    "ContentSha": "9tVZdCCvUeDlcEc3HCQxDSgkyZMq5nK0NQCXs9Iz90k=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### Rendering\nWe provide an interactive web viewer based on [Viser Viewer][3] for visualizing the trained triangle splats and meshes.\nYou can run the viewer by executing the following command:\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Rendering"
      },
      {
        "row": 2,
        "rowsha": "FLmQ2j9tJfwebndlo3TFhP2c3ojo8T4mXhL6ISQ3Gyg=",
        "originContent": "### Rendering",
        "translatedContent": "We provide an interactive web viewer based on [Viser Viewer][3] for visualizing the trained triangle splats and meshes."
      },
      {
        "row": 3,
        "rowsha": "nFgDzCB5i56RkGRB4HDo+93NPPRRX5knlqLVFDlz5bc=",
        "originContent": "We provide an interactive web viewer based on [Viser Viewer][3] for visualizing the trained triangle splats and meshes.",
        "translatedContent": "You can run the viewer by executing the following command:"
      },
      {
        "row": 4,
        "rowsha": "dANU7fJJZNM4XdF0G1HDjmJ24NdYffFpZfRfKXdJe04=",
        "originContent": "You can run the viewer by executing the following command:",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 8,
    "Content": "```bash\npython viser_viewer.py --config /path/to/config --dataset_path /path/to/dataset --scene {scene_name}\n```",
    "ContentSha": "r6bjR50Z4bbViaPW+XBQQOUjWM1zqt0HSLiZIdKaDS4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```bash\npython viser_viewer.py --config /path/to/config --dataset_path /path/to/dataset --scene {scene_name}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "rTMjNc+qNIxb1xXDR5hEYiJw1fc4muBwuBsTXVIaIho=",
        "originContent": "```bash",
        "translatedContent": "```bash"
      },
      {
        "row": 2,
        "rowsha": "sbAbyjTvCgrt4/glV3/5r2jS67NahQyx11IKILCs6cw=",
        "originContent": "python viser_viewer.py --config /path/to/config --dataset_path /path/to/dataset --scene {scene_name}",
        "translatedContent": "python viser_viewer.py --config /path/to/config --dataset_path /path/to/dataset --scene {scene_name}"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 9,
    "Content": "For example, if you ran the `NerfSynthetic_mesh` experiment and want to visualize the `ship` scene, and have the dataset stored in `./data/nerf_synthetic`, you can run the following command:",
    "ContentSha": "Ku2eECfCfqUpIMdfJsPkVXA59nV1gCoOGEmz6qfyYsY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "For example, if you ran the `NerfSynthetic_mesh` experiment and want to visualize the `ship` scene, and have the dataset stored in `./data/nerf_synthetic`, you can run the following command:",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "Ku2eECfCfqUpIMdfJsPkVXA59nV1gCoOGEmz6qfyYsY=",
        "originContent": "For example, if you ran the `NerfSynthetic_mesh` experiment and want to visualize the `ship` scene, and have the dataset stored in `./data/nerf_synthetic`, you can run the following command:",
        "translatedContent": "For example, if you ran the `NerfSynthetic_mesh` experiment and want to visualize the `ship` scene, and have the dataset stored in `./data/nerf_synthetic`, you can run the following command:"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 10,
    "Content": "```bash\npython viser_viewer.py --config config/NerfSynthetic_VanillaTS_mesh.yaml --dataset_path ./data/nerf_synthetic --scene ship\n```",
    "ContentSha": "JPDcjFtbqoxfxdUX9Qr+WpTWqvd3Fvc1AZC6YdJBBFo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```bash\npython viser_viewer.py --config config/NerfSynthetic_VanillaTS_mesh.yaml --dataset_path ./data/nerf_synthetic --scene ship\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "rTMjNc+qNIxb1xXDR5hEYiJw1fc4muBwuBsTXVIaIho=",
        "originContent": "```bash",
        "translatedContent": "```bash"
      },
      {
        "row": 2,
        "rowsha": "MB+VS4MJRKLAXW+G/vQ1N9YszG8Wd356LpSb7LIUCUc=",
        "originContent": "python viser_viewer.py --config config/NerfSynthetic_VanillaTS_mesh.yaml --dataset_path ./data/nerf_synthetic --scene ship",
        "translatedContent": "python viser_viewer.py --config config/NerfSynthetic_VanillaTS_mesh.yaml --dataset_path ./data/nerf_synthetic --scene ship"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 11,
    "Content": "\nThen, open your web browser and navigate to `http://localhost:8080` to view the rendered scene. If you are runing the viewer on a remote server, make sure to set up port forwarding or access the server's IP address directly.\n\n## - Notes\nWe provided two distinct training configurations: VanillaTS and VanillaTS_mesh.\n- VanillaTS is a close mimick of the original 3DGS method, with compactness parameter set to 1.0 and generating transparent and diffuse triangle splats (See [2DTS][1] for details).\n- VanillaTS_mesh will add opacity regularization and compactness tuning to the training process, which will produce a solid triangle mesh at the end of training. The triangle mesh is saved as a `.glb` file in output directory. Note that when **back_culling** is **disabled** for the training process, **the mesh file will contain each triangle <span style=\"color:red\">twice</span>**, once for the front face and once for the back face.\n\nThe difference between a diffuse and a solid triangle is visualized in the following image:\n\n![triangle_splatting](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/triangle_splatting.png) \n\n## - TODO\n\n1. Our method assumes a dense point cloud initialization. The densification process like the one used in [3DGS][2] is turned off by default because of stability issues. New densification and initialization methods are being explored. Any contributions in this area are welcome.\n2. The current implementation use a single set of opacity and color/sh parameters for each triangle splat. However, it is natural to extend the model to support per-vertex color and opacity, which will enhance the expressiveness of the model. We are working on this extension.\n\n## - License\n\nThis repository contains code under **two different licenses**:\n\n- 🟥 **Gaussian Splatting Research License** — applies to components derived from the original [Gaussian Splatting][2] project:\n  - `submodules/custom-gaussian-rasterization/`\n  - `submodules/simple-knn/`\n  - These components are licensed for **non-commercial research use only**.\n  - See [LICENSE.gausplat.md](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./LICENSE.gausplat.md)\n\n- 🟩 **MIT License** — applies to other parts of the repository, including:\n  - `src/diff_recon/`\n  - `submodules/diff-triangle-rasterization-2D/`, `submodules/diff-triangle-rasterization-3D/`, etc.\n  - See [LICENSE](./LICENSE)\n\nPlease make sure to comply with both licenses when using this repository.\n\n## - Citation\n\nIf you find our work useful, please consider citing our paper:",
    "ContentSha": "Q7yqR5MxAgnFQTIOehujv6a+H3jpQugWPMshcrcva2I=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Then, open your web browser and navigate to `http://localhost:8080` to view the rendered scene. If you are running the viewer on a remote server, make sure to set up port forwarding or access the server's IP address directly.\n\n## - Notes\nWe provided two distinct training configurations: VanillaTS and VanillaTS_mesh.\n- VanillaTS is a close mimic of the original 3DGS method, with compactness parameter set to 1.0 and generating transparent and diffuse triangle splats (See [2DTS][1] for details).\n- VanillaTS_mesh will add opacity regularization and compactness tuning to the training process, which will produce a solid triangle mesh at the end of training. The triangle mesh is saved as a `.glb` file in the output directory. Note that when **back_culling** is **disabled** for the training process, **the mesh file will contain each triangle <span style=\"color:red\">twice</span>**, once for the front face and once for the back face.\n\nThe difference between a diffuse and a solid triangle is visualized in the following image:\n\n![triangle_splatting](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/triangle_splatting.png) \n\n## - TODO\n\n1. Our method assumes a dense point cloud initialization. The densification process like the one used in [3DGS][2] is turned off by default because of stability issues. New densification and initialization methods are being explored. Any contributions in this area are welcome.\n2. The current implementation uses a single set of opacity and color/sh parameters for each triangle splat. However, it is natural to extend the model to support per-vertex color and opacity, which will enhance the expressiveness of the model. We are working on this extension.\n\n## - License\n\nThis repository contains code under **two different licenses**:\n\n- 🟥 **Gaussian Splatting Research License** — applies to components derived from the original [Gaussian Splatting][2] project:\n  - `submodules/custom-gaussian-rasterization/`\n  - `submodules/simple-knn/`\n  - These components are licensed for **non-commercial research use only**.\n  - See [LICENSE.gausplat.md](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./LICENSE.gausplat.md)\n\n- 🟩 **MIT License** — applies to other parts of the repository, including:\n  - `src/diff_recon/`\n  - `submodules/diff-triangle-rasterization-2D/`, `submodules/diff-triangle-rasterization-3D/`, etc.\n  - See [LICENSE](./LICENSE)\n\nPlease make sure to comply with both licenses when using this repository.\n\n## - Citation\n\nIf you find our work useful, please consider citing our paper:\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Then, open your web browser and navigate to `http://localhost:8080` to view the rendered scene. If you are running the viewer on a remote server, make sure to set up port forwarding or access the server's IP address directly."
      },
      {
        "row": 2,
        "rowsha": "M2DVf6JD2D5GCnRkN/Y0N1Zv+d65Qq5ZG9Zw/Gn2Tyw=",
        "originContent": "Then, open your web browser and navigate to `http://localhost:8080` to view the rendered scene. If you are runing the viewer on a remote server, make sure to set up port forwarding or access the server's IP address directly.",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## - Notes"
      },
      {
        "row": 4,
        "rowsha": "1PRjgu+KbfjreGjZ8icJvP8YdtezULnocSl8nx1WzZw=",
        "originContent": "## - Notes",
        "translatedContent": "We provided two distinct training configurations: VanillaTS and VanillaTS_mesh."
      },
      {
        "row": 5,
        "rowsha": "Agc678CZCVG4inNMc7CTq9B+G/3wqV0DBhE5WwuaQkE=",
        "originContent": "We provided two distinct training configurations: VanillaTS and VanillaTS_mesh.",
        "translatedContent": "- VanillaTS is a close mimic of the original 3DGS method, with compactness parameter set to 1.0 and generating transparent and diffuse triangle splats (See [2DTS][1] for details)."
      },
      {
        "row": 6,
        "rowsha": "cOm0tKsta4/hVhmw7q0krzkBCtH77nmeutQYBSY+/1E=",
        "originContent": "- VanillaTS is a close mimick of the original 3DGS method, with compactness parameter set to 1.0 and generating transparent and diffuse triangle splats (See [2DTS][1] for details).",
        "translatedContent": "- VanillaTS_mesh will add opacity regularization and compactness tuning to the training process, which will produce a solid triangle mesh at the end of training. The triangle mesh is saved as a `.glb` file in the output directory. Note that when **back_culling** is **disabled** for the training process, **the mesh file will contain each triangle <span style=\"color:red\">twice</span>**, once for the front face and once for the back face."
      },
      {
        "row": 7,
        "rowsha": "C4xxdqoVmcOcG7KjLElNJtyuNCfcL3wX0HSewlG6Mr0=",
        "originContent": "- VanillaTS_mesh will add opacity regularization and compactness tuning to the training process, which will produce a solid triangle mesh at the end of training. The triangle mesh is saved as a `.glb` file in output directory. Note that when **back_culling** is **disabled** for the training process, **the mesh file will contain each triangle <span style=\"color:red\">twice</span>**, once for the front face and once for the back face.",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "The difference between a diffuse and a solid triangle is visualized in the following image:"
      },
      {
        "row": 9,
        "rowsha": "tIOheBgFh9nJAvrRMPqZRoZvCgno8eL5CL7gwnayP58=",
        "originContent": "The difference between a diffuse and a solid triangle is visualized in the following image:",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![triangle_splatting](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/triangle_splatting.png) "
      },
      {
        "row": 11,
        "rowsha": "G4EtcDaRDtOZbKoHAIjGSQL75b/wss3rMb7uoUDY/GM=",
        "originContent": "![triangle_splatting](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./assets/triangle_splatting.png) ",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## - TODO"
      },
      {
        "row": 13,
        "rowsha": "/YUxcq8x1SQ354rijhAPGW502omof+qVddZ39SyekeE=",
        "originContent": "## - TODO",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "1. Our method assumes a dense point cloud initialization. The densification process like the one used in [3DGS][2] is turned off by default because of stability issues. New densification and initialization methods are being explored. Any contributions in this area are welcome."
      },
      {
        "row": 15,
        "rowsha": "W7UQCjd0fNlQYRfHPt8Tm1E7LPH02btK22HbO3nWyFk=",
        "originContent": "1. Our method assumes a dense point cloud initialization. The densification process like the one used in [3DGS][2] is turned off by default because of stability issues. New densification and initialization methods are being explored. Any contributions in this area are welcome.",
        "translatedContent": "2. The current implementation uses a single set of opacity and color/sh parameters for each triangle splat. However, it is natural to extend the model to support per-vertex color and opacity, which will enhance the expressiveness of the model. We are working on this extension."
      },
      {
        "row": 16,
        "rowsha": "befvbdm4ZYB7CdndXODpW0Mu2XQPBe/9XDCaGjgUZKg=",
        "originContent": "2. The current implementation use a single set of opacity and color/sh parameters for each triangle splat. However, it is natural to extend the model to support per-vertex color and opacity, which will enhance the expressiveness of the model. We are working on this extension.",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## - License"
      },
      {
        "row": 18,
        "rowsha": "t2kB9463FxB+z/l5eaB1RpWC9LBhsH2rerU+Y4uQg2s=",
        "originContent": "## - License",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "This repository contains code under **two different licenses**:"
      },
      {
        "row": 20,
        "rowsha": "BpIGUO+TKw5dzTM3Z3DXOAxWcz60hOP641tFXYIUO7Y=",
        "originContent": "This repository contains code under **two different licenses**:",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- 🟥 **Gaussian Splatting Research License** — applies to components derived from the original [Gaussian Splatting][2] project:"
      },
      {
        "row": 22,
        "rowsha": "neizbTT+e3/uUtID96EWazCgpIIzOnSOw/eKgIfp/oc=",
        "originContent": "- 🟥 **Gaussian Splatting Research License** — applies to components derived from the original [Gaussian Splatting][2] project:",
        "translatedContent": "  - `submodules/custom-gaussian-rasterization/`"
      },
      {
        "row": 23,
        "rowsha": "RX0nnkdi7EjvXb6UYDIQyzB41LRaYXIBCz6mEER1+nA=",
        "originContent": "  - `submodules/custom-gaussian-rasterization/`",
        "translatedContent": "  - `submodules/simple-knn/`"
      },
      {
        "row": 24,
        "rowsha": "zbNbOWF1hKUiRgENivzDNVag6L8ttGGgsvPKn+lrfG8=",
        "originContent": "  - `submodules/simple-knn/`",
        "translatedContent": "  - These components are licensed for **non-commercial research use only**."
      },
      {
        "row": 25,
        "rowsha": "/ElWQxW1wPIlLbIvFljHe9qnRacnOuvDuN4o56sFiAU=",
        "originContent": "  - These components are licensed for **non-commercial research use only**.",
        "translatedContent": "  - See [LICENSE.gausplat.md](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./LICENSE.gausplat.md)"
      },
      {
        "row": 26,
        "rowsha": "R1SWrJkHtFqfGrE1BnLf/jegAsopnR7/ygA1KzFVDUI=",
        "originContent": "  - See [LICENSE.gausplat.md](https://raw.githubusercontent.com/GaodeRender/triangle-splatting/main/./LICENSE.gausplat.md)",
        "translatedContent": ""
      },
      {
        "row": 27,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- 🟩 **MIT License** — applies to other parts of the repository, including:"
      },
      {
        "row": 28,
        "rowsha": "TDYjVebMi+98yLOBhyDB0gnfifP8CSI8y1rA+JDO/I0=",
        "originContent": "- 🟩 **MIT License** — applies to other parts of the repository, including:",
        "translatedContent": "  - `src/diff_recon/`"
      },
      {
        "row": 29,
        "rowsha": "5328vDPhQiDh4GhtjVUbbf1xsea+/nJDT7ZnU0IcifY=",
        "originContent": "  - `src/diff_recon/`",
        "translatedContent": "  - `submodules/diff-triangle-rasterization-2D/`, `submodules/diff-triangle-rasterization-3D/`, etc."
      },
      {
        "row": 30,
        "rowsha": "85YLR8euQ1YyCOswWhEj6n6h63BUyrNhZVpG4IFVvSs=",
        "originContent": "  - `submodules/diff-triangle-rasterization-2D/`, `submodules/diff-triangle-rasterization-3D/`, etc.",
        "translatedContent": "  - See [LICENSE](./LICENSE)"
      },
      {
        "row": 31,
        "rowsha": "C0co1SoIhnvUBRN3iubfEbm8+fnHkZQhOcFmWM7WtTg=",
        "originContent": "  - See [LICENSE](./LICENSE)",
        "translatedContent": ""
      },
      {
        "row": 32,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Please make sure to comply with both licenses when using this repository."
      },
      {
        "row": 33,
        "rowsha": "J2st79LcL1De21dbj1JWwTZathQ3542U1v/MfTG3lrk=",
        "originContent": "Please make sure to comply with both licenses when using this repository.",
        "translatedContent": ""
      },
      {
        "row": 34,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## - Citation"
      },
      {
        "row": 35,
        "rowsha": "XRW7AY2+jxDERZu5vwbTTVj/RW0i57jE0tdL7dQeHfY=",
        "originContent": "## - Citation",
        "translatedContent": ""
      },
      {
        "row": 36,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "If you find our work useful, please consider citing our paper:"
      },
      {
        "row": 37,
        "rowsha": "WX+1kC/vjmrVEVRaVcEV3Gm79vvxFWC0XpYxshUlbzs=",
        "originContent": "If you find our work useful, please consider citing our paper:",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 12,
    "Content": "```bibtex\n@misc{sheng20252dtrianglesplattingdirect,\n      title={2D Triangle Splatting for Direct Differentiable Mesh Training}, \n      author={Kaifeng Sheng and Zheng Zhou and Yingliang Peng and Qianwei Wang},\n      year={2025},\n      eprint={2506.18575},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV},\n      url={https://arxiv.org/abs/2506.18575}, \n}\n```",
    "ContentSha": "uQABUo7VENqZRzYUuGcCROdKvsfr9sdHsLy8JIBfwHo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```bibtex\n@misc{sheng20252dtrianglesplattingdirect,\n      title={2D Triangle Splatting for Direct Differentiable Mesh Training}, \n      author={Kaifeng Sheng and Zheng Zhou and Yingliang Peng and Qianwei Wang},\n      year={2025},\n      eprint={2506.18575},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV},\n      url={https://arxiv.org/abs/2506.18575}, \n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "o+TmyQ6wneV6/FQB6aUlRSjIGr2/YLJtnz5uxBgsScQ=",
        "originContent": "```bibtex",
        "translatedContent": "```bibtex"
      },
      {
        "row": 2,
        "rowsha": "kNwE6MJjF7UPl2IQAh00NQSbmIRXJ3XJ0OjxYc8iYzI=",
        "originContent": "@misc{sheng20252dtrianglesplattingdirect,",
        "translatedContent": "@misc{sheng20252dtrianglesplattingdirect,"
      },
      {
        "row": 3,
        "rowsha": "g4P41izsILTFvwx7W3bE+qS4X7PZJqmoiSCKsaYlqb0=",
        "originContent": "      title={2D Triangle Splatting for Direct Differentiable Mesh Training}, ",
        "translatedContent": "      title={2D Triangle Splatting for Direct Differentiable Mesh Training}, "
      },
      {
        "row": 4,
        "rowsha": "b5x7EGcaJfsysC14TprGUVE4zFXevYT2NSFv0Y+hohM=",
        "originContent": "      author={Kaifeng Sheng and Zheng Zhou and Yingliang Peng and Qianwei Wang},",
        "translatedContent": "      author={Kaifeng Sheng and Zheng Zhou and Yingliang Peng and Qianwei Wang},"
      },
      {
        "row": 5,
        "rowsha": "1cuvfM9h03loQfZOlvsx9juVCvU41kevaYb2CnD9Gak=",
        "originContent": "      year={2025},",
        "translatedContent": "      year={2025},"
      },
      {
        "row": 6,
        "rowsha": "C/2T6UXR7xzNND2gzjzkjynJKvX+VXu3x0CuA3TUnVc=",
        "originContent": "      eprint={2506.18575},",
        "translatedContent": "      eprint={2506.18575},"
      },
      {
        "row": 7,
        "rowsha": "Fr73/KLqU4TaDaJVUDLO211nM029JE4YRpN5hXSZZqk=",
        "originContent": "      archivePrefix={arXiv},",
        "translatedContent": "      archivePrefix={arXiv},"
      },
      {
        "row": 8,
        "rowsha": "RPNBhgHdrY2A+XYLnuhpAr/aqag2LU2pAjasgtM0tg4=",
        "originContent": "      primaryClass={cs.CV},",
        "translatedContent": "      primaryClass={cs.CV},"
      },
      {
        "row": 9,
        "rowsha": "CKy3QVd5V2V/y0QLSdnqIa9EEpi8gOuoED/O7ypHZXM=",
        "originContent": "      url={https://arxiv.org/abs/2506.18575}, ",
        "translatedContent": "      url={https://arxiv.org/abs/2506.18575}, "
      },
      {
        "row": 10,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 11,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 13,
    "Content": "\n<!-- Reference -->\n[1]: https://arxiv.org/abs/2506.18575\n[2]: https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/\n[3]: https://github.com/nerfstudio-project/viser\n[4]: https://gaoderender.github.io/triangle-splatting/",
    "ContentSha": "EKgqiqIW2Hyt2lg7tP+JECjw7Ex5D0RGmej0BJZyA4Y=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<!-- Reference -->\n[1]: https://arxiv.org/abs/2506.18575\n[2]: https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/\n[3]: https://github.com/nerfstudio-project/viser\n[4]: https://gaoderender.github.io/triangle-splatting/\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<!-- Reference -->"
      },
      {
        "row": 2,
        "rowsha": "xgLUaWkkbIalPF1gEGaNGWduZXvB44bW9TI4752hzm8=",
        "originContent": "<!-- Reference -->",
        "translatedContent": "[1]: https://arxiv.org/abs/2506.18575"
      },
      {
        "row": 3,
        "rowsha": "mvHvZYZTgmg2Wvqo0r0183oLNBZ4McpvdVkzjz2T0ZI=",
        "originContent": "[1]: https://arxiv.org/abs/2506.18575",
        "translatedContent": "[2]: https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/"
      },
      {
        "row": 4,
        "rowsha": "omrF777IxVs8J1V6/3Yomyz2DQB3VXnaVFxBKXGSD8I=",
        "originContent": "[2]: https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/",
        "translatedContent": "[3]: https://github.com/nerfstudio-project/viser"
      },
      {
        "row": 5,
        "rowsha": "JDCIWutpLah8/rByJ7sG1WRPkNGBgvLwwtmiyK/77SM=",
        "originContent": "[3]: https://github.com/nerfstudio-project/viser",
        "translatedContent": "[4]: https://gaoderender.github.io/triangle-splatting/"
      },
      {
        "row": 6,
        "rowsha": "WiXS2et8StR9TmMEFQc6OHRSlXwCHxcRUmxkUOZbFQw=",
        "originContent": "[4]: https://gaoderender.github.io/triangle-splatting/",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  }
]