{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "```markdown\nawait ofetch(\"/url\").catch((error) => error.data);\n```\n\nلتجاوز التقاط أخطاء الحالة يمكنك تعيين خيار `ignoreResponseError`:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ إعادة المحاولة التلقائية\n\nيقوم `ofetch` بإعادة محاولة الطلب تلقائيًا إذا حدث خطأ وكان رمز حالة الاستجابة مدرجًا في قائمة `retryStatusCodes`:\n\n**رموز الحالة لإعادة المحاولة:**\n\n- `408` - انتهت مهلة الطلب\n- `409` - تعارض\n- `425` - مبكر جدًا ([تجريبي](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - عدد كبير جدًا من الطلبات\n- `500` - خطأ داخلي في الخادم\n- `502` - بوابة غير صالحة\n- `503` - الخدمة غير متوفرة\n- `504` - انتهت مهلة البوابة\n\nيمكنك تحديد عدد مرات إعادة المحاولة والفاصل الزمني بينها باستخدام خياري `retry` و`retryDelay` وأيضًا تمرير مصفوفة مخصصة من الرموز باستخدام خيار `retryStatusCodes`.\n\nالقيمة الافتراضية لـ `retry` هي محاولة واحدة فقط، باستثناء طرق `POST` و`PUT` و`PATCH` و`DELETE` حيث لا يقوم `ofetch` بإعادة المحاولة افتراضيًا لتجنب التسبب في آثار جانبية. إذا قمت بتعيين قيمة مخصصة لـ `retry` سيتم **دائمًا إعادة المحاولة** لجميع الطلبات.\n\nالقيمة الافتراضية لـ `retryDelay` هي `0` مللي ثانية.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // مللي ثانية\n  retryStatusCodes: [ 404, 500 ], // رموز حالة الاستجابة لإعادة المحاولة\n});\n```\n\n## ✔️ المهلة (Timeout)\n\nيمكنك تحديد قيمة `timeout` بالملي ثانية لإلغاء الطلب تلقائيًا بعد انقضاء المهلة (الإعداد الافتراضي معطل).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // المهلة بعد 3 ثوانٍ\n});\n```\n\n## ✔️ دعم الأنواع (Type Friendly)\n\nيمكن أن تكون الاستجابة مدعومة بالأنواع:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// الإكمال التلقائي يعمل مع article.id\n```\n\n## ✔️ إضافة `baseURL`\n\nباستخدام خيار `baseURL`، يقوم `ofetch` بإضافته مع دعم الشرطة المائلة في البداية/النهاية ومعاملات البحث في الاستعلام للـ baseURL باستخدام [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ إضافة معاملات البحث في الاستعلام\n\nباستخدام خيار `query` (أو `params` كاسم بديل)، يضيف `ofetch` معاملات البحث في الاستعلام إلى عنوان URL مع الحفاظ على الاستعلام في الطلب نفسه باستخدام [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ المعترضات (Interceptors)\n\nمن الممكن توفير معترضات غير متزامنة للتعامل مع أحداث دورة حياة استدعاء `ofetch`.\n\nقد ترغب في استخدام `ofetch.create` لتعيين معترضات مشتركة.\n\n### `onRequest({ request, options })`\n\nيتم استدعاء `onRequest` بمجرد استدعاء `ofetch`، مما يسمح لك بتعديل الخيارات أو تنفيذ تسجيل بسيط.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // تسجيل الطلب\n    console.log(\"[fetch request]\", request, options);\n\n    // إضافة `?t=1640125211170` إلى معاملات البحث في الاستعلام\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\nسيتم استدعاء `onRequestError` عند فشل طلب الجلب.\n```",
  "status": "ok"
}