{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## 🚀 Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ✔️ Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ✔️ Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ✔️ JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ✔️ Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\n더 나은 fetch API. Node, 브라우저, 워커에서 동작합니다.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## 🚀 빠른 시작\n\n설치:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\n임포트:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ✔️ Node.js에서 동작\n\nNode.js를 감지하고 자동으로 [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native)를 사용하기 위해 [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports)를 사용합니다. `globalThis.fetch`가 사용 가능하다면, 그 대신 사용됩니다. Node.js 17.5.0의 실험적 네이티브 fetch API를 활용하려면 [`--experimental-fetch` 플래그](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch)를 사용하세요.\n\n## ✔️ 응답 파싱\n\n`ofetch`는 [destr](https://github.com/unjs/destr)를 사용해 JSON과 네이티브 값을 스마트하게 파싱하며, 파싱에 실패할 경우 텍스트로 대체합니다.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\n바이너리 콘텐츠 타입의 경우, `ofetch`는 대신 `Blob` 객체를 반환합니다.\n\n원한다면 `destr` 대신 다른 파서(parser)를 제공할 수 있으며, 또는 `blob`, `arrayBuffer`, `text`를 지정해 해당 `FetchResponse` 메서드로 본문 파싱을 강제할 수 있습니다.\n\n```js\n// JSON.parse 사용\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// 텍스트를 그대로 반환\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// 응답의 blob 버전 받기\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ✔️ JSON 본문\n\n객체 또는 `.toJSON()` 메서드를 가진 클래스가 `body` 옵션에 전달되면, `ofetch`가 자동으로 문자열로 변환합니다.\n\n`ofetch`는 전달된 객체를 변환하기 위해 `JSON.stringify()`를 사용합니다. `.toJSON()` 메서드가 없는 클래스는 미리 문자열로 변환한 후 `body` 옵션에 전달해야 합니다.\n\n`PUT`, `PATCH`, `POST` 요청 메서드에서 문자열 또는 객체 본문이 설정되면, `ofetch`는 기본적으로 `content-type: \"application/json\"`과 `accept: \"application/json\"` 헤더를 추가합니다(언제든지 재정의할 수 있습니다).\n\n또한, `ofetch`는 `Buffer`, `ReadableStream`, `Stream`, [호환되는 body 타입](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body)으로 바이너리 응답을 지원합니다. 스트리밍 지원을 위해 `duplex: \"half\"` 옵션을 자동으로 설정합니다!\n\n**예시:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ✔️ 에러 처리\n\n`ofetch`는 `response.ok`가 `false`일 때 자동으로 에러를 친절한 메시지와 간결한 스택(내부 정보 숨김)과 함께 발생시킵니다.\n\n파싱된 에러 본문은 `error.data`로 제공됩니다. 또한 `FetchError` 타입을 사용할 수 있습니다.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\n에러 응답을 잡으려면:\n\n```ts",
  "status": "ok"
}