{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\n–£–ª—É—á—à–µ–Ω–Ω—ã–π fetch API. –†–∞–±–æ—Ç–∞–µ—Ç –≤ node, –±—Ä–∞—É–∑–µ—Ä–µ –∏ –≤–æ—Ä–∫–µ—Ä–∞—Ö.\n\n<details>\n  <summary>–°–ø–æ–π–ª–µ—Ä</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç\n\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\n–ò–º–ø–æ—Ä—Ç:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è –†–∞–±–æ—Ç–∞–µ—Ç —Å Node.js\n\n–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Node.js\n–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω `globalThis.fetch`, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–Ω. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –Ω–∞—Ç–∏–≤–Ω—ã–π fetch API –≤ Node.js 17.5.0, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ [`--experimental-fetch`](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞\n\n`ofetch` —É–º–Ω–æ –ø–∞—Ä—Å–∏—Ç JSON –∏ –Ω–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é [destr](https://github.com/unjs/destr), –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –∫ —Ç–µ–∫—Å—Ç—É, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\n–î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ `ofetch` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç `Blob`.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞—Ä—Å–µ—Ä, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç `destr`, –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å `blob`, `arrayBuffer` –∏–ª–∏ `text`, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–ª–æ —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ `FetchResponse`.\n\n```js\n// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// –í–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ blob\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\n–ï—Å–ª–∏ –≤ –æ–ø—Ü–∏—é `body` –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç –∏–ª–∏ –∫–ª–∞—Å—Å —Å –º–µ—Ç–æ–¥–æ–º `.toJSON()`, `ofetch` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É.\n\n`ofetch` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç `JSON.stringify()` –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ö–ª–∞—Å—Å—ã –±–µ–∑ –º–µ—Ç–æ–¥–∞ `.toJSON()` –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ –æ–ø—Ü–∏—é `body`.\n\n–î–ª—è –º–µ—Ç–æ–¥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ `PUT`, `PATCH` –∏ `POST`, –∫–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–æ —Ç–µ–ª–æ-—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç, `ofetch` –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–∏ `content-type: \"application/json\"` –∏ `accept: \"application/json\"` (–∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å).\n\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, `ofetch` –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é `Buffer`, `ReadableStream`, `Stream` –∏ [—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤ body](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ `ofetch` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –æ–ø—Ü–∏—é `duplex: \"half\"`!\n\n**–ü—Ä–∏–º–µ—Ä:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫\n\n`ofetch` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –∫–æ–≥–¥–∞ `response.ok` —Ä–∞–≤–Ω–æ `false`, —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ –∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º —Å—Ç–µ–∫–æ–º (—Å–∫—Ä—ã–≤–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏).\n\n–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ `error.data`. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏–ø `FetchError`.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π:\n\n```ts",
  "status": "ok"
}