{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nUne meilleure API fetch. Fonctionne sur node, navigateur et workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ D√©marrage rapide\n\nInstallation :\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImportation :\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Fonctionne avec Node.js\n\nNous utilisons les [exports conditionnels](https://nodejs.org/api/packages.html#packages_conditional_exports) pour d√©tecter Node.js\net utiliser automatiquement [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). Si `globalThis.fetch` est disponible, il sera utilis√© √† la place. Pour profiter de l‚ÄôAPI fetch native exp√©rimentale de Node.js 17.5.0, utilisez le param√®tre [`--experimental-fetch`](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Analyse de la r√©ponse\n\n`ofetch` analysera intelligemment le JSON et les valeurs natives √† l‚Äôaide de [destr](https://github.com/unjs/destr), et reviendra au texte si l‚Äôanalyse √©choue.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nPour les types de contenu binaire, `ofetch` retournera √† la place un objet `Blob`.\n\nVous pouvez optionnellement fournir un analyseur diff√©rent de `destr`, ou sp√©cifier `blob`, `arrayBuffer` ou `text` pour forcer l'analyse du corps avec la m√©thode `FetchResponse` correspondante.\n\n```js\n// Utiliser JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Retourner le texte tel quel\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Obtenir la version blob de la r√©ponse\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è Corps JSON\n\nSi un objet ou une classe avec une m√©thode `.toJSON()` est pass√© √† l‚Äôoption `body`, `ofetch` le convertit automatiquement en cha√Æne JSON.\n\n`ofetch` utilise `JSON.stringify()` pour convertir l‚Äôobjet pass√©. Les classes sans m√©thode `.toJSON()` doivent √™tre converties en une valeur cha√Æne √† l‚Äôavance avant d‚Äô√™tre pass√©es √† l‚Äôoption `body`.\n\nPour les m√©thodes de requ√™te `PUT`, `PATCH` et `POST`, lorsqu‚Äôun corps de type cha√Æne ou objet est d√©fini, `ofetch` ajoute par d√©faut les en-t√™tes `content-type: \"application/json\"` et `accept: \"application/json\"` (que vous pouvez toujours remplacer).\n\nDe plus, `ofetch` prend en charge les r√©ponses binaires avec `Buffer`, `ReadableStream`, `Stream` et [types de corps compatibles](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` ajoutera automatiquement l‚Äôoption `duplex: \"half\"` pour la prise en charge du streaming !\n\n**Exemple :**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Gestion des erreurs\n\n`ofetch` l√®ve automatiquement des erreurs lorsque `response.ok` est `false`, avec un message d‚Äôerreur explicite et une pile compacte (qui masque les internes).\n\nUn corps d‚Äôerreur analys√© est disponible via `error.data`. Vous pouvez √©galement utiliser le type `FetchError`.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nPour intercepter la r√©ponse d‚Äôerreur :\n\n```ts",
  "status": "ok"
}