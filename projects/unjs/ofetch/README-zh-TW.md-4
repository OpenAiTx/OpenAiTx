{
  "id": 4,
  "origin": "```\n\n## 🕵️ Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## 🕵️ 新增 HTTP(S) Agent\n\n在 Node.js (>= 18) 環境中，你可以提供自訂的 dispatcher 來攔截請求並支援像是 Proxy 和自簽憑證等功能。這個功能由 [undici](https://undici.nodejs.org/) 內建於 Node.js。關於 Dispatcher API 的更多資訊請參閱 [read more](https://undici.nodejs.org/#/docs/api/Dispatcher)。\n\n可用的 agent 有：\n\n- `ProxyAgent`：一個實作 Agent API 的 Proxy Agent 類別。它允許以簡單的方式透過代理連線。([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`：一個實作 Agent API 的模擬 Agent 類別。它允許攔截經由 undici 發出的 HTTP 請求並返回模擬回應。([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`：Agent 允許向多個不同的來源派送請求。([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**範例：** 為單一請求設定 proxy agent：\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**範例：** 建立啟用代理的自訂 fetch 實例：\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**範例：** 為所有請求設定 proxy agent：\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**範例：** 允許自簽憑證（風險自負！）\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// 注意：這會讓 fetch 對 MITM 攻擊變得不安全。請自行承擔風險！\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\n在較舊版本的 Node.js（<18）中，你也可以使用 `agent`：\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` 支援（僅適用於 Node < 18）\n\n透過將 `FETCH_KEEP_ALIVE` 環境變數設為 `true`，會註冊一個 HTTP/HTTPS agent，即使沒有任何未完成的請求，也會保留 socket，使其可供未來請求重複使用，而無需重新建立 TCP 連線。\n\n**注意：** 此選項可能會導致記憶體洩漏。請參閱 [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325)。\n\n## 📦 Bundler 備註\n\n- 所有目標皆以 Module 及 CommonJS 格式與具名匯出進行導出\n- 為了現代語法，並未進行轉譯\n  - 若需支援 ES5，建議你使用 Babel 轉譯 `ofetch`、`destr` 及 `ufo` 套件\n- 若要支援舊版瀏覽器，需要為 `fetch` 全域進行 polyfill，可使用 [unfetch](https://github.com/developit/unfetch)\n\n## ❓ 常見問答\n\n**為什麼匯出名稱是 `ofetch` 而不是 `fetch`？**\n\n使用 `fetch` 這個相同名稱可能會造成混淆，因為 API 不完全相同，但它仍然是 fetch，因此採用最接近的替代名稱。不過，你仍然可以從 `ofetch` 匯入 `{ fetch }`，這會自動為 Node.js polyfill，否則則使用原生。\n\n**為什麼沒有預設匯出？**\n\n預設匯出與 CommonJS 匯出混用總是有風險。\n\n這也保證我們可以在不破壞套件的情況下加入更多工具，並鼓勵使用 `ofetch` 這個名稱。\n\n**為什麼不進行轉譯？**\n\n轉譯函式庫會讓網頁倒退回使用不必要的舊有程式碼，對大多數使用者來說並不需要。\n\n如果你需要支援舊版用戶，可選擇在你的建置流程中轉譯此函式庫。\n```",
  "status": "ok"
}