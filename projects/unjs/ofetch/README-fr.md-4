{
  "id": 4,
  "origin": "```\n\n## üïµÔ∏è Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## üì¶ Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ‚ùì FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## üïµÔ∏è Ajout d‚Äôun agent HTTP(S)\n\nDans les environnements Node.js (>= 18), vous pouvez fournir un dispatcher personnalis√© pour intercepter les requ√™tes et prendre en charge des fonctionnalit√©s telles que le proxy et les certificats auto-sign√©s. Cette fonctionnalit√© est activ√©e par [undici](https://undici.nodejs.org/) int√©gr√© √† Node.js. [en savoir plus](https://undici.nodejs.org/#/docs/api/Dispatcher) sur l‚ÄôAPI Dispatcher.\n\nQuelques agents disponibles :\n\n- `ProxyAgent` : Une classe Proxy Agent qui impl√©mente l‚ÄôAPI Agent. Elle permet la connexion via un proxy de mani√®re simple. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent` : Une classe Agent simul√©e qui impl√©mente l‚ÄôAPI Agent. Elle permet d‚Äôintercepter les requ√™tes HTTP effectu√©es via undici et de renvoyer des r√©ponses simul√©es √† la place. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent` : Agent permet de dispatcher des requ√™tes vers plusieurs origines diff√©rentes. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Exemple :** D√©finir un proxy agent pour une requ√™te :\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Exemple :** Cr√©er une instance fetch personnalis√©e avec le proxy activ√© :\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Exemple :** D√©finir un proxy agent pour toutes les requ√™tes :\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Exemple :** Autoriser les certificats auto-sign√©s (√Ä UTILISER √Ä VOS RISQUES ET P√âRILS !)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Remarque : cela rend fetch non s√©curis√© contre les attaques MITM. √Ä UTILISER √Ä VOS RISQUES ET P√âRILS !\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nSur les versions plus anciennes de Node.js (<18), vous pouvez √©galement utiliser `agent` :\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### Support de `keepAlive` (fonctionne uniquement pour Node < 18)\n\nEn d√©finissant la variable d‚Äôenvironnement `FETCH_KEEP_ALIVE` √† `true`, un agent HTTP/HTTPS sera enregistr√© pour conserver les sockets m√™me lorsqu‚Äôil n‚Äôy a pas de requ√™tes en cours, afin qu‚Äôils puissent √™tre utilis√©s pour de futures requ√™tes sans avoir √† r√©tablir une connexion TCP.\n\n**Remarque :** Cette option peut potentiellement introduire des fuites de m√©moire. Merci de consulter [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## üì¶ Notes sur le bundler\n\n- Toutes les cibles sont export√©es aux formats Module et CommonJS avec des exports nomm√©s\n- Aucun export n‚Äôest transpil√© afin de conserver une syntaxe moderne\n  - Il vous faudra probablement transpiler les packages `ofetch`, `destr` et `ufo` avec Babel pour la prise en charge d‚ÄôES5\n- Vous devez polyfiller le global `fetch` pour prendre en charge les anciens navigateurs, par exemple en utilisant [unfetch](https://github.com/developit/unfetch)\n\n## ‚ùì FAQ\n\n**Pourquoi l‚Äôexport s‚Äôappelle-t-il `ofetch` au lieu de `fetch` ?**\n\nUtiliser le m√™me nom que `fetch` peut pr√™ter √† confusion car l‚ÄôAPI est diff√©rente, m√™me si cela reste un fetch, donc on utilise l‚Äôalternative la plus proche possible. Cependant, vous pouvez importer `{ fetch }` depuis `ofetch`, qui est un auto-polyfill pour Node.js et utilise le natif sinon.\n\n**Pourquoi ne pas avoir d‚Äôexport par d√©faut ?**\n\nLes exports par d√©faut sont toujours risqu√©s car ils peuvent √™tre confondus avec les exports CommonJS.\n\nCela garantit aussi que nous pouvons introduire plus d‚Äôutilitaires sans casser le package et encourage √©galement l‚Äôutilisation du nom `ofetch`.\n\n**Pourquoi ne pas transpiler ?**\n\nEn transpilant les biblioth√®ques, nous faisons reculer le web avec du code obsol√®te qui est inutile pour la plupart des utilisateurs.\n\nSi vous devez prendre en charge des utilisateurs anciens, vous pouvez optionnellement transpiler la biblioth√®que dans votre pipeline de build.\n```",
  "status": "ok"
}