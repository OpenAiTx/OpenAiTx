{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nPara ignorar o tratamento de erro de status, você pode definir a opção `ignoreResponseError`:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Repetição Automática\n\nO `ofetch` automaticamente repete a requisição se ocorrer um erro e se o código de status da resposta estiver incluído na lista `retryStatusCodes`:\n\n**Códigos de status para repetição:**\n\n- `408` - Tempo de Requisição Esgotado\n- `409` - Conflito\n- `425` - Muito Cedo ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Muitas Requisições\n- `500` - Erro Interno do Servidor\n- `502` - Gateway Inválido\n- `503` - Serviço Indisponível\n- `504` - Tempo de Resposta do Gateway Esgotado\n\nVocê pode especificar a quantidade de tentativas e o atraso entre elas usando as opções `retry` e `retryDelay`, e também passar um array personalizado de códigos usando a opção `retryStatusCodes`.\n\nO padrão para `retry` é `1` repetição, exceto para os métodos `POST`, `PUT`, `PATCH` e `DELETE`, nos quais o `ofetch` não repete por padrão para evitar introduzir efeitos colaterais. Se você definir um valor personalizado para `retry`, ele **sempre irá repetir** para todas as requisições.\n\nO padrão para `retryDelay` é `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // códigos de status da resposta para repetir\n});\n```\n\n## ✔️ Timeout\n\nVocê pode especificar o `timeout` em milissegundos para abortar automaticamente uma requisição após o tempo limite (o padrão é desabilitado).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout após 3 segundos\n});\n```\n\n## ✔️ Compatível com Tipos\n\nA resposta pode ser assistida por tipos:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete funcionando com article.id\n```\n\n## ✔️ Adicionando `baseURL`\n\nUsando a opção `baseURL`, o `ofetch` a adiciona antes das barras finais/iniciais e parâmetros de busca na baseURL utilizando [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adicionando Parâmetros de Busca\n\nUsando a opção `query` (ou `params` como alias), o `ofetch` adiciona parâmetros de busca à URL preservando a query na própria requisição usando [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptadores\n\nÉ possível fornecer interceptadores assíncronos para se conectar aos eventos do ciclo de vida da chamada do `ofetch`.\n\nVocê pode querer usar `ofetch.create` para definir interceptadores compartilhados.\n\n### `onRequest({ request, options })`\n\n`onRequest` é chamado assim que o `ofetch` é chamado, permitindo que você modifique opções ou faça um simples log.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log da requisição\n    console.log(\"[fetch request]\", request, options);\n\n    // Adiciona `?t=1640125211170` aos parâmetros de busca\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` será chamado quando a requisição fetch falhar.",
  "status": "ok"
}