{
  "id": 4,
  "origin": "```\n\n## 🕵️ Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## 🕵️ افزودن HTTP(S) Agent\n\nدر محیط‌های Node.js (نسخه ۱۸ به بالا)، می‌توانید یک دیسپچر سفارشی برای رهگیری درخواست‌ها و پشتیبانی از ویژگی‌هایی مانند پروکسی و گواهی‌های خودامضا شده فراهم کنید. این قابلیت توسط [undici](https://undici.nodejs.org/) به صورت داخلی در Node.js فعال است. [بیشتر بخوانید](https://undici.nodejs.org/#/docs/api/Dispatcher) درباره API دیسپچر.\n\nبرخی agentهای موجود:\n\n- `ProxyAgent`: یک کلاس Proxy Agent که API مربوط به Agent را پیاده‌سازی می‌کند. این امکان را می‌دهد تا ارتباط به‌سادگی از طریق پروکسی انجام شود. ([مستندات](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: یک کلاس Agent شبیه‌سازی‌شده که API مربوط به Agent را پیاده‌سازی می‌کند. این امکان را فراهم می‌کند تا درخواست‌های HTTP انجام شده از طریق undici را رهگیری کرده و پاسخ‌های شبیه‌سازی‌شده بازگردانید. ([مستندات](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent اجازه ارسال درخواست به چندین origin مختلف را می‌دهد. ([مستندات](https://undici.nodejs.org/#/docs/api/Agent))\n\n**مثال:** تنظیم یک پروکسی agent برای یک درخواست:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**مثال:** ساخت یک instance سفارشی fetch با پروکسی فعال:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**مثال:** تنظیم پروکسی agent برای همه درخواست‌ها:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**مثال:** اجازه دادن به گواهی خودامضا شده (با مسئولیت خودتان استفاده کنید!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// توجه: این کار fetch را در برابر حملات MITM ناامن می‌کند. با مسئولیت خودتان استفاده کنید!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nدر نسخه‌های قدیمی‌تر Node.js (<18)، همچنین می‌توانید از `agent` استفاده کنید:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### پشتیبانی از `keepAlive` (فقط برای Node زیر ۱۸)\n\nبا تنظیم متغیر محیطی `FETCH_KEEP_ALIVE` روی مقدار `true`، یک HTTP/HTTPS agent ثبت می‌شود که سوکت‌ها را حتی زمانی که درخواست فعالی وجود ندارد، نگه می‌دارد تا برای درخواست‌های آینده بدون نیاز به برقراری مجدد اتصال TCP مورد استفاده قرار گیرند.\n\n**توجه:** این گزینه ممکن است باعث نشت حافظه شود. لطفاً [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325) را بررسی کنید.\n\n## 📦 نکات مربوط به Bundler\n\n- همه تارگت‌ها با فرمت Module و CommonJS و با named export صادر می‌شوند\n- هیچ خروجی برای حفظ سینتکس مدرن transpil نمی‌شود\n  - احتمالاً لازم است پکیج‌های `ofetch`، `destr` و `ufo` را برای پشتیبانی ES5 با Babel ترنسپایل کنید\n- برای پشتیبانی مرورگرهای قدیمی باید global مربوط به `fetch` را به صورت polyfill اضافه کنید، مثل استفاده از [unfetch](https://github.com/developit/unfetch)\n\n## ❓ سوالات متداول\n\n**چرا export با نام `ofetch` است نه `fetch`؟**\n\nاستفاده از نام `fetch` می‌تواند گیج‌کننده باشد چون API متفاوت است ولی همچنان یک fetch محسوب می‌شود، پس نزدیک‌ترین نام ممکن انتخاب شده است. البته می‌توانید `{ fetch }` را از `ofetch` ایمپورت کنید که برای Node.js به صورت خودکار polyfill و در سایر موارد از نسخه بومی استفاده می‌کند.\n\n**چرا export پیش‌فرض وجود ندارد؟**\n\nخروجی پیش‌فرض همواره ریسک ترکیب شدن با خروجی‌های CommonJS را دارد.\n\nاین کار همچنین تضمین می‌کند که بتوانیم ابزارهای بیشتری بدون شکستن پکیج معرفی کنیم و نیز استفاده از نام `ofetch` را تشویق می‌کند.\n\n**چرا ترنسپایل نشده است؟**\n\nترنسپایل کردن کتابخانه‌ها باعث عقب‌گرد وب با کدهای قدیمی می‌شود که برای بیشتر کاربران غیرضروری است.\n\nاگر لازم است از کاربران قدیمی پشتیبانی کنید، می‌توانید کتابخانه را به صورت اختیاری در زنجیره build خود ترنسپایل کنید.\n```",
  "status": "ok"
}