{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nUna fetch API migliore. Funziona su node, browser e workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ Avvio Rapido\n\nInstalla:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImporta:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Funziona con Node.js\n\nUtilizziamo [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) per rilevare Node.js\ne usare automaticamente [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). Se `globalThis.fetch` √® disponibile, verr√† utilizzato invece. Per sfruttare la fetch API nativa sperimentale di Node.js 17.5.0 usa il flag [`--experimental-fetch`](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Parsing della Risposta\n\n`ofetch` analizzer√† in modo intelligente valori JSON e nativi usando [destr](https://github.com/unjs/destr), tornando al testo se la conversione fallisce.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nPer i tipi di contenuto binari, `ofetch` restituir√† invece un oggetto `Blob`.\n\nPuoi opzionalmente fornire un parser diverso da `destr`, oppure specificare `blob`, `arrayBuffer` o `text` per forzare il parsing del body con il relativo metodo di `FetchResponse`.\n\n```js\n// Usa JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Restituisci il testo cos√¨ com'√®\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Ottieni la versione blob della risposta\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è Corpo JSON\n\nSe viene passato un oggetto o una classe con un metodo `.toJSON()` nell'opzione `body`, `ofetch` lo converte automaticamente in stringa.\n\n`ofetch` utilizza `JSON.stringify()` per convertire l'oggetto passato. Le classi senza un metodo `.toJSON()` devono essere convertite in valore stringa in anticipo prima di essere passate all'opzione `body`.\n\nPer i metodi di richiesta `PUT`, `PATCH` e `POST`, quando viene impostato un body di tipo stringa o oggetto, `ofetch` aggiunge di default le intestazioni `content-type: \"application/json\"` e `accept: \"application/json\"` (che puoi sempre sovrascrivere).\n\nInoltre, `ofetch` supporta risposte binarie con `Buffer`, `ReadableStream`, `Stream` e [tipi di body compatibili](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` imposter√† automaticamente l'opzione `duplex: \"half\"` per il supporto dello streaming!\n\n**Esempio:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Gestione degli Errori\n\n`ofetch` genera automaticamente errori quando `response.ok` √® `false` con un messaggio di errore amichevole e uno stack compatto (nascondendo i dettagli interni).\n\nUn body di errore gi√† interpretato √® disponibile con `error.data`. Puoi anche usare il tipo `FetchError`.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nPer catturare la risposta di errore:\n\n```ts",
  "status": "ok"
}