{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nステータスエラーのキャッチを回避するには、`ignoreResponseError` オプションを設定します:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ 自動リトライ\n\n`ofetch` は、エラーが発生し、レスポンスのステータスコードが `retryStatusCodes` リストに含まれている場合、自動的にリクエストをリトライします。\n\n**リトライ対象ステータスコード:**\n\n- `408` - リクエストタイムアウト\n- `409` - コンフリクト\n- `425` - 早すぎる ([実験的](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - リクエストが多すぎる\n- `500` - サーバ内部エラー\n- `502` - 不正なゲートウェイ\n- `503` - サービス利用不可\n- `504` - ゲートウェイタイムアウト\n\n`retry` および `retryDelay` オプションを使用してリトライ回数とリトライ間隔を指定でき、`retryStatusCodes` オプションでカスタムのステータスコード配列も指定できます。\n\n`retry` のデフォルトは `1` 回のリトライですが、`POST`、`PUT`、`PATCH`、`DELETE` メソッドの場合は副作用を避けるためデフォルトでリトライしません。`retry` にカスタム値を設定すると、**全てのリクエストに対して常にリトライ** します。\n\n`retryDelay` のデフォルトは `0` ミリ秒です。\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ミリ秒\n  retryStatusCodes: [ 404, 500 ], // リトライするレスポンスステータスコード\n});\n```\n\n## ✔️ タイムアウト\n\n`timeout` をミリ秒単位で指定すると、指定時間後に自動的にリクエストを中断できます（デフォルトは無効）。\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // 3秒後にタイムアウト\n});\n```\n\n## ✔️ 型安全\n\nレスポンスは型アシストが利用可能です:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// article.id でオートコンプリートが動作\n```\n\n## ✔️ `baseURL` の追加\n\n`baseURL` オプションを使用することで、[ufo](https://github.com/unjs/ufo) を使い、`ofetch` は baseURL の末尾・先頭スラッシュやクエリ検索パラメータを補完します:\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ クエリ検索パラメータの追加\n\n`query` オプション（またはエイリアスの `params`）を使うことで、[ufo](https://github.com/unjs/ufo) を利用し、リクエストのクエリを保持したまま URL にクエリ検索パラメータを追加できます:\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ インターセプター\n\n`ofetch` 呼び出しのライフサイクルイベントにフックするための非同期インターセプターを提供できます。\n\n共通のインターセプターを設定する場合は `ofetch.create` を使うことを推奨します。\n\n### `onRequest({ request, options })`\n\n`onRequest` は `ofetch` が呼び出されるとすぐに実行され、オプションの変更や簡単なロギングが可能です。\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // リクエストをログ出力\n    console.log(\"[fetch request]\", request, options);\n\n    // クエリ検索パラメータに `?t=1640125211170` を追加\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` は fetch リクエストが失敗した際に呼び出されます。",
  "status": "ok"
}