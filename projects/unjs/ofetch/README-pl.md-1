{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## 🚀 Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ✔️ Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ✔️ Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ✔️ JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ✔️ Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nLepsze API fetch. Działa na node, w przeglądarce i w workerach.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## 🚀 Szybki start\n\nInstalacja:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ✔️ Działa z Node.js\n\nUżywamy [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) do wykrywania Node.js\ni automatycznego korzystania z [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). Jeśli `globalThis.fetch` jest dostępne, zostanie ono użyte zamiast tego. Aby wykorzystać eksperymentalne natywne API fetch w Node.js 17.5.0 użyj flagi [`--experimental-fetch`](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ✔️ Parsowanie odpowiedzi\n\n`ofetch` inteligentnie parsuje JSON i natywne wartości używając [destr](https://github.com/unjs/destr), przechodząc do tekstu w przypadku niepowodzenia parsowania.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nDla binarnych typów zawartości, `ofetch` zwróci obiekt `Blob`.\n\nMożesz opcjonalnie podać własny parser zamiast `destr`, lub określić `blob`, `arrayBuffer` albo `text`, aby wymusić parsowanie ciała odpowiedzi daną metodą `FetchResponse`.\n\n```js\n// Użyj JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Zwróć tekst bez zmian\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Pobierz wersję blob odpowiedzi\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ✔️ Ciało JSON\n\nJeśli do opcji `body` zostanie przekazany obiekt lub klasa z metodą `.toJSON()`, `ofetch` automatycznie zamieni ją na tekst.\n\n`ofetch` wykorzystuje `JSON.stringify()` do konwersji przekazanego obiektu. Klasy bez metody `.toJSON()` muszą być zamienione na wartość tekstową wcześniej, zanim zostaną przekazane do opcji `body`.\n\nDla metod żądań `PUT`, `PATCH` oraz `POST`, gdy przekazany jest tekst lub obiekt jako ciało, `ofetch` dodaje domyślne nagłówki `content-type: \"application/json\"` i `accept: \"application/json\"` (które można zawsze nadpisać).\n\nDodatkowo, `ofetch` obsługuje odpowiedzi binarne z `Buffer`, `ReadableStream`, `Stream` oraz [zgodnymi typami ciał](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` automatycznie ustawi opcję `duplex: \"half\"` dla obsługi streamingu!\n\n**Przykład:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ✔️ Obsługa błędów\n\n`ofetch` automatycznie zgłasza błędy, gdy `response.ok` jest `false`, z czytelnym komunikatem i skróconym stosem (ukrywając szczegóły wewnętrzne).\n\nSparsowane ciało błędu dostępne jest jako `error.data`. Możesz także użyć typu `FetchError`.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nAby przechwycić odpowiedź błędu:\n\n```ts",
  "status": "ok"
}