{
  "id": 4,
  "origin": "```\n\n## 🕵️ Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## 🕵️ إضافة وكيل HTTP(S)\n\nفي بيئات Node.js (>= 18)، يمكنك توفير موزع مخصص لاعتراض الطلبات ودعم ميزات مثل البروكسي والشهادات الموقعة ذاتيًا. هذه الميزة مفعلة بواسطة [undici](https://undici.nodejs.org/) المدمج في Node.js. [اقرأ المزيد](https://undici.nodejs.org/#/docs/api/Dispatcher) حول واجهة برمجة تطبيقات Dispatcher.\n\nبعض الوكلاء المتاحين:\n\n- `ProxyAgent`: فئة وكيل بروكسي تنفذ واجهة برمجة تطبيقات الوكيل. تتيح الاتصال عبر بروكسي بطريقة بسيطة. ([التوثيق](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: فئة وكيل وهمي تنفذ واجهة برمجة تطبيقات الوكيل. تتيح اعتراض طلبات HTTP التي تتم عبر undici وإرجاع ردود وهمية بدلاً منها. ([التوثيق](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: يتيح الوكيل توجيه الطلبات إلى أصول مختلفة متعددة. ([التوثيق](https://undici.nodejs.org/#/docs/api/Agent))\n\n**مثال:** تعيين وكيل بروكسي لطلب واحد:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**مثال:** إنشاء نسخة مخصصة من fetch مع تفعيل البروكسي:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**مثال:** تعيين وكيل بروكسي لجميع الطلبات:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**مثال:** السماح بالشهادات الموقعة ذاتيًا (استخدمه على مسؤوليتك الخاصة!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// ملاحظة: هذا يجعل fetch غير آمن ضد هجمات MITM. استخدمه على مسؤوليتك الخاصة!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nفي إصدارات Node.js الأقدم (<18)، يمكنك أيضًا استخدام `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### دعم `keepAlive` (يعمل فقط مع Node < 18)\n\nعن طريق تعيين متغير البيئة `FETCH_KEEP_ALIVE` إلى `true`، سيتم تسجيل وكيل HTTP/HTTPS يحتفظ بالاتصالات حتى عند عدم وجود طلبات معلقة، بحيث يمكن استخدامها للطلبات المستقبلية دون الحاجة إلى إعادة إنشاء اتصال TCP.\n\n**ملاحظة:** قد يؤدي هذا الخيار إلى تسرب في الذاكرة. يرجى مراجعة [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 ملاحظات حول المجمع (Bundler)\n\n- جميع الأهداف يتم تصديرها بتنسيق Module و CommonJS وتصدير مسمى\n- لا يتم تحويل أي تصدير لصالح البنية الحديثة\n  - ربما تحتاج إلى تحويل حزم `ofetch` و`destr` و`ufo` باستخدام Babel لدعم ES5\n- تحتاج إلى توفير polyfill للمتغير العالمي `fetch` لدعم المتصفحات القديمة مثل استخدام [unfetch](https://github.com/developit/unfetch)\n\n## ❓ الأسئلة الشائعة\n\n**لماذا التصدير يسمى `ofetch` بدلاً من `fetch`؟**\n\nاستخدام نفس اسم `fetch` قد يكون مربكًا لأن الواجهة البرمجية مختلفة، لكنه لا يزال وظيفة fetch لذلك تم استخدام أقرب بديل ممكن. مع ذلك، يمكنك استيراد `{ fetch }` من `ofetch`، والذي يعد polyfill تلقائي لـ Node.js ويستخدم الأصلي في الحالات الأخرى.\n\n**لماذا لا يوجد تصدير افتراضي؟**\n\nالتصديرات الافتراضية دائمًا ما تكون عرضة للخلط مع تصديرات CommonJS.\n\nهذا يضمن أيضًا أنه يمكننا إضافة المزيد من الأدوات دون كسر الحزمة، ويشجع أيضًا على استخدام اسم `ofetch`.\n\n**لماذا لم يتم تحويل الشيفرة؟**\n\nعند تحويل المكتبات، فإننا نعيد الويب إلى الوراء بشيفرة قديمة ليست ضرورية لمعظم المستخدمين.\n\nإذا كنت بحاجة لدعم المستخدمين القدامى، يمكنك اختيارياً تحويل المكتبة في خط التجميع الخاص بك.\n```",
  "status": "ok"
}