{
  "id": 4,
  "origin": "```\n\n## 🕵️ Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## 🕵️ HTTP(S) エージェントの追加\n\nNode.js（>= 18）環境では、カスタムディスパッチャーを指定してリクエストをインターセプトし、プロキシや自己署名証明書などの機能をサポートできます。この機能はNode.jsに組み込まれている [undici](https://undici.nodejs.org/) により有効化されています。Dispatcher API については[こちら](https://undici.nodejs.org/#/docs/api/Dispatcher)を参照してください。\n\n利用可能なエージェントの例:\n\n- `ProxyAgent`: Agent API を実装したプロキシエージェントクラスです。シンプルな方法でプロキシ経由の接続を可能にします。([ドキュメント](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: Agent API を実装したモックエージェントクラスです。undici 経由の HTTP リクエストをインターセプトし、モックレスポンスを返すことができます。([ドキュメント](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: 複数の異なるオリジンに対してリクエストをディスパッチできます。([ドキュメント](https://undici.nodejs.org/#/docs/api/Agent))\n\n**例:** 1つのリクエストにプロキシエージェントを設定する:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**例:** プロキシ有効なカスタム fetch インスタンスを作成する:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**例:** すべてのリクエストにプロキシエージェントを設定する:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**例:** 自己署名証明書を許可する（自己責任でご利用ください！）\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// 注意: これにより MITM 攻撃に対して fetch が安全でなくなります。自己責任でご利用ください！\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\n古い Node.js バージョン（<18）では、`agent` を使用することもできます:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` サポート（Node < 18 のみ有効）\n\n`FETCH_KEEP_ALIVE` 環境変数を `true` に設定することで、未処理のリクエストがなくてもソケットを維持し、将来のリクエストで TCP 接続を再確立せずに利用できる HTTP/HTTPS エージェントが登録されます。\n\n**注意:** このオプションはメモリリークを引き起こす可能性があります。[node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325) をご確認ください。\n\n## 📦 バンドラーノート\n\n- すべてのターゲットは Module および CommonJS 形式、名前付きエクスポートでエクスポートされています\n- モダンな構文維持のため、エクスポートはトランスパイルされていません\n  - ES5 サポートが必要な場合は、`ofetch`, `destr`, `ufo` パッケージを Babel でトランスパイルする必要があります\n- レガシーブラウザ対応には、[unfetch](https://github.com/developit/unfetch) などを使い `fetch` グローバルをポリフィルしてください\n\n## ❓ FAQ\n\n**なぜエクスポート名が `fetch` ではなく `ofetch` なのですか？**\n\n`fetch` と同じ名前を使うと API が異なるため混乱を招く可能性がありますが、fetch であることに違いはないので、できるだけ近い代替案として `ofetch` を利用しています。ただし、`ofetch` から `{ fetch }` をインポートすることもでき、Node.js では自動的にポリフィルされ、それ以外ではネイティブが使われます。\n\n**なぜデフォルトエクスポートがないのですか？**\n\nデフォルトエクスポートは CommonJS エクスポートと混在すると常にリスクがあります。\n\nこの方針により、パッケージを壊すことなく他のユーティリティを追加でき、`ofetch` という名前の利用も促進できます。\n\n**なぜトランスパイルされていないのですか？**\n\nライブラリをトランスパイルすると、ほとんどのユーザーには不要なレガシーコードによってウェブの進化を妨げてしまいます。\n\nレガシーユーザーをサポートする必要がある場合は、ビルドパイプラインでライブラリを任意にトランスパイルしてください。\n```",
  "status": "ok"
}