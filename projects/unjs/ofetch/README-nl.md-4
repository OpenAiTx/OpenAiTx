{
  "id": 4,
  "origin": "```\n\n## 🕵️ Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## 🕵️ HTTP(S)-agent toevoegen\n\nIn Node.js (>= 18)-omgevingen kun je een aangepaste dispatcher opgeven om verzoeken te onderscheppen en functies zoals Proxy en zelfondertekende certificaten te ondersteunen. Deze functie is ingeschakeld door [undici](https://undici.nodejs.org/) ingebouwd in Node.js. [lees meer](https://undici.nodejs.org/#/docs/api/Dispatcher) over de Dispatcher API.\n\nEnkele beschikbare agents:\n\n- `ProxyAgent`: Een Proxy Agent-klasse die de Agent API implementeert. Hiermee kan de verbinding eenvoudig via een proxy verlopen. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: Een gemockte Agent-klasse die de Agent API implementeert. Hiermee kun je HTTP-verzoeken die via undici worden gedaan onderscheppen en in plaats daarvan gemockte responses retourneren. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent maakt het mogelijk om verzoeken uit te voeren naar verschillende origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Voorbeeld:** Stel een proxy-agent in voor één verzoek:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Voorbeeld:** Maak een aangepaste fetch-instantie met proxy ingeschakeld:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Voorbeeld:** Stel een proxy-agent in voor alle verzoeken:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Voorbeeld:** Sta zelfondertekende certificaten toe (GEBRUIK OP EIGEN RISICO!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Let op: Dit maakt fetch onveilig tegen MITM-aanvallen. GEBRUIK OP EIGEN RISICO!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOp oudere Node.js-versies (<18), kun je ook `agent` gebruiken:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive`-ondersteuning (werkt alleen voor Node < 18)\n\nDoor de omgevingsvariabele `FETCH_KEEP_ALIVE` op `true` te zetten, wordt er een HTTP/HTTPS-agent geregistreerd die sockets vasthoudt, zelfs wanneer er geen openstaande verzoeken zijn, zodat ze gebruikt kunnen worden voor toekomstige verzoeken zonder opnieuw een TCP-verbinding op te zetten.\n\n**Let op:** Deze optie kan mogelijk geheugenlekken veroorzaken. Controleer [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Bundler-notities\n\n- Alle targets worden geëxporteerd met Module- en CommonJS-formaat en named exports\n- Geen enkele export wordt getranspiled ten behoeve van moderne syntaxis\n  - Je zult waarschijnlijk de pakketten `ofetch`, `destr` en `ufo` met Babel moeten transpilen voor ES5-ondersteuning\n- Je moet de globale `fetch` polyfillen om legacy browsers te ondersteunen, bijvoorbeeld met [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Waarom heet de export `ofetch` in plaats van `fetch`?**\n\nHet gebruik van dezelfde naam als `fetch` kan verwarrend zijn omdat de API anders is, maar het blijft fetch, dus wordt de dichtst mogelijke alternatieve naam gebruikt. Je kunt echter `{ fetch }` importeren uit `ofetch`, wat automatisch een polyfill is voor Node.js en anders de native versie gebruikt.\n\n**Waarom geen default export?**\n\nStandaard exports zijn altijd riskant om te mengen met CommonJS-exports.\n\nDit garandeert ook dat we meer utils kunnen introduceren zonder het pakket te breken en moedigt het gebruik van de naam `ofetch` aan.\n\n**Waarom niet getranspiled?**\n\nDoor libraries te transpilen, dringen we het web terug met legacy code die voor de meeste gebruikers niet nodig is.\n\nAls je legacy gebruikers wilt ondersteunen, kun je er optioneel voor kiezen om de library in je build-pijplijn te transpilen.\n```",
  "status": "ok"
}