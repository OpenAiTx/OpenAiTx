{
  "id": 3,
  "origin": "```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // Log error\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse` will be called after `fetch` call and parsing body.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // Log response\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError` is the same as `onResponse` but will be called when fetch happens but `response.ok` is not `true`.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // Log error\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n### Passing array of interceptors\n\nIf necessary, it's also possible to pass an array of function that will be called sequentially.\n\n```js\nawait ofetch(\"/api\", {\n  onRequest: [\n    () => {\n      /* Do something */\n    },\n    () => {\n      /* Do something else */\n    },\n  ],\n});\n```\n\n## ✔️ Create fetch with default options\n\nThis utility is useful if you need to use common options across several fetch calls.\n\n**Note:** Defaults will be cloned at one level and inherited. Be careful about nested options like `headers`.\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // Same as ofetch('/test', { baseURL: '/api' })\n```\n\n## 💡 Adding headers\n\nBy using `headers` option, `ofetch` adds extra headers in addition to the request default headers:\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## 🍣 Access to Raw Response\n\nIf you need to access raw response (for headers, etc), you can use `ofetch.raw`:\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## 🌿 Using Native Fetch\n\nAs a shortcut, you can use `ofetch.native` that provides native `fetch` API\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());",
  "origin_sha": "wuvdKqsuOA4W95Ll0BO8zm8DheYXXrOsgdngtydl1A0=",
  "translate": "```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // Ghi log lỗi\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse` sẽ được gọi sau khi gọi `fetch` và phân tích body.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // Ghi log phản hồi\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError` giống như `onResponse` nhưng sẽ được gọi khi fetch xảy ra nhưng `response.ok` không phải là `true`.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // Ghi log lỗi\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n### Truyền mảng các interceptor\n\nNếu cần thiết, bạn cũng có thể truyền một mảng các hàm sẽ được gọi tuần tự.\n\n```js\nawait ofetch(\"/api\", {\n  onRequest: [\n    () => {\n      /* Thực hiện gì đó */\n    },\n    () => {\n      /* Thực hiện việc khác */\n    },\n  ],\n});\n```\n\n## ✔️ Tạo fetch với tùy chọn mặc định\n\nTiện ích này hữu ích nếu bạn cần sử dụng các tùy chọn chung cho nhiều lần gọi fetch.\n\n**Lưu ý:** Tùy chọn mặc định sẽ được nhân bản ở một cấp và kế thừa. Hãy cẩn thận với các tùy chọn lồng nhau như `headers`.\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // Tương đương với ofetch('/test', { baseURL: '/api' })\n```\n\n## 💡 Thêm headers\n\nBằng cách sử dụng tùy chọn `headers`, `ofetch` sẽ thêm các header bổ sung ngoài các header mặc định của request:\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## 🍣 Truy cập Raw Response\n\nNếu bạn cần truy cập phản hồi thô (để lấy headers, v.v), bạn có thể sử dụng `ofetch.raw`:\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## 🌿 Sử dụng Native Fetch\n\nĐể rút ngắn, bạn có thể sử dụng `ofetch.native` để cung cấp API `fetch` gốc\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());\n```",
  "status": "ok"
}