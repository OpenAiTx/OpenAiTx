{
  "id": 3,
  "origin": "```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // Log error\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse` will be called after `fetch` call and parsing body.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // Log response\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError` is the same as `onResponse` but will be called when fetch happens but `response.ok` is not `true`.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // Log error\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n### Passing array of interceptors\n\nIf necessary, it's also possible to pass an array of function that will be called sequentially.\n\n```js\nawait ofetch(\"/api\", {\n  onRequest: [\n    () => {\n      /* Do something */\n    },\n    () => {\n      /* Do something else */\n    },\n  ],\n});\n```\n\n## ✔️ Create fetch with default options\n\nThis utility is useful if you need to use common options across several fetch calls.\n\n**Note:** Defaults will be cloned at one level and inherited. Be careful about nested options like `headers`.\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // Same as ofetch('/test', { baseURL: '/api' })\n```\n\n## 💡 Adding headers\n\nBy using `headers` option, `ofetch` adds extra headers in addition to the request default headers:\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## 🍣 Access to Raw Response\n\nIf you need to access raw response (for headers, etc), you can use `ofetch.raw`:\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## 🌿 Using Native Fetch\n\nAs a shortcut, you can use `ofetch.native` that provides native `fetch` API\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());",
  "origin_sha": "wuvdKqsuOA4W95Ll0BO8zm8DheYXXrOsgdngtydl1A0=",
  "translate": "```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // त्रुटि लॉग करें\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse` को `fetch` कॉल और बॉडी पार्स करने के बाद कॉल किया जाएगा।\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // रिस्पॉन्स लॉग करें\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError` ठीक उसी तरह है जैसे `onResponse`, लेकिन यह तब कॉल किया जाएगा जब fetch होता है लेकिन `response.ok` `true` नहीं होता।\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // त्रुटि लॉग करें\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n### इंटरसेप्टर्स की एक array पास करना\n\nयदि आवश्यक हो, तो एक function की array भी पास करना संभव है, जिन्हें क्रमिक रूप से कॉल किया जाएगा।\n\n```js\nawait ofetch(\"/api\", {\n  onRequest: [\n    () => {\n      /* कुछ करें */\n    },\n    () => {\n      /* कुछ और करें */\n    },\n  ],\n});\n```\n\n## ✔️ डिफ़ॉल्ट विकल्पों के साथ fetch बनाएं\n\nयह यूटिलिटी तब उपयोगी होती है जब आपको कई fetch कॉल्स में सामान्य विकल्पों का उपयोग करना हो।\n\n**नोट:** डिफ़ॉल्ट्स एक स्तर पर क्लोन किए जाएंगे और विरासत में लिए जाएंगे। जैसे `headers` जैसे नेस्टेड विकल्पों के बारे में सतर्क रहें।\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // यह ofetch('/test', { baseURL: '/api' }) के समान है\n```\n\n## 💡 हेडर्स जोड़ना\n\n`headers` विकल्प का उपयोग करके, `ofetch` अनुरोध के डिफ़ॉल्ट हेडर्स के अलावा अतिरिक्त हेडर्स जोड़ता है:\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## 🍣 कच्चे रिस्पॉन्स तक पहुंच\n\nयदि आपको कच्चे रिस्पॉन्स (जैसे कि हेडर्स आदि) तक पहुंचने की आवश्यकता है, तो आप `ofetch.raw` का उपयोग कर सकते हैं:\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## 🌿 नेटिव Fetch का उपयोग करना\n\nशॉर्टकट के रूप में, आप `ofetch.native` का उपयोग कर सकते हैं, जो नेटिव `fetch` API प्रदान करता है\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());\n```",
  "status": "ok"
}