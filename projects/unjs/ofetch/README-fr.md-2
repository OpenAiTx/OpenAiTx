{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "```markdown\nawait ofetch(\"/url\").catch((error) => error.data);\n```\n\nPour contourner la capture des erreurs de statut, vous pouvez définir l’option `ignoreResponseError` :\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Reprise Automatique\n\n`ofetch` réessaie automatiquement la requête si une erreur se produit et si le code de statut de la réponse est inclus dans la liste `retryStatusCodes` :\n\n**Codes de statut de reprise :**\n\n- `408` - Délai d’attente de la requête dépassé\n- `409` - Conflit\n- `425` - Trop tôt ([Expérimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Trop de requêtes\n- `500` - Erreur interne du serveur\n- `502` - Mauvaise passerelle\n- `503` - Service indisponible\n- `504` - Délai d’attente de la passerelle dépassé\n\nVous pouvez spécifier le nombre de tentatives et le délai entre elles à l’aide des options `retry` et `retryDelay`, et également passer un tableau personnalisé de codes avec l’option `retryStatusCodes`.\n\nLa valeur par défaut pour `retry` est `1` tentative, sauf pour les méthodes `POST`, `PUT`, `PATCH` et `DELETE` où `ofetch` ne réessaie pas par défaut afin d’éviter d’introduire des effets secondaires. Si vous définissez une valeur personnalisée pour `retry`, il y aura **toujours une reprise** pour toutes les requêtes.\n\nLa valeur par défaut pour `retryDelay` est `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // codes de statut de réponse à reprendre\n});\n```\n\n## ✔️ Délai d’expiration (Timeout)\n\nVous pouvez spécifier un `timeout` en millisecondes pour interrompre automatiquement une requête après un délai d’expiration (par défaut, désactivé).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Délai d’expiration après 3 secondes\n});\n```\n\n## ✔️ Compatible avec les types\n\nLa réponse peut être assistée par type :\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// L’autocomplétion fonctionne avec article.id\n```\n\n## ✔️ Ajout de `baseURL`\n\nEn utilisant l’option `baseURL`, `ofetch` la préfixe en gérant les barres obliques de fin/début et les paramètres de recherche de la baseURL avec [ufo](https://github.com/unjs/ufo) :\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Ajout de paramètres de recherche\n\nEn utilisant l’option `query` (ou `params` comme alias), `ofetch` ajoute des paramètres de recherche à l’URL tout en préservant la requête elle-même à l’aide de [ufo](https://github.com/unjs/ufo) :\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Intercepteurs\n\nIl est possible de fournir des intercepteurs asynchrones pour s’insérer dans les événements du cycle de vie de l’appel `ofetch`.\n\nVous pouvez utiliser `ofetch.create` pour définir des intercepteurs partagés.\n\n### `onRequest({ request, options })`\n\n`onRequest` est appelé dès que `ofetch` est appelé, ce qui vous permet de modifier les options ou d’effectuer une simple journalisation.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Journaliser la requête\n    console.log(\"[fetch request]\", request, options);\n\n    // Ajouter `?t=1640125211170` aux paramètres de recherche\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` sera appelé lorsque la requête fetch échoue.\n```",
  "status": "ok"
}