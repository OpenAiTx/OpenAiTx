{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "```ts\nawait ofetch(\"/url\").catch((error) => error.data);\n```\n\nAby pominąć obsługę błędów statusu, możesz ustawić opcję `ignoreResponseError`:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Automatyczne Ponawianie (Auto Retry)\n\n`ofetch` automatycznie ponawia żądanie, jeśli wystąpi błąd i jeśli kod statusu odpowiedzi znajduje się na liście `retryStatusCodes`:\n\n**Kody statusów do ponawiania:**\n\n- `408` - Przekroczony czas żądania (Request Timeout)\n- `409` - Konflikt (Conflict)\n- `425` - Zbyt wcześnie (Too Early) ([Eksperymentalne](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Zbyt wiele żądań (Too Many Requests)\n- `500` - Wewnętrzny błąd serwera (Internal Server Error)\n- `502` - Zły gateway (Bad Gateway)\n- `503` - Usługa niedostępna (Service Unavailable)\n- `504` - Przekroczony czas gatewaya (Gateway Timeout)\n\nMożesz określić liczbę ponowień i opóźnienie między nimi, używając opcji `retry` oraz `retryDelay`, a także przekazać własną tablicę kodów za pomocą opcji `retryStatusCodes`.\n\nDomyślnie `retry` to `1` ponowienie, z wyjątkiem metod `POST`, `PUT`, `PATCH` i `DELETE`, dla których `ofetch` domyślnie nie ponawia, aby uniknąć potencjalnych skutków ubocznych. Jeśli ustawisz własną wartość dla `retry`, będzie ona **zawsze ponawiać** dla wszystkich żądań.\n\nDomyślnie `retryDelay` to `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // kody statusów odpowiedzi do ponowienia\n});\n```\n\n## ✔️ Timeout\n\nMożesz określić `timeout` w milisekundach, aby automatycznie przerwać żądanie po przekroczeniu czasu (domyślnie wyłączone).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Przerwanie po 3 sekundach\n});\n```\n\n## ✔️ Przyjazny Typom (Type Friendly)\n\nOdpowiedź może być wspomagana przez typy:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Autouzupełnianie działa z article.id\n```\n\n## ✔️ Dodawanie `baseURL`\n\nUżywając opcji `baseURL`, `ofetch` dodaje ją do końcowych/początkowych ukośników oraz parametrów zapytania dla baseURL przy użyciu [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Dodawanie parametrów zapytania (Query Search Params)\n\nUżywając opcji `query` (lub `params` jako aliasu), `ofetch` dodaje parametry zapytania do adresu URL, zachowując zapytanie w samym żądaniu przy użyciu [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptory\n\nMożliwe jest przekazanie asynchronicznych interceptorów, aby podpiąć się pod zdarzenia cyklu życia wywołania `ofetch`.\n\nMożesz użyć `ofetch.create`, aby ustawić współdzielone interceptory.\n\n### `onRequest({ request, options })`\n\n`onRequest` jest wywoływany natychmiast po wywołaniu `ofetch`, umożliwiając modyfikację opcji lub proste logowanie.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Logowanie żądania\n    console.log(\"[fetch request]\", request, options);\n\n    // Dodanie `?t=1640125211170` do parametrów zapytania\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` zostanie wywołany, gdy żądanie fetch zakończy się niepowodzeniem.\n```",
  "status": "ok"
}