{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "```markdown\nawait ofetch(\"/url\").catch((error) => error.data);\n```\n\n상태 오류 처리를 우회하려면 `ignoreResponseError` 옵션을 설정할 수 있습니다:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ 자동 재시도(Auto Retry)\n\n`ofetch`는 오류가 발생하고 응답 상태 코드가 `retryStatusCodes` 목록에 포함되어 있으면 자동으로 요청을 재시도합니다:\n\n**재시도 상태 코드:**\n\n- `408` - 요청 시간 초과(Request Timeout)\n- `409` - 충돌(Conflict)\n- `425` - 너무 이른 요청(Too Early) ([실험적](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - 요청이 너무 많음(Too Many Requests)\n- `500` - 내부 서버 오류(Internal Server Error)\n- `502` - 잘못된 게이트웨이(Bad Gateway)\n- `503` - 서비스 사용 불가(Service Unavailable)\n- `504` - 게이트웨이 시간 초과(Gateway Timeout)\n\n`retry`와 `retryDelay` 옵션을 사용하여 재시도 횟수와 재시도 간 지연 시간을 지정할 수 있으며, `retryStatusCodes` 옵션으로 커스텀 코드 배열을 전달할 수도 있습니다.\n\n`retry`의 기본값은 `1`번 재시도이며, 단 `POST`, `PUT`, `PATCH`, `DELETE` 메서드는 부작용 방지를 위해 기본적으로 재시도하지 않습니다. `retry`에 값을 지정하면 **모든 요청에 대해 항상 재시도**합니다.\n\n`retryDelay`의 기본값은 `0` ms입니다.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // 재시도할 응답 상태 코드\n});\n```\n\n## ✔️ 타임아웃(Timeout)\n\n밀리초 단위의 `timeout`을 지정하여 타임아웃 후 요청을 자동으로 중단할 수 있습니다(기본값은 비활성화).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // 3초 후 타임아웃\n});\n```\n\n## ✔️ 타입 친화적(Type Friendly)\n\n응답에 타입 지원을 받을 수 있습니다:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// article.id 사용 시 자동 완성 지원\n```\n\n## ✔️ `baseURL` 추가하기\n\n`baseURL` 옵션을 사용하면, `ofetch`는 [ufo](https://github.com/unjs/ufo)를 활용해 baseURL의 슬래시 및 쿼리 파라미터를 자동으로 붙입니다:\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ 쿼리 검색 파라미터 추가하기\n\n`query` 옵션(또는 별칭 `params`)을 사용하면, [ufo](https://github.com/unjs/ufo)를 이용해 쿼리 파라미터를 URL에 추가하면서 기존 요청의 쿼리를 보존할 수 있습니다:\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ 인터셉터(Interceptors)\n\n`ofetch` 호출의 라이프사이클 이벤트에 비동기 인터셉터를 제공해 연결할 수 있습니다.\n\n공유 인터셉터를 설정하려면 `ofetch.create`를 사용하는 것이 좋습니다.\n\n### `onRequest({ request, options })`\n\n`onRequest`는 `ofetch`가 호출되자마자 실행되며, 옵션을 수정하거나 간단한 로깅을 할 수 있습니다.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // 요청 로그 출력\n    console.log(\"[fetch request]\", request, options);\n\n    // 쿼리 파라미터에 `?t=1640125211170` 추가\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError`는 fetch 요청이 실패했을 때 호출됩니다.\n```",
  "status": "ok"
}