{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nPara omitir el control de errores de estado, puedes establecer la opción `ignoreResponseError`:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Reintento Automático\n\n`ofetch` reintenta automáticamente la solicitud si ocurre un error y si el código de estado de la respuesta está incluido en la lista `retryStatusCodes`:\n\n**Códigos de estado para reintentos:**\n\n- `408` - Tiempo de espera de la solicitud agotado\n- `409` - Conflicto\n- `425` - Demasiado temprano ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Demasiadas solicitudes\n- `500` - Error interno del servidor\n- `502` - Puerta de enlace incorrecta\n- `503` - Servicio no disponible\n- `504` - Tiempo de espera de la puerta de enlace agotado\n\nPuedes especificar la cantidad de reintentos y el tiempo de espera entre ellos usando las opciones `retry` y `retryDelay`, y también pasar un arreglo personalizado de códigos usando la opción `retryStatusCodes`.\n\nEl valor predeterminado de `retry` es `1` reintento, excepto para los métodos `POST`, `PUT`, `PATCH` y `DELETE` donde `ofetch` no realiza reintentos por defecto para evitar efectos secundarios. Si estableces un valor personalizado para `retry` **siempre reintentará** para todas las solicitudes.\n\nEl valor predeterminado de `retryDelay` es `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // códigos de estado de respuesta para reintentar\n});\n```\n\n## ✔️ Tiempo de Espera (Timeout)\n\nPuedes especificar `timeout` en milisegundos para abortar automáticamente una solicitud después de un tiempo de espera (por defecto está deshabilitado).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Tiempo de espera de 3 segundos\n});\n```\n\n## ✔️ Compatible con Tipos\n\nLa respuesta puede tener asistencia de tipos:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Autocompletado funcionando con article.id\n```\n\n## ✔️ Añadiendo `baseURL`\n\nUsando la opción `baseURL`, `ofetch` la antepone manejando las barras diagonales y los parámetros de búsqueda para baseURL usando [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Añadiendo Parámetros de Consulta\n\nUsando la opción `query` (o `params` como alias), `ofetch` añade parámetros de búsqueda a la URL conservando la consulta en la propia solicitud usando [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptores\n\nEs posible proporcionar interceptores asíncronos para engancharse en los eventos del ciclo de vida de la llamada de `ofetch`.\n\nPuede que desees usar `ofetch.create` para establecer interceptores compartidos.\n\n### `onRequest({ request, options })`\n\n`onRequest` se llama tan pronto como se invoca `ofetch`, permitiéndote modificar opciones o realizar un registro simple.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Registrar solicitud\n    console.log(\"[fetch request]\", request, options);\n\n    // Agregar `?t=1640125211170` a los parámetros de búsqueda\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` se llamará cuando la solicitud fetch falle.",
  "status": "ok"
}