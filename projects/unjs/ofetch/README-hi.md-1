{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## ЁЯЪА Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## тЬФя╕П Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## тЬФя╕П Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## тЬФя╕П JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## тЬФя╕П Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nрдПрдХ рдмреЗрд╣рддрд░ fetch APIред Node, рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдФрд░ рд╡рд░реНрдХрд░реНрд╕ рдкрд░ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред\n\n<details>\n  <summary>рд╕реНрдкреЙрдЗрд▓рд░</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## ЁЯЪА рддреНрд╡рд░рд┐рдд рдкреНрд░рд╛рд░рдВрдн\n\nрдЗрдВрд╕реНрдЯреЙрд▓ рдХрд░реЗрдВ:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nрдЗрдВрдкреЛрд░реНрдЯ рдХрд░реЗрдВ:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## тЬФя╕П Node.js рдХреЗ рд╕рд╛рде рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ\n\nрд╣рдо [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) рдХрд╛ рдЙрдкрдпреЛрдЧ Node.js рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд░рддреЗ рд╣реИрдВ\nрдФрд░ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВред рдпрджрд┐ `globalThis.fetch` рдЙрдкрд▓рдмреНрдз рд╣реИ, рддреЛ рд╡рд╣реА рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред Node.js 17.5.0 рдХреА experimental native fetch API рдХрд╛ рд▓рд╛рдн рдЙрдард╛рдиреЗ рдХреЗ рд▓рд┐рдП [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред\n\n## тЬФя╕П рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдкрд╛рд░реНрд╕рд┐рдВрдЧ\n\n`ofetch` [destr](https://github.com/unjs/destr) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд╕реНрдорд╛рд░реНрдЯрд▓реА JSON рдФрд░ рдиреЗрдЯрд┐рд╡ рд╡реИрд▓реНрдпреВрдЬрд╝ рдХреЛ рдкрд╛рд░реНрд╕ рдХрд░рддрд╛ рд╣реИ, рдФрд░ рдпрджрд┐ рдкрд╛рд░реНрд╕рд┐рдВрдЧ рд╡рд┐рдлрд▓ рд╣реЛрддреА рд╣реИ рддреЛ рдЯреЗрдХреНрд╕реНрдЯ рдХреЗ рд░реВрдк рдореЗрдВ рд▓реМрдЯрд╛рддрд╛ рд╣реИред\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nрдмрд╛рдЗрдирд░реА рдХрдВрдЯреЗрдВрдЯ рдЯрд╛рдЗрдкреНрд╕ рдХреЗ рд▓рд┐рдП, `ofetch` рдПрдХ `Blob` рдСрдмреНрдЬреЗрдХреНрдЯ рд▓реМрдЯрд╛рдПрдЧрд╛ред\n\nрдЖрдк рд╡реИрдХрд▓реНрдкрд┐рдХ рд░реВрдк рд╕реЗ `destr` рдХреЗ рдЕрд▓рд╛рд╡рд╛ рдХреЛрдИ рджреВрд╕рд░рд╛ рдкрд╛рд░реНрд╕рд░ рджреЗ рд╕рдХрддреЗ рд╣реИрдВ, рдпрд╛ `blob`, `arrayBuffer`, рдпрд╛ `text` рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рддрд╛рдХрд┐ рдмреЙрдбреА рдХреЛ рд╕рдВрдмрдВрдзрд┐рдд `FetchResponse` рдореЗрдердб рд╕реЗ рдкрд╛рд░реНрд╕ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХреЗред\n\n```js\n// JSON.parse рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// рдЯреЗрдХреНрд╕реНрдЯ рдЬреНрдпреЛрдВ рдХрд╛ рддреНрдпреЛрдВ рд▓реМрдЯрд╛рдПрдВ\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдХрд╛ blob рд╡рд░реНрд╢рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## тЬФя╕П JSON рдмреЙрдбреА\n\nрдпрджрд┐ `body` рд╡рд┐рдХрд▓реНрдк рдореЗрдВ рдХреЛрдИ рдСрдмреНрдЬреЗрдХреНрдЯ рдпрд╛ `.toJSON()` рдореЗрдердб рд╡рд╛рд▓реА рдХреНрд▓рд╛рд╕ рдкрд╛рд╕ рдХреА рдЬрд╛рддреА рд╣реИ, рддреЛ `ofetch` рдЙрд╕реЗ рд╕реНрд╡рддрдГ рд╕реНрдЯреНрд░рд┐рдВрдЧрд┐рдлрд╛рдИ рдХрд░ рджреЗрддрд╛ рд╣реИред\n\n`ofetch` рдкрд╛рд╕ рдХрд┐рдП рдЧрдП рдСрдмреНрдЬреЗрдХреНрдЯ рдХреЛ рдХрдиреНрд╡рд░реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП `JSON.stringify()` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддрд╛ рд╣реИред рдЬрд┐рди рдХреНрд▓рд╛рд╕реЗрд╕ рдореЗрдВ `.toJSON()` рдореЗрдердб рдирд╣реАрдВ рд╣реИ, рдЙрдиреНрд╣реЗрдВ рдкрд╣рд▓реЗ рд╕реЗ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╡реИрд▓реНрдпреВ рдореЗрдВ рдмрджрд▓рдирд╛ рдЖрд╡рд╢реНрдпрдХ рд╣реИ, рдЙрд╕рдХреЗ рдмрд╛рдж рд╣реА рдЙрдиреНрд╣реЗрдВ `body` рд╡рд┐рдХрд▓реНрдк рдореЗрдВ рдкрд╛рд╕ рдХрд░реЗрдВред\n\n`PUT`, `PATCH`, рдФрд░ `POST` рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдореЗрдердбреНрд╕ рдХреЗ рд▓рд┐рдП, рдЬрдм рдХреЛрдИ рд╕реНрдЯреНрд░рд┐рдВрдЧ рдпрд╛ рдСрдмреНрдЬреЗрдХреНрдЯ рдмреЙрдбреА рд╕реЗрдЯ рд╣реЛрддреА рд╣реИ, рддреЛ `ofetch` рдбрд┐рдлреЙрд▓реНрдЯ рд░реВрдк рд╕реЗ `content-type: \"application/json\"` рдФрд░ `accept: \"application/json\"` рд╣реЗрдбрд░ рдЬреЛрдбрд╝рддрд╛ рд╣реИ (рдЬрд┐рдиреНрд╣реЗрдВ рдЖрдк рд╣рдореЗрд╢рд╛ рдУрд╡рд░рд░рд╛рдЗрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ)ред\n\nрдЗрд╕рдХреЗ рдЕрд▓рд╛рд╡рд╛, `ofetch` рдмрд╛рдЗрдирд░реА рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдХреЛ `Buffer`, `ReadableStream`, `Stream`, рдФрд░ [рд╕рдВрдЧрдд рдмреЙрдбреА рдЯрд╛рдЗрдкреНрд╕](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body) рдХреЗ рд╕рд╛рде рд╕рдкреЛрд░реНрдЯ рдХрд░рддрд╛ рд╣реИред рд╕реНрдЯреНрд░реАрдорд┐рдВрдЧ рд╕рдкреЛрд░реНрдЯ рдХреЗ рд▓рд┐рдП `ofetch` рд╕реНрд╡рддрдГ рд╣реА `duplex: \"half\"` рд╡рд┐рдХрд▓реНрдк рд╕реЗрдЯ рдХрд░ рджреЗрдЧрд╛!\n\n**рдЙрджрд╛рд╣рд░рдг:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## тЬФя╕П рдПрд░рд░ рд╣реИрдВрдбрд▓рд┐рдВрдЧ\n\nрдЬрдм `response.ok` `false` рд╣реЛрддрд╛ рд╣реИ рддреЛ `ofetch` рд╕реНрд╡рддрдГ рд╣реА рдПрд░рд░ рдлреЗрдВрдХрддрд╛ рд╣реИ, рдЬрд┐рд╕рдореЗрдВ рдПрдХ рдлреНрд░реЗрдВрдбрд▓реА рдПрд░рд░ рдореИрд╕реЗрдЬ рдФрд░ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╕реНрдЯреИрдХ (рдЗрдВрдЯрд░рдирд▓реНрд╕ рдХреЛ рдЫреБрдкрд╛рддреЗ рд╣реБрдП) рд╣реЛрддрд╛ рд╣реИред\n\nрдкрд╛рд░реНрд╕ рдХреА рдЧрдИ рдПрд░рд░ рдмреЙрдбреА `error.data` рдХреЗ рд╕рд╛рде рдЙрдкрд▓рдмреНрдз рд╣реЛрддреА рд╣реИред рдЖрдк `FetchError` рдЯрд╛рдЗрдк рдХрд╛ рднреА рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nрдПрд░рд░ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдХреЛ рдкрдХрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП:\n\n```ts",
  "status": "ok"
}