{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm versie][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![Licentie][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nEen betere fetch API. Werkt op node, browser en workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ Snel Starten\n\nInstalleren:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImporteren:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Werkt met Node.js\n\nWe gebruiken [conditionele exports](https://nodejs.org/api/packages.html#packages_conditional_exports) om Node.js te detecteren\nen gebruiken automatisch [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). Als `globalThis.fetch` beschikbaar is, wordt deze gebruikt. Om de experimentele native fetch API van Node.js 17.5.0 te gebruiken, gebruik de [`--experimental-fetch` vlag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Response Parsen\n\n`ofetch` zal JSON en native waarden slim parsen met behulp van [destr](https://github.com/unjs/destr), en terugvallen op tekst als het niet lukt te parsen.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nVoor binaire content types retourneert `ofetch` in plaats daarvan een `Blob` object.\n\nJe kunt optioneel een andere parser dan `destr` opgeven, of `blob`, `arrayBuffer` of `text` specificeren om het body te forceren te parsen met de respectievelijke `FetchResponse` methode.\n\n```js\n// Gebruik JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Retourneer tekst zoals het is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Verkrijg de blob-versie van de response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\nAls een object of een klasse met een `.toJSON()` methode wordt doorgegeven aan de `body` optie, stringifyt `ofetch` deze automatisch.\n\n`ofetch` gebruikt `JSON.stringify()` om het doorgegeven object te converteren. Klassen zonder een `.toJSON()` methode moeten vooraf worden omgezet naar een string voordat ze aan de `body` optie worden doorgegeven.\n\nVoor de request-methoden `PUT`, `PATCH` en `POST`, wanneer een string of object body is ingesteld, voegt `ofetch` standaard de headers `content-type: \"application/json\"` en `accept: \"application/json\"` toe (deze kun je altijd overschrijven).\n\nDaarnaast ondersteunt `ofetch` binaire responses met `Buffer`, `ReadableStream`, `Stream` en [compatibele bodytypes](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` stelt automatisch de optie `duplex: \"half\"` in voor streaming-ondersteuning!\n\n**Voorbeeld:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Foutafhandeling\n\n`ofetch` gooit automatisch fouten als `response.ok` `false` is, met een duidelijke foutmelding en compacte stack (zonder interne details).\n\nEen geparseerd error-body is beschikbaar met `error.data`. Je kunt ook het type `FetchError` gebruiken.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nOm een foutresponse op te vangen:\n\n```ts",
  "status": "ok"
}