{
  "id": 4,
  "origin": "```\n\n## 🕵️ Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## 🕵️ 添加 HTTP(S) 代理\n\n在 Node.js（>= 18）环境中，你可以提供自定义调度器来拦截请求，并支持如代理和自签名证书等功能。该特性由 Node.js 内置的 [undici](https://undici.nodejs.org/) 实现。[阅读更多](https://undici.nodejs.org/#/docs/api/Dispatcher) 了解 Dispatcher API。\n\n可用的代理有：\n\n- `ProxyAgent`：实现了 Agent API 的代理类。它允许通过代理以简单的方式建立连接。（[文档](https://undici.nodejs.org/#/docs/api/ProxyAgent)）\n- `MockAgent`：实现了 Agent API 的模拟代理类。它允许拦截通过 undici 发起的 HTTP 请求并返回模拟响应。（[文档](https://undici.nodejs.org/#/docs/api/MockAgent)）\n- `Agent`：Agent 允许向多个不同的源分发请求。（[文档](https://undici.nodejs.org/#/docs/api/Agent)）\n\n**示例：** 为单个请求设置代理代理：\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**示例：** 创建一个启用代理的自定义 fetch 实例：\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**示例：** 为所有请求设置代理代理：\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**示例：** 允许自签名证书（使用此功能需自担风险！）\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// 注意：这会导致 fetch 在遭受 MITM 攻击时变得不安全。请自行承担风险使用！\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\n在较旧的 Node.js 版本（<18）中，你也可以使用 `agent`：\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` 支持（仅适用于 Node < 18）\n\n通过将环境变量 `FETCH_KEEP_ALIVE` 设置为 `true`，将注册一个 HTTP/HTTPS 代理，即使没有未完成的请求，也会保持 socket 连接，以便后续请求可以复用连接而无需重新建立 TCP 连接。\n\n**注意：** 此选项有可能引入内存泄漏。请参考 [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325)。\n\n## 📦 打包器说明\n\n- 所有目标均以 Module 和 CommonJS 格式以及具名导出方式导出\n- 为保持现代语法，不进行任何导出转译\n  - 你可能需要用 Babel 转译 `ofetch`、`destr` 和 `ufo` 包以支持 ES5\n- 如需支持旧版浏览器，你需要对 `fetch` 全局对象进行 polyfill，比如使用 [unfetch](https://github.com/developit/unfetch)\n\n## ❓ 常见问题解答\n\n**为什么导出叫 `ofetch` 而不是 `fetch`？**\n\n使用 `fetch` 这个名称可能会让人困惑，因为 API 不完全相同，但它本质上还是 fetch，因此采用了最接近的替代名称。不过，你可以从 `ofetch` 导入 `{ fetch }`，这会自动为 Node.js polyfill，并在其他环境下使用原生 fetch。\n\n**为什么没有默认导出？**\n\n默认导出容易和 CommonJS 导出混淆。\n\n这样也能保证我们可以引入更多工具而不破坏包的兼容性，同时也鼓励大家使用 `ofetch` 这个名字。\n\n**为什么不转译？**\n\n对库进行转译，会使 Web 倒退到旧时代代码，对大多数用户来说没有必要。\n\n如果你需要支持旧版用户，可以选择在你的构建流程中对该库进行转译。\n```",
  "status": "ok"
}