{
  "id": 4,
  "origin": "```\n\n## 🕵️ Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## 🕵️ HTTP(S) 에이전트 추가하기\n\nNode.js (>= 18) 환경에서는 커스텀 디스패처(dispatcher)를 제공하여 요청을 가로채고 Proxy 및 자체 서명 인증서와 같은 기능을 지원할 수 있습니다. 이 기능은 Node.js에 내장된 [undici](https://undici.nodejs.org/)에 의해 활성화됩니다. Dispatcher API에 대한 자세한 내용은 [여기](https://undici.nodejs.org/#/docs/api/Dispatcher)에서 확인하세요.\n\n사용 가능한 일부 에이전트:\n\n- `ProxyAgent`: Agent API를 구현하는 프록시 에이전트 클래스입니다. 간단하게 프록시를 통해 연결할 수 있도록 해줍니다. ([문서](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: Agent API를 구현하는 목(mock) 에이전트 클래스입니다. undici를 통해 이루어지는 HTTP 요청을 가로채고, 대신 목(mock) 응답을 반환할 수 있습니다. ([문서](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: 여러 다른 오리진(origin)에 대해 요청을 디스패치할 수 있는 에이전트입니다. ([문서](https://undici.nodejs.org/#/docs/api/Agent))\n\n**예시:** 한 번의 요청에 프록시 에이전트를 설정하기:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**예시:** 프록시가 활성화된 커스텀 fetch 인스턴스 생성하기:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**예시:** 모든 요청에 프록시 에이전트를 설정하기:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**예시:** 자체 서명 인증서 허용하기 (사용자 책임하에 사용!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// 참고: 이 옵션은 fetch를 MITM 공격에 취약하게 만듭니다. 사용자 책임하에 사용하세요!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\n구버전 Node.js (<18)에서는 `agent`를 사용할 수도 있습니다:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` 지원 (Node < 18에서만 동작)\n\n`FETCH_KEEP_ALIVE` 환경 변수를 `true`로 설정하면, 요청이 없을 때도 소켓을 유지하여, 향후 요청 시 TCP 연결을 다시 설정하지 않고 재사용할 수 있는 HTTP/HTTPS 에이전트가 등록됩니다.\n\n**참고:** 이 옵션은 메모리 누수(memory leak)를 유발할 수 있습니다. 자세한 내용은 [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325)를 확인하세요.\n\n## 📦 번들러 참고사항\n\n- 모든 타겟은 Module 및 CommonJS 형식과 named exports로 내보내집니다.\n- 최신 문법 유지를 위해 어떠한 내보내기도 트랜스파일되지 않습니다.\n  - ES5 지원이 필요하다면 `ofetch`, `destr`, `ufo` 패키지를 Babel로 트랜스파일해야 할 수 있습니다.\n- [unfetch](https://github.com/developit/unfetch)와 같이 레거시 브라우저 지원을 위해 `fetch` 글로벌을 폴리필 해야 합니다.\n\n## ❓ FAQ\n\n**왜 export 이름이 `fetch`가 아니라 `ofetch`인가요?**\n\n동일한 이름의 `fetch`를 사용하면 API가 다르기 때문에 혼란스러울 수 있습니다. 하지만 여전히 fetch 기능이므로 가장 비슷한 대체 이름을 사용했습니다. 그러나 `{ fetch }`를 `ofetch`에서 import하면 Node.js에서는 자동 폴리필되고, 그렇지 않으면 네이티브 fetch를 사용합니다.\n\n**왜 default export가 없나요?**\n\ndefault export는 항상 CommonJS export와 혼합될 위험이 있습니다.\n\n이렇게 하면 더 많은 유틸리티를 패키지를 깨뜨리지 않고 추가할 수 있고, `ofetch` 이름 사용을 장려할 수 있습니다.\n\n**왜 트랜스파일하지 않나요?**\n\n라이브러리를 트랜스파일하면 대부분의 사용자에게 불필요한 레거시 코드를 웹에 추가하게 됩니다.\n\n레거시 사용자를 지원해야 하는 경우, 빌드 파이프라인에서 라이브러리를 선택적으로 트랜스파일하면 됩니다.\n```",
  "status": "ok"
}