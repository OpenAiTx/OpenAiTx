{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## 🚀 Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ✔️ Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ✔️ Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ✔️ JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ✔️ Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nDaha iyi bir fetch API'si. Node, tarayıcı ve worker'larda çalışır.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## 🚀 Hızlı Başlangıç\n\nKurulum:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nİçe Aktarma:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ✔️ Node.js ile Çalışır\n\n[Şartlı dışa aktarımlar](https://nodejs.org/api/packages.html#packages_conditional_exports) kullanarak Node.js'i algılıyoruz\nve otomatik olarak [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native) kullanıyoruz. Eğer `globalThis.fetch` mevcutsa, bunun yerine o kullanılır. Node.js 17.5.0 deneyselliğinde yerleşik fetch API'sini kullanmak için [`--experimental-fetch` bayrağını](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch) kullanın.\n\n## ✔️ Yanıtı Ayrıştırma\n\n`ofetch`, JSON ve yerel değerleri akıllıca [destr](https://github.com/unjs/destr) ile ayrıştırır, ayrıştırılamazsa metne döner.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nİkili (binary) içerik tipleri için, `ofetch` bunun yerine bir `Blob` nesnesi döndürür.\n\nİsteğe bağlı olarak `destr` dışında farklı bir ayrıştırıcı sağlayabilir veya gövdenin `blob`, `arrayBuffer` ya da `text` ile ilgili `FetchResponse` yöntemi ile zorla ayrıştırılmasını belirtebilirsiniz.\n\n```js\n// JSON.parse kullan\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Metni olduğu gibi döndür\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Yanıtın blob versiyonunu al\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ✔️ JSON Gövdesi\n\nBir nesne veya `.toJSON()` yöntemine sahip bir sınıf `body` seçeneğine aktarılırsa, `ofetch` bunu otomatik olarak string'e çevirir.\n\n`ofetch`, aktarılan nesneyi dönüştürmek için `JSON.stringify()` kullanır. `.toJSON()` yöntemi olmayan sınıflar, `body` seçeneğine aktarılmadan önce önceden string'e dönüştürülmelidir.\n\n`PUT`, `PATCH` ve `POST` istek yöntemlerinde, bir string veya nesne gövdesi ayarlandığında, `ofetch` varsayılan olarak `content-type: \"application/json\"` ve `accept: \"application/json\"` başlıklarını ekler (bunları her zaman geçersiz kılabilirsiniz).\n\nAyrıca, `ofetch` `Buffer`, `ReadableStream`, `Stream` ve [uyumlu gövde türleri](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body) ile ikili (binary) yanıtları destekler. `ofetch`, akış desteği için otomatik olarak `duplex: \"half\"` seçeneğini ayarlar!\n\n**Örnek:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ✔️ Hataları Yönetme\n\n`ofetch`, `response.ok` yanlış olduğunda otomatik olarak dostça bir hata mesajı ve sadeleştirilmiş bir yığın (stack) ile hata fırlatır (iç detaylar gizlenir).\n\nAyrıştırılmış hata gövdesi `error.data` ile sunulur. Ayrıca `FetchError` türünü de kullanabilirsiniz.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nHata yanıtını yakalamak için:\n\n```ts",
  "status": "ok"
}