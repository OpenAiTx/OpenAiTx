{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "```markdown\nawait ofetch(\"/url\").catch((error) => error.data);\n```\n\nبرای جلوگیری از گرفتن خطای وضعیت، می‌توانید گزینه `ignoreResponseError` را تنظیم کنید:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ تلاش مجدد خودکار (Auto Retry)\n\n`ofetch` به صورت خودکار اگر خطایی رخ دهد و اگر کد وضعیت پاسخ در لیست `retryStatusCodes` باشد، درخواست را مجدداً تلاش می‌کند:\n\n**کدهای وضعیت تلاش مجدد:**\n\n- `408` - پایان مهلت درخواست (Request Timeout)\n- `409` - تداخل (Conflict)\n- `425` - خیلی زود (Too Early) ([تجربی](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - درخواست‌های بیش از حد (Too Many Requests)\n- `500` - خطای داخلی سرور (Internal Server Error)\n- `502` - دروازه بد (Bad Gateway)\n- `503` - سرویس در دسترس نیست (Service Unavailable)\n- `504` - پایان مهلت دروازه (Gateway Timeout)\n\nشما می‌توانید تعداد تلاش مجدد و تاخیر بین آن‌ها را با استفاده از گزینه‌های `retry` و `retryDelay` مشخص کنید و همچنین یک آرایه سفارشی از کدها را با استفاده از گزینه `retryStatusCodes` ارسال نمایید.\n\nمقدار پیش‌فرض برای `retry`، یک بار تلاش مجدد است، به جز برای متدهای `POST`، `PUT`، `PATCH` و `DELETE` که به صورت پیش‌فرض `ofetch` تلاشی برای جلوگیری از بروز عوارض جانبی انجام نمی‌دهد. اگر مقدار سفارشی برای `retry` تنظیم کنید، **همیشه برای همه درخواست‌ها تلاش مجدد خواهد کرد**.\n\nمقدار پیش‌فرض `retryDelay`، صفر میلی‌ثانیه است.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // میلی‌ثانیه\n  retryStatusCodes: [ 404, 500 ], // کدهای وضعیت پاسخ برای تلاش مجدد\n});\n```\n\n## ✔️ زمان‌سنجی (Timeout)\n\nشما می‌توانید `timeout` را بر حسب میلی‌ثانیه مشخص کنید تا پس از پایان مهلت، درخواست به صورت خودکار لغو شود (به صورت پیش‌فرض غیرفعال است).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // پایان مهلت پس از ۳ ثانیه\n});\n```\n\n## ✔️ سازگاری با نوع (Type Friendly)\n\nپاسخ می‌تواند از کمک نوعی بهره‌مند شود:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// تکمیل خودکار برای کار با article.id فعال است\n```\n\n## ✔️ افزودن `baseURL`\n\nبا استفاده از گزینه `baseURL`، `ofetch` آن را برای اسلش‌های پایانی/ابتدایی و پارامترهای جستجوی کوئری برای baseURL با استفاده از [ufo](https://github.com/unjs/ufo) اضافه می‌کند:\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ افزودن پارامترهای جستجوی کوئری\n\nبا استفاده از گزینه `query` (یا `params` به عنوان نام مستعار)، `ofetch` پارامترهای جستجوی کوئری را به URL اضافه می‌کند و کوئری موجود در خود درخواست را با استفاده از [ufo](https://github.com/unjs/ufo) حفظ می‌کند:\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ اینترسپتور‌ها (Interceptors)\n\nارائه اینترسپتورهای ناهمگام برای اتصال به رویدادهای چرخه عمر فراخوانی `ofetch` ممکن است.\n\nشاید بخواهید از `ofetch.create` برای تنظیم اینترسپتورهای مشترک استفاده کنید.\n\n### `onRequest({ request, options })`\n\n`onRequest` بلافاصله پس از فراخوانی `ofetch` اجرا می‌شود و به شما اجازه می‌دهد گزینه‌ها را تغییر دهید یا لاگ‌برداری ساده انجام دهید.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // لاگ‌برداری درخواست\n    console.log(\"[fetch request]\", request, options);\n\n    // افزودن `?t=1640125211170` به پارامترهای جستجوی کوئری\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` زمانی فراخوانی می‌شود که درخواست fetch شکست بخورد.\n```",
  "status": "ok"
}