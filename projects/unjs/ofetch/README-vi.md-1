{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nM·ªôt API fetch t·ªët h∆°n. Ho·∫°t ƒë·ªông tr√™n node, tr√¨nh duy·ªát v√† workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ B·∫Øt ƒê·∫ßu Nhanh\n\nC√†i ƒë·∫∑t:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nNh·∫≠p kh·∫©u:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è T∆∞∆°ng th√≠ch v·ªõi Node.js\n\nCh√∫ng t√¥i s·ª≠ d·ª•ng [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) ƒë·ªÉ ph√°t hi·ªán Node.js\nv√† t·ª± ƒë·ªông s·ª≠ d·ª•ng [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). N·∫øu `globalThis.fetch` kh·∫£ d·ª•ng, n√≥ s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng thay th·∫ø. ƒê·ªÉ t·∫≠n d·ª•ng API fetch g·ªëc th·ª≠ nghi·ªám c·ªßa Node.js 17.5.0, h√£y s·ª≠ d·ª•ng [c·ªù `--experimental-fetch`](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Ph√¢n T√≠ch Ph·∫£n H·ªìi\n\n`ofetch` s·∫Ω t·ª± ƒë·ªông ph√¢n t√≠ch JSON v√† c√°c gi√° tr·ªã g·ªëc s·ª≠ d·ª•ng [destr](https://github.com/unjs/destr), v√† s·∫Ω tr·∫£ v·ªÅ vƒÉn b·∫£n n·∫øu kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nƒê·ªëi v·ªõi c√°c lo·∫°i n·ªôi dung nh·ªã ph√¢n, `ofetch` s·∫Ω tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng `Blob`.\n\nB·∫°n c≈©ng c√≥ th·ªÉ cung c·∫•p m·ªôt parser kh√°c thay v√¨ `destr`, ho·∫∑c ch·ªâ ƒë·ªãnh `blob`, `arrayBuffer`, ho·∫∑c `text` ƒë·ªÉ √©p bu·ªôc ph√¢n t√≠ch n·ªôi dung v·ªõi ph∆∞∆°ng th·ª©c t∆∞∆°ng ·ª©ng c·ªßa `FetchResponse`.\n\n```js\n// S·ª≠ d·ª•ng JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Tr·∫£ v·ªÅ vƒÉn b·∫£n nh∆∞ nguy√™n tr·∫°ng\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// L·∫•y phi√™n b·∫£n blob c·ªßa ph·∫£n h·ªìi\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è Th√¢n JSON\n\nN·∫øu m·ªôt ƒë·ªëi t∆∞·ª£ng ho·∫∑c m·ªôt l·ªõp c√≥ ph∆∞∆°ng th·ª©c `.toJSON()` ƒë∆∞·ª£c truy·ªÅn v√†o tu·ª≥ ch·ªçn `body`, `ofetch` s·∫Ω t·ª± ƒë·ªông chuy·ªÉn n√≥ th√†nh chu·ªói.\n\n`ofetch` s·ª≠ d·ª•ng `JSON.stringify()` ƒë·ªÉ chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c truy·ªÅn v√†o. C√°c l·ªõp kh√¥ng c√≥ ph∆∞∆°ng th·ª©c `.toJSON()` c·∫ßn ƒë∆∞·ª£c chuy·ªÉn th√†nh gi√° tr·ªã chu·ªói tr∆∞·ªõc khi truy·ªÅn v√†o tu·ª≥ ch·ªçn `body`.\n\nƒê·ªëi v·ªõi c√°c ph∆∞∆°ng th·ª©c y√™u c·∫ßu `PUT`, `PATCH`, v√† `POST`, khi m·ªôt chu·ªói ho·∫∑c ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ƒë·∫∑t l√†m th√¢n, `ofetch` s·∫Ω th√™m m·∫∑c ƒë·ªãnh c√°c header `content-type: \"application/json\"` v√† `accept: \"application/json\"` (b·∫°n lu√¥n c√≥ th·ªÉ ghi ƒë√®).\n\nNgo√†i ra, `ofetch` h·ªó tr·ª£ ph·∫£n h·ªìi nh·ªã ph√¢n v·ªõi `Buffer`, `ReadableStream`, `Stream`, v√† [c√°c ki·ªÉu th√¢n t∆∞∆°ng th√≠ch](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` s·∫Ω t·ª± ƒë·ªông ƒë·∫∑t tu·ª≥ ch·ªçn `duplex: \"half\"` ƒë·ªÉ h·ªó tr·ª£ streaming!\n\n**V√≠ d·ª•:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è X·ª≠ L√Ω L·ªói\n\n`ofetch` t·ª± ƒë·ªông n√©m l·ªói khi `response.ok` l√† `false` v·ªõi th√¥ng b√°o l·ªói th√¢n thi·ªán v√† stacktrace ng·∫Øn g·ªçn (·∫©n c√°c ph·∫ßn n·ªôi b·ªô).\n\nM·ªôt th√¢n l·ªói ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch s·∫Ω c√≥ trong `error.data`. B·∫°n c≈©ng c√≥ th·ªÉ s·ª≠ d·ª•ng ki·ªÉu `FetchError`.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nƒê·ªÉ b·∫Øt l·ªói ph·∫£n h·ªìi:\n\n```ts",
  "status": "ok"
}