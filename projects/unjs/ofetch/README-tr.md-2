{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nDurum hatası yakalamayı atlamak için `ignoreResponseError` seçeneğini ayarlayabilirsiniz:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Otomatik Tekrar Deneme (Auto Retry)\n\n`ofetch`, bir hata oluşursa ve yanıt durum kodu `retryStatusCodes` listesinde yer alıyorsa isteği otomatik olarak tekrar dener:\n\n**Tekrar denenecek durum kodları:**\n\n- `408` - İstek Zaman Aşımı\n- `409` - Çakışma\n- `425` - Çok Erken ([Deneysel](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Çok Fazla İstek\n- `500` - Dahili Sunucu Hatası\n- `502` - Hatalı Ağ Geçidi\n- `503` - Hizmet Kullanılamıyor\n- `504` - Ağ Geçidi Zaman Aşımı\n\n`retry` ve `retryDelay` seçeneklerini kullanarak tekrar deneme sayısını ve denemeler arasındaki gecikmeyi belirleyebilir, ayrıca `retryStatusCodes` seçeneğiyle özel bir kod dizisi iletebilirsiniz.\n\n`retry` için varsayılan değer `1`'dir, ancak `POST`, `PUT`, `PATCH` ve `DELETE` metotlarında `ofetch` varsayılan olarak tekrar deneme yapmaz, yan etkilerden kaçınmak için. Eğer `retry` için özel bir değer ayarlarsanız, bu durumda **tüm istekler için her zaman tekrar dener**.\n\n`retryDelay` için varsayılan değer `0` ms'dir.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // tekrar denenecek yanıt durum kodları\n});\n```\n\n## ✔️ Zaman Aşımı (Timeout)\n\nBir isteği otomatik olarak zaman aşımına uğratmak için milisaniye cinsinden `timeout` belirtebilirsiniz (varsayılan olarak devre dışıdır).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // 3 saniye sonra zaman aşımı\n});\n```\n\n## ✔️ Tip Dostu (Type Friendly)\n\nYanıt tip desteğiyle kullanılabilir:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// article.id ile otomatik tamamlama çalışır\n```\n\n## ✔️ `baseURL` Ekleme\n\n`baseURL` seçeneğini kullanarak, `ofetch` [ufo](https://github.com/unjs/ufo) ile baseURL'nin başındaki/sonundaki slash'ları ve sorgu parametrelerini önceden ekler:\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Sorgu Parametreleri Ekleme (Query Search Params)\n\n`query` seçeneği (veya takma adı `params`) ile, `ofetch` sorgu parametrelerini isteğin URL'sine ekler ve [ufo](https://github.com/unjs/ufo) kullanarak sorguyu korur:\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Yakalayıcılar (Interceptors)\n\n`ofetch` çağrısının yaşam döngüsü olaylarına bağlanmak için asenkron yakalayıcılar sağlanabilir.\n\nOrtak yakalayıcıları ayarlamak için `ofetch.create` kullanmak isteyebilirsiniz.\n\n### `onRequest({ request, options })`\n\n`onRequest`, `ofetch` çağrılır çağrılmaz tetiklenir, seçenekleri değiştirmenize veya basit günlükleme işlemleri yapmanıza imkan tanır.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // İstek kaydı\n    console.log(\"[fetch request]\", request, options);\n\n    // Sorgu parametrelerine `?t=1640125211170` ekle\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError`, fetch isteği başarısız olduğunda çağrılır.",
  "status": "ok"
}