{
  "id": 3,
  "origin": "```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // Log error\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse` will be called after `fetch` call and parsing body.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // Log response\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError` is the same as `onResponse` but will be called when fetch happens but `response.ok` is not `true`.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // Log error\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n### Passing array of interceptors\n\nIf necessary, it's also possible to pass an array of function that will be called sequentially.\n\n```js\nawait ofetch(\"/api\", {\n  onRequest: [\n    () => {\n      /* Do something */\n    },\n    () => {\n      /* Do something else */\n    },\n  ],\n});\n```\n\n## ✔️ Create fetch with default options\n\nThis utility is useful if you need to use common options across several fetch calls.\n\n**Note:** Defaults will be cloned at one level and inherited. Be careful about nested options like `headers`.\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // Same as ofetch('/test', { baseURL: '/api' })\n```\n\n## 💡 Adding headers\n\nBy using `headers` option, `ofetch` adds extra headers in addition to the request default headers:\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## 🍣 Access to Raw Response\n\nIf you need to access raw response (for headers, etc), you can use `ofetch.raw`:\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## 🌿 Using Native Fetch\n\nAs a shortcut, you can use `ofetch.native` that provides native `fetch` API\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());",
  "origin_sha": "wuvdKqsuOA4W95Ll0BO8zm8DheYXXrOsgdngtydl1A0=",
  "translate": "```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // Log fout\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse` wordt aangeroepen na de `fetch`-aanroep en het parsen van de body.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // Log response\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError` is hetzelfde als `onResponse`, maar wordt aangeroepen wanneer fetch plaatsvindt, maar `response.ok` niet `true` is.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // Log fout\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n### Array van interceptors doorgeven\n\nIndien nodig is het ook mogelijk om een array van functies door te geven die achtereenvolgens worden aangeroepen.\n\n```js\nawait ofetch(\"/api\", {\n  onRequest: [\n    () => {\n      /* Doe iets */\n    },\n    () => {\n      /* Doe iets anders */\n    },\n  ],\n});\n```\n\n## ✔️ Fetch aanmaken met standaardopties\n\nDeze utility is handig als je gemeenschappelijke opties wilt gebruiken voor meerdere fetch-aanroepen.\n\n**Let op:** Standaardinstellingen worden één niveau diep gekloond en geërfd. Let op met geneste opties zoals `headers`.\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // Hetzelfde als ofetch('/test', { baseURL: '/api' })\n```\n\n## 💡 Headers toevoegen\n\nDoor de optie `headers` te gebruiken, voegt `ofetch` extra headers toe naast de standaard headers van het verzoek:\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## 🍣 Toegang tot ruwe respons\n\nAls je toegang nodig hebt tot de ruwe respons (voor headers, enz.), kun je `ofetch.raw` gebruiken:\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## 🌿 Gebruik van Native Fetch\n\nAls snelkoppeling kun je `ofetch.native` gebruiken, dat de native `fetch` API biedt\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());\n```",
  "status": "ok"
}