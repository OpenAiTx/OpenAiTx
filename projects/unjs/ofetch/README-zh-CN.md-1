{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## 🚀 Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ✔️ Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ✔️ Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ✔️ JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ✔️ Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm 版本][npm-version-src]][npm-version-href]\n[![npm 下载量][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![许可证][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\n一个更好的 fetch API。支持 Node、浏览器和 worker 环境。\n\n<details>\n  <summary>剧透</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## 🚀 快速开始\n\n安装：\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\n导入：\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ✔️ 支持 Node.js\n\n我们使用[条件导出](https://nodejs.org/api/packages.html#packages_conditional_exports)来检测 Node.js，\n并自动使用 [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native)。如果 `globalThis.fetch` 可用，则优先使用。如需使用 Node.js 17.5.0 的实验性原生 fetch API，请使用 [`--experimental-fetch` 参数](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch)。\n\n## ✔️ 响应解析\n\n`ofetch` 会智能地使用 [destr](https://github.com/unjs/destr) 解析 JSON 及原生值，如果解析失败则回退为文本。\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\n对于二进制内容类型，`ofetch` 会返回一个 `Blob` 对象。\n\n你可以选择提供不同于 `destr` 的解析器，或通过指定 `blob`、`arrayBuffer` 或 `text`，强制使用相应的 `FetchResponse` 方法解析响应体。\n\n```js\n// 使用 JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// 原样返回文本\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// 获取响应的 blob 版本\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ✔️ JSON 请求体\n\n如果在 `body` 选项中传入对象或带有 `.toJSON()` 方法的类，`ofetch` 会自动将其字符串化。\n\n`ofetch` 利用 `JSON.stringify()` 将传入的对象转换为字符串。没有 `.toJSON()` 方法的类需在传递给 `body` 选项前提前转换为字符串。\n\n对于 `PUT`、`PATCH` 和 `POST` 请求方法，在设置字符串或对象类型的请求体时，`ofetch` 会自动添加默认的 `content-type: \"application/json\"` 和 `accept: \"application/json\"` 头（你也可以自定义覆盖）。\n\n此外，`ofetch` 支持 `Buffer`、`ReadableStream`、`Stream` 及[兼容的请求体类型](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body)的二进制响应。对于流式支持，`ofetch` 会自动设置 `duplex: \"half\"` 选项！\n\n**示例：**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ✔️ 错误处理\n\n当 `response.ok` 为 `false` 时，`ofetch` 会自动抛出错误，并带有友好的错误信息和简洁的堆栈（隐藏内部细节）。\n\n已解析的错误体可通过 `error.data` 获取。你也可以使用 `FetchError` 类型。\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\n捕获错误响应：\n\n```ts",
  "status": "ok"
}