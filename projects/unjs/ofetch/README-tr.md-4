{
  "id": 4,
  "origin": "```\n\n## 🕵️ Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## 🕵️ HTTP(S) Aracısı (Agent) Ekleme\n\nNode.js (>= 18) ortamlarında, isteklere müdahale etmek ve Proxy ile kendinden imzalı sertifikalar gibi özellikleri desteklemek için özel bir dispatcher sağlayabilirsiniz. Bu özellik, Node.js'e yerleşik olarak gelen [undici](https://undici.nodejs.org/) tarafından etkinleştirilmiştir. Dispatcher API hakkında [daha fazla bilgi edinin](https://undici.nodejs.org/#/docs/api/Dispatcher).\n\nMevcut bazı ajanlar:\n\n- `ProxyAgent`: Agent API’sini uygulayan bir Proxy Agent sınıfıdır. Bağlantının kolay bir şekilde bir proxy üzerinden yapılmasına olanak sağlar. ([dokümantasyon](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: Agent API’sini uygulayan bir Mock (sahte) Agent sınıfıdır. undici üzerinden yapılan HTTP isteklerini yakalamaya ve bunun yerine sahte yanıtlar döndürmeye olanak tanır. ([dokümantasyon](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent, birden fazla farklı origin’e karşı istek göndermeye olanak tanır. ([dokümantasyon](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Örnek:** Bir istek için proxy agent ayarlama:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Örnek:** Proxy etkinleştirilmiş özel bir fetch örneği oluşturma:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Örnek:** Tüm istekler için proxy agent ayarlama:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Örnek:** Kendinden imzalı sertifikalara izin verme (KENDİ RİSKİNİZE KULLANIN!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Not: Bu, fetch’i MITM saldırılarına karşı güvensiz hale getirir. KENDİ RİSKİNİZE KULLANIN!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nDaha eski Node.js sürümlerinde (<18), ayrıca `agent` kullanabilirsiniz:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` desteği (yalnızca Node < 18 için çalışır)\n\n`FETCH_KEEP_ALIVE` ortam değişkenini `true` olarak ayarlayarak, istek olmasa bile soketleri açık tutan bir HTTP/HTTPS agent kaydedilir. Böylece gelecekteki istekler için TCP bağlantısı yeniden kurulmadan kullanılabilir.\n\n**Not:** Bu seçenek potansiyel olarak bellek sızıntılarına neden olabilir. Lütfen [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325) kontrol edin.\n\n## 📦 Paketleyici Notları\n\n- Tüm hedefler, Modül ve CommonJS formatında ve adlandırılmış dışa aktarımlar ile dışa aktarılır\n- Hiçbir dışa aktarma, modern sözdizimi nedeniyle transpile edilmemiştir\n  - ES5 desteği için muhtemelen `ofetch`, `destr` ve `ufo` paketlerini Babel ile transpile etmeniz gerekir\n- Eski tarayıcıları desteklemek için [unfetch](https://github.com/developit/unfetch) gibi bir çözümle `fetch` globalini polyfill etmeniz gerekir\n\n## ❓ SSS\n\n**Neden dışa aktarma ismi `fetch` değil de `ofetch`?**\n\n`fetch` ile aynı ismin kullanılması kafa karıştırıcı olabilir çünkü API farklıdır, fakat yine de bir fetch olduğu için en yakın alternatifi kullandık. Yine de, `ofetch` üzerinden `{ fetch }` olarak içe aktarım yapabilirsiniz; bu, Node.js için otomatik polyfill sağlar ve diğer ortamlarda yereli kullanır.\n\n**Neden varsayılan dışa aktarma yok?**\n\nVarsayılan dışa aktarmalar, CommonJS dışa aktarmaları ile karışmaya her zaman açıktır.\n\nBu aynı zamanda, paketi bozmadan daha fazla yardımcı araç ekleyebileceğimizi ve ayrıca `ofetch` adının kullanılmasını teşvik eder.\n\n**Neden transpile edilmiyor?**\n\nKütüphaneleri transpile ederek, gereksiz yere çoğu kullanıcı için eski kodu web’e taşımış oluruz.\n\nEski kullanıcıları desteklemeniz gerekiyorsa, bu kütüphaneyi derleme hattınızda isteğe bağlı olarak transpile edebilirsiniz.\n```",
  "status": "ok"
}