{
  "id": 4,
  "origin": "```\n\n## 🕵️ Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## 🕵️ Menambahkan HTTP(S) Agent\n\nDi lingkungan Node.js (>= 18), Anda dapat menyediakan dispatcher khusus untuk mencegat permintaan dan mendukung fitur seperti Proxy dan sertifikat self-signed. Fitur ini diaktifkan oleh [undici](https://undici.nodejs.org/) yang sudah terpasang di Node.js. [baca selengkapnya](https://undici.nodejs.org/#/docs/api/Dispatcher) tentang Dispatcher API.\n\nBeberapa agent yang tersedia:\n\n- `ProxyAgent`: Kelas Proxy Agent yang mengimplementasikan Agent API. Memungkinkan koneksi melalui proxy dengan cara yang sederhana. ([dokumentasi](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: Kelas Agent yang dimock yang mengimplementasikan Agent API. Memungkinkan Anda mencegat permintaan HTTP yang dibuat melalui undici dan mengembalikan respons mock sebagai gantinya. ([dokumentasi](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent memungkinkan pengiriman permintaan ke berbagai origin yang berbeda. ([dokumentasi](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Contoh:** Atur proxy agent untuk satu permintaan:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Contoh:** Buat instance fetch kustom dengan proxy diaktifkan:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Contoh:** Atur proxy agent untuk semua permintaan:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Contoh:** Izinkan sertifikat self-signed (GUNAKAN DENGAN RISIKO ANDA SENDIRI!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Catatan: Ini membuat fetch menjadi tidak aman terhadap serangan MITM. GUNAKAN DENGAN RISIKO ANDA SENDIRI!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nPada versi Node.js yang lebih lama (<18), Anda juga dapat menggunakan `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### Dukungan `keepAlive` (hanya berlaku untuk Node < 18)\n\nDengan mengatur variabel lingkungan `FETCH_KEEP_ALIVE` ke `true`, HTTP/HTTPS agent akan didaftarkan untuk menjaga socket tetap aktif meskipun tidak ada permintaan yang sedang berjalan, sehingga dapat digunakan untuk permintaan berikutnya tanpa harus membuat koneksi TCP baru.\n\n**Catatan:** Opsi ini berpotensi menimbulkan kebocoran memori. Silakan cek [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## 📦 Catatan Bundler\n\n- Semua target diekspor dalam format Module dan CommonJS serta ekspor bernama\n- Tidak ada ekspor yang ditranspilasi demi sintaks modern\n  - Anda mungkin perlu men-transpile paket `ofetch`, `destr`, dan `ufo` dengan Babel untuk dukungan ES5\n- Anda perlu polyfill global `fetch` untuk mendukung browser lawas seperti menggunakan [unfetch](https://github.com/developit/unfetch)\n\n## ❓ FAQ\n\n**Mengapa ekspor disebut `ofetch` bukan `fetch`?**\n\nMenggunakan nama yang sama dengan `fetch` bisa membingungkan karena API-nya berbeda namun tetap merupakan fetch, sehingga digunakan alternatif nama terdekat. Namun, Anda bisa mengimpor `{ fetch }` dari `ofetch` yang otomatis polyfill untuk Node.js dan menggunakan native jika tersedia.\n\n**Mengapa tidak ada default export?**\n\nDefault export berisiko tercampur dengan ekspor CommonJS.\n\nIni juga menjamin kami bisa menambahkan lebih banyak utilitas tanpa memecah paket dan juga mendorong penggunaan nama `ofetch`.\n\n**Mengapa tidak di-transpile?**\n\nDengan men-transpile library, kita justru membawa web ke belakang dengan kode lawas yang tidak dibutuhkan oleh sebagian besar pengguna.\n\nJika Anda perlu mendukung pengguna lawas, Anda bisa men-transpile library ini secara opsional di pipeline build Anda.\n```",
  "status": "ok"
}