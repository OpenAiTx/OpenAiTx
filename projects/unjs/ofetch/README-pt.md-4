{
  "id": 4,
  "origin": "```\n\n## üïµÔ∏è Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## üì¶ Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ‚ùì FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## üïµÔ∏è Adicionando Agente HTTP(S)\n\nEm ambientes Node.js (>= 18), voc√™ pode fornecer um dispatcher personalizado para interceptar requisi√ß√µes e suportar recursos como Proxy e certificados autoassinados. Este recurso √© habilitado pelo [undici](https://undici.nodejs.org/) embutido no Node.js. [leia mais](https://undici.nodejs.org/#/docs/api/Dispatcher) sobre a API Dispatcher.\n\nAlguns agentes dispon√≠veis:\n\n- `ProxyAgent`: Uma classe de Agente Proxy que implementa a API Agent. Permite a conex√£o atrav√©s de um proxy de forma simples. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: Uma classe de Agente mockada que implementa a API Agent. Permite interceptar requisi√ß√µes HTTP feitas atrav√©s do undici e retornar respostas simuladas. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: O Agent permite o envio de requisi√ß√µes contra m√∫ltiplas origens diferentes. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Exemplo:** Definir um agente proxy para uma requisi√ß√£o:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Exemplo:** Criar uma inst√¢ncia fetch personalizada com proxy habilitado:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Exemplo:** Definir um agente proxy para todas as requisi√ß√µes:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Exemplo:** Permitir certificados autoassinados (USE POR SUA CONTA E RISCO!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Nota: Isto torna o fetch inseguro contra ataques MITM. USE POR SUA CONTA E RISCO!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nEm vers√µes antigas do Node.js (<18), voc√™ tamb√©m pode usar `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### Suporte a `keepAlive` (funciona apenas para Node < 18)\n\nDefinindo a vari√°vel de ambiente `FETCH_KEEP_ALIVE` como `true`, um agente HTTP/HTTPS ser√° registrado que mant√©m os sockets ativos mesmo quando n√£o h√° requisi√ß√µes pendentes, para que possam ser usados em requisi√ß√µes futuras sem precisar reestabelecer uma conex√£o TCP.\n\n**Nota:** Esta op√ß√£o pode potencialmente introduzir vazamentos de mem√≥ria. Por favor, confira [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## üì¶ Notas sobre Bundler\n\n- Todos os targets s√£o exportados nos formatos Module e CommonJS e com exports nomeados\n- Nenhuma exporta√ß√£o √© transpilada em prol da sintaxe moderna\n  - Provavelmente voc√™ precisar√° transpilar os pacotes `ofetch`, `destr` e `ufo` com Babel para suporte ao ES5\n- Voc√™ precisa fazer o polyfill do global `fetch` para suportar navegadores antigos, como usando [unfetch](https://github.com/developit/unfetch)\n\n## ‚ùì FAQ\n\n**Por que o export se chama `ofetch` em vez de `fetch`?**\n\nUsar o mesmo nome `fetch` pode ser confuso, j√° que a API √© diferente, mas ainda assim √© um fetch, ent√£o usamos a alternativa mais pr√≥xima poss√≠vel. Por√©m, voc√™ pode importar `{ fetch }` de `ofetch`, que √© auto-polyfill para Node.js e usa o nativo caso contr√°rio.\n\n**Por que n√£o h√° exporta√ß√£o default?**\n\nExports default s√£o sempre arriscados de serem misturados com exports CommonJS.\n\nIsso tamb√©m garante que possamos introduzir mais utilit√°rios sem quebrar o pacote e tamb√©m encoraja o uso do nome `ofetch`.\n\n**Por que n√£o √© transpilado?**\n\nAo transpilar bibliotecas, empurramos a web para tr√°s com c√≥digo legado que n√£o √© necess√°rio para a maioria dos usu√°rios.\n\nSe voc√™ precisa dar suporte a usu√°rios legados, pode, opcionalmente, transpilar a biblioteca no seu pipeline de build.\n```",
  "status": "ok"
}