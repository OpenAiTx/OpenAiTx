{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "```markdown\nawait ofetch(\"/url\").catch((error) => error.data);\n```\n\n要绕过状态错误捕获，可以设置 `ignoreResponseError` 选项：\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ 自动重试\n\n`ofetch` 会在发生错误时自动重试请求，并且如果响应状态码包含在 `retryStatusCodes` 列表中：\n\n**重试状态码：**\n\n- `408` - 请求超时\n- `409` - 冲突\n- `425` - 过早 ([实验性](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - 请求过多\n- `500` - 服务器内部错误\n- `502` - 错误网关\n- `503` - 服务不可用\n- `504` - 网关超时\n\n你可以通过 `retry` 和 `retryDelay` 选项来指定重试次数和间隔，也可以通过 `retryStatusCodes` 选项传递自定义状态码数组。\n\n`retry` 的默认值为重试 `1` 次，除了 `POST`、`PUT`、`PATCH` 和 `DELETE` 方法，`ofetch` 默认不会重试这些方法以避免产生副作用。如果你为 `retry` 设置了自定义值，则**所有请求都会重试**。\n\n`retryDelay` 的默认值为 `0` 毫秒。\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // 毫秒\n  retryStatusCodes: [ 404, 500 ], // 需要重试的响应状态码\n});\n```\n\n## ✔️ 超时\n\n你可以指定以毫秒为单位的 `timeout`，在超时后自动中止请求（默认禁用）。\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // 3秒后超时\n});\n```\n\n## ✔️ 类型友好\n\n响应结果可以支持类型推断：\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// 在 article.id 上有自动补全\n```\n\n## ✔️ 添加 `baseURL`\n\n通过使用 `baseURL` 选项，`ofetch` 会在基础 URL 上自动拼接斜杠和查询参数，处理方式使用 [ufo](https://github.com/unjs/ufo)：\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ 添加查询参数\n\n通过使用 `query` 选项（或其别名 `params`），`ofetch` 会在请求地址中保留原有查询参数并添加新的查询参数，底层使用 [ufo](https://github.com/unjs/ufo)：\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ 拦截器\n\n可以提供异步拦截器来钩入 `ofetch` 调用的生命周期事件。\n\n你可能希望使用 `ofetch.create` 来设置共享拦截器。\n\n### `onRequest({ request, options })`\n\n当 `ofetch` 被调用时，`onRequest` 会立即被调用，允许你修改选项或进行简单日志记录。\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // 日志请求\n    console.log(\"[fetch request]\", request, options);\n\n    // 向查询参数中添加 `?t=1640125211170`\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n当 fetch 请求失败时，会调用 `onRequestError`。\n```",
  "status": "ok"
}