{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nUma API fetch melhor. Funciona em node, navegador e workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ In√≠cio R√°pido\n\nInstale:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImporte:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Funciona com Node.js\n\nUsamos [exports condicionais](https://nodejs.org/api/packages.html#packages_conditional_exports) para detectar o Node.js\ne usar automaticamente [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). Se `globalThis.fetch` estiver dispon√≠vel, ser√° usado em vez disso. Para aproveitar a API experimental fetch nativa do Node.js 17.5.0, use a flag [`--experimental-fetch`](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Fazendo Parsing da Resposta\n\n`ofetch` ir√° analisar inteligentemente valores JSON e nativos usando [destr](https://github.com/unjs/destr), voltando para texto caso n√£o consiga analisar.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nPara tipos de conte√∫do bin√°rio, `ofetch` ir√° retornar um objeto `Blob`.\n\nVoc√™ pode opcionalmente fornecer um parser diferente de `destr`, ou especificar `blob`, `arrayBuffer` ou `text` para for√ßar o parsing do corpo com o respectivo m√©todo do `FetchResponse`.\n\n```js\n// Usar JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Retornar texto como est√°\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Obter a vers√£o blob da resposta\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è Corpo JSON\n\nSe um objeto ou uma classe com m√©todo `.toJSON()` for passado para a op√ß√£o `body`, `ofetch` ir√° automaticamente convert√™-lo em string.\n\n`ofetch` utiliza `JSON.stringify()` para converter o objeto passado. Classes sem m√©todo `.toJSON()` precisam ser convertidas para string antecipadamente antes de serem passadas para a op√ß√£o `body`.\n\nPara m√©todos de requisi√ß√£o `PUT`, `PATCH` e `POST`, quando um corpo string ou objeto √© definido, `ofetch` adiciona os headers padr√£o `content-type: \"application/json\"` e `accept: \"application/json\"` (que voc√™ pode sempre sobrescrever).\n\nAdicionalmente, `ofetch` suporta respostas bin√°rias com `Buffer`, `ReadableStream`, `Stream` e [tipos de corpo compat√≠veis](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` ir√° automaticamente definir a op√ß√£o `duplex: \"half\"` para suporte a streaming!\n\n**Exemplo:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Tratamento de Erros\n\n`ofetch` lan√ßa automaticamente erros quando `response.ok` √© `false`, com uma mensagem de erro amig√°vel e stack compacta (ocultando detalhes internos).\n\nUm corpo de erro j√° analisado est√° dispon√≠vel em `error.data`. Voc√™ tamb√©m pode usar o tipo `FetchError`.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nPara capturar a resposta de erro:\n\n```ts",
  "status": "ok"
}