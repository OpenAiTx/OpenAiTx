{
  "id": 4,
  "origin": "```\n\n## üïµÔ∏è Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## üì¶ Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ‚ùì FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## üïµÔ∏è Dodawanie agenta HTTP(S)\n\nW ≈õrodowiskach Node.js (>= 18) mo≈ºesz dostarczyƒá w≈Çasny dispatcher, aby przechwytywaƒá ≈ºƒÖdania i obs≈Çugiwaƒá funkcje takie jak Proxy oraz certyfikaty samopodpisane. Funkcja ta jest dostƒôpna dziƒôki [undici](https://undici.nodejs.org/) wbudowanemu w Node.js. [Dowiedz siƒô wiƒôcej](https://undici.nodejs.org/#/docs/api/Dispatcher) o API Dispatcher.\n\nDostƒôpne agenty:\n\n- `ProxyAgent`: Klasa Proxy Agent implementujƒÖca API Agenta. Umo≈ºliwia ≈Çatwe po≈ÇƒÖczenie przez proxy. ([dokumentacja](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: Zmockowana klasa Agenta implementujƒÖca API Agenta. Pozwala przechwytywaƒá ≈ºƒÖdania HTTP wykonywane przez undici i zwracaƒá zamiast nich odpowiedzi mockowane. ([dokumentacja](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent pozwalajƒÖcy na wysy≈Çanie ≈ºƒÖda≈Ñ do wielu r√≥≈ºnych ≈∫r√≥de≈Ç. ([dokumentacja](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Przyk≈Çad:** Ustawienie agenta proxy dla jednego ≈ºƒÖdania:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Przyk≈Çad:** Utworzenie w≈Çasnej instancji fetch z w≈ÇƒÖczonym proxy:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Przyk≈Çad:** Ustawienie agenta proxy dla wszystkich ≈ºƒÖda≈Ñ:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Przyk≈Çad:** Zezwolenie na certyfikaty samopodpisane (U≈ªYWAJ NA W≈ÅASNƒÑ ODPOWIEDZIALNO≈öƒÜ!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Uwaga: To sprawia, ≈ºe fetch jest niebezpieczny wobec atak√≥w MITM. U≈ªYWAJ NA W≈ÅASNƒÑ ODPOWIEDZIALNO≈öƒÜ!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nW starszych wersjach Node.js (<18), mo≈ºesz tak≈ºe u≈ºyƒá `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### Wsparcie `keepAlive` (dzia≈Ça tylko dla Node < 18)\n\nUstawiajƒÖc zmiennƒÖ ≈õrodowiskowƒÖ `FETCH_KEEP_ALIVE` na `true`, zostanie zarejestrowany agent HTTP/HTTPS, kt√≥ry utrzymuje otwarte po≈ÇƒÖczenia, nawet je≈õli nie ma ≈ºadnych oczekujƒÖcych ≈ºƒÖda≈Ñ, dziƒôki czemu mogƒÖ byƒá u≈ºyte do przysz≈Çych ≈ºƒÖda≈Ñ bez konieczno≈õci ponownego ustanawiania po≈ÇƒÖczenia TCP.\n\n**Uwaga:** Ta opcja potencjalnie mo≈ºe powodowaƒá wycieki pamiƒôci. Proszƒô sprawdziƒá [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## üì¶ Uwagi dla bundler√≥w\n\n- Wszystkie cele sƒÖ eksportowane w formacie Module i CommonJS oraz jako eksporty nazwane\n- ≈ªaden eksport nie jest transpilowany dla zachowania nowoczesnej sk≈Çadni\n  - Prawdopodobnie musisz transpilowaƒá pakiety `ofetch`, `destr` i `ufo` za pomocƒÖ Babel, aby uzyskaƒá wsparcie dla ES5\n- Musisz dodaƒá polyfill dla globalnego `fetch`, aby wspieraƒá starsze przeglƒÖdarki, np. u≈ºywajƒÖc [unfetch](https://github.com/developit/unfetch)\n\n## ‚ùì FAQ\n\n**Dlaczego eksport nazywa siƒô `ofetch`, a nie `fetch`?**\n\nU≈ºycie tej samej nazwy co `fetch` mo≈ºe byƒá mylƒÖce, poniewa≈º API jest inne, ale nadal jest to fetch, wiƒôc u≈ºyto najbli≈ºszej mo≈ºliwej alternatywy. Mo≈ºesz jednak zaimportowaƒá `{ fetch }` z `ofetch`, co automatycznie zapewnia polyfill dla Node.js, a w innym przypadku u≈ºywa natywnego fetch.\n\n**Dlaczego nie ma eksportu domy≈õlnego?**\n\nEksporty domy≈õlne zawsze niosƒÖ ryzyko pomylenia z eksportami CommonJS.\n\nTo r√≥wnie≈º zapewnia mo≈ºliwo≈õƒá dodania kolejnych narzƒôdzi bez psucia paczki, a tak≈ºe zachƒôca do u≈ºywania nazwy `ofetch`.\n\n**Dlaczego nie jest transpilowany?**\n\nTranspilowanie bibliotek cofa rozw√≥j sieci poprzez wprowadzanie zbƒôdnego, przestarza≈Çego kodu, kt√≥ry jest niepotrzebny wiƒôkszo≈õci u≈ºytkownik√≥w.\n\nJe≈õli musisz wspieraƒá starszych u≈ºytkownik√≥w, mo≈ºesz opcjonalnie transpilowaƒá bibliotekƒô w swoim pipeline budowania.\n```",
  "status": "ok"
}