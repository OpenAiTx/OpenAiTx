{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "```ts\nawait ofetch(\"/url\").catch((error) => error.data);\n```\n\nOm het afvangen van statusfouten te omzeilen kun je de optie `ignoreResponseError` instellen:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Automatisch Opnieuw Proberen\n\n`ofetch` probeert automatisch het verzoek opnieuw als er een fout optreedt en als de statuscode van het antwoord is opgenomen in de lijst `retryStatusCodes`:\n\n**Statuscodes voor opnieuw proberen:**\n\n- `408` - Request Timeout (Verzoek Time-out)\n- `409` - Conflict (Conflict)\n- `425` - Too Early ([Experimenteel](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests (Te veel verzoeken)\n- `500` - Internal Server Error (Interne serverfout)\n- `502` - Bad Gateway (Ongeldige gateway)\n- `503` - Service Unavailable (Dienst niet beschikbaar)\n- `504` - Gateway Timeout (Gateway time-out)\n\nJe kunt het aantal pogingen en de vertraging ertussen specificeren met de opties `retry` en `retryDelay`, en ook een aangepaste array van codes meegeven via de optie `retryStatusCodes`.\n\nDe standaardwaarde voor `retry` is `1` poging, behalve voor de methoden `POST`, `PUT`, `PATCH` en `DELETE`, waarbij `ofetch` standaard niet opnieuw probeert om bijwerkingen te voorkomen. Als je een aangepaste waarde instelt voor `retry`, zal deze **altijd opnieuw proberen** voor alle verzoeken.\n\nDe standaardwaarde voor `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // statuscodes om opnieuw te proberen\n});\n```\n\n## ✔️ Timeout\n\nJe kunt `timeout` in milliseconden opgeven om een verzoek automatisch af te breken na een timeout (standaard is dit uitgeschakeld).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Time-out na 3 seconden\n});\n```\n\n## ✔️ Typevriendelijk\n\nHet antwoord kan type-ondersteund zijn:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto-aanvullen werkt met article.id\n```\n\n## ✔️ Toevoegen van `baseURL`\n\nDoor de optie `baseURL` te gebruiken, voegt `ofetch` deze toe voor/na schuine strepen en query-zoekparameters voor baseURL met behulp van [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Toevoegen van Query Zoekparameters\n\nDoor de optie `query` (of `params` als alias) te gebruiken, voegt `ofetch` zoekparameters toe aan de URL waarbij de query in het verzoek zelf behouden blijft met behulp van [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nHet is mogelijk om asynchrone interceptors te leveren om in te haken op de levenscyclusgebeurtenissen van een `ofetch`-aanroep.\n\nJe kunt `ofetch.create` gebruiken om gedeelde interceptors in te stellen.\n\n### `onRequest({ request, options })`\n\n`onRequest` wordt aangeroepen zodra `ofetch` wordt aangeroepen, zodat je opties kunt wijzigen of eenvoudige logging kunt uitvoeren.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log verzoek\n    console.log(\"[fetch request]\", request, options);\n\n    // Voeg `?t=1640125211170` toe aan de zoekparameters\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` wordt aangeroepen wanneer het fetch-verzoek mislukt.\n```",
  "status": "ok"
}