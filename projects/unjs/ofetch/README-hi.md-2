{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "```ts\nawait ofetch(\"/url\").catch((error) => error.data);\n```\n\nस्थिति त्रुटि को पकड़ने को बायपास करने के लिए आप `ignoreResponseError` विकल्प सेट कर सकते हैं:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ ऑटो रिट्राई\n\n`ofetch` स्वचालित रूप से अनुरोध को पुनः प्रयास करता है यदि कोई त्रुटि होती है और यदि प्रतिक्रिया स्थिति कोड `retryStatusCodes` सूची में शामिल है:\n\n**रिट्राई स्थिति कोड्स:**\n\n- `408` - अनुरोध का समय समाप्त\n- `409` - टकराव\n- `425` - बहुत जल्दी ([प्रयोगात्मक](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - बहुत अधिक अनुरोध\n- `500` - आंतरिक सर्वर त्रुटि\n- `502` - खराब गेटवे\n- `503` - सेवा अनुपलब्ध\n- `504` - गेटवे टाइमआउट\n\nआप `retry` और `retryDelay` विकल्पों का उपयोग करके पुनः प्रयास की संख्या और उनके बीच की देरी निर्दिष्ट कर सकते हैं और साथ ही कस्टम कोड्स की एक एरे `retryStatusCodes` विकल्प द्वारा भेज सकते हैं।\n\n`retry` के लिए डिफ़ॉल्ट मान `1` पुनः प्रयास है, सिवाय `POST`, `PUT`, `PATCH`, और `DELETE` विधियों के, जहाँ `ofetch` डिफ़ॉल्ट रूप से पुनः प्रयास नहीं करता ताकि दुष्प्रभाव से बचा जा सके। यदि आप `retry` के लिए एक कस्टम मान सेट करते हैं तो यह **हर अनुरोध के लिए हमेशा पुनः प्रयास करेगा**।\n\n`retryDelay` के लिए डिफ़ॉल्ट मान `0` मिलीसेकंड है।\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // मिलीसेकंड में देरी\n  retryStatusCodes: [ 404, 500 ], // पुनः प्रयास के लिए प्रतिक्रिया स्थिति कोड्स\n});\n```\n\n## ✔️ टाइमआउट\n\nआप मिलीसेकंड में `timeout` निर्दिष्ट कर सकते हैं ताकि एक निश्चित समय के बाद अनुरोध अपने आप रद्द हो जाए (डिफ़ॉल्ट रूप से अक्षम है)।\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // 3 सेकंड के बाद टाइमआउट\n});\n```\n\n## ✔️ टाइप फ्रेंडली\n\nप्रतिक्रिया को टाइप सहायता मिल सकती है:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// article.id के साथ ऑटो कंप्लीट काम करता है\n```\n\n## ✔️ `baseURL` जोड़ना\n\n`baseURL` विकल्प का उपयोग करके, `ofetch` [ufo](https://github.com/unjs/ufo) का उपयोग करके बेसयूआरएल के लिए ट्रेलिंग/लीडिंग स्लैश और क्वेरी सर्च पैरामीटर्स को जोड़ता है:\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ क्वेरी सर्च पैरामीटर्स जोड़ना\n\n`query` विकल्प (या उपनाम के रूप में `params`) का उपयोग करके, `ofetch` अनुरोध में क्वेरी को सुरक्षित रखते हुए URL में क्वेरी सर्च पैरामीटर्स जोड़ता है [ufo](https://github.com/unjs/ufo) के माध्यम से:\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ इंटरसेप्टर्स\n\n`ofetch` कॉल के लाइफसाइकिल इवेंट्स में हुक करने के लिए async इंटरसेप्टर्स प्रदान करना संभव है।\n\nआप साझा इंटरसेप्टर्स सेट करने के लिए `ofetch.create` का उपयोग करना चाह सकते हैं।\n\n### `onRequest({ request, options })`\n\n`onRequest` जैसे ही `ofetch` कॉल किया जाता है, बुलाया जाता है, जिससे आप विकल्पों को संशोधित कर सकते हैं या साधारण लॉगिंग कर सकते हैं।\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // अनुरोध को लॉग करें\n    console.log(\"[fetch request]\", request, options);\n\n    // क्वेरी सर्च पैरामीटर्स में `?t=1640125211170` जोड़ें\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\nजब fetch अनुरोध विफल हो जाता है, तब `onRequestError` कॉल किया जाएगा।\n```",
  "status": "ok"
}