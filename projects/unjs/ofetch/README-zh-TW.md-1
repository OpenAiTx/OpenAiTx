{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## 🚀 Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ✔️ Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ✔️ Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ✔️ JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ✔️ Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\n一個更優秀的 fetch API。可在 Node、瀏覽器與 workers 環境運行。\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## 🚀 快速開始\n\n安裝：\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\n匯入：\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ✔️ 支援 Node.js\n\n我們使用[條件匯出（conditional exports）](https://nodejs.org/api/packages.html#packages_conditional_exports)來偵測 Node.js\n並自動使用 [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native)。如果 `globalThis.fetch` 可用，則會優先使用。如需利用 Node.js 17.5.0 實驗性的原生 fetch API，請使用 [`--experimental-fetch` 旗標](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch)。\n\n## ✔️ 解析回應\n\n`ofetch` 會智能地使用 [destr](https://github.com/unjs/destr) 解析 JSON 與原生值，若解析失敗則回傳純文字。\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\n針對二進位內容類型，`ofetch` 會回傳一個 `Blob` 物件。\n\n你也可以選擇提供不同於 `destr` 的解析器，或指定 `blob`、`arrayBuffer`、或 `text`，強制以對應的 `FetchResponse` 方法解析回應主體。\n\n```js\n// 使用 JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// 直接回傳文字內容\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// 取得回應的 blob 版本\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ✔️ JSON 主體\n\n若在 `body` 選項中傳入物件或帶有 `.toJSON()` 方法的類別，`ofetch` 會自動將其字串化。\n\n`ofetch` 會使用 `JSON.stringify()` 來轉換所傳入的物件。沒有 `.toJSON()` 方法的類別需在傳入 `body` 前先轉為字串。\n\n對於 `PUT`、`PATCH` 與 `POST` 請求方法，當設定字串或物件主體時，`ofetch` 會自動添加預設的 `content-type: \"application/json\"` 和 `accept: \"application/json\"` 標頭（你也可以自行覆蓋）。\n\n此外，`ofetch` 支援以 `Buffer`、`ReadableStream`、`Stream` 及[相容主體類型](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body)進行二進位回應。`ofetch` 會自動設定 `duplex: \"half\"` 選項以支援串流！\n\n**範例：**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ✔️ 錯誤處理\n\n當 `response.ok` 為 `false` 時，`ofetch` 會自動拋出錯誤，並帶有友善的錯誤訊息與精簡堆疊（隱藏內部細節）。\n\n已解析的錯誤主體可由 `error.data` 取得。你也可以使用 `FetchError` 類型。\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\n捕捉錯誤回應請參考：",
  "status": "ok"
}