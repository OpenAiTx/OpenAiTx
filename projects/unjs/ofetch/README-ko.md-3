{
  "id": 3,
  "origin": "```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // Log error\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse` will be called after `fetch` call and parsing body.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // Log response\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError` is the same as `onResponse` but will be called when fetch happens but `response.ok` is not `true`.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // Log error\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n### Passing array of interceptors\n\nIf necessary, it's also possible to pass an array of function that will be called sequentially.\n\n```js\nawait ofetch(\"/api\", {\n  onRequest: [\n    () => {\n      /* Do something */\n    },\n    () => {\n      /* Do something else */\n    },\n  ],\n});\n```\n\n## ✔️ Create fetch with default options\n\nThis utility is useful if you need to use common options across several fetch calls.\n\n**Note:** Defaults will be cloned at one level and inherited. Be careful about nested options like `headers`.\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // Same as ofetch('/test', { baseURL: '/api' })\n```\n\n## 💡 Adding headers\n\nBy using `headers` option, `ofetch` adds extra headers in addition to the request default headers:\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## 🍣 Access to Raw Response\n\nIf you need to access raw response (for headers, etc), you can use `ofetch.raw`:\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## 🌿 Using Native Fetch\n\nAs a shortcut, you can use `ofetch.native` that provides native `fetch` API\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());",
  "origin_sha": "wuvdKqsuOA4W95Ll0BO8zm8DheYXXrOsgdngtydl1A0=",
  "translate": "```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // 오류 로그 기록\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse`는 `fetch` 호출과 본문 파싱 후에 호출됩니다.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // 응답 로그 기록\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError`는 `onResponse`와 동일하지만 fetch가 발생했지만 `response.ok`가 `true`가 아닐 때 호출됩니다.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // 오류 로그 기록\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n### 인터셉터 배열 전달\n\n필요한 경우, 순차적으로 호출될 함수 배열을 전달할 수도 있습니다.\n\n```js\nawait ofetch(\"/api\", {\n  onRequest: [\n    () => {\n      /* 무언가를 수행 */\n    },\n    () => {\n      /* 다른 무언가를 수행 */\n    },\n  ],\n});\n```\n\n## ✔️ 기본 옵션으로 fetch 생성\n\n여러 fetch 호출에서 공통 옵션을 사용해야 할 때 이 유틸리티가 유용합니다.\n\n**참고:** 기본값은 한 단계에서 복제되어 상속됩니다. `headers`와 같은 중첩 옵션에 주의하세요.\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // ofetch('/test', { baseURL: '/api' })와 동일\n```\n\n## 💡 헤더 추가하기\n\n`headers` 옵션을 사용하면, `ofetch`는 요청 기본 헤더 외에 추가 헤더를 더합니다:\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## 🍣 원시 응답에 접근\n\n원시 응답(헤더 등)에 접근해야 할 경우, `ofetch.raw`를 사용할 수 있습니다:\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## 🌿 네이티브 Fetch 사용하기\n\n단축키로, 네이티브 `fetch` API를 제공하는 `ofetch.native`를 사용할 수 있습니다.\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());\n```",
  "status": "ok"
}