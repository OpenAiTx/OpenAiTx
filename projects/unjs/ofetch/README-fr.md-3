{
  "id": 3,
  "origin": "```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // Log error\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse` will be called after `fetch` call and parsing body.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // Log response\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError` is the same as `onResponse` but will be called when fetch happens but `response.ok` is not `true`.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // Log error\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n### Passing array of interceptors\n\nIf necessary, it's also possible to pass an array of function that will be called sequentially.\n\n```js\nawait ofetch(\"/api\", {\n  onRequest: [\n    () => {\n      /* Do something */\n    },\n    () => {\n      /* Do something else */\n    },\n  ],\n});\n```\n\n## ✔️ Create fetch with default options\n\nThis utility is useful if you need to use common options across several fetch calls.\n\n**Note:** Defaults will be cloned at one level and inherited. Be careful about nested options like `headers`.\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // Same as ofetch('/test', { baseURL: '/api' })\n```\n\n## 💡 Adding headers\n\nBy using `headers` option, `ofetch` adds extra headers in addition to the request default headers:\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## 🍣 Access to Raw Response\n\nIf you need to access raw response (for headers, etc), you can use `ofetch.raw`:\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## 🌿 Using Native Fetch\n\nAs a shortcut, you can use `ofetch.native` that provides native `fetch` API\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());",
  "origin_sha": "wuvdKqsuOA4W95Ll0BO8zm8DheYXXrOsgdngtydl1A0=",
  "translate": "```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // Journaliser l'erreur\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse` sera appelé après l'appel `fetch` et l'analyse du corps.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // Journaliser la réponse\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError` fonctionne comme `onResponse` mais sera appelé lorsque le fetch a lieu mais que `response.ok` n'est pas `true`.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // Journaliser l'erreur\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n### Passer un tableau d'intercepteurs\n\nSi nécessaire, il est également possible de passer un tableau de fonctions qui seront appelées séquentiellement.\n\n```js\nawait ofetch(\"/api\", {\n  onRequest: [\n    () => {\n      /* Faire quelque chose */\n    },\n    () => {\n      /* Faire autre chose */\n    },\n  ],\n});\n```\n\n## ✔️ Créer un fetch avec des options par défaut\n\nCet utilitaire est utile si vous avez besoin d'utiliser des options communes pour plusieurs appels fetch.\n\n**Note :** Les valeurs par défaut seront clonées à un niveau et héritées. Soyez prudent avec les options imbriquées comme `headers`.\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // Équivaut à ofetch('/test', { baseURL: '/api' })\n```\n\n## 💡 Ajouter des en-têtes\n\nEn utilisant l'option `headers`, `ofetch` ajoute des en-têtes supplémentaires en plus des en-têtes par défaut de la requête :\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## 🍣 Accès à la réponse brute\n\nSi vous avez besoin d'accéder à la réponse brute (pour les en-têtes, etc.), vous pouvez utiliser `ofetch.raw` :\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## 🌿 Utiliser le Fetch natif\n\nEn raccourci, vous pouvez utiliser `ofetch.native` qui fournit l'API native `fetch`\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());\n```",
  "status": "ok"
}