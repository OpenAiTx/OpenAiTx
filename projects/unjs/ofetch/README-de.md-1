{
  "id": 1,
  "origin": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser, and workers.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n## ‚úîÔ∏è Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to the text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than `destr`, or specify `blob`, `arrayBuffer`, or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). `ofetch` will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Handling Errors\n\n`ofetch` Automatically throws errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nA parsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts",
  "origin_sha": "7ZgVRDjscms2MJD1r7evPUo8J2Uh+wcg5EpARFSQNtI=",
  "translate": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nEine bessere Fetch-API. Funktioniert in Node, Browser und Workern.\n\n<details>\n  <summary>Spoiler</summary>\n  <img src=\"https://media.giphy.com/media/Dn1QRA9hqMcoMz9zVZ/giphy.gif\">\n</details>\n\n## üöÄ Schnellstart\n\nInstallation:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImportieren:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Funktioniert mit Node.js\n\nWir verwenden [bedingte Exporte](https://nodejs.org/api/packages.html#packages_conditional_exports), um Node.js zu erkennen\nund nutzen automatisch [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). Falls `globalThis.fetch` verf√ºgbar ist, wird dieses stattdessen verwendet. Um die experimentelle native Fetch-API von Node.js 17.5.0 zu verwenden, kann das Flag [`--experimental-fetch`](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch) genutzt werden.\n\n## ‚úîÔ∏è Antwort parsen\n\n`ofetch` parst JSON- und native Werte intelligent mit [destr](https://github.com/unjs/destr) und greift auf Text zur√ºck, falls das Parsen fehlschl√§gt.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nF√ºr bin√§re Content-Typen gibt `ofetch` stattdessen ein `Blob`-Objekt zur√ºck.\n\nOptional kann ein anderer Parser als `destr` angegeben werden oder mit `blob`, `arrayBuffer` oder `text` das Parsen √ºber die jeweilige `FetchResponse`-Methode erzwungen werden.\n\n```js\n// Verwende JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Gibt den Text unver√§ndert zur√ºck\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Hole die Blob-Version der Antwort\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\nWenn ein Objekt oder eine Klasse mit einer `.toJSON()`-Methode an die Option `body` √ºbergeben wird, wird dieses von `ofetch` automatisch in einen String umgewandelt.\n\n`ofetch` verwendet `JSON.stringify()`, um das √ºbergebene Objekt zu konvertieren. Klassen ohne `.toJSON()`-Methode m√ºssen vorab in einen String umgewandelt werden, bevor sie an die Option `body` √ºbergeben werden.\n\nBei den Methoden `PUT`, `PATCH` und `POST` f√ºgt `ofetch` beim Setzen eines String- oder Objekt-Bodys die Standard-Header `content-type: \"application/json\"` und `accept: \"application/json\"` hinzu (die jederzeit √ºberschrieben werden k√∂nnen).\n\nZus√§tzlich unterst√ºtzt `ofetch` bin√§re Antworten mit `Buffer`, `ReadableStream`, `Stream` und [kompatiblen Body-Typen](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). F√ºr Streaming wird automatisch die Option `duplex: \"half\"` gesetzt!\n\n**Beispiel:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Fehlerbehandlung\n\n`ofetch` wirft automatisch Fehler, wenn `response.ok` `false` ist, mit einer verst√§ndlichen Fehlermeldung und kompaktem Stack (interne Details werden ausgeblendet).\n\nEin geparster Fehler-Body ist mit `error.data` verf√ºgbar. Es kann auch der Typ `FetchError` verwendet werden.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nUm Fehlerantworten abzufangen:\n\n```ts",
  "status": "ok"
}