{
  "id": 4,
  "origin": "```\n\n## üïµÔ∏è Adding HTTP(S) Agent\n\nIn Node.js (>= 18) environments, you can provide a custom dispatcher to intercept requests and support features such as Proxy and self-signed certificates. This feature is enabled by [undici](https://undici.nodejs.org/) built-in Node.js. [read more](https://undici.nodejs.org/#/docs/api/Dispatcher) about the Dispatcher API.\n\nSome available agents:\n\n- `ProxyAgent`: A Proxy Agent class that implements the Agent API. It allows the connection through a proxy in a simple way. ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent allows dispatching requests against multiple different origins. ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**Example:** Set a proxy agent for one request:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**Example:** Create a custom fetch instance that has proxy enabled:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**Example:** Set a proxy agent for all requests:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**Example:** Allow self-signed certificates (USE AT YOUR OWN RISK!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// Note: This makes fetch unsecure against MITM attacks. USE AT YOUR OWN RISK!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\nOn older Node.js version (<18), you might also use use `agent`:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` support (only works for Node < 18)\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## üì¶ Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for the sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr`, and `ufo` packages with Babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ‚ùì FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import `{ fetch }` from `ofetch` which is auto-polyfill for Node.js and using native otherwise.\n\n**Why not have default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n",
  "origin_sha": "aERgTRlscCw9FINz3st04QU8LoGdZrVhR2FMqnTr5aI=",
  "translate": "```\n\n## üïµÔ∏è HTTP(S) ‡§è‡§ú‡•á‡§Ç‡§ü ‡§ú‡•ã‡§°‡§º‡§®‡§æ\n\nNode.js (>= 18) ‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£‡•ã‡§Ç ‡§Æ‡•á‡§Ç, ‡§Ü‡§™ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß‡•ã‡§Ç ‡§ï‡•ã ‡§á‡§Ç‡§ü‡§∞‡§∏‡•á‡§™‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§î‡§∞ Proxy ‡§§‡§•‡§æ ‡§∏‡•ç‡§µ‡§Ø‡§Ç-‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞‡§ø‡§§ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§ú‡•à‡§∏‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§°‡§ø‡§∏‡•ç‡§™‡•à‡§ö‡§∞ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ø‡§π ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ [undici](https://undici.nodejs.org/) ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ Node.js ‡§Æ‡•á‡§Ç ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§®‡§ø‡§π‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§π‡•à‡•§ ‡§°‡§ø‡§∏‡•ç‡§™‡•à‡§ö‡§∞ API ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç [‡§Ø‡§π‡§æ‡§Å ‡§™‡§¢‡§º‡•á‡§Ç](https://undici.nodejs.org/#/docs/api/Dispatcher)‡•§\n\n‡§ï‡•Å‡§õ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§è‡§ú‡•á‡§Ç‡§ü‡•ç‡§∏:\n\n- `ProxyAgent`: ‡§è‡§ï Proxy Agent ‡§ï‡•ç‡§≤‡§æ‡§∏ ‡§ú‡•ã Agent API ‡§ï‡•ã ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ø‡§π ‡§∏‡§∞‡§≤ ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§è‡§ï ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§§‡•Ä ‡§π‡•à‡•§ ([docs](https://undici.nodejs.org/#/docs/api/ProxyAgent))\n- `MockAgent`: ‡§è‡§ï mocked Agent ‡§ï‡•ç‡§≤‡§æ‡§∏ ‡§ú‡•ã Agent API ‡§ï‡•ã ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ø‡§π undici ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§ï‡§ø‡§è ‡§ó‡§è HTTP ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß‡•ã‡§Ç ‡§ï‡•ã ‡§á‡§Ç‡§ü‡§∞‡§∏‡•á‡§™‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§î‡§∞ mocked responses ‡§≤‡•å‡§ü‡§æ‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§§‡•Ä ‡§π‡•à‡•§ ([docs](https://undici.nodejs.org/#/docs/api/MockAgent))\n- `Agent`: Agent ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§Æ‡•Ç‡§≤ (origins) ‡§ï‡•á ‡§ñ‡§ø‡§≤‡§æ‡§´ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§ ([docs](https://undici.nodejs.org/#/docs/api/Agent))\n\n**‡§â‡§¶‡§æ‡§π‡§∞‡§£:** ‡§è‡§ï ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§è‡§ú‡•á‡§Ç‡§ü ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç:\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst data = await ofetch(\"https://icanhazip.com\", { dispatcher: proxyAgent });\n```\n\n**‡§â‡§¶‡§æ‡§π‡§∞‡§£:** ‡§è‡§ï ‡§ï‡§∏‡•ç‡§ü‡§Æ fetch ‡§á‡§Ç‡§∏‡•ç‡§ü‡•á‡§Ç‡§∏ ‡§¨‡§®‡§æ‡§è‡§Ç ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§π‡•ã:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nconst fetchWithProxy = ofetch.create({ dispatcher: proxyAgent });\n\nconst data = await fetchWithProxy(\"https://icanhazip.com\");\n```\n\n**‡§â‡§¶‡§æ‡§π‡§∞‡§£:** ‡§∏‡§≠‡•Ä ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§è‡§ú‡•á‡§Ç‡§ü ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç:\n\n```ts\nimport { ProxyAgent, setGlobalDispatcher } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\nconst proxyAgent = new ProxyAgent(\"http://localhost:3128\");\nsetGlobalDispatcher(proxyAgent);\n\nconst data = await ofetch(\"https://icanhazip.com\");\n```\n\n**‡§â‡§¶‡§æ‡§π‡§∞‡§£:** ‡§∏‡•ç‡§µ‡§Ø‡§Ç-‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞‡§ø‡§§ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç (‡§Ö‡§™‡§®‡•á ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§™‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç!)\n\n```ts\nimport { ProxyAgent } from \"undici\";\nimport { ofetch } from \"ofetch\";\n\n// ‡§®‡•ã‡§ü: ‡§á‡§∏‡§∏‡•á fetch MITM ‡§π‡§Æ‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§ñ‡§ø‡§≤‡§æ‡§´ ‡§Ö‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§Ö‡§™‡§®‡•á ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§™‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç!\nconst unsecureProxyAgent = new ProxyAgent({ requestTls: { rejectUnauthorized: false } });\nconst unsecureFetch = ofetch.create({ dispatcher: unsecureProxyAgent });\n\nconst data = await unsecureFetch(\"https://www.squid-cache.org/\");\n```\n\n‡§™‡•Å‡§∞‡§æ‡§®‡•á Node.js ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ (<18) ‡§™‡§∞, ‡§Ü‡§™ `agent` ‡§ï‡§æ ‡§≠‡•Ä ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:\n\n```ts\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n### `keepAlive` ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® (‡§ï‡•á‡§µ‡§≤ Node < 18 ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à)\n\n`FETCH_KEEP_ALIVE` ‡§è‡§®‡§µ‡§æ‡§Ø‡§∞‡§®‡§Æ‡•á‡§Ç‡§ü ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§ï‡•ã `true` ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§è‡§ï HTTP/HTTPS ‡§è‡§ú‡•á‡§Ç‡§ü ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞‡•ç‡§° ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ ‡§ú‡•ã ‡§∏‡•â‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§§‡§¨ ‡§≠‡•Ä ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§ó‡§æ ‡§ú‡§¨ ‡§ï‡•ã‡§à ‡§™‡•á‡§Ç‡§°‡§ø‡§Ç‡§ó ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§® ‡§π‡•ã, ‡§§‡§æ‡§ï‡§ø ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§®‡§ï‡§æ ‡§™‡•Å‡§®: ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á ‡§î‡§∞ ‡§π‡§∞ ‡§¨‡§æ‡§∞ ‡§®‡§à TCP ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§∏‡•ç‡§•‡§æ‡§™‡§ø‡§§ ‡§® ‡§ï‡§∞‡§®‡•Ä ‡§™‡§°‡§º‡•á‡•§\n\n**‡§®‡•ã‡§ü:** ‡§Ø‡§π ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§∏‡§Ç‡§≠‡§µ‡§§‡§É ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§≤‡•Ä‡§ï ‡§ï‡§æ ‡§ï‡§æ‡§∞‡§£ ‡§¨‡§® ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325) ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n\n## üì¶ ‡§¨‡§Ç‡§°‡§≤‡§∞ ‡§®‡•ã‡§ü‡•ç‡§∏\n\n- ‡§∏‡§≠‡•Ä ‡§ü‡§æ‡§∞‡•ç‡§ó‡•á‡§ü‡•ç‡§∏ Module ‡§î‡§∞ CommonJS ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§®‡§æ‡§Æ‡§ø‡§§ ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§ø‡§è ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç\n- ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§∏‡§ø‡§Ç‡§ü‡•à‡§ï‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§™‡§æ‡§á‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à\n  - ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§µ‡§§‡§É ES5 ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§ï‡•á ‡§≤‡§ø‡§è `ofetch`, `destr`, ‡§î‡§∞ `ufo` ‡§™‡•à‡§ï‡•á‡§ú‡•á‡§∏ ‡§ï‡•ã Babel ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§™‡§æ‡§á‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ\n- ‡§Ü‡§™‡§ï‡•ã ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§ï‡•á ‡§≤‡§ø‡§è `fetch` ‡§ó‡•ç‡§≤‡•ã‡§¨‡§≤ ‡§ï‡•ã ‡§™‡•â‡§≤‡•Ä‡§´‡§ø‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ, ‡§ú‡•à‡§∏‡•á ‡§ï‡§ø [unfetch](https://github.com/developit/unfetch) ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á\n\n## ‚ùì ‡§Ö‡§ï‡•ç‡§∏‡§∞ ‡§™‡•Ç‡§õ‡•á ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® (FAQ)\n\n**‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§æ ‡§®‡§æ‡§Æ `ofetch` ‡§π‡•Ä ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§∞‡§ñ‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, `fetch` ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§®‡§π‡•Ä‡§Ç?**\n\n`fetch` ‡§®‡§æ‡§Æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ ‡§≠‡•ç‡§∞‡§Æ‡§ø‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø API ‡§Ö‡§≤‡§ó ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§´‡§ø‡§∞ ‡§≠‡•Ä ‡§Ø‡§π fetch ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è ‡§∏‡§¨‡§∏‡•á ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï ‡§®‡§æ‡§Æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§π‡§æ‡§≤‡§æ‡§Ç‡§ï‡§ø, ‡§Ü‡§™ `{ fetch }` ‡§ï‡•ã `ofetch` ‡§∏‡•á ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§ú‡•ã Node.js ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ë‡§ü‡•ã-‡§™‡•â‡§≤‡•Ä‡§´‡§ø‡§≤ ‡§π‡•à ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø‡§•‡§æ ‡§®‡•á‡§ü‡§ø‡§µ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§\n\n**‡§°‡§ø‡§´‡•â‡§≤‡•ç‡§ü ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à?**\n\n‡§°‡§ø‡§´‡•â‡§≤‡•ç‡§ü ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§π‡§Æ‡•á‡§∂‡§æ CommonJS ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§ú‡§ø‡§∏‡§∏‡•á ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∞‡§π‡§§‡§æ ‡§π‡•à‡•§\n\n‡§á‡§∏‡§∏‡•á ‡§Ø‡§π ‡§≠‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§π‡§Æ ‡§¨‡§ø‡§®‡§æ ‡§™‡•à‡§ï‡•á‡§ú ‡§§‡•ã‡§°‡§º‡•á ‡§î‡§∞ ‡§Ö‡§ß‡§ø‡§ï ‡§Ø‡•Ç‡§ü‡§ø‡§≤‡•ç‡§∏ ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ `ofetch` ‡§®‡§æ‡§Æ ‡§ï‡•á ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•ã ‡§≠‡•Ä ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§\n\n**‡§á‡§∏‡•á ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§™‡§æ‡§á‡§≤ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ?**\n\n‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä ‡§ï‡•ã ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§™‡§æ‡§á‡§≤ ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§π‡§Æ ‡§µ‡•á‡§¨ ‡§ï‡•ã ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§ï‡•ã‡§° ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡•Ä‡§õ‡•á ‡§≤‡•á ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç, ‡§ú‡•ã ‡§ï‡§ø ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§Ç‡§∂ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡§æ‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§\n\n‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§ï‡§∞‡§®‡§æ ‡§π‡•à, ‡§§‡•ã ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•Ä build pipeline ‡§Æ‡•á‡§Ç ‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä ‡§ï‡•ã ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§™‡§æ‡§á‡§≤ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§\n```",
  "status": "ok"
}