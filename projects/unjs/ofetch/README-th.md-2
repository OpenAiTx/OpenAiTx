{
  "id": 2,
  "origin": "await ofetch(\"/url\").catch((error) => error.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if the response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specify the amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nThe default for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH`, and `DELETE` methods where `ofetch` does not retry by default to avoid introducing side effects. If you set a custom value for `retry` it will **always retry** for all requests.\n\nThe default for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n  retryStatusCodes: [ 404, 500 ], // response status codes to retry\n});\n```\n\n## ✔️ Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort a request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ✔️ Type Friendly\n\nThe response can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ✔️ Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it for trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to the URL by preserving the query in the request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ Interceptors\n\nProviding async interceptors to hook into lifecycle events of `ofetch` call is possible.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is called, allowing you to modify options or do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when the fetch request fails.\n",
  "origin_sha": "FvxzUY8etV4pxTbFCyZca2uKABQrY74XrRyZOCOv2wc=",
  "translate": "```markdown\nawait ofetch(\"/url\").catch((error) => error.data);\n```\n\nเพื่อข้ามการจับข้อผิดพลาดของสถานะ คุณสามารถตั้งค่าออปชั่น `ignoreResponseError` ได้ดังนี้:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ✔️ การลองซ้ำอัตโนมัติ (Auto Retry)\n\n`ofetch` จะลองส่งคำขอซ้ำโดยอัตโนมัติหากเกิดข้อผิดพลาด และหากรหัสสถานะของการตอบสนองอยู่ในรายการ `retryStatusCodes`:\n\n**รหัสสถานะที่ลองซ้ำ:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early ([Experimental](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data))\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nคุณสามารถกำหนดจำนวนครั้งในการลองซ้ำและระยะเวลาระหว่างแต่ละครั้งได้ด้วยออปชั่น `retry` และ `retryDelay` และยังสามารถกำหนดอาร์เรย์รหัสสถานะเองได้ด้วยออปชั่น `retryStatusCodes`\n\nค่าเริ่มต้นของ `retry` คือ `1` ครั้ง ยกเว้นสำหรับเมธอด `POST`, `PUT`, `PATCH` และ `DELETE` ที่ `ofetch` จะไม่ลองซ้ำโดยค่าเริ่มต้นเพื่อหลีกเลี่ยงผลข้างเคียง หากคุณตั้งค่า `retry` เอง จะ **ลองซ้ำเสมอ** สำหรับทุกคำขอ\n\nค่าเริ่มต้นของ `retryDelay` คือ `0` มิลลิวินาที\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // มิลลิวินาที\n  retryStatusCodes: [ 404, 500 ], // รหัสสถานะที่จะลองซ้ำ\n});\n```\n\n## ✔️ การตั้งเวลา Timeout\n\nคุณสามารถกำหนดค่า `timeout` เป็นมิลลิวินาทีเพื่อยกเลิกคำขอโดยอัตโนมัติหลังจากหมดเวลา (ค่าเริ่มต้นคือปิดใช้งาน)\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // หมดเวลาใน 3 วินาที\n});\n```\n\n## ✔️ รองรับ Type\n\nผลลัพธ์ที่ตอบกลับสามารถช่วยกำหนดชนิดข้อมูล (type) ได้:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// ทำงาน Auto complete กับ article.id ได้\n```\n\n## ✔️ การเพิ่ม `baseURL`\n\nโดยการใช้ออปชั่น `baseURL` `ofetch` จะเพิ่มค่า baseURL ให้อัตโนมัติทั้งในส่วนที่มีหรือไม่มีเครื่องหมาย / และ query search params สำหรับ baseURL โดยใช้ [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ✔️ การเพิ่ม Query Search Params\n\nโดยการใช้ออปชั่น `query` (หรือ `params` เป็นชื่อเล่น) `ofetch` จะเพิ่ม query search params ลงใน URL โดยคงค่า query ในคำขอเองโดยใช้ [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ✔️ ตัวดักจับ (Interceptors)\n\nสามารถเพิ่ม async interceptors เพื่อเชื่อมต่อกับเหตุการณ์ต่าง ๆ ในวงจรชีวิตของการเรียก `ofetch` ได้\n\nคุณอาจต้องการใช้ `ofetch.create` เพื่อกำหนด interceptors ที่ใช้ร่วมกัน\n\n### `onRequest({ request, options })`\n\n`onRequest` จะถูกเรียกทันทีที่มีการเรียก `ofetch` ทำให้คุณสามารถปรับเปลี่ยน options หรือทำการ log อย่างง่าย ๆ ได้\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // เพิ่ม `?t=1640125211170` ลงใน query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` จะถูกเรียกเมื่อคำขอ fetch ล้มเหลว\n```",
  "status": "ok"
}