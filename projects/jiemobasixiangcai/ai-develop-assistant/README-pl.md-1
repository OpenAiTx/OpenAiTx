{
  "id": 1,
  "origin": "# 🚀 MCP AI开发助手\n\n> 协助AI开发者进行智能化需求分析与架构设计的MCP工具\n\n## ✨ 核心特性\n\n- **智能需求澄清**: 自动识别项目类型，生成针对性问题\n- **分支感知管理**: 跟踪项目目标、功能设计、技术偏好、UI设计等维度\n- **架构自动生成**: 基于完整需求生成技术架构方案\n- **持久化存储**: 自动保存分析结果，支持导出文档\n\n## 📁 快速配置\n\n### 旧版本配置\n1. **克隆代码**\n   ```bash\n   git clone https://github.com/jiemobasixiangcai/ai-develop-assistant.git\n   ```\n2. **推荐虚拟环境**\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # Unix/Linux/MacOS\n   venv\\Scripts\\activate  # Windows\n   ```\n3. **安装依赖**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n4. **配置文件位置**\n   ```\n   Windows: %APPDATA%\\Claude\\claude_desktop_config.json\n   macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n   ```\n\n5. **添加配置**\n   ```json\n   {\n     \"mcpServers\": {\n       \"ai-develop-assistant\": {\n         \"command\": \"python\",\n         \"args\": [\"path/to/AIDevlopStudy.py\"],\n         \"env\": {\n           \"MCP_STORAGE_DIR\": \"./mcp_data\"\n         }\n       }\n     }\n   }\n   ```\n\n3. **重启Claude Desktop**\n\n### 新版本配置\n#### 🔧 核心工具\n1. **start_new_project** - 开始新项目\n2. **create_requirement_blueprint** - 创建需求蓝图\n3. **requirement_clarifier** - 获取需求澄清提示\n4. **save_clarification_tasks** - 保存澄清任务\n5. **update_branch_status** - 更新分支状态\n6. **requirement_manager** - 需求文档管理器\n7. **check_architecture_prerequisites** - 检查架构前置条件\n8. **get_architecture_design_prompt** - 获取架构设计提示\n9. **save_generated_architecture** - 保存生成的架构设计\n10. **export_final_document** - 导出完整文档\n11. **view_requirements_status** - 查看需求状态\n\n#### 配置（远程直连复制到你的工具中，将MCP_STORAGE_DIR替换为你的本地目录）\n   ```json\n   {\n     \"mcpServers\": {\n       \"ai-develop-assistant\": {\n         \"command\": \"uvx\",\n         \"args\": [\"ai-develop-assistant@latest\"],\n         \"env\": {\n           \"MCP_STORAGE_DIR\": \"/path/to/your/storage\"\n         }\n       }\n     }\n   }\n   ```\n\n## 🎯 使用流程\n\n### 基本步骤\n\n1. **需求澄清**\n   ```\n   requirement_clarifier(\"我要做一个在线教育平台\")\n   ```\n\n2. **需求管理**\n   ```\n   requirement_manager(\"目标用户：学生和教师\", \"项目概述\")\n   ```\n\n3. **查看状态**\n   ```\n   view_requirements_status()\n   ```\n",
  "origin_sha": "q4+XQ0Qmbp72dfphapSTulM4PJIlhQ/iW5ILoO1+CCY=",
  "translate": "# 🚀 MCP AI开发助手\n\n> Narzędzie MCP wspomagające programistów AI w inteligentnej analizie wymagań i projektowaniu architektury\n\n## ✨ Kluczowe funkcje\n\n- **Inteligentne doprecyzowanie wymagań**: Automatyczne rozpoznawanie typu projektu, generowanie ukierunkowanych pytań\n- **Zarządzanie gałęziami z uwzględnieniem kontekstu**: Śledzenie celów projektu, projektowania funkcjonalności, preferencji technologicznych, projektu UI i innych aspektów\n- **Automatyczne generowanie architektury**: Tworzenie rozwiązań architektury technicznej na podstawie kompletnych wymagań\n- **Trwałe przechowywanie**: Automatyczne zapisywanie wyników analizy, obsługa eksportu dokumentów\n\n## 📁 Szybka konfiguracja\n\n### Konfiguracja starej wersji\n1. **Klonowanie kodu**\n   ```bash\n   git clone https://github.com/jiemobasixiangcai/ai-develop-assistant.git\n   ```\n2. **Zalecane środowisko wirtualne**\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # Unix/Linux/MacOS\n   venv\\Scripts\\activate  # Windows\n   ```\n3. **Instalacja zależności**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n4. **Lokalizacja pliku konfiguracyjnego**\n   ```\n   Windows: %APPDATA%\\Claude\\claude_desktop_config.json\n   macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n   ```\n\n5. **Dodanie konfiguracji**\n   ```json\n   {\n     \"mcpServers\": {\n       \"ai-develop-assistant\": {\n         \"command\": \"python\",\n         \"args\": [\"path/to/AIDevlopStudy.py\"],\n         \"env\": {\n           \"MCP_STORAGE_DIR\": \"./mcp_data\"\n         }\n       }\n     }\n   }\n   ```\n\n3. **Restart Claude Desktop**\n\n### Konfiguracja nowej wersji\n#### 🔧 Kluczowe narzędzia\n1. **start_new_project** - Rozpocznij nowy projekt\n2. **create_requirement_blueprint** - Utwórz szablon wymagań\n3. **requirement_clarifier** - Uzyskaj podpowiedzi do doprecyzowania wymagań\n4. **save_clarification_tasks** - Zapisz zadania doprecyzowujące\n5. **update_branch_status** - Aktualizuj status gałęzi\n6. **requirement_manager** - Menedżer dokumentów wymagań\n7. **check_architecture_prerequisites** - Sprawdź warunki wstępne dla architektury\n8. **get_architecture_design_prompt** - Uzyskaj podpowiedzi do projektowania architektury\n9. **save_generated_architecture** - Zapisz wygenerowaną architekturę\n10. **export_final_document** - Eksportuj kompletny dokument\n11. **view_requirements_status** - Przeglądaj status wymagań\n\n#### Konfiguracja (skopiuj bezpośrednio do swojego narzędzia, zamień MCP_STORAGE_DIR na swój lokalny katalog)\n   ```json\n   {\n     \"mcpServers\": {\n       \"ai-develop-assistant\": {\n         \"command\": \"uvx\",\n         \"args\": [\"ai-develop-assistant@latest\"],\n         \"env\": {\n           \"MCP_STORAGE_DIR\": \"/path/to/your/storage\"\n         }\n       }\n     }\n   }\n   ```\n\n## 🎯 Przebieg użytkowania\n\n### Podstawowe kroki\n\n1. **Doprecyzowanie wymagań**\n   ```\n   requirement_clarifier(\"Chcę stworzyć platformę edukacji online\")\n   ```\n\n2. **Zarządzanie wymaganiami**\n   ```\n   requirement_manager(\"Docelowi użytkownicy: uczniowie i nauczyciele\", \"Opis projektu\")\n   ```\n\n3. **Podgląd statusu**\n   ```\n   view_requirements_status()\n   ```",
  "status": "ok"
}