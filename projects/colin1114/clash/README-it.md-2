{
  "id": 2,
  "origin": "\n2. **创建 Pages 项目**\n   - 访问 [Cloudflare Pages](https://pages.cloudflare.com/)\n   - 连接你的 GitHub 仓库\n   - 选择项目仓库\n\n3. **构建设置**\n   - 构建命令：留空或 `echo \"No build required\"`\n   - 构建输出目录：`/`（根目录）\n   - 环境变量：无需设置\n\n#### 选项B：直接上传\n\n```bash\n# 使用 Wrangler Pages 部署\nnpm run deploy:pages\n```\n\n## 🛠️ 技术架构\n\n### 前端技术栈\n- **HTML5** - 现代化标记语言\n- **CSS3** - 响应式设计和动画效果\n- **Vanilla JavaScript** - 轻量级前端交互\n\n### 后端技术栈\n- **Cloudflare Workers** - 边缘计算平台\n- **Web APIs** - 标准的 Fetch API 和响应处理\n\n### 支持的协议格式\n- **VMess** - V2Ray 标准协议\n- **VLESS** - V2Ray 轻量协议（支持Reality）\n- **Shadowsocks** - 经典代理协议\n- **Trojan** - 新兴的代理协议\n\n### API 端点\n- `GET /` - 主页面\n- `POST /convert` - 订阅转换API\n- `GET /clash/{config-id}` - 获取YAML配置文件（订阅链接）\n- `GET /yaml/{config-id}` - 下载YAML配置文件\n- `OPTIONS /*` - CORS预检请求\n\n## 📖 使用指南\n\n### 基本使用\n\n1. **输入订阅链接**\n   - 将你的代理订阅链接粘贴到输入框中\n   - 支持 Base64 编码的订阅链接\n\n2. **设置配置名称**\n   - 可选择性地为配置文件设置自定义名称\n   - 默认为 \"My Clash Config\"\n\n3. **转换配置**\n   - 点击 \"转换订阅\" 按钮\n   - 等待转换完成\n\n4. **使用配置**\n   - 复制生成的 YAML 配置\n   - 导入到 Clash 客户端中使用\n\n5. **使用订阅链接（推荐）**\n   - 复制生成的订阅链接\n   - 在Clash客户端中添加订阅\n   - 配置会自动同步，无需手动更新\n\n### 高级配置\n\n生成的 Clash 配置包含以下特性：\n\n- **代理组策略**\n  - 🚀 节点选择 - 手动选择代理\n  - ♻️ 自动选择 - 延迟测试自动选择\n  - 🎯 全球直连 - 直接连接\n\n- **DNS 配置**\n  - 启用 DNS 解析\n  - 支持 fake-ip 模式\n  - 国内外 DNS 分流\n\n- **路由规则**\n  - 本地地址直连\n  - 国内 IP 直连\n  - 其他流量走代理\n\n## 🔧 部署故障排除\n\n### 常见问题\n\n#### 1. Wrangler 找不到入口点\n**错误信息**: `Missing entry-point to Worker script`\n\n**解决方案**: \n- 确保项目根目录有 `wrangler.jsonc` 文件\n- 检查 `wrangler.jsonc` 中的 `main` 字段指向 `worker.js`\n\n#### 2. GitHub Actions 部署失败\n**解决方案**:\n- 在 GitHub 仓库设置中添加以下 Secrets:",
  "origin_sha": "zr7tJc8hvOfDo46UzlFuACJMOON5tS4gQJwIF+1J9LU=",
  "translate": "2. **Creazione del progetto Pages**\n   - Visita [Cloudflare Pages](https://pages.cloudflare.com/)\n   - Collega il tuo repository GitHub\n   - Seleziona il repository del progetto\n\n3. **Impostazioni di build**\n   - Comando di build: lascia vuoto oppure `echo \"No build required\"`\n   - Directory di output della build: `/` (directory radice)\n   - Variabili d’ambiente: nessuna necessaria\n\n#### Opzione B: Caricamento diretto\n\n```bash\n# Distribuzione con Wrangler Pages\nnpm run deploy:pages\n```\n\n## 🛠️ Architettura tecnica\n\n### Stack tecnologico frontend\n- **HTML5** - Linguaggio di markup moderno\n- **CSS3** - Design responsivo ed effetti animati\n- **Vanilla JavaScript** - Interazioni frontend leggere\n\n### Stack tecnologico backend\n- **Cloudflare Workers** - Piattaforma di edge computing\n- **Web APIs** - Fetch API standard e gestione delle risposte\n\n### Formati di protocollo supportati\n- **VMess** - Protocollo standard V2Ray\n- **VLESS** - Protocollo leggero V2Ray (supporta Reality)\n- **Shadowsocks** - Protocollo proxy classico\n- **Trojan** - Nuovo protocollo proxy emergente\n\n### Endpoint API\n- `GET /` - Pagina principale\n- `POST /convert` - API di conversione abbonamenti\n- `GET /clash/{config-id}` - Ottieni file di configurazione YAML (link abbonamento)\n- `GET /yaml/{config-id}` - Scarica il file di configurazione YAML\n- `OPTIONS /*` - Richieste preflight CORS\n\n## 📖 Guida all’uso\n\n### Utilizzo di base\n\n1. **Inserisci il link dell’abbonamento**\n   - Incolla il tuo link di abbonamento proxy nel campo di input\n   - Supporta link di abbonamento codificati in Base64\n\n2. **Imposta il nome della configurazione**\n   - Opzionalmente imposta un nome personalizzato per il file di configurazione\n   - Il valore predefinito è \"My Clash Config\"\n\n3. **Converti la configurazione**\n   - Clicca sul pulsante \"Converti abbonamento\"\n   - Attendi il completamento della conversione\n\n4. **Usa la configurazione**\n   - Copia la configurazione YAML generata\n   - Importala nel client Clash\n\n5. **Utilizza il link di abbonamento (consigliato)**\n   - Copia il link di abbonamento generato\n   - Aggiungilo come abbonamento nel client Clash\n   - La configurazione si sincronizzerà automaticamente, senza necessità di aggiornamenti manuali\n\n### Configurazione avanzata\n\nLa configurazione Clash generata include le seguenti caratteristiche:\n\n- **Politica dei gruppi proxy**\n  - 🚀 Selezione nodo - Selezione manuale del proxy\n  - ♻️ Selezione automatica - Selezione automatica tramite test di latenza\n  - 🎯 Connessione diretta globale - Connessione diretta\n\n- **Configurazione DNS**\n  - Abilitazione della risoluzione DNS\n  - Supporto modalità fake-ip\n  - Split DNS per Cina/estero\n\n- **Regole di routing**\n  - Indirizzi locali in connessione diretta\n  - IP cinesi in connessione diretta\n  - Altri traffici instradati tramite proxy\n\n## 🔧 Risoluzione dei problemi di distribuzione\n\n### Problemi comuni\n\n#### 1. Wrangler non trova il punto di ingresso\n**Messaggio di errore**: `Missing entry-point to Worker script`\n\n**Soluzione**: \n- Assicurati che nella directory principale del progetto sia presente il file `wrangler.jsonc`\n- Verifica che il campo `main` in `wrangler.jsonc` punti a `worker.js`\n\n#### 2. Distribuzione tramite GitHub Actions fallita\n**Soluzione**:\n- Aggiungi i seguenti Secrets nelle impostazioni del repository GitHub:",
  "status": "ok"
}