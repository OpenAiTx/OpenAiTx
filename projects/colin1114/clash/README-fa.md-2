{
  "id": 2,
  "origin": "\n2. **创建 Pages 项目**\n   - 访问 [Cloudflare Pages](https://pages.cloudflare.com/)\n   - 连接你的 GitHub 仓库\n   - 选择项目仓库\n\n3. **构建设置**\n   - 构建命令：留空或 `echo \"No build required\"`\n   - 构建输出目录：`/`（根目录）\n   - 环境变量：无需设置\n\n#### 选项B：直接上传\n\n```bash\n# 使用 Wrangler Pages 部署\nnpm run deploy:pages\n```\n\n## 🛠️ 技术架构\n\n### 前端技术栈\n- **HTML5** - 现代化标记语言\n- **CSS3** - 响应式设计和动画效果\n- **Vanilla JavaScript** - 轻量级前端交互\n\n### 后端技术栈\n- **Cloudflare Workers** - 边缘计算平台\n- **Web APIs** - 标准的 Fetch API 和响应处理\n\n### 支持的协议格式\n- **VMess** - V2Ray 标准协议\n- **VLESS** - V2Ray 轻量协议（支持Reality）\n- **Shadowsocks** - 经典代理协议\n- **Trojan** - 新兴的代理协议\n\n### API 端点\n- `GET /` - 主页面\n- `POST /convert` - 订阅转换API\n- `GET /clash/{config-id}` - 获取YAML配置文件（订阅链接）\n- `GET /yaml/{config-id}` - 下载YAML配置文件\n- `OPTIONS /*` - CORS预检请求\n\n## 📖 使用指南\n\n### 基本使用\n\n1. **输入订阅链接**\n   - 将你的代理订阅链接粘贴到输入框中\n   - 支持 Base64 编码的订阅链接\n\n2. **设置配置名称**\n   - 可选择性地为配置文件设置自定义名称\n   - 默认为 \"My Clash Config\"\n\n3. **转换配置**\n   - 点击 \"转换订阅\" 按钮\n   - 等待转换完成\n\n4. **使用配置**\n   - 复制生成的 YAML 配置\n   - 导入到 Clash 客户端中使用\n\n5. **使用订阅链接（推荐）**\n   - 复制生成的订阅链接\n   - 在Clash客户端中添加订阅\n   - 配置会自动同步，无需手动更新\n\n### 高级配置\n\n生成的 Clash 配置包含以下特性：\n\n- **代理组策略**\n  - 🚀 节点选择 - 手动选择代理\n  - ♻️ 自动选择 - 延迟测试自动选择\n  - 🎯 全球直连 - 直接连接\n\n- **DNS 配置**\n  - 启用 DNS 解析\n  - 支持 fake-ip 模式\n  - 国内外 DNS 分流\n\n- **路由规则**\n  - 本地地址直连\n  - 国内 IP 直连\n  - 其他流量走代理\n\n## 🔧 部署故障排除\n\n### 常见问题\n\n#### 1. Wrangler 找不到入口点\n**错误信息**: `Missing entry-point to Worker script`\n\n**解决方案**: \n- 确保项目根目录有 `wrangler.jsonc` 文件\n- 检查 `wrangler.jsonc` 中的 `main` 字段指向 `worker.js`\n\n#### 2. GitHub Actions 部署失败\n**解决方案**:\n- 在 GitHub 仓库设置中添加以下 Secrets:",
  "origin_sha": "zr7tJc8hvOfDo46UzlFuACJMOON5tS4gQJwIF+1J9LU=",
  "translate": "2. **ایجاد پروژه Pages**\n   - به [Cloudflare Pages](https://pages.cloudflare.com/) مراجعه کنید\n   - مخزن GitHub خود را متصل کنید\n   - مخزن پروژه را انتخاب کنید\n\n3. **تنظیمات ساخت**\n   - فرمان ساخت: خالی بگذارید یا `echo \"No build required\"`\n   - پوشه خروجی ساخت: `/` (پوشه ریشه)\n   - متغیرهای محیطی: نیازی به تنظیم نیست\n\n#### گزینه B: آپلود مستقیم\n\n```bash\n# استفاده از Wrangler Pages برای استقرار\nnpm run deploy:pages\n```\n\n## 🛠️ معماری فنی\n\n### تکنولوژی‌های سمت فرانت‌اند\n- **HTML5** - زبان نشانه‌گذاری مدرن\n- **CSS3** - طراحی واکنش‌گرا و افکت‌های انیمیشن\n- **Vanilla JavaScript** - تعاملات فرانت‌اند سبک\n\n### تکنولوژی‌های سمت بک‌اند\n- **Cloudflare Workers** - پلتفرم محاسباتی لبه\n- **Web APIs** - Fetch API استاندارد و مدیریت پاسخ\n\n### فرمت‌های پروتکل پشتیبانی‌شده\n- **VMess** - پروتکل استاندارد V2Ray\n- **VLESS** - پروتکل سبک V2Ray (پشتیبانی از Reality)\n- **Shadowsocks** - پروتکل پراکسی کلاسیک\n- **Trojan** - پروتکل پراکسی نوین\n\n### نقاط پایانی API\n- `GET /` - صفحه اصلی\n- `POST /convert` - API تبدیل اشتراک\n- `GET /clash/{config-id}` - دریافت فایل پیکربندی YAML (لینک اشتراک)\n- `GET /yaml/{config-id}` - دانلود فایل پیکربندی YAML\n- `OPTIONS /*` - درخواست پیش‌بررسی CORS\n\n## 📖 راهنمای استفاده\n\n### استفاده پایه\n\n1. **وارد کردن لینک اشتراک**\n   - لینک اشتراک پراکسی خود را در کادر ورودی قرار دهید\n   - پشتیبانی از لینک اشتراک با رمزگذاری Base64\n\n2. **تنظیم نام پیکربندی**\n   - به صورت اختیاری می‌توانید نام سفارشی برای فایل پیکربندی تعیین کنید\n   - پیش‌فرض: \"My Clash Config\"\n\n3. **تبدیل پیکربندی**\n   - روی دکمه \"تبدیل اشتراک\" کلیک کنید\n   - منتظر بمانید تا تبدیل کامل شود\n\n4. **استفاده از پیکربندی**\n   - فایل پیکربندی YAML تولید شده را کپی کنید\n   - آن را در کلاینت Clash وارد نمایید\n\n5. **استفاده از لینک اشتراک (توصیه‌شده)**\n   - لینک اشتراک تولید شده را کپی کنید\n   - آن را در کلاینت Clash اضافه نمایید\n   - پیکربندی به صورت خودکار همگام می‌شود و نیازی به بروزرسانی دستی نیست\n\n### پیکربندی پیشرفته\n\nپیکربندی Clash تولید شده شامل ویژگی‌های زیر است:\n\n- **سیاست‌های گروه پراکسی**\n  - 🚀 انتخاب نود - انتخاب پراکسی به صورت دستی\n  - ♻️ انتخاب خودکار - انتخاب خودکار بر اساس تست تاخیر\n  - 🎯 اتصال مستقیم جهانی - ارتباط مستقیم\n\n- **پیکربندی DNS**\n  - فعال‌سازی解析 DNS\n  - پشتیبانی از حالت fake-ip\n  - تفکیک DNS داخلی و خارجی\n\n- **قوانین مسیریابی**\n  - آدرس‌های محلی به صورت مستقیم متصل می‌شوند\n  - آی‌پی‌های داخلی به صورت مستقیم متصل می‌شوند\n  - سایر ترافیک‌ها از طریق پراکسی عبور می‌کنند\n\n## 🔧 عیب‌یابی استقرار\n\n### مشکلات رایج\n\n#### 1. Wrangler نقطه ورود را پیدا نمی‌کند\n**پیام خطا**: `Missing entry-point to Worker script`\n\n**راه حل**: \n- اطمینان حاصل کنید فایل `wrangler.jsonc` در پوشه ریشه پروژه وجود دارد\n- بررسی کنید که فیلد `main` در `wrangler.jsonc` به `worker.js` اشاره کند\n\n#### 2. شکست استقرار GitHub Actions\n**راه حل**:\n- موارد زیر را به عنوان Secrets در تنظیمات مخزن GitHub اضافه کنید:",
  "status": "ok"
}