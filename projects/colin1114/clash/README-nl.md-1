{
  "id": 1,
  "origin": "CDN acceleration and security protection for this project are sponsored by Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nThe author of this project is colin1114.\n\n# 🚀 Clash 订阅转换器\n\n一个美观且功能强大的在线工具，用于将各种代理订阅链接转换为 Clash 配置格式。支持通过 Cloudflare Workers & Pages 自动部署，提供快速、可靠的订阅转换服务。\n\n## ✨ 功能特性\n\n- 🎨 **美观的现代化界面** - 采用渐变背景和卡片式设计\n- 🔄 **多协议支持** - 支持 V2Ray、VLESS、Shadowsocks、Trojan 等主流协议\n- ☁️ **云端部署** - 通过 Cloudflare Workers 实现全球CDN加速\n- 📱 **响应式设计** - 完美适配桌面端和移动端\n- ⚡ **快速转换** - 实时将订阅链接转换为 Clash 配置\n- 📋 **智能复制** - 支持一键复制生成的 YAML 配置，兼容各种浏览器\n- 📡 **订阅链接生成** - 自动生成可直接导入Clash的订阅链接\n- 🌐 **在线YAML访问** - 提供多种YAML文件访问方式：\n  - 📡 订阅链接：支持Clash客户端自动更新\n  - 🔗 在线查看：浏览器中直接查看配置内容\n  - 💾 文件下载：下载.yaml文件到本地\n  - ⚡ 快速访问：简化的下载链接\n- 🔧 **UTF-8支持** - 完美支持中文节点名称和配置\n- 🆓 **完全免费** - 基于 Cloudflare 免费服务，无使用限制\n\n## 📁 项目结构\n\n```\nclash/\n├── index.html              # 前端页面\n├── worker.js               # Cloudflare Worker 后端代码\n├── wrangler.jsonc          # Wrangler 配置文件\n├── _headers                # Cloudflare Pages HTTP头配置\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions 部署配置\n├── README.md              # 项目说明文档\n└── package.json           # 项目配置文件\n```\n\n## 🚀 快速开始\n\n### 方法一：本地运行\n\n1. **克隆项目**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **启动本地服务器**\n   ```bash\n   # 使用 Python\n   python -m http.server 8000\n   \n   # 或使用 Node.js\n   npx serve .\n   ```\n\n3. **访问应用**\n   - 打开浏览器访问 `http://localhost:8000`\n   - 在本地环境下会显示示例配置\n\n### 方法二：Cloudflare Workers 部署\n\n#### 步骤1：创建 Worker\n\n1. 访问 [Cloudflare Workers](https://workers.cloudflare.com/)\n2. 注册/登录 Cloudflare 账户\n3. 点击 \"Create a Worker\"\n4. 将 `worker.js` 中的代码完整复制到编辑器中\n5. 点击 \"Save and Deploy\"\n\n#### 步骤2：使用 Wrangler CLI 部署\n\n```bash\n# 安装 Wrangler CLI\nnpm install -g wrangler\n\n# 登录到 Cloudflare\nwrangler login\n\n# 部署 Worker\nnpm run deploy:worker\n```\n\n#### 步骤3：配置域名（可选）\n\n1. 在 Worker 设置中添加自定义域名\n2. 或使用 Cloudflare 提供的默认域名\n\n### 方法三：Cloudflare Pages 部署\n\n#### 选项A：GitHub 集成（推荐）\n\n1. **准备仓库**\n   - 将代码推送到 GitHub 仓库\n   - 确保包含所有必要文件",
  "origin_sha": "jTqXmIrMxDG3dHdJiIIXLYHuKiIo9ZlvILpt3H+GGJY=",
  "translate": "CDN-versnelling en beveiligingsbescherming voor dit project worden gesponsord door Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nDe auteur van dit project is colin1114.\n\n# 🚀 Clash Abonnement Converter\n\nEen fraai vormgegeven en krachtige online tool voor het omzetten van verschillende proxy-abonnementslinks naar het Clash-configuratieformaat. Ondersteunt automatische implementatie via Cloudflare Workers & Pages en biedt snelle, betrouwbare abonnementsconversie.\n\n## ✨ Functies en Kenmerken\n\n- 🎨 **Moderne en aantrekkelijke interface** - Met een verloop-achtergrond en kaartontwerp\n- 🔄 **Ondersteuning voor meerdere protocollen** - Ondersteunt de belangrijkste protocollen zoals V2Ray, VLESS, Shadowsocks, Trojan, enz.\n- ☁️ **Cloudimplementatie** - Wereldwijde CDN-versnelling via Cloudflare Workers\n- 📱 **Responsief ontwerp** - Perfect geschikt voor zowel desktop als mobiel\n- ⚡ **Snelle conversie** - Zet abonnementslinks realtime om naar Clash-configuratie\n- 📋 **Slim kopiëren** - Ondersteunt een-klik kopiëren van de gegenereerde YAML-configuratie, compatibel met verschillende browsers\n- 📡 **Abonnementslink generator** - Genereert automatisch een link die direct in Clash geïmporteerd kan worden\n- 🌐 **Online YAML-toegang** - Biedt meerdere manieren om YAML-bestanden te benaderen:\n  - 📡 Abonnementslink: ondersteunt automatische updates in de Clash-client\n  - 🔗 Online bekijken: bekijk de configuratie direct in de browser\n  - 💾 Bestand downloaden: download het .yaml-bestand naar je lokale apparaat\n  - ⚡ Snelle toegang: vereenvoudigde downloadlink\n- 🔧 **UTF-8 ondersteuning** - Volledige ondersteuning voor Chinese node-namen en configuraties\n- 🆓 **Volledig gratis** - Gebaseerd op de gratis dienst van Cloudflare, zonder gebruiksbeperkingen\n\n## 📁 Projectstructuur\n\n```\nclash/\n├── index.html              # Frontend pagina\n├── worker.js               # Cloudflare Worker backend code\n├── wrangler.jsonc          # Wrangler configuratiebestand\n├── _headers                # Cloudflare Pages HTTP-headerconfiguratie\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions implementatieconfiguratie\n├── README.md              # Projectdocumentatie\n└── package.json           # Projectconfiguratiebestand\n```\n\n## 🚀 Snel aan de slag\n\n### Methode 1: Lokaal uitvoeren\n\n1. **Project klonen**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **Start lokale server**\n   ```bash\n   # Met Python\n   python -m http.server 8000\n\n   # Of met Node.js\n   npx serve .\n   ```\n\n3. **Open de applicatie**\n   - Open de browser en ga naar `http://localhost:8000`\n   - In de lokale omgeving wordt een voorbeeldconfiguratie getoond\n\n### Methode 2: Cloudflare Workers implementatie\n\n#### Stap 1: Maak een Worker aan\n\n1. Ga naar [Cloudflare Workers](https://workers.cloudflare.com/)\n2. Registreer/log in op je Cloudflare-account\n3. Klik op \"Create a Worker\"\n4. Kopieer de volledige code uit `worker.js` naar de editor\n5. Klik op \"Save and Deploy\"\n\n#### Stap 2: Deploy met Wrangler CLI\n\n```bash\n# Installeer Wrangler CLI\nnpm install -g wrangler\n\n# Log in bij Cloudflare\nwrangler login\n\n# Deploy Worker\nnpm run deploy:worker\n```\n\n#### Stap 3: Domein instellen (optioneel)\n\n1. Voeg een aangepast domein toe in de Worker-instellingen\n2. Of gebruik het standaarddomein van Cloudflare\n\n### Methode 3: Cloudflare Pages implementatie\n\n#### Optie A: GitHub integratie (aanbevolen)\n\n1. **Bereid de repository voor**\n   - Push de code naar een GitHub-repository\n   - Zorg ervoor dat alle benodigde bestanden aanwezig zijn",
  "status": "ok"
}