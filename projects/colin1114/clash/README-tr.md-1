{
  "id": 1,
  "origin": "CDN acceleration and security protection for this project are sponsored by Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nThe author of this project is colin1114.\n\n# 🚀 Clash 订阅转换器\n\n一个美观且功能强大的在线工具，用于将各种代理订阅链接转换为 Clash 配置格式。支持通过 Cloudflare Workers & Pages 自动部署，提供快速、可靠的订阅转换服务。\n\n## ✨ 功能特性\n\n- 🎨 **美观的现代化界面** - 采用渐变背景和卡片式设计\n- 🔄 **多协议支持** - 支持 V2Ray、VLESS、Shadowsocks、Trojan 等主流协议\n- ☁️ **云端部署** - 通过 Cloudflare Workers 实现全球CDN加速\n- 📱 **响应式设计** - 完美适配桌面端和移动端\n- ⚡ **快速转换** - 实时将订阅链接转换为 Clash 配置\n- 📋 **智能复制** - 支持一键复制生成的 YAML 配置，兼容各种浏览器\n- 📡 **订阅链接生成** - 自动生成可直接导入Clash的订阅链接\n- 🌐 **在线YAML访问** - 提供多种YAML文件访问方式：\n  - 📡 订阅链接：支持Clash客户端自动更新\n  - 🔗 在线查看：浏览器中直接查看配置内容\n  - 💾 文件下载：下载.yaml文件到本地\n  - ⚡ 快速访问：简化的下载链接\n- 🔧 **UTF-8支持** - 完美支持中文节点名称和配置\n- 🆓 **完全免费** - 基于 Cloudflare 免费服务，无使用限制\n\n## 📁 项目结构\n\n```\nclash/\n├── index.html              # 前端页面\n├── worker.js               # Cloudflare Worker 后端代码\n├── wrangler.jsonc          # Wrangler 配置文件\n├── _headers                # Cloudflare Pages HTTP头配置\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions 部署配置\n├── README.md              # 项目说明文档\n└── package.json           # 项目配置文件\n```\n\n## 🚀 快速开始\n\n### 方法一：本地运行\n\n1. **克隆项目**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **启动本地服务器**\n   ```bash\n   # 使用 Python\n   python -m http.server 8000\n   \n   # 或使用 Node.js\n   npx serve .\n   ```\n\n3. **访问应用**\n   - 打开浏览器访问 `http://localhost:8000`\n   - 在本地环境下会显示示例配置\n\n### 方法二：Cloudflare Workers 部署\n\n#### 步骤1：创建 Worker\n\n1. 访问 [Cloudflare Workers](https://workers.cloudflare.com/)\n2. 注册/登录 Cloudflare 账户\n3. 点击 \"Create a Worker\"\n4. 将 `worker.js` 中的代码完整复制到编辑器中\n5. 点击 \"Save and Deploy\"\n\n#### 步骤2：使用 Wrangler CLI 部署\n\n```bash\n# 安装 Wrangler CLI\nnpm install -g wrangler\n\n# 登录到 Cloudflare\nwrangler login\n\n# 部署 Worker\nnpm run deploy:worker\n```\n\n#### 步骤3：配置域名（可选）\n\n1. 在 Worker 设置中添加自定义域名\n2. 或使用 Cloudflare 提供的默认域名\n\n### 方法三：Cloudflare Pages 部署\n\n#### 选项A：GitHub 集成（推荐）\n\n1. **准备仓库**\n   - 将代码推送到 GitHub 仓库\n   - 确保包含所有必要文件",
  "origin_sha": "jTqXmIrMxDG3dHdJiIIXLYHuKiIo9ZlvILpt3H+GGJY=",
  "translate": "CDN hızlandırma ve güvenlik koruması bu proje için Tencent EdgeOne tarafından sağlanmaktadır.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nBu projenin yazarı colin1114'tür.\n\n# 🚀 Clash Abonelik Dönüştürücü\n\nÇeşitli proxy abonelik linklerini Clash yapılandırma formatına dönüştürmek için kullanılan, şık ve güçlü bir çevrimiçi araç. Cloudflare Workers & Pages ile otomatik dağıtımı destekler, hızlı ve güvenilir abonelik dönüştürme hizmeti sunar.\n\n## ✨ Özellikler\n\n- 🎨 **Şık modern arayüz** - Gradyan arka plan ve kart tasarımı kullanır\n- 🔄 **Çoklu protokol desteği** - V2Ray, VLESS, Shadowsocks, Trojan gibi popüler protokolleri destekler\n- ☁️ **Bulut tabanlı dağıtım** - Cloudflare Workers ile küresel CDN hızlandırma sağlar\n- 📱 **Duyarlı tasarım** - Masaüstü ve mobilde mükemmel uyum\n- ⚡ **Hızlı dönüşüm** - Abonelik linklerini anında Clash yapılandırmasına dönüştürür\n- 📋 **Akıllı kopyalama** - Oluşturulan YAML yapılandırmasını tek tıkla kopyalama, tüm tarayıcılarla uyumlu\n- 📡 **Abonelik linki oluşturma** - Clash’e doğrudan aktarılabilen abonelik linkini otomatik üretir\n- 🌐 **Çevrimiçi YAML erişimi** - Çeşitli YAML dosyası erişim yöntemleri sunar:\n  - 📡 Abonelik linki: Clash istemcisi ile otomatik güncelleme desteği\n  - 🔗 Çevrimiçi görüntüleme: Yapılandırma içeriğini tarayıcıda direkt görüntüleme\n  - 💾 Dosya indirme: .yaml dosyasını yerel olarak indir\n  - ⚡ Hızlı erişim: Kısaltılmış indirme linki\n- 🔧 **UTF-8 desteği** - Çince düğüm adları ve yapılandırmaları tam destekler\n- 🆓 **Tamamen ücretsiz** - Cloudflare’ın ücretsiz hizmetiyle, kullanım kısıtlaması olmadan\n\n## 📁 Proje Yapısı\n\n```\nclash/\n├── index.html              # Ön uç sayfası\n├── worker.js               # Cloudflare Worker arka uç kodu\n├── wrangler.jsonc          # Wrangler yapılandırma dosyası\n├── _headers                # Cloudflare Pages HTTP başlık yapılandırması\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions dağıtım yapılandırması\n├── README.md              # Proje açıklama dokümanı\n└── package.json           # Proje yapılandırma dosyası\n```\n\n## 🚀 Hızlı Başlangıç\n\n### Yöntem 1: Yerel Çalıştırma\n\n1. **Projeyi klonlayın**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **Yerel sunucuyu başlatın**\n   ```bash\n   # Python ile\n   python -m http.server 8000\n   \n   # veya Node.js ile\n   npx serve .\n   ```\n\n3. **Uygulamayı açın**\n   - Tarayıcıda `http://localhost:8000` adresine gidin\n   - Yerel ortamda örnek yapılandırma görüntülenecektir\n\n### Yöntem 2: Cloudflare Workers ile Dağıtım\n\n#### Adım 1: Worker Oluşturun\n\n1. [Cloudflare Workers](https://workers.cloudflare.com/) adresine gidin\n2. Cloudflare hesabı oluşturun/giriş yapın\n3. \"Create a Worker\" butonuna tıklayın\n4. `worker.js` dosyasındaki kodun tamamını editöre yapıştırın\n5. \"Save and Deploy\" butonuna tıklayın\n\n#### Adım 2: Wrangler CLI ile Dağıtım\n\n```bash\n# Wrangler CLI’yı yükleyin\nnpm install -g wrangler\n\n# Cloudflare’a giriş yapın\nwrangler login\n\n# Worker’ı dağıtın\nnpm run deploy:worker\n```\n\n#### Adım 3: Alan Adı Yapılandırması (Opsiyonel)\n\n1. Worker ayarlarından özel alan adı ekleyin\n2. Veya Cloudflare’ın varsayılan alan adını kullanın\n\n### Yöntem 3: Cloudflare Pages ile Dağıtım\n\n#### Seçenek A: GitHub Entegrasyonu (Tavsiye Edilir)\n\n1. **Depoyu hazırlayın**\n   - Kodu GitHub deposuna gönderin\n   - Gerekli tüm dosyaların dahil olduğundan emin olun",
  "status": "ok"
}