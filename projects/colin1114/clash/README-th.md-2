{
  "id": 2,
  "origin": "\n2. **创建 Pages 项目**\n   - 访问 [Cloudflare Pages](https://pages.cloudflare.com/)\n   - 连接你的 GitHub 仓库\n   - 选择项目仓库\n\n3. **构建设置**\n   - 构建命令：留空或 `echo \"No build required\"`\n   - 构建输出目录：`/`（根目录）\n   - 环境变量：无需设置\n\n#### 选项B：直接上传\n\n```bash\n# 使用 Wrangler Pages 部署\nnpm run deploy:pages\n```\n\n## 🛠️ 技术架构\n\n### 前端技术栈\n- **HTML5** - 现代化标记语言\n- **CSS3** - 响应式设计和动画效果\n- **Vanilla JavaScript** - 轻量级前端交互\n\n### 后端技术栈\n- **Cloudflare Workers** - 边缘计算平台\n- **Web APIs** - 标准的 Fetch API 和响应处理\n\n### 支持的协议格式\n- **VMess** - V2Ray 标准协议\n- **VLESS** - V2Ray 轻量协议（支持Reality）\n- **Shadowsocks** - 经典代理协议\n- **Trojan** - 新兴的代理协议\n\n### API 端点\n- `GET /` - 主页面\n- `POST /convert` - 订阅转换API\n- `GET /clash/{config-id}` - 获取YAML配置文件（订阅链接）\n- `GET /yaml/{config-id}` - 下载YAML配置文件\n- `OPTIONS /*` - CORS预检请求\n\n## 📖 使用指南\n\n### 基本使用\n\n1. **输入订阅链接**\n   - 将你的代理订阅链接粘贴到输入框中\n   - 支持 Base64 编码的订阅链接\n\n2. **设置配置名称**\n   - 可选择性地为配置文件设置自定义名称\n   - 默认为 \"My Clash Config\"\n\n3. **转换配置**\n   - 点击 \"转换订阅\" 按钮\n   - 等待转换完成\n\n4. **使用配置**\n   - 复制生成的 YAML 配置\n   - 导入到 Clash 客户端中使用\n\n5. **使用订阅链接（推荐）**\n   - 复制生成的订阅链接\n   - 在Clash客户端中添加订阅\n   - 配置会自动同步，无需手动更新\n\n### 高级配置\n\n生成的 Clash 配置包含以下特性：\n\n- **代理组策略**\n  - 🚀 节点选择 - 手动选择代理\n  - ♻️ 自动选择 - 延迟测试自动选择\n  - 🎯 全球直连 - 直接连接\n\n- **DNS 配置**\n  - 启用 DNS 解析\n  - 支持 fake-ip 模式\n  - 国内外 DNS 分流\n\n- **路由规则**\n  - 本地地址直连\n  - 国内 IP 直连\n  - 其他流量走代理\n\n## 🔧 部署故障排除\n\n### 常见问题\n\n#### 1. Wrangler 找不到入口点\n**错误信息**: `Missing entry-point to Worker script`\n\n**解决方案**: \n- 确保项目根目录有 `wrangler.jsonc` 文件\n- 检查 `wrangler.jsonc` 中的 `main` 字段指向 `worker.js`\n\n#### 2. GitHub Actions 部署失败\n**解决方案**:\n- 在 GitHub 仓库设置中添加以下 Secrets:",
  "origin_sha": "zr7tJc8hvOfDo46UzlFuACJMOON5tS4gQJwIF+1J9LU=",
  "translate": "2. **สร้างโปรเจกต์ Pages**\n   - เข้าไปที่ [Cloudflare Pages](https://pages.cloudflare.com/)\n   - เชื่อมต่อกับคลัง GitHub ของคุณ\n   - เลือกคลังโปรเจกต์\n\n3. **การตั้งค่าการสร้าง**\n   - คำสั่งสร้าง: เว้นว่างไว้หรือใส่ `echo \"No build required\"`\n   - โฟลเดอร์ผลลัพธ์การสร้าง: `/` (ไดเรกทอรีราก)\n   - ตัวแปรสภาพแวดล้อม: ไม่ต้องตั้งค่า\n\n#### ตัวเลือก B: อัปโหลดโดยตรง\n\n```bash\n# ใช้ Wrangler Pages สำหรับดีพลอย\nnpm run deploy:pages\n```\n\n## 🛠️ สถาปัตยกรรมทางเทคนิค\n\n### เทคโนโลยีฝั่งหน้า (Frontend)\n- **HTML5** - ภาษามาร์กอัปยุคใหม่\n- **CSS3** - การออกแบบตอบสนองและเอฟเฟกต์แอนิเมชัน\n- **Vanilla JavaScript** - การโต้ตอบฝั่งหน้าขนาดเบา\n\n### เทคโนโลยีฝั่งหลัง (Backend)\n- **Cloudflare Workers** - แพลตฟอร์มประมวลผลขอบเครือข่าย (Edge Computing)\n- **Web APIs** - มาตรฐาน Fetch API และการจัดการ Response\n\n### รูปแบบโปรโตคอลที่รองรับ\n- **VMess** - โปรโตคอลมาตรฐาน V2Ray\n- **VLESS** - โปรโตคอลน้ำหนักเบา V2Ray (รองรับ Reality)\n- **Shadowsocks** - โปรโตคอลพร็อกซีคลาสสิก\n- **Trojan** - โปรโตคอลพร็อกซีสมัยใหม่\n\n### จุดเชื่อมต่อ API (API Endpoints)\n- `GET /` - หน้าแรก\n- `POST /convert` - API แปลงการสมัครสมาชิก\n- `GET /clash/{config-id}` - รับไฟล์คอนฟิก YAML (ลิงก์สมัครสมาชิก)\n- `GET /yaml/{config-id}` - ดาวน์โหลดไฟล์คอนฟิก YAML\n- `OPTIONS /*` - คำขอพรีไฟลท์ CORS\n\n## 📖 คู่มือการใช้งาน\n\n### การใช้งานพื้นฐาน\n\n1. **ใส่ลิงก์สมัครสมาชิก**\n   - วางลิงก์สมัครสมาชิกพร็อกซีของคุณลงในช่องอินพุต\n   - รองรับลิงก์สมัครสมาชิกที่เข้ารหัส Base64\n\n2. **ตั้งชื่อคอนฟิก**\n   - เลือกกำหนดชื่อไฟล์คอนฟิกเองได้\n   - ค่าดีฟอลต์คือ \"My Clash Config\"\n\n3. **แปลงคอนฟิก**\n   - คลิกปุ่ม \"แปลงสมัครสมาชิก\"\n   - รอให้แปลงเสร็จ\n\n4. **ใช้งานคอนฟิก**\n   - คัดลอกคอนฟิก YAML ที่สร้างขึ้น\n   - นำเข้าไปใช้ในแอป Clash\n\n5. **ใช้งานลิงก์สมัครสมาชิก (แนะนำ)**\n   - คัดลอกลิงก์สมัครสมาชิกที่สร้างขึ้น\n   - เพิ่มลิงก์ในแอป Clash\n   - คอนฟิกจะซิงค์อัตโนมัติ ไม่ต้องอัปเดตเอง\n\n### การตั้งค่าขั้นสูง\n\nคอนฟิก Clash ที่สร้างขึ้นจะมีคุณสมบัติดังนี้:\n\n- **นโยบายกลุ่มพร็อกซี**\n  - 🚀 เลือกโหนด - เลือกพร็อกซีเอง\n  - ♻️ เลือกอัตโนมัติ - เลือกอัตโนมัติโดยทดสอบดีเลย์\n  - 🎯 เชื่อมต่อทั่วโลกโดยตรง - เชื่อมต่อโดยตรง\n\n- **การตั้งค่า DNS**\n  - เปิดใช้งานการแปล DNS\n  - รองรับโหมด fake-ip\n  - แยก DNS ในประเทศและต่างประเทศ\n\n- **กฎเส้นทาง (Routing Rules)**\n  - ที่อยู่ท้องถิ่นเชื่อมต่อโดยตรง\n  - IP ในประเทศเชื่อมต่อโดยตรง\n  - ทราฟฟิกอื่นใช้พร็อกซี\n\n## 🔧 การแก้ไขปัญหาการดีพลอย\n\n### ปัญหาที่พบบ่อย\n\n#### 1. Wrangler หา entry point ไม่เจอ\n**ข้อความผิดพลาด**: `Missing entry-point to Worker script`\n\n**วิธีแก้ไข**: \n- ตรวจสอบให้มีไฟล์ `wrangler.jsonc` อยู่ที่ไดเรกทอรีรากของโปรเจกต์\n- ตรวจสอบว่าใน `wrangler.jsonc` ฟิลด์ `main` ชี้ไปที่ `worker.js`\n\n#### 2. GitHub Actions ดีพลอยไม่สำเร็จ\n**วิธีแก้ไข**:\n- เพิ่ม Secrets ด้านล่างนี้ใน Settings ของคลัง GitHub:",
  "status": "ok"
}