{
  "id": 1,
  "origin": "CDN acceleration and security protection for this project are sponsored by Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nThe author of this project is colin1114.\n\n# 🚀 Clash 订阅转换器\n\n一个美观且功能强大的在线工具，用于将各种代理订阅链接转换为 Clash 配置格式。支持通过 Cloudflare Workers & Pages 自动部署，提供快速、可靠的订阅转换服务。\n\n## ✨ 功能特性\n\n- 🎨 **美观的现代化界面** - 采用渐变背景和卡片式设计\n- 🔄 **多协议支持** - 支持 V2Ray、VLESS、Shadowsocks、Trojan 等主流协议\n- ☁️ **云端部署** - 通过 Cloudflare Workers 实现全球CDN加速\n- 📱 **响应式设计** - 完美适配桌面端和移动端\n- ⚡ **快速转换** - 实时将订阅链接转换为 Clash 配置\n- 📋 **智能复制** - 支持一键复制生成的 YAML 配置，兼容各种浏览器\n- 📡 **订阅链接生成** - 自动生成可直接导入Clash的订阅链接\n- 🌐 **在线YAML访问** - 提供多种YAML文件访问方式：\n  - 📡 订阅链接：支持Clash客户端自动更新\n  - 🔗 在线查看：浏览器中直接查看配置内容\n  - 💾 文件下载：下载.yaml文件到本地\n  - ⚡ 快速访问：简化的下载链接\n- 🔧 **UTF-8支持** - 完美支持中文节点名称和配置\n- 🆓 **完全免费** - 基于 Cloudflare 免费服务，无使用限制\n\n## 📁 项目结构\n\n```\nclash/\n├── index.html              # 前端页面\n├── worker.js               # Cloudflare Worker 后端代码\n├── wrangler.jsonc          # Wrangler 配置文件\n├── _headers                # Cloudflare Pages HTTP头配置\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions 部署配置\n├── README.md              # 项目说明文档\n└── package.json           # 项目配置文件\n```\n\n## 🚀 快速开始\n\n### 方法一：本地运行\n\n1. **克隆项目**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **启动本地服务器**\n   ```bash\n   # 使用 Python\n   python -m http.server 8000\n   \n   # 或使用 Node.js\n   npx serve .\n   ```\n\n3. **访问应用**\n   - 打开浏览器访问 `http://localhost:8000`\n   - 在本地环境下会显示示例配置\n\n### 方法二：Cloudflare Workers 部署\n\n#### 步骤1：创建 Worker\n\n1. 访问 [Cloudflare Workers](https://workers.cloudflare.com/)\n2. 注册/登录 Cloudflare 账户\n3. 点击 \"Create a Worker\"\n4. 将 `worker.js` 中的代码完整复制到编辑器中\n5. 点击 \"Save and Deploy\"\n\n#### 步骤2：使用 Wrangler CLI 部署\n\n```bash\n# 安装 Wrangler CLI\nnpm install -g wrangler\n\n# 登录到 Cloudflare\nwrangler login\n\n# 部署 Worker\nnpm run deploy:worker\n```\n\n#### 步骤3：配置域名（可选）\n\n1. 在 Worker 设置中添加自定义域名\n2. 或使用 Cloudflare 提供的默认域名\n\n### 方法三：Cloudflare Pages 部署\n\n#### 选项A：GitHub 集成（推荐）\n\n1. **准备仓库**\n   - 将代码推送到 GitHub 仓库\n   - 确保包含所有必要文件",
  "origin_sha": "jTqXmIrMxDG3dHdJiIIXLYHuKiIo9ZlvILpt3H+GGJY=",
  "translate": "CDN przyspieszenie i ochrona bezpieczeństwa dla tego projektu są sponsorowane przez Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nAutorem tego projektu jest colin1114.\n\n# 🚀 Konwerter subskrypcji Clash\n\nEstetyczne i zaawansowane narzędzie online do konwersji różnych linków subskrypcyjnych proxy na format konfiguracji Clash. Obsługuje automatyczne wdrażanie przez Cloudflare Workers & Pages, zapewnia szybkie i niezawodne usługi konwersji subskrypcji.\n\n## ✨ Funkcje\n\n- 🎨 **Estetyczny, nowoczesny interfejs** - gradientowe tło i projekt z kartami\n- 🔄 **Obsługa wielu protokołów** - obsługa głównych protokołów takich jak V2Ray, VLESS, Shadowsocks, Trojan i innych\n- ☁️ **Wdrażanie w chmurze** - globalne przyspieszenie CDN przez Cloudflare Workers\n- 📱 **Responsywny design** - pełna kompatybilność z komputerami i urządzeniami mobilnymi\n- ⚡ **Szybka konwersja** - natychmiastowa konwersja linków subskrypcyjnych na konfigurację Clash\n- 📋 **Inteligentne kopiowanie** - obsługa kopiowania wygenerowanego pliku YAML jednym kliknięciem, kompatybilność z różnymi przeglądarkami\n- 📡 **Generowanie linku subskrypcyjnego** - automatyczne generowanie linku subskrypcyjnego do bezpośredniego importu do Clash\n- 🌐 **Dostęp do YAML online** - różne metody dostępu do plików YAML:\n  - 📡 Link subskrypcyjny: obsługa automatycznej aktualizacji w kliencie Clash\n  - 🔗 Podgląd online: bezpośrednie przeglądanie konfiguracji w przeglądarce\n  - 💾 Pobieranie pliku: pobierz plik .yaml na komputer\n  - ⚡ Szybki dostęp: uproszczony link do pobrania\n- 🔧 **Obsługa UTF-8** - pełna obsługa chińskich nazw węzłów i konfiguracji\n- 🆓 **Całkowicie za darmo** - oparte na darmowych usługach Cloudflare, bez ograniczeń użycia\n\n## 📁 Struktura projektu\n\n```\nclash/\n├── index.html              # Strona front-endowa\n├── worker.js               # Kod back-endowy Cloudflare Worker\n├── wrangler.jsonc          # Plik konfiguracyjny Wrangler\n├── _headers                # Konfiguracja nagłówków HTTP dla Cloudflare Pages\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # Konfiguracja wdrożenia GitHub Actions\n├── README.md              # Dokumentacja projektu\n└── package.json           # Plik konfiguracyjny projektu\n```\n\n## 🚀 Szybki start\n\n### Metoda 1: Uruchomienie lokalne\n\n1. **Klonowanie projektu**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **Uruchomienie lokalnego serwera**\n   ```bash\n   # Z użyciem Pythona\n   python -m http.server 8000\n   \n   # Lub z użyciem Node.js\n   npx serve .\n   ```\n\n3. **Dostęp do aplikacji**\n   - Otwórz przeglądarkę i przejdź do `http://localhost:8000`\n   - W środowisku lokalnym wyświetlane będą przykładowe konfiguracje\n\n### Metoda 2: Wdrażanie przez Cloudflare Workers\n\n#### Krok 1: Utwórz Worker\n\n1. Wejdź na [Cloudflare Workers](https://workers.cloudflare.com/)\n2. Zarejestruj się/zaloguj na konto Cloudflare\n3. Kliknij \"Create a Worker\"\n4. Skopiuj cały kod z `worker.js` do edytora\n5. Kliknij \"Save and Deploy\"\n\n#### Krok 2: Wdrażanie za pomocą Wrangler CLI\n\n```bash\n# Instalacja Wrangler CLI\nnpm install -g wrangler\n\n# Logowanie do Cloudflare\nwrangler login\n\n# Wdrożenie Workera\nnpm run deploy:worker\n```\n\n#### Krok 3: Konfiguracja domeny (opcjonalnie)\n\n1. Dodaj własną domenę w ustawieniach Workera\n2. Lub użyj domyślnej domeny oferowanej przez Cloudflare\n\n### Metoda 3: Wdrażanie przez Cloudflare Pages\n\n#### Opcja A: Integracja z GitHub (zalecane)\n\n1. **Przygotowanie repozytorium**\n   - Wgraj kod do repozytorium GitHub\n   - Upewnij się, że zawiera wszystkie niezbędne pliki",
  "status": "ok"
}