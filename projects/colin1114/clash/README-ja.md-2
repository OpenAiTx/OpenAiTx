{
  "id": 2,
  "origin": "\n2. **创建 Pages 项目**\n   - 访问 [Cloudflare Pages](https://pages.cloudflare.com/)\n   - 连接你的 GitHub 仓库\n   - 选择项目仓库\n\n3. **构建设置**\n   - 构建命令：留空或 `echo \"No build required\"`\n   - 构建输出目录：`/`（根目录）\n   - 环境变量：无需设置\n\n#### 选项B：直接上传\n\n```bash\n# 使用 Wrangler Pages 部署\nnpm run deploy:pages\n```\n\n## 🛠️ 技术架构\n\n### 前端技术栈\n- **HTML5** - 现代化标记语言\n- **CSS3** - 响应式设计和动画效果\n- **Vanilla JavaScript** - 轻量级前端交互\n\n### 后端技术栈\n- **Cloudflare Workers** - 边缘计算平台\n- **Web APIs** - 标准的 Fetch API 和响应处理\n\n### 支持的协议格式\n- **VMess** - V2Ray 标准协议\n- **VLESS** - V2Ray 轻量协议（支持Reality）\n- **Shadowsocks** - 经典代理协议\n- **Trojan** - 新兴的代理协议\n\n### API 端点\n- `GET /` - 主页面\n- `POST /convert` - 订阅转换API\n- `GET /clash/{config-id}` - 获取YAML配置文件（订阅链接）\n- `GET /yaml/{config-id}` - 下载YAML配置文件\n- `OPTIONS /*` - CORS预检请求\n\n## 📖 使用指南\n\n### 基本使用\n\n1. **输入订阅链接**\n   - 将你的代理订阅链接粘贴到输入框中\n   - 支持 Base64 编码的订阅链接\n\n2. **设置配置名称**\n   - 可选择性地为配置文件设置自定义名称\n   - 默认为 \"My Clash Config\"\n\n3. **转换配置**\n   - 点击 \"转换订阅\" 按钮\n   - 等待转换完成\n\n4. **使用配置**\n   - 复制生成的 YAML 配置\n   - 导入到 Clash 客户端中使用\n\n5. **使用订阅链接（推荐）**\n   - 复制生成的订阅链接\n   - 在Clash客户端中添加订阅\n   - 配置会自动同步，无需手动更新\n\n### 高级配置\n\n生成的 Clash 配置包含以下特性：\n\n- **代理组策略**\n  - 🚀 节点选择 - 手动选择代理\n  - ♻️ 自动选择 - 延迟测试自动选择\n  - 🎯 全球直连 - 直接连接\n\n- **DNS 配置**\n  - 启用 DNS 解析\n  - 支持 fake-ip 模式\n  - 国内外 DNS 分流\n\n- **路由规则**\n  - 本地地址直连\n  - 国内 IP 直连\n  - 其他流量走代理\n\n## 🔧 部署故障排除\n\n### 常见问题\n\n#### 1. Wrangler 找不到入口点\n**错误信息**: `Missing entry-point to Worker script`\n\n**解决方案**: \n- 确保项目根目录有 `wrangler.jsonc` 文件\n- 检查 `wrangler.jsonc` 中的 `main` 字段指向 `worker.js`\n\n#### 2. GitHub Actions 部署失败\n**解决方案**:\n- 在 GitHub 仓库设置中添加以下 Secrets:",
  "origin_sha": "zr7tJc8hvOfDo46UzlFuACJMOON5tS4gQJwIF+1J9LU=",
  "translate": "2. **Pages プロジェクトの作成**\n   - [Cloudflare Pages](https://pages.cloudflare.com/) にアクセス\n   - GitHub リポジトリを接続\n   - プロジェクトリポジトリを選択\n\n3. **ビルド設定**\n   - ビルドコマンド：空欄または `echo \"No build required\"`\n   - ビルド出力ディレクトリ：`/`（ルートディレクトリ）\n   - 環境変数：設定不要\n\n#### オプションB：直接アップロード\n\n```bash\n# Wrangler Pages を使ってデプロイ\nnpm run deploy:pages\n```\n\n## 🛠️ 技術アーキテクチャ\n\n### フロントエンド技術スタック\n- **HTML5** - モダンなマークアップ言語\n- **CSS3** - レスポンシブデザインとアニメーション効果\n- **Vanilla JavaScript** - 軽量なフロントエンドインタラクション\n\n### バックエンド技術スタック\n- **Cloudflare Workers** - エッジコンピューティングプラットフォーム\n- **Web APIs** - 標準の Fetch API とレスポンス処理\n\n### サポートされているプロトコル形式\n- **VMess** - V2Ray 標準プロトコル\n- **VLESS** - V2Ray 軽量プロトコル（Reality対応）\n- **Shadowsocks** - クラシックなプロキシプロトコル\n- **Trojan** - 新しいプロキシプロトコル\n\n### API エンドポイント\n- `GET /` - メインページ\n- `POST /convert` - サブスクリプション変換API\n- `GET /clash/{config-id}` - YAML設定ファイルの取得（サブスクリプションリンク）\n- `GET /yaml/{config-id}` - YAML設定ファイルのダウンロード\n- `OPTIONS /*` - CORSプリフライトリクエスト\n\n## 📖 利用ガイド\n\n### 基本的な使い方\n\n1. **サブスクリプションリンクを入力**\n   - プロキシサブスクリプションリンクを入力欄に貼り付ける\n   - Base64エンコードされたサブスクリプションリンクもサポート\n\n2. **設定名を指定**\n   - オプションで設定ファイルにカスタム名をつけられる\n   - デフォルトは \"My Clash Config\"\n\n3. **設定を変換**\n   - 「サブスクリプション変換」ボタンをクリック\n   - 変換完了まで待機\n\n4. **設定を利用**\n   - 生成された YAML 設定をコピー\n   - Clash クライアントにインポートして利用\n\n5. **サブスクリプションリンクを利用（推奨）**\n   - 生成されたサブスクリプションリンクをコピー\n   - Clash クライアントにサブスクリプションとして追加\n   - 設定が自動で同期、手動更新不要\n\n### 高度な設定\n\n生成された Clash 設定には以下の機能が含まれます：\n\n- **プロキシグループポリシー**\n  - 🚀 ノード選択 - 手動でプロキシを選択\n  - ♻️ 自動選択 - レイテンシテストにより自動選択\n  - 🎯 グローバル直通 - 直接接続\n\n- **DNS 設定**\n  - DNS 解決の有効化\n  - fake-ip モード対応\n  - 国内外 DNS の分流\n\n- **ルーティングルール**\n  - ローカルアドレスは直通\n  - 国内IPは直通\n  - その他トラフィックはプロキシ経由\n\n## 🔧 デプロイ時のトラブルシューティング\n\n### よくある質問\n\n#### 1. Wrangler がエントリーポイントを見つけられない\n**エラーメッセージ**: `Missing entry-point to Worker script`\n\n**解決方法**: \n- プロジェクトのルートディレクトリに `wrangler.jsonc` ファイルがあることを確認\n- `wrangler.jsonc` 内の `main` フィールドが `worker.js` を指しているか確認\n\n#### 2. GitHub Actions のデプロイに失敗する\n**解決方法**:\n- GitHub リポジトリの設定で以下の Secrets を追加：",
  "status": "ok"
}