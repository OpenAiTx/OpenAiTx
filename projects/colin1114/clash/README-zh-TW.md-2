{
  "id": 2,
  "origin": "\n2. **创建 Pages 项目**\n   - 访问 [Cloudflare Pages](https://pages.cloudflare.com/)\n   - 连接你的 GitHub 仓库\n   - 选择项目仓库\n\n3. **构建设置**\n   - 构建命令：留空或 `echo \"No build required\"`\n   - 构建输出目录：`/`（根目录）\n   - 环境变量：无需设置\n\n#### 选项B：直接上传\n\n```bash\n# 使用 Wrangler Pages 部署\nnpm run deploy:pages\n```\n\n## 🛠️ 技术架构\n\n### 前端技术栈\n- **HTML5** - 现代化标记语言\n- **CSS3** - 响应式设计和动画效果\n- **Vanilla JavaScript** - 轻量级前端交互\n\n### 后端技术栈\n- **Cloudflare Workers** - 边缘计算平台\n- **Web APIs** - 标准的 Fetch API 和响应处理\n\n### 支持的协议格式\n- **VMess** - V2Ray 标准协议\n- **VLESS** - V2Ray 轻量协议（支持Reality）\n- **Shadowsocks** - 经典代理协议\n- **Trojan** - 新兴的代理协议\n\n### API 端点\n- `GET /` - 主页面\n- `POST /convert` - 订阅转换API\n- `GET /clash/{config-id}` - 获取YAML配置文件（订阅链接）\n- `GET /yaml/{config-id}` - 下载YAML配置文件\n- `OPTIONS /*` - CORS预检请求\n\n## 📖 使用指南\n\n### 基本使用\n\n1. **输入订阅链接**\n   - 将你的代理订阅链接粘贴到输入框中\n   - 支持 Base64 编码的订阅链接\n\n2. **设置配置名称**\n   - 可选择性地为配置文件设置自定义名称\n   - 默认为 \"My Clash Config\"\n\n3. **转换配置**\n   - 点击 \"转换订阅\" 按钮\n   - 等待转换完成\n\n4. **使用配置**\n   - 复制生成的 YAML 配置\n   - 导入到 Clash 客户端中使用\n\n5. **使用订阅链接（推荐）**\n   - 复制生成的订阅链接\n   - 在Clash客户端中添加订阅\n   - 配置会自动同步，无需手动更新\n\n### 高级配置\n\n生成的 Clash 配置包含以下特性：\n\n- **代理组策略**\n  - 🚀 节点选择 - 手动选择代理\n  - ♻️ 自动选择 - 延迟测试自动选择\n  - 🎯 全球直连 - 直接连接\n\n- **DNS 配置**\n  - 启用 DNS 解析\n  - 支持 fake-ip 模式\n  - 国内外 DNS 分流\n\n- **路由规则**\n  - 本地地址直连\n  - 国内 IP 直连\n  - 其他流量走代理\n\n## 🔧 部署故障排除\n\n### 常见问题\n\n#### 1. Wrangler 找不到入口点\n**错误信息**: `Missing entry-point to Worker script`\n\n**解决方案**: \n- 确保项目根目录有 `wrangler.jsonc` 文件\n- 检查 `wrangler.jsonc` 中的 `main` 字段指向 `worker.js`\n\n#### 2. GitHub Actions 部署失败\n**解决方案**:\n- 在 GitHub 仓库设置中添加以下 Secrets:",
  "origin_sha": "zr7tJc8hvOfDo46UzlFuACJMOON5tS4gQJwIF+1J9LU=",
  "translate": "2. **建立 Pages 專案**\n   - 訪問 [Cloudflare Pages](https://pages.cloudflare.com/)\n   - 連接你的 GitHub 儲存庫\n   - 選擇專案儲存庫\n\n3. **建構設定**\n   - 建構指令：留空或填寫 `echo \"No build required\"`\n   - 建構輸出目錄：`/`（根目錄）\n   - 環境變數：無需設定\n\n#### 選項B：直接上傳\n\n```bash\n# 使用 Wrangler Pages 部署\nnpm run deploy:pages\n```\n\n## 🛠️ 技術架構\n\n### 前端技術棧\n- **HTML5** - 現代化標記語言\n- **CSS3** - 響應式設計和動畫效果\n- **Vanilla JavaScript** - 輕量級前端互動\n\n### 後端技術棧\n- **Cloudflare Workers** - 邊緣運算平台\n- **Web APIs** - 標準的 Fetch API 與回應處理\n\n### 支援的協議格式\n- **VMess** - V2Ray 標準協議\n- **VLESS** - V2Ray 輕量協議（支援 Reality）\n- **Shadowsocks** - 經典代理協議\n- **Trojan** - 新興的代理協議\n\n### API 端點\n- `GET /` - 主頁面\n- `POST /convert` - 訂閱轉換 API\n- `GET /clash/{config-id}` - 取得 YAML 配置檔（訂閱連結）\n- `GET /yaml/{config-id}` - 下載 YAML 配置檔\n- `OPTIONS /*` - CORS 預檢請求\n\n## 📖 使用指南\n\n### 基本使用\n\n1. **輸入訂閱連結**\n   - 將你的代理訂閱連結貼到輸入框中\n   - 支援 Base64 編碼的訂閱連結\n\n2. **設定配置名稱**\n   - 可選擇性地為配置檔設定自訂名稱\n   - 預設為 \"My Clash Config\"\n\n3. **轉換配置**\n   - 點擊「轉換訂閱」按鈕\n   - 等待轉換完成\n\n4. **使用配置**\n   - 複製生成的 YAML 配置\n   - 匯入到 Clash 客戶端中使用\n\n5. **使用訂閱連結（推薦）**\n   - 複製生成的訂閱連結\n   - 在 Clash 客戶端中新增訂閱\n   - 配置會自動同步，無需手動更新\n\n### 進階配置\n\n生成的 Clash 配置包含以下特性：\n\n- **代理群組策略**\n  - 🚀 節點選擇 - 手動選擇代理\n  - ♻️ 自動選擇 - 延遲測試自動選擇\n  - 🎯 全球直連 - 直接連線\n\n- **DNS 配置**\n  - 啟用 DNS 解析\n  - 支援 fake-ip 模式\n  - 中國內外 DNS 分流\n\n- **路由規則**\n  - 本地位址直連\n  - 中國 IP 直連\n  - 其他流量走代理\n\n## 🔧 部署疑難排解\n\n### 常見問題\n\n#### 1. Wrangler 找不到進入點\n**錯誤訊息**: `Missing entry-point to Worker script`\n\n**解決方案**: \n- 確認專案根目錄有 `wrangler.jsonc` 檔案\n- 檢查 `wrangler.jsonc` 中的 `main` 欄位是否指向 `worker.js`\n\n#### 2. GitHub Actions 部署失敗\n**解決方案**:\n- 在 GitHub 儲存庫設定中新增以下 Secrets:",
  "status": "ok"
}