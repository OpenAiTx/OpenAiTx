{
  "id": 2,
  "origin": "\n2. **创建 Pages 项目**\n   - 访问 [Cloudflare Pages](https://pages.cloudflare.com/)\n   - 连接你的 GitHub 仓库\n   - 选择项目仓库\n\n3. **构建设置**\n   - 构建命令：留空或 `echo \"No build required\"`\n   - 构建输出目录：`/`（根目录）\n   - 环境变量：无需设置\n\n#### 选项B：直接上传\n\n```bash\n# 使用 Wrangler Pages 部署\nnpm run deploy:pages\n```\n\n## 🛠️ 技术架构\n\n### 前端技术栈\n- **HTML5** - 现代化标记语言\n- **CSS3** - 响应式设计和动画效果\n- **Vanilla JavaScript** - 轻量级前端交互\n\n### 后端技术栈\n- **Cloudflare Workers** - 边缘计算平台\n- **Web APIs** - 标准的 Fetch API 和响应处理\n\n### 支持的协议格式\n- **VMess** - V2Ray 标准协议\n- **VLESS** - V2Ray 轻量协议（支持Reality）\n- **Shadowsocks** - 经典代理协议\n- **Trojan** - 新兴的代理协议\n\n### API 端点\n- `GET /` - 主页面\n- `POST /convert` - 订阅转换API\n- `GET /clash/{config-id}` - 获取YAML配置文件（订阅链接）\n- `GET /yaml/{config-id}` - 下载YAML配置文件\n- `OPTIONS /*` - CORS预检请求\n\n## 📖 使用指南\n\n### 基本使用\n\n1. **输入订阅链接**\n   - 将你的代理订阅链接粘贴到输入框中\n   - 支持 Base64 编码的订阅链接\n\n2. **设置配置名称**\n   - 可选择性地为配置文件设置自定义名称\n   - 默认为 \"My Clash Config\"\n\n3. **转换配置**\n   - 点击 \"转换订阅\" 按钮\n   - 等待转换完成\n\n4. **使用配置**\n   - 复制生成的 YAML 配置\n   - 导入到 Clash 客户端中使用\n\n5. **使用订阅链接（推荐）**\n   - 复制生成的订阅链接\n   - 在Clash客户端中添加订阅\n   - 配置会自动同步，无需手动更新\n\n### 高级配置\n\n生成的 Clash 配置包含以下特性：\n\n- **代理组策略**\n  - 🚀 节点选择 - 手动选择代理\n  - ♻️ 自动选择 - 延迟测试自动选择\n  - 🎯 全球直连 - 直接连接\n\n- **DNS 配置**\n  - 启用 DNS 解析\n  - 支持 fake-ip 模式\n  - 国内外 DNS 分流\n\n- **路由规则**\n  - 本地地址直连\n  - 国内 IP 直连\n  - 其他流量走代理\n\n## 🔧 部署故障排除\n\n### 常见问题\n\n#### 1. Wrangler 找不到入口点\n**错误信息**: `Missing entry-point to Worker script`\n\n**解决方案**: \n- 确保项目根目录有 `wrangler.jsonc` 文件\n- 检查 `wrangler.jsonc` 中的 `main` 字段指向 `worker.js`\n\n#### 2. GitHub Actions 部署失败\n**解决方案**:\n- 在 GitHub 仓库设置中添加以下 Secrets:",
  "origin_sha": "zr7tJc8hvOfDo46UzlFuACJMOON5tS4gQJwIF+1J9LU=",
  "translate": "2. **Pages-Projekt erstellen**\n   - Besuche [Cloudflare Pages](https://pages.cloudflare.com/)\n   - Verbinde dein GitHub-Repository\n   - Wähle das Projekt-Repository aus\n\n3. **Build-Einstellungen**\n   - Build-Befehl: Leer lassen oder `echo \"No build required\"`\n   - Build-Ausgabeverzeichnis: `/` (Root-Verzeichnis)\n   - Umgebungsvariablen: Keine Einstellung erforderlich\n\n#### Option B: Direktes Hochladen\n\n```bash\n# Deployment mit Wrangler Pages\nnpm run deploy:pages\n```\n\n## 🛠️ Technische Architektur\n\n### Frontend-Technologie-Stack\n- **HTML5** – Moderne Auszeichnungssprache\n- **CSS3** – Responsives Design und Animationseffekte\n- **Vanilla JavaScript** – Leichtgewichtige Frontend-Interaktionen\n\n### Backend-Technologie-Stack\n- **Cloudflare Workers** – Edge-Computing-Plattform\n- **Web APIs** – Standard-Fetch-API und Response-Handling\n\n### Unterstützte Protokollformate\n- **VMess** – V2Ray Standardprotokoll\n- **VLESS** – V2Ray Leichtgewichtsprotokoll (unterstützt Reality)\n- **Shadowsocks** – Klassisches Proxy-Protokoll\n- **Trojan** – Modernes Proxy-Protokoll\n\n### API-Endpunkte\n- `GET /` – Hauptseite\n- `POST /convert` – API zur Abonnement-Konvertierung\n- `GET /clash/{config-id}` – Abrufen der YAML-Konfigurationsdatei (Abo-Link)\n- `GET /yaml/{config-id}` – YAML-Konfigurationsdatei herunterladen\n- `OPTIONS /*` – CORS-Preflight-Anfrage\n\n## 📖 Benutzerhandbuch\n\n### Grundlegende Nutzung\n\n1. **Abonnement-Link eingeben**\n   - Füge deinen Proxy-Abonnement-Link in das Eingabefeld ein\n   - Unterstützt Base64-codierte Abonnement-Links\n\n2. **Konfigurationsnamen festlegen**\n   - Optional kann ein individueller Name für die Konfigurationsdatei vergeben werden\n   - Standardmäßig \"My Clash Config\"\n\n3. **Konfiguration konvertieren**\n   - Klicke auf die Schaltfläche \"Abonnement konvertieren\"\n   - Warte, bis die Konvertierung abgeschlossen ist\n\n4. **Konfiguration verwenden**\n   - Kopiere die generierte YAML-Konfiguration\n   - Importiere sie in den Clash-Client\n\n5. **Abonnement-Link verwenden (empfohlen)**\n   - Kopiere den generierten Abonnement-Link\n   - Füge den Link im Clash-Client als Abonnement hinzu\n   - Die Konfiguration wird automatisch synchronisiert, kein manuelles Update nötig\n\n### Erweiterte Konfiguration\n\nDie generierte Clash-Konfiguration enthält folgende Eigenschaften:\n\n- **Proxy-Gruppenstrategie**\n  - 🚀 Node-Auswahl – Manuelle Proxy-Auswahl\n  - ♻️ Automatische Auswahl – Latenztest und automatische Auswahl\n  - 🎯 Global Direct – Direkte Verbindung\n\n- **DNS-Konfiguration**\n  - DNS-Auflösung aktiviert\n  - Unterstützt Fake-IP-Modus\n  - Aufteilung von DNS inländisch/ausländisch\n\n- **Routing-Regeln**\n  - Lokale Adressen direkt verbinden\n  - Inländische IPs direkt verbinden\n  - Anderer Traffic über Proxy\n\n## 🔧 Fehlerbehebung beim Deployment\n\n### Häufige Probleme\n\n#### 1. Wrangler findet keinen Einstiegspunkt\n**Fehlermeldung**: `Missing entry-point to Worker script`\n\n**Lösung**:\n- Stelle sicher, dass sich im Projekt-Root ein `wrangler.jsonc` befindet\n- Prüfe, ob das Feld `main` in `wrangler.jsonc` auf `worker.js` verweist\n\n#### 2. GitHub Actions Deployment schlägt fehl\n**Lösung**:\n- Füge in den Einstellungen des GitHub-Repositories folgende Secrets hinzu:",
  "status": "ok"
}