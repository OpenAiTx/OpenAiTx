{
  "id": 1,
  "origin": "CDN acceleration and security protection for this project are sponsored by Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nThe author of this project is colin1114.\n\n# 🚀 Clash 订阅转换器\n\n一个美观且功能强大的在线工具，用于将各种代理订阅链接转换为 Clash 配置格式。支持通过 Cloudflare Workers & Pages 自动部署，提供快速、可靠的订阅转换服务。\n\n## ✨ 功能特性\n\n- 🎨 **美观的现代化界面** - 采用渐变背景和卡片式设计\n- 🔄 **多协议支持** - 支持 V2Ray、VLESS、Shadowsocks、Trojan 等主流协议\n- ☁️ **云端部署** - 通过 Cloudflare Workers 实现全球CDN加速\n- 📱 **响应式设计** - 完美适配桌面端和移动端\n- ⚡ **快速转换** - 实时将订阅链接转换为 Clash 配置\n- 📋 **智能复制** - 支持一键复制生成的 YAML 配置，兼容各种浏览器\n- 📡 **订阅链接生成** - 自动生成可直接导入Clash的订阅链接\n- 🌐 **在线YAML访问** - 提供多种YAML文件访问方式：\n  - 📡 订阅链接：支持Clash客户端自动更新\n  - 🔗 在线查看：浏览器中直接查看配置内容\n  - 💾 文件下载：下载.yaml文件到本地\n  - ⚡ 快速访问：简化的下载链接\n- 🔧 **UTF-8支持** - 完美支持中文节点名称和配置\n- 🆓 **完全免费** - 基于 Cloudflare 免费服务，无使用限制\n\n## 📁 项目结构\n\n```\nclash/\n├── index.html              # 前端页面\n├── worker.js               # Cloudflare Worker 后端代码\n├── wrangler.jsonc          # Wrangler 配置文件\n├── _headers                # Cloudflare Pages HTTP头配置\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions 部署配置\n├── README.md              # 项目说明文档\n└── package.json           # 项目配置文件\n```\n\n## 🚀 快速开始\n\n### 方法一：本地运行\n\n1. **克隆项目**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **启动本地服务器**\n   ```bash\n   # 使用 Python\n   python -m http.server 8000\n   \n   # 或使用 Node.js\n   npx serve .\n   ```\n\n3. **访问应用**\n   - 打开浏览器访问 `http://localhost:8000`\n   - 在本地环境下会显示示例配置\n\n### 方法二：Cloudflare Workers 部署\n\n#### 步骤1：创建 Worker\n\n1. 访问 [Cloudflare Workers](https://workers.cloudflare.com/)\n2. 注册/登录 Cloudflare 账户\n3. 点击 \"Create a Worker\"\n4. 将 `worker.js` 中的代码完整复制到编辑器中\n5. 点击 \"Save and Deploy\"\n\n#### 步骤2：使用 Wrangler CLI 部署\n\n```bash\n# 安装 Wrangler CLI\nnpm install -g wrangler\n\n# 登录到 Cloudflare\nwrangler login\n\n# 部署 Worker\nnpm run deploy:worker\n```\n\n#### 步骤3：配置域名（可选）\n\n1. 在 Worker 设置中添加自定义域名\n2. 或使用 Cloudflare 提供的默认域名\n\n### 方法三：Cloudflare Pages 部署\n\n#### 选项A：GitHub 集成（推荐）\n\n1. **准备仓库**\n   - 将代码推送到 GitHub 仓库\n   - 确保包含所有必要文件",
  "origin_sha": "jTqXmIrMxDG3dHdJiIIXLYHuKiIo9ZlvILpt3H+GGJY=",
  "translate": "A aceleração de CDN e a proteção de segurança para este projeto são patrocinadas pela Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nO autor deste projeto é colin1114.\n\n# 🚀 Conversor de Assinaturas Clash\n\nUma ferramenta online bonita e poderosa, usada para converter vários links de assinaturas de proxy para o formato de configuração do Clash. Suporta implantação automática via Cloudflare Workers & Pages, oferecendo um serviço de conversão de assinaturas rápido e confiável.\n\n## ✨ Funcionalidades\n\n- 🎨 **Interface moderna e bonita** - Utiliza fundo em gradiente e design em cartões\n- 🔄 **Suporte a múltiplos protocolos** - Suporta protocolos populares como V2Ray, VLESS, Shadowsocks, Trojan, entre outros\n- ☁️ **Implantação em nuvem** - Aceleração global de CDN via Cloudflare Workers\n- 📱 **Design responsivo** - Perfeita adaptação para desktop e dispositivos móveis\n- ⚡ **Conversão rápida** - Converte links de assinatura em tempo real para configuração Clash\n- 📋 **Cópia inteligente** - Suporta cópia em um clique do YAML gerado, compatível com diversos navegadores\n- 📡 **Geração de links de assinatura** - Gera automaticamente links de assinatura prontos para importar no Clash\n- 🌐 **Acesso online ao YAML** - Oferece várias formas de acessar arquivos YAML:\n  - 📡 Link de assinatura: suporta atualização automática no cliente Clash\n  - 🔗 Visualização online: veja o conteúdo da configuração diretamente no navegador\n  - 💾 Download de arquivo: baixe o arquivo .yaml localmente\n  - ⚡ Acesso rápido: link de download simplificado\n- 🔧 **Suporte UTF-8** - Suporte perfeito para nomes de nós e configurações em chinês\n- 🆓 **Totalmente gratuito** - Baseado nos serviços gratuitos da Cloudflare, sem restrições de uso\n\n## 📁 Estrutura do Projeto\n\n```\nclash/\n├── index.html              # Página frontend\n├── worker.js               # Código backend do Cloudflare Worker\n├── wrangler.jsonc          # Arquivo de configuração do Wrangler\n├── _headers                # Configuração de headers HTTP do Cloudflare Pages\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # Configuração de implantação do GitHub Actions\n├── README.md              # Documento de explicação do projeto\n└── package.json           # Arquivo de configuração do projeto\n```\n\n## 🚀 Início Rápido\n\n### Método 1: Executar localmente\n\n1. **Clone o projeto**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **Inicie o servidor local**\n   ```bash\n   # Usando Python\n   python -m http.server 8000\n   \n   # Ou usando Node.js\n   npx serve .\n   ```\n\n3. **Acesse o aplicativo**\n   - Abra o navegador e acesse `http://localhost:8000`\n   - Um exemplo de configuração será exibido no ambiente local\n\n### Método 2: Implantação via Cloudflare Workers\n\n#### Etapa 1: Criar Worker\n\n1. Acesse [Cloudflare Workers](https://workers.cloudflare.com/)\n2. Registre-se/Faça login em sua conta Cloudflare\n3. Clique em \"Create a Worker\"\n4. Copie todo o código de `worker.js` para o editor\n5. Clique em \"Save and Deploy\"\n\n#### Etapa 2: Implantar usando Wrangler CLI\n\n```bash\n# Instale o Wrangler CLI\nnpm install -g wrangler\n\n# Faça login no Cloudflare\nwrangler login\n\n# Implemente o Worker\nnpm run deploy:worker\n```\n\n#### Etapa 3: Configurar domínio (opcional)\n\n1. Adicione um domínio personalizado nas configurações do Worker\n2. Ou use o domínio padrão fornecido pela Cloudflare\n\n### Método 3: Implantação via Cloudflare Pages\n\n#### Opção A: Integração com GitHub (recomendado)\n\n1. **Prepare o repositório**\n   - Envie o código para o repositório do GitHub\n   - Certifique-se de incluir todos os arquivos necessários",
  "status": "ok"
}