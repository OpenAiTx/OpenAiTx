{
  "id": 1,
  "origin": "CDN acceleration and security protection for this project are sponsored by Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nThe author of this project is colin1114.\n\n# 🚀 Clash 订阅转换器\n\n一个美观且功能强大的在线工具，用于将各种代理订阅链接转换为 Clash 配置格式。支持通过 Cloudflare Workers & Pages 自动部署，提供快速、可靠的订阅转换服务。\n\n## ✨ 功能特性\n\n- 🎨 **美观的现代化界面** - 采用渐变背景和卡片式设计\n- 🔄 **多协议支持** - 支持 V2Ray、VLESS、Shadowsocks、Trojan 等主流协议\n- ☁️ **云端部署** - 通过 Cloudflare Workers 实现全球CDN加速\n- 📱 **响应式设计** - 完美适配桌面端和移动端\n- ⚡ **快速转换** - 实时将订阅链接转换为 Clash 配置\n- 📋 **智能复制** - 支持一键复制生成的 YAML 配置，兼容各种浏览器\n- 📡 **订阅链接生成** - 自动生成可直接导入Clash的订阅链接\n- 🌐 **在线YAML访问** - 提供多种YAML文件访问方式：\n  - 📡 订阅链接：支持Clash客户端自动更新\n  - 🔗 在线查看：浏览器中直接查看配置内容\n  - 💾 文件下载：下载.yaml文件到本地\n  - ⚡ 快速访问：简化的下载链接\n- 🔧 **UTF-8支持** - 完美支持中文节点名称和配置\n- 🆓 **完全免费** - 基于 Cloudflare 免费服务，无使用限制\n\n## 📁 项目结构\n\n```\nclash/\n├── index.html              # 前端页面\n├── worker.js               # Cloudflare Worker 后端代码\n├── wrangler.jsonc          # Wrangler 配置文件\n├── _headers                # Cloudflare Pages HTTP头配置\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions 部署配置\n├── README.md              # 项目说明文档\n└── package.json           # 项目配置文件\n```\n\n## 🚀 快速开始\n\n### 方法一：本地运行\n\n1. **克隆项目**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **启动本地服务器**\n   ```bash\n   # 使用 Python\n   python -m http.server 8000\n   \n   # 或使用 Node.js\n   npx serve .\n   ```\n\n3. **访问应用**\n   - 打开浏览器访问 `http://localhost:8000`\n   - 在本地环境下会显示示例配置\n\n### 方法二：Cloudflare Workers 部署\n\n#### 步骤1：创建 Worker\n\n1. 访问 [Cloudflare Workers](https://workers.cloudflare.com/)\n2. 注册/登录 Cloudflare 账户\n3. 点击 \"Create a Worker\"\n4. 将 `worker.js` 中的代码完整复制到编辑器中\n5. 点击 \"Save and Deploy\"\n\n#### 步骤2：使用 Wrangler CLI 部署\n\n```bash\n# 安装 Wrangler CLI\nnpm install -g wrangler\n\n# 登录到 Cloudflare\nwrangler login\n\n# 部署 Worker\nnpm run deploy:worker\n```\n\n#### 步骤3：配置域名（可选）\n\n1. 在 Worker 设置中添加自定义域名\n2. 或使用 Cloudflare 提供的默认域名\n\n### 方法三：Cloudflare Pages 部署\n\n#### 选项A：GitHub 集成（推荐）\n\n1. **准备仓库**\n   - 将代码推送到 GitHub 仓库\n   - 确保包含所有必要文件",
  "origin_sha": "jTqXmIrMxDG3dHdJiIIXLYHuKiIo9ZlvILpt3H+GGJY=",
  "translate": "このプロジェクトのCDN加速およびセキュリティ保護は、Tencent EdgeOneによって提供されています。\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nこのプロジェクトの著者はcolin1114です。\n\n# 🚀 Clash サブスクリプション変換ツール\n\n美しく、かつ高機能なオンラインツールで、さまざまなプロキシサブスクリプションリンクをClash構成形式に変換します。Cloudflare Workers & Pagesによる自動デプロイに対応し、高速かつ信頼性の高いサブスクリプション変換サービスを提供します。\n\n## ✨ 機能特長\n\n- 🎨 **美しいモダンなインターフェース** - グラデーション背景とカード型デザインを採用\n- 🔄 **多プロトコル対応** - V2Ray、VLESS、Shadowsocks、Trojanなど主要プロトコルをサポート\n- ☁️ **クラウドデプロイ** - Cloudflare WorkersによるグローバルCDN加速\n- 📱 **レスポンシブデザイン** - デスクトップとモバイル端末に完璧対応\n- ⚡ **高速変換** - サブスクリプションリンクをリアルタイムでClash構成に変換\n- 📋 **スマートコピー** - 生成されたYAML構成をワンクリックでコピー可能、各種ブラウザに対応\n- 📡 **サブスクリプションリンク生成** - Clashに直接インポートできるサブスクリプションリンクを自動生成\n- 🌐 **オンラインYAMLアクセス** - 複数のYAMLファイルアクセス方法を提供：\n  - 📡 サブスクリプションリンク：Clashクライアントによる自動更新に対応\n  - 🔗 オンライン閲覧：ブラウザで直接構成内容を確認\n  - 💾 ファイルダウンロード：.yamlファイルをローカルにダウンロード\n  - ⚡ クイックアクセス：簡易ダウンロードリンク\n- 🔧 **UTF-8対応** - 中国語ノード名や構成にも完全対応\n- 🆓 **完全無料** - Cloudflareの無料サービスベース、利用制限なし\n\n## 📁 プロジェクト構成\n\n```\nclash/\n├── index.html              # フロントエンドページ\n├── worker.js               # Cloudflare Worker バックエンドコード\n├── wrangler.jsonc          # Wrangler 設定ファイル\n├── _headers                # Cloudflare Pages HTTPヘッダー設定\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions デプロイ設定\n├── README.md              # プロジェクト説明ドキュメント\n└── package.json           # プロジェクト設定ファイル\n```\n\n## 🚀 クイックスタート\n\n### 方法1：ローカルで実行\n\n1. **プロジェクトをクローン**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **ローカルサーバーを起動**\n   ```bash\n   # Pythonを使用\n   python -m http.server 8000\n   \n   # またはNode.jsを使用\n   npx serve .\n   ```\n\n3. **アプリへアクセス**\n   - ブラウザで `http://localhost:8000` を開く\n   - ローカル環境ではサンプル構成が表示されます\n\n### 方法2：Cloudflare Workers でデプロイ\n\n#### ステップ1：Workerを作成\n\n1. [Cloudflare Workers](https://workers.cloudflare.com/) にアクセス\n2. Cloudflareアカウントに登録/ログイン\n3. 「Create a Worker」をクリック\n4. `worker.js` のコードをすべてエディタにコピー\n5. 「Save and Deploy」をクリック\n\n#### ステップ2：Wrangler CLIでデプロイ\n\n```bash\n# Wrangler CLI をインストール\nnpm install -g wrangler\n\n# Cloudflare にログイン\nwrangler login\n\n# Worker をデプロイ\nnpm run deploy:worker\n```\n\n#### ステップ3：ドメイン設定（任意）\n\n1. Worker設定でカスタムドメインを追加\n2. またはCloudflare提供のデフォルトドメインを利用\n\n### 方法3：Cloudflare Pages でデプロイ\n\n#### オプションA：GitHub連携（推奨）\n\n1. **リポジトリを準備**\n   - コードをGitHubリポジトリにプッシュ\n   - すべての必要ファイルを含めること",
  "status": "ok"
}