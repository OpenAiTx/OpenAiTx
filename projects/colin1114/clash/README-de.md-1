{
  "id": 1,
  "origin": "CDN acceleration and security protection for this project are sponsored by Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nThe author of this project is colin1114.\n\n# 🚀 Clash 订阅转换器\n\n一个美观且功能强大的在线工具，用于将各种代理订阅链接转换为 Clash 配置格式。支持通过 Cloudflare Workers & Pages 自动部署，提供快速、可靠的订阅转换服务。\n\n## ✨ 功能特性\n\n- 🎨 **美观的现代化界面** - 采用渐变背景和卡片式设计\n- 🔄 **多协议支持** - 支持 V2Ray、VLESS、Shadowsocks、Trojan 等主流协议\n- ☁️ **云端部署** - 通过 Cloudflare Workers 实现全球CDN加速\n- 📱 **响应式设计** - 完美适配桌面端和移动端\n- ⚡ **快速转换** - 实时将订阅链接转换为 Clash 配置\n- 📋 **智能复制** - 支持一键复制生成的 YAML 配置，兼容各种浏览器\n- 📡 **订阅链接生成** - 自动生成可直接导入Clash的订阅链接\n- 🌐 **在线YAML访问** - 提供多种YAML文件访问方式：\n  - 📡 订阅链接：支持Clash客户端自动更新\n  - 🔗 在线查看：浏览器中直接查看配置内容\n  - 💾 文件下载：下载.yaml文件到本地\n  - ⚡ 快速访问：简化的下载链接\n- 🔧 **UTF-8支持** - 完美支持中文节点名称和配置\n- 🆓 **完全免费** - 基于 Cloudflare 免费服务，无使用限制\n\n## 📁 项目结构\n\n```\nclash/\n├── index.html              # 前端页面\n├── worker.js               # Cloudflare Worker 后端代码\n├── wrangler.jsonc          # Wrangler 配置文件\n├── _headers                # Cloudflare Pages HTTP头配置\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions 部署配置\n├── README.md              # 项目说明文档\n└── package.json           # 项目配置文件\n```\n\n## 🚀 快速开始\n\n### 方法一：本地运行\n\n1. **克隆项目**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **启动本地服务器**\n   ```bash\n   # 使用 Python\n   python -m http.server 8000\n   \n   # 或使用 Node.js\n   npx serve .\n   ```\n\n3. **访问应用**\n   - 打开浏览器访问 `http://localhost:8000`\n   - 在本地环境下会显示示例配置\n\n### 方法二：Cloudflare Workers 部署\n\n#### 步骤1：创建 Worker\n\n1. 访问 [Cloudflare Workers](https://workers.cloudflare.com/)\n2. 注册/登录 Cloudflare 账户\n3. 点击 \"Create a Worker\"\n4. 将 `worker.js` 中的代码完整复制到编辑器中\n5. 点击 \"Save and Deploy\"\n\n#### 步骤2：使用 Wrangler CLI 部署\n\n```bash\n# 安装 Wrangler CLI\nnpm install -g wrangler\n\n# 登录到 Cloudflare\nwrangler login\n\n# 部署 Worker\nnpm run deploy:worker\n```\n\n#### 步骤3：配置域名（可选）\n\n1. 在 Worker 设置中添加自定义域名\n2. 或使用 Cloudflare 提供的默认域名\n\n### 方法三：Cloudflare Pages 部署\n\n#### 选项A：GitHub 集成（推荐）\n\n1. **准备仓库**\n   - 将代码推送到 GitHub 仓库\n   - 确保包含所有必要文件",
  "origin_sha": "jTqXmIrMxDG3dHdJiIIXLYHuKiIo9ZlvILpt3H+GGJY=",
  "translate": "CDN-Beschleunigung und Sicherheits­schutz für dieses Projekt werden von Tencent EdgeOne gesponsert.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nDer Autor dieses Projekts ist colin1114.\n\n# 🚀 Clash Abonnement-Konverter\n\nEin ansprechendes und leistungsstarkes Online-Tool, das verschiedene Proxy-Abonnement-Links in das Clash-Konfigurationsformat umwandelt. Unterstützt die automatische Bereitstellung über Cloudflare Workers & Pages und bietet einen schnellen, zuverlässigen Abonnement-Konvertierungsdienst.\n\n## ✨ Funktionsmerkmale\n\n- 🎨 **Modernes und ansprechendes Design** – Mit Farbverlauf-Hintergrund und Kartenlayout\n- 🔄 **Mehrprotokoll-Unterstützung** – Unterstützt gängige Protokolle wie V2Ray, VLESS, Shadowsocks, Trojan usw.\n- ☁️ **Cloud-Deployment** – Globale CDN-Beschleunigung durch Cloudflare Workers\n- 📱 **Responsives Design** – Perfekte Anpassung an Desktop- und Mobilgeräte\n- ⚡ **Schnelle Konvertierung** – Echtzeit-Umwandlung von Abonnement-Links in Clash-Konfigurationen\n- 📋 **Intelligentes Kopieren** – Unterstützung für das Kopieren der generierten YAML-Konfiguration mit einem Klick, kompatibel mit allen Browsern\n- 📡 **Abonnement-Link-Generierung** – Automatische Generierung von Abonnement-Links, die direkt in Clash importiert werden können\n- 🌐 **Online-YAML-Zugriff** – Verschiedene Möglichkeiten zum Zugriff auf YAML-Dateien:\n  - 📡 Abonnement-Link: Unterstützung für automatische Updates im Clash-Client\n  - 🔗 Online-Anzeige: Direktes Anzeigen der Konfiguration im Browser\n  - 💾 Datei-Download: Download der .yaml-Datei auf den lokalen Rechner\n  - ⚡ Schneller Zugriff: Vereinfachte Download-Links\n- 🔧 **UTF-8-Unterstützung** – Perfekte Unterstützung für chinesische Knotennamen und Konfigurationen\n- 🆓 **Vollständig kostenlos** – Basierend auf den kostenlosen Diensten von Cloudflare, keine Nutzungseinschränkungen\n\n## 📁 Projektstruktur\n\n```\nclash/\n├── index.html              # Frontend-Seite\n├── worker.js               # Cloudflare Worker Backend-Code\n├── wrangler.jsonc          # Wrangler Konfigurationsdatei\n├── _headers                # Cloudflare Pages HTTP-Header-Konfiguration\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions Deployment-Konfiguration\n├── README.md              # Projektbeschreibung\n└── package.json           # Projektkonfigurationsdatei\n```\n\n## 🚀 Schnellstart\n\n### Methode 1: Lokal ausführen\n\n1. **Projekt klonen**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **Lokalen Server starten**\n   ```bash\n   # Mit Python\n   python -m http.server 8000\n   \n   # Oder mit Node.js\n   npx serve .\n   ```\n\n3. **Anwendung aufrufen**\n   - Im Browser `http://localhost:8000` öffnen\n   - In der lokalen Umgebung wird eine Beispielkonfiguration angezeigt\n\n### Methode 2: Deployment über Cloudflare Workers\n\n#### Schritt 1: Worker erstellen\n\n1. Besuche [Cloudflare Workers](https://workers.cloudflare.com/)\n2. Registriere dich/melde dich bei Cloudflare an\n3. Klicke auf \"Create a Worker\"\n4. Kopiere den gesamten Code aus `worker.js` in den Editor\n5. Klicke auf \"Save and Deploy\"\n\n#### Schritt 2: Deployment mit Wrangler CLI\n\n```bash\n# Wrangler CLI installieren\nnpm install -g wrangler\n\n# Bei Cloudflare anmelden\nwrangler login\n\n# Worker bereitstellen\nnpm run deploy:worker\n```\n\n#### Schritt 3: Domain konfigurieren (optional)\n\n1. Füge in den Worker-Einstellungen eine eigene Domain hinzu\n2. Oder verwende die von Cloudflare bereitgestellte Standarddomain\n\n### Methode 3: Deployment über Cloudflare Pages\n\n#### Option A: GitHub-Integration (empfohlen)\n\n1. **Repository vorbereiten**\n   - Code ins GitHub-Repository pushen\n   - Sicherstellen, dass alle notwendigen Dateien enthalten sind",
  "status": "ok"
}