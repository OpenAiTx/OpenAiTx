{
  "id": 2,
  "origin": "\n2. **创建 Pages 项目**\n   - 访问 [Cloudflare Pages](https://pages.cloudflare.com/)\n   - 连接你的 GitHub 仓库\n   - 选择项目仓库\n\n3. **构建设置**\n   - 构建命令：留空或 `echo \"No build required\"`\n   - 构建输出目录：`/`（根目录）\n   - 环境变量：无需设置\n\n#### 选项B：直接上传\n\n```bash\n# 使用 Wrangler Pages 部署\nnpm run deploy:pages\n```\n\n## 🛠️ 技术架构\n\n### 前端技术栈\n- **HTML5** - 现代化标记语言\n- **CSS3** - 响应式设计和动画效果\n- **Vanilla JavaScript** - 轻量级前端交互\n\n### 后端技术栈\n- **Cloudflare Workers** - 边缘计算平台\n- **Web APIs** - 标准的 Fetch API 和响应处理\n\n### 支持的协议格式\n- **VMess** - V2Ray 标准协议\n- **VLESS** - V2Ray 轻量协议（支持Reality）\n- **Shadowsocks** - 经典代理协议\n- **Trojan** - 新兴的代理协议\n\n### API 端点\n- `GET /` - 主页面\n- `POST /convert` - 订阅转换API\n- `GET /clash/{config-id}` - 获取YAML配置文件（订阅链接）\n- `GET /yaml/{config-id}` - 下载YAML配置文件\n- `OPTIONS /*` - CORS预检请求\n\n## 📖 使用指南\n\n### 基本使用\n\n1. **输入订阅链接**\n   - 将你的代理订阅链接粘贴到输入框中\n   - 支持 Base64 编码的订阅链接\n\n2. **设置配置名称**\n   - 可选择性地为配置文件设置自定义名称\n   - 默认为 \"My Clash Config\"\n\n3. **转换配置**\n   - 点击 \"转换订阅\" 按钮\n   - 等待转换完成\n\n4. **使用配置**\n   - 复制生成的 YAML 配置\n   - 导入到 Clash 客户端中使用\n\n5. **使用订阅链接（推荐）**\n   - 复制生成的订阅链接\n   - 在Clash客户端中添加订阅\n   - 配置会自动同步，无需手动更新\n\n### 高级配置\n\n生成的 Clash 配置包含以下特性：\n\n- **代理组策略**\n  - 🚀 节点选择 - 手动选择代理\n  - ♻️ 自动选择 - 延迟测试自动选择\n  - 🎯 全球直连 - 直接连接\n\n- **DNS 配置**\n  - 启用 DNS 解析\n  - 支持 fake-ip 模式\n  - 国内外 DNS 分流\n\n- **路由规则**\n  - 本地地址直连\n  - 国内 IP 直连\n  - 其他流量走代理\n\n## 🔧 部署故障排除\n\n### 常见问题\n\n#### 1. Wrangler 找不到入口点\n**错误信息**: `Missing entry-point to Worker script`\n\n**解决方案**: \n- 确保项目根目录有 `wrangler.jsonc` 文件\n- 检查 `wrangler.jsonc` 中的 `main` 字段指向 `worker.js`\n\n#### 2. GitHub Actions 部署失败\n**解决方案**:\n- 在 GitHub 仓库设置中添加以下 Secrets:",
  "origin_sha": "zr7tJc8hvOfDo46UzlFuACJMOON5tS4gQJwIF+1J9LU=",
  "translate": "2. **Создание проекта Pages**\n   - Перейдите на [Cloudflare Pages](https://pages.cloudflare.com/)\n   - Подключите ваш репозиторий GitHub\n   - Выберите репозиторий проекта\n\n3. **Настройки сборки**\n   - Команда сборки: оставить пустым или `echo \"No build required\"`\n   - Директория вывода сборки: `/` (корневая директория)\n   - Переменные среды: не требуется\n\n#### Вариант B: Прямая загрузка\n\n```bash\n# Деплой с помощью Wrangler Pages\nnpm run deploy:pages\n```\n\n## 🛠️ Техническая архитектура\n\n### Фронтенд-стек\n- **HTML5** — современный язык разметки\n- **CSS3** — адаптивный дизайн и анимации\n- **Vanilla JavaScript** — легковесное фронтенд-взаимодействие\n\n### Бэкенд-стек\n- **Cloudflare Workers** — платформа edge-вычислений\n- **Web APIs** — стандартные Fetch API и обработка ответов\n\n### Поддерживаемые протоколы\n- **VMess** — стандартный протокол V2Ray\n- **VLESS** — облегчённый протокол V2Ray (поддержка Reality)\n- **Shadowsocks** — классический прокси-протокол\n- **Trojan** — новый прокси-протокол\n\n### API эндпоинты\n- `GET /` — главная страница\n- `POST /convert` — API для конвертации подписки\n- `GET /clash/{config-id}` — получить YAML-конфиг (ссылка на подписку)\n- `GET /yaml/{config-id}` — скачать YAML-конфиг\n- `OPTIONS /*` — предварительный CORS-запрос\n\n## 📖 Руководство пользователя\n\n### Базовое использование\n\n1. **Ввод ссылки на подписку**\n   - Вставьте ссылку на вашу прокси-подписку в поле ввода\n   - Поддерживаются подписки в формате Base64\n\n2. **Задание имени конфигурации**\n   - По желанию задайте собственное имя для файла конфигурации\n   - По умолчанию: \"My Clash Config\"\n\n3. **Конвертация конфигурации**\n   - Нажмите кнопку \"Конвертировать подписку\"\n   - Дождитесь завершения конвертации\n\n4. **Использование конфигурации**\n   - Скопируйте сгенерированный YAML-конфиг\n   - Импортируйте его в клиент Clash\n\n5. **Использование ссылки на подписку (рекомендуется)**\n   - Скопируйте сгенерированную ссылку на подписку\n   - Добавьте её в клиент Clash\n   - Конфиг будет синхронизироваться автоматически, без ручного обновления\n\n### Расширенная конфигурация\n\nСгенерированная конфигурация Clash включает следующие возможности:\n\n- **Стратегии прокси-групп**\n  - 🚀 Выбор узла — ручной выбор прокси\n  - ♻️ Автовыбор — автоматический выбор с тестом задержки\n  - 🎯 Прямое глобальное соединение — прямое подключение\n\n- **DNS-конфигурация**\n  - Включено разрешение DNS\n  - Поддержка режима fake-ip\n  - Разделение DNS для внутренних и внешних запросов\n\n- **Правила маршрутизации**\n  - Прямое соединение для локальных адресов\n  - Прямое соединение для китайских IP\n  - Остальной трафик — через прокси\n\n## 🔧 Устранение неполадок при деплое\n\n### Часто задаваемые вопросы\n\n#### 1. Wrangler не находит точку входа\n**Сообщение об ошибке**: `Missing entry-point to Worker script`\n\n**Решение**: \n- Убедитесь, что в корне проекта есть файл `wrangler.jsonc`\n- Проверьте, что поле `main` в `wrangler.jsonc` указывает на `worker.js`\n\n#### 2. Ошибка деплоя через GitHub Actions\n**Решение**:\n- Добавьте в настройках репозитория GitHub следующие Secrets:",
  "status": "ok"
}