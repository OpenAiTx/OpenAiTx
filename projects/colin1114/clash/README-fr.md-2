{
  "id": 2,
  "origin": "\n2. **创建 Pages 项目**\n   - 访问 [Cloudflare Pages](https://pages.cloudflare.com/)\n   - 连接你的 GitHub 仓库\n   - 选择项目仓库\n\n3. **构建设置**\n   - 构建命令：留空或 `echo \"No build required\"`\n   - 构建输出目录：`/`（根目录）\n   - 环境变量：无需设置\n\n#### 选项B：直接上传\n\n```bash\n# 使用 Wrangler Pages 部署\nnpm run deploy:pages\n```\n\n## 🛠️ 技术架构\n\n### 前端技术栈\n- **HTML5** - 现代化标记语言\n- **CSS3** - 响应式设计和动画效果\n- **Vanilla JavaScript** - 轻量级前端交互\n\n### 后端技术栈\n- **Cloudflare Workers** - 边缘计算平台\n- **Web APIs** - 标准的 Fetch API 和响应处理\n\n### 支持的协议格式\n- **VMess** - V2Ray 标准协议\n- **VLESS** - V2Ray 轻量协议（支持Reality）\n- **Shadowsocks** - 经典代理协议\n- **Trojan** - 新兴的代理协议\n\n### API 端点\n- `GET /` - 主页面\n- `POST /convert` - 订阅转换API\n- `GET /clash/{config-id}` - 获取YAML配置文件（订阅链接）\n- `GET /yaml/{config-id}` - 下载YAML配置文件\n- `OPTIONS /*` - CORS预检请求\n\n## 📖 使用指南\n\n### 基本使用\n\n1. **输入订阅链接**\n   - 将你的代理订阅链接粘贴到输入框中\n   - 支持 Base64 编码的订阅链接\n\n2. **设置配置名称**\n   - 可选择性地为配置文件设置自定义名称\n   - 默认为 \"My Clash Config\"\n\n3. **转换配置**\n   - 点击 \"转换订阅\" 按钮\n   - 等待转换完成\n\n4. **使用配置**\n   - 复制生成的 YAML 配置\n   - 导入到 Clash 客户端中使用\n\n5. **使用订阅链接（推荐）**\n   - 复制生成的订阅链接\n   - 在Clash客户端中添加订阅\n   - 配置会自动同步，无需手动更新\n\n### 高级配置\n\n生成的 Clash 配置包含以下特性：\n\n- **代理组策略**\n  - 🚀 节点选择 - 手动选择代理\n  - ♻️ 自动选择 - 延迟测试自动选择\n  - 🎯 全球直连 - 直接连接\n\n- **DNS 配置**\n  - 启用 DNS 解析\n  - 支持 fake-ip 模式\n  - 国内外 DNS 分流\n\n- **路由规则**\n  - 本地地址直连\n  - 国内 IP 直连\n  - 其他流量走代理\n\n## 🔧 部署故障排除\n\n### 常见问题\n\n#### 1. Wrangler 找不到入口点\n**错误信息**: `Missing entry-point to Worker script`\n\n**解决方案**: \n- 确保项目根目录有 `wrangler.jsonc` 文件\n- 检查 `wrangler.jsonc` 中的 `main` 字段指向 `worker.js`\n\n#### 2. GitHub Actions 部署失败\n**解决方案**:\n- 在 GitHub 仓库设置中添加以下 Secrets:",
  "origin_sha": "zr7tJc8hvOfDo46UzlFuACJMOON5tS4gQJwIF+1J9LU=",
  "translate": "2. **Créer un projet Pages**\n   - Accédez à [Cloudflare Pages](https://pages.cloudflare.com/)\n   - Connectez votre dépôt GitHub\n   - Sélectionnez le dépôt du projet\n\n3. **Paramètres de build**\n   - Commande de build : laisser vide ou `echo \"No build required\"`\n   - Répertoire de sortie de build : `/` (répertoire racine)\n   - Variables d’environnement : aucune configuration requise\n\n#### Option B : Téléversement direct\n\n```bash\n# Déployer avec Wrangler Pages\nnpm run deploy:pages\n```\n\n## 🛠️ Architecture technique\n\n### Stack technologique front-end\n- **HTML5** - Langage de balisage moderne\n- **CSS3** - Design réactif et effets d’animation\n- **Vanilla JavaScript** - Interactions front-end légères\n\n### Stack technologique back-end\n- **Cloudflare Workers** - Plateforme de calcul en périphérie\n- **Web APIs** - API Fetch standard et gestion des réponses\n\n### Protocoles supportés\n- **VMess** - Protocole standard V2Ray\n- **VLESS** - Protocole léger V2Ray (supporte Reality)\n- **Shadowsocks** - Protocole proxy classique\n- **Trojan** - Nouveau protocole proxy\n\n### Points de terminaison de l’API\n- `GET /` - Page principale\n- `POST /convert` - API de conversion d’abonnement\n- `GET /clash/{config-id}` - Obtenir le fichier de configuration YAML (lien d’abonnement)\n- `GET /yaml/{config-id}` - Télécharger le fichier de configuration YAML\n- `OPTIONS /*` - Requête préliminaire CORS\n\n## 📖 Guide d’utilisation\n\n### Utilisation de base\n\n1. **Entrer le lien d’abonnement**\n   - Collez votre lien d’abonnement proxy dans le champ de saisie\n   - Prend en charge les liens d’abonnement codés en Base64\n\n2. **Définir le nom de la configuration**\n   - Optionnellement, définissez un nom personnalisé pour le fichier de configuration\n   - Par défaut : \"My Clash Config\"\n\n3. **Convertir la configuration**\n   - Cliquez sur le bouton \"Convertir l’abonnement\"\n   - Attendez la fin de la conversion\n\n4. **Utiliser la configuration**\n   - Copiez la configuration YAML générée\n   - Importez-la dans le client Clash\n\n5. **Utiliser le lien d’abonnement (recommandé)**\n   - Copiez le lien d’abonnement généré\n   - Ajoutez-le dans le client Clash\n   - La configuration se synchronise automatiquement, pas besoin de mise à jour manuelle\n\n### Configuration avancée\n\nLa configuration Clash générée inclut les fonctionnalités suivantes :\n\n- **Stratégies de groupe proxy**\n  - 🚀 Sélection de nœud - Choix manuel du proxy\n  - ♻️ Sélection automatique - Sélection automatique basée sur le test de latence\n  - 🎯 Connexion directe globale - Connexion directe\n\n- **Configuration DNS**\n  - Activation de la résolution DNS\n  - Prise en charge du mode fake-ip\n  - Routage DNS domestique et international\n\n- **Règles de routage**\n  - Adresses locales en connexion directe\n  - IP nationales en connexion directe\n  - Autre trafic via proxy\n\n## 🔧 Dépannage du déploiement\n\n### Problèmes courants\n\n#### 1. Wrangler ne trouve pas le point d’entrée\n**Message d’erreur** : `Missing entry-point to Worker script`\n\n**Solution** : \n- Vérifiez que le fichier `wrangler.jsonc` se trouve à la racine du projet\n- Vérifiez que le champ `main` dans `wrangler.jsonc` pointe vers `worker.js`\n\n#### 2. Échec du déploiement GitHub Actions\n**Solution** :\n- Ajoutez les Secrets suivants dans les paramètres du dépôt GitHub :",
  "status": "ok"
}