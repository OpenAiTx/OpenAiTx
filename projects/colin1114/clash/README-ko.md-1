{
  "id": 1,
  "origin": "CDN acceleration and security protection for this project are sponsored by Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nThe author of this project is colin1114.\n\n# 🚀 Clash 订阅转换器\n\n一个美观且功能强大的在线工具，用于将各种代理订阅链接转换为 Clash 配置格式。支持通过 Cloudflare Workers & Pages 自动部署，提供快速、可靠的订阅转换服务。\n\n## ✨ 功能特性\n\n- 🎨 **美观的现代化界面** - 采用渐变背景和卡片式设计\n- 🔄 **多协议支持** - 支持 V2Ray、VLESS、Shadowsocks、Trojan 等主流协议\n- ☁️ **云端部署** - 通过 Cloudflare Workers 实现全球CDN加速\n- 📱 **响应式设计** - 完美适配桌面端和移动端\n- ⚡ **快速转换** - 实时将订阅链接转换为 Clash 配置\n- 📋 **智能复制** - 支持一键复制生成的 YAML 配置，兼容各种浏览器\n- 📡 **订阅链接生成** - 自动生成可直接导入Clash的订阅链接\n- 🌐 **在线YAML访问** - 提供多种YAML文件访问方式：\n  - 📡 订阅链接：支持Clash客户端自动更新\n  - 🔗 在线查看：浏览器中直接查看配置内容\n  - 💾 文件下载：下载.yaml文件到本地\n  - ⚡ 快速访问：简化的下载链接\n- 🔧 **UTF-8支持** - 完美支持中文节点名称和配置\n- 🆓 **完全免费** - 基于 Cloudflare 免费服务，无使用限制\n\n## 📁 项目结构\n\n```\nclash/\n├── index.html              # 前端页面\n├── worker.js               # Cloudflare Worker 后端代码\n├── wrangler.jsonc          # Wrangler 配置文件\n├── _headers                # Cloudflare Pages HTTP头配置\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions 部署配置\n├── README.md              # 项目说明文档\n└── package.json           # 项目配置文件\n```\n\n## 🚀 快速开始\n\n### 方法一：本地运行\n\n1. **克隆项目**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **启动本地服务器**\n   ```bash\n   # 使用 Python\n   python -m http.server 8000\n   \n   # 或使用 Node.js\n   npx serve .\n   ```\n\n3. **访问应用**\n   - 打开浏览器访问 `http://localhost:8000`\n   - 在本地环境下会显示示例配置\n\n### 方法二：Cloudflare Workers 部署\n\n#### 步骤1：创建 Worker\n\n1. 访问 [Cloudflare Workers](https://workers.cloudflare.com/)\n2. 注册/登录 Cloudflare 账户\n3. 点击 \"Create a Worker\"\n4. 将 `worker.js` 中的代码完整复制到编辑器中\n5. 点击 \"Save and Deploy\"\n\n#### 步骤2：使用 Wrangler CLI 部署\n\n```bash\n# 安装 Wrangler CLI\nnpm install -g wrangler\n\n# 登录到 Cloudflare\nwrangler login\n\n# 部署 Worker\nnpm run deploy:worker\n```\n\n#### 步骤3：配置域名（可选）\n\n1. 在 Worker 设置中添加自定义域名\n2. 或使用 Cloudflare 提供的默认域名\n\n### 方法三：Cloudflare Pages 部署\n\n#### 选项A：GitHub 集成（推荐）\n\n1. **准备仓库**\n   - 将代码推送到 GitHub 仓库\n   - 确保包含所有必要文件",
  "origin_sha": "jTqXmIrMxDG3dHdJiIIXLYHuKiIo9ZlvILpt3H+GGJY=",
  "translate": "이 프로젝트의 CDN 가속 및 보안 보호는 Tencent EdgeOne의 후원을 받았습니다.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\n이 프로젝트의 저자는 colin1114입니다.\n\n# 🚀 Clash 구독 변환기\n\n다양한 프록시 구독 링크를 Clash 구성 형식으로 변환할 수 있는 미려하고 강력한 온라인 도구입니다. Cloudflare Workers & Pages를 통한 자동 배포를 지원하며, 빠르고 안정적인 구독 변환 서비스를 제공합니다.\n\n## ✨ 기능 특성\n\n- 🎨 **미려한 현대적 인터페이스** - 그라데이션 배경과 카드형 디자인 적용\n- 🔄 **다중 프로토콜 지원** - V2Ray, VLESS, Shadowsocks, Trojan 등 주요 프로토콜 지원\n- ☁️ **클라우드 배포** - Cloudflare Workers를 통한 글로벌 CDN 가속\n- 📱 **반응형 디자인** - 데스크톱과 모바일 모두 완벽 대응\n- ⚡ **빠른 변환** - 실시간으로 구독 링크를 Clash 구성으로 변환\n- 📋 **스마트 복사** - 생성된 YAML 구성을 원클릭 복사, 다양한 브라우저 호환\n- 📡 **구독 링크 생성** - Clash에서 직접 가져올 수 있는 구독 링크 자동 생성\n- 🌐 **온라인 YAML 접근** - 다양한 YAML 파일 접근 방식 제공:\n  - 📡 구독 링크: Clash 클라이언트 자동 업데이트 지원\n  - 🔗 온라인 보기: 브라우저에서 직접 구성 내용 확인\n  - 💾 파일 다운로드: .yaml 파일을 로컬로 다운로드\n  - ⚡ 빠른 접근: 간소화된 다운로드 링크\n- 🔧 **UTF-8 지원** - 한글 노드명과 구성 완벽 지원\n- 🆓 **완전 무료** - Cloudflare 무료 서비스 기반, 사용 제한 없음\n\n## 📁 프로젝트 구조\n\n```\nclash/\n├── index.html              # 프론트엔드 페이지\n├── worker.js               # Cloudflare Worker 백엔드 코드\n├── wrangler.jsonc          # Wrangler 설정 파일\n├── _headers                # Cloudflare Pages HTTP 헤더 설정\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions 배포 설정\n├── README.md              # 프로젝트 설명 문서\n└── package.json           # 프로젝트 설정 파일\n```\n\n## 🚀 빠른 시작\n\n### 방법 1: 로컬 실행\n\n1. **프로젝트 클론**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **로컬 서버 실행**\n   ```bash\n   # Python 사용\n   python -m http.server 8000\n   \n   # 또는 Node.js 사용\n   npx serve .\n   ```\n\n3. **애플리케이션 접속**\n   - 브라우저에서 `http://localhost:8000` 접속\n   - 로컬 환경에서는 예시 구성이 표시됨\n\n### 방법 2: Cloudflare Workers 배포\n\n#### 단계 1: Worker 생성\n\n1. [Cloudflare Workers](https://workers.cloudflare.com/) 접속\n2. Cloudflare 계정 가입/로그인\n3. \"Create a Worker\" 클릭\n4. `worker.js`의 코드를 에디터에 모두 복사\n5. \"Save and Deploy\" 클릭\n\n#### 단계 2: Wrangler CLI로 배포\n\n```bash\n# Wrangler CLI 설치\nnpm install -g wrangler\n\n# Cloudflare 로그인\nwrangler login\n\n# Worker 배포\nnpm run deploy:worker\n```\n\n#### 단계 3: 도메인 설정(선택 사항)\n\n1. Worker 설정에서 커스텀 도메인 추가\n2. 또는 Cloudflare에서 제공하는 기본 도메인 사용\n\n### 방법 3: Cloudflare Pages 배포\n\n#### 옵션 A: GitHub 연동(추천)\n\n1. **저장소 준비**\n   - 코드를 GitHub 저장소에 푸시\n   - 모든 필수 파일이 포함되어 있는지 확인",
  "status": "ok"
}