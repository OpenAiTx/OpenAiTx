{
  "id": 1,
  "origin": "CDN acceleration and security protection for this project are sponsored by Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nThe author of this project is colin1114.\n\n# 🚀 Clash 订阅转换器\n\n一个美观且功能强大的在线工具，用于将各种代理订阅链接转换为 Clash 配置格式。支持通过 Cloudflare Workers & Pages 自动部署，提供快速、可靠的订阅转换服务。\n\n## ✨ 功能特性\n\n- 🎨 **美观的现代化界面** - 采用渐变背景和卡片式设计\n- 🔄 **多协议支持** - 支持 V2Ray、VLESS、Shadowsocks、Trojan 等主流协议\n- ☁️ **云端部署** - 通过 Cloudflare Workers 实现全球CDN加速\n- 📱 **响应式设计** - 完美适配桌面端和移动端\n- ⚡ **快速转换** - 实时将订阅链接转换为 Clash 配置\n- 📋 **智能复制** - 支持一键复制生成的 YAML 配置，兼容各种浏览器\n- 📡 **订阅链接生成** - 自动生成可直接导入Clash的订阅链接\n- 🌐 **在线YAML访问** - 提供多种YAML文件访问方式：\n  - 📡 订阅链接：支持Clash客户端自动更新\n  - 🔗 在线查看：浏览器中直接查看配置内容\n  - 💾 文件下载：下载.yaml文件到本地\n  - ⚡ 快速访问：简化的下载链接\n- 🔧 **UTF-8支持** - 完美支持中文节点名称和配置\n- 🆓 **完全免费** - 基于 Cloudflare 免费服务，无使用限制\n\n## 📁 项目结构\n\n```\nclash/\n├── index.html              # 前端页面\n├── worker.js               # Cloudflare Worker 后端代码\n├── wrangler.jsonc          # Wrangler 配置文件\n├── _headers                # Cloudflare Pages HTTP头配置\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # GitHub Actions 部署配置\n├── README.md              # 项目说明文档\n└── package.json           # 项目配置文件\n```\n\n## 🚀 快速开始\n\n### 方法一：本地运行\n\n1. **克隆项目**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **启动本地服务器**\n   ```bash\n   # 使用 Python\n   python -m http.server 8000\n   \n   # 或使用 Node.js\n   npx serve .\n   ```\n\n3. **访问应用**\n   - 打开浏览器访问 `http://localhost:8000`\n   - 在本地环境下会显示示例配置\n\n### 方法二：Cloudflare Workers 部署\n\n#### 步骤1：创建 Worker\n\n1. 访问 [Cloudflare Workers](https://workers.cloudflare.com/)\n2. 注册/登录 Cloudflare 账户\n3. 点击 \"Create a Worker\"\n4. 将 `worker.js` 中的代码完整复制到编辑器中\n5. 点击 \"Save and Deploy\"\n\n#### 步骤2：使用 Wrangler CLI 部署\n\n```bash\n# 安装 Wrangler CLI\nnpm install -g wrangler\n\n# 登录到 Cloudflare\nwrangler login\n\n# 部署 Worker\nnpm run deploy:worker\n```\n\n#### 步骤3：配置域名（可选）\n\n1. 在 Worker 设置中添加自定义域名\n2. 或使用 Cloudflare 提供的默认域名\n\n### 方法三：Cloudflare Pages 部署\n\n#### 选项A：GitHub 集成（推荐）\n\n1. **准备仓库**\n   - 将代码推送到 GitHub 仓库\n   - 确保包含所有必要文件",
  "origin_sha": "jTqXmIrMxDG3dHdJiIIXLYHuKiIo9ZlvILpt3H+GGJY=",
  "translate": "L'accelerazione CDN e la protezione della sicurezza per questo progetto sono sponsorizzate da Tencent EdgeOne.\n\n[![image](https://github.com/user-attachments/assets/059fed87-d415-41b0-a575-2423bf2d77e2)](https://edgeone.ai/?from=github)\n\nL'autore di questo progetto è colin1114.\n\n# 🚀 Convertitore di abbonamenti Clash\n\nUno strumento online elegante e potente, utilizzato per convertire vari link di abbonamento proxy nel formato di configurazione Clash. Supporta il deployment automatico tramite Cloudflare Workers & Pages, offrendo un servizio di conversione abbonamenti veloce e affidabile.\n\n## ✨ Caratteristiche principali\n\n- 🎨 **Interfaccia moderna ed elegante** - Basata su sfondo sfumato e design a schede\n- 🔄 **Supporto multi-protocollo** - Supporta i principali protocolli come V2Ray, VLESS, Shadowsocks, Trojan e altri\n- ☁️ **Deployment cloud** - Accelerazione CDN globale tramite Cloudflare Workers\n- 📱 **Design responsivo** - Perfetta compatibilità con desktop e dispositivi mobili\n- ⚡ **Conversione rapida** - Conversione in tempo reale dei link di abbonamento in configurazione Clash\n- 📋 **Copia intelligente** - Supporta la copia con un clic della configurazione YAML generata, compatibile con tutti i browser\n- 📡 **Generazione link di abbonamento** - Genera automaticamente link di abbonamento importabili direttamente in Clash\n- 🌐 **Accesso online YAML** - Offre diversi metodi di accesso ai file YAML:\n  - 📡 Link di abbonamento: supporta aggiornamenti automatici dal client Clash\n  - 🔗 Visualizzazione online: visualizza direttamente la configurazione nel browser\n  - 💾 Download file: scarica il file .yaml in locale\n  - ⚡ Accesso rapido: link di download semplificato\n- 🔧 **Supporto UTF-8** - Supporta perfettamente nomi di nodi e configurazioni in cinese\n- 🆓 **Completamente gratuito** - Basato sui servizi gratuiti di Cloudflare, senza limiti d'uso\n\n## 📁 Struttura del progetto\n\n```\nclash/\n├── index.html              # Pagina frontend\n├── worker.js               # Codice backend Cloudflare Worker\n├── wrangler.jsonc          # File di configurazione Wrangler\n├── _headers                # Configurazione intestazioni HTTP di Cloudflare Pages\n├── .github/\n│   └── workflows/\n│       └── deploy.yml      # Configurazione deploy GitHub Actions\n├── README.md              # Documentazione del progetto\n└── package.json           # File di configurazione progetto\n```\n\n## 🚀 Guida rapida\n\n### Metodo 1: Esecuzione locale\n\n1. **Clona il progetto**\n   ```bash\n   git clone <repository-url>\n   cd clash\n   ```\n\n2. **Avvia il server locale**\n   ```bash\n   # Con Python\n   python -m http.server 8000\n\n   # Oppure con Node.js\n   npx serve .\n   ```\n\n3. **Accedi all'applicazione**\n   - Apri il browser e visita `http://localhost:8000`\n   - In ambiente locale verrà mostrata una configurazione di esempio\n\n### Metodo 2: Deployment su Cloudflare Workers\n\n#### Passaggio 1: Crea un Worker\n\n1. Visita [Cloudflare Workers](https://workers.cloudflare.com/)\n2. Registrati/accedi al tuo account Cloudflare\n3. Clicca su \"Create a Worker\"\n4. Copia tutto il codice da `worker.js` nell'editor\n5. Clicca su \"Save and Deploy\"\n\n#### Passaggio 2: Deployment tramite Wrangler CLI\n\n```bash\n# Installa Wrangler CLI\nnpm install -g wrangler\n\n# Accedi a Cloudflare\nwrangler login\n\n# Deploy del Worker\nnpm run deploy:worker\n```\n\n#### Passaggio 3: Configura il dominio (opzionale)\n\n1. Aggiungi un dominio personalizzato nelle impostazioni del Worker\n2. Oppure usa il dominio predefinito fornito da Cloudflare\n\n### Metodo 3: Deployment su Cloudflare Pages\n\n#### Opzione A: Integrazione GitHub (consigliato)\n\n1. **Prepara il repository**\n   - Carica il codice su un repository GitHub\n   - Assicurati di includere tutti i file necessari",
  "status": "ok"
}