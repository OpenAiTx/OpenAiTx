{
  "id": 2,
  "origin": "\n2. **创建 Pages 项目**\n   - 访问 [Cloudflare Pages](https://pages.cloudflare.com/)\n   - 连接你的 GitHub 仓库\n   - 选择项目仓库\n\n3. **构建设置**\n   - 构建命令：留空或 `echo \"No build required\"`\n   - 构建输出目录：`/`（根目录）\n   - 环境变量：无需设置\n\n#### 选项B：直接上传\n\n```bash\n# 使用 Wrangler Pages 部署\nnpm run deploy:pages\n```\n\n## 🛠️ 技术架构\n\n### 前端技术栈\n- **HTML5** - 现代化标记语言\n- **CSS3** - 响应式设计和动画效果\n- **Vanilla JavaScript** - 轻量级前端交互\n\n### 后端技术栈\n- **Cloudflare Workers** - 边缘计算平台\n- **Web APIs** - 标准的 Fetch API 和响应处理\n\n### 支持的协议格式\n- **VMess** - V2Ray 标准协议\n- **VLESS** - V2Ray 轻量协议（支持Reality）\n- **Shadowsocks** - 经典代理协议\n- **Trojan** - 新兴的代理协议\n\n### API 端点\n- `GET /` - 主页面\n- `POST /convert` - 订阅转换API\n- `GET /clash/{config-id}` - 获取YAML配置文件（订阅链接）\n- `GET /yaml/{config-id}` - 下载YAML配置文件\n- `OPTIONS /*` - CORS预检请求\n\n## 📖 使用指南\n\n### 基本使用\n\n1. **输入订阅链接**\n   - 将你的代理订阅链接粘贴到输入框中\n   - 支持 Base64 编码的订阅链接\n\n2. **设置配置名称**\n   - 可选择性地为配置文件设置自定义名称\n   - 默认为 \"My Clash Config\"\n\n3. **转换配置**\n   - 点击 \"转换订阅\" 按钮\n   - 等待转换完成\n\n4. **使用配置**\n   - 复制生成的 YAML 配置\n   - 导入到 Clash 客户端中使用\n\n5. **使用订阅链接（推荐）**\n   - 复制生成的订阅链接\n   - 在Clash客户端中添加订阅\n   - 配置会自动同步，无需手动更新\n\n### 高级配置\n\n生成的 Clash 配置包含以下特性：\n\n- **代理组策略**\n  - 🚀 节点选择 - 手动选择代理\n  - ♻️ 自动选择 - 延迟测试自动选择\n  - 🎯 全球直连 - 直接连接\n\n- **DNS 配置**\n  - 启用 DNS 解析\n  - 支持 fake-ip 模式\n  - 国内外 DNS 分流\n\n- **路由规则**\n  - 本地地址直连\n  - 国内 IP 直连\n  - 其他流量走代理\n\n## 🔧 部署故障排除\n\n### 常见问题\n\n#### 1. Wrangler 找不到入口点\n**错误信息**: `Missing entry-point to Worker script`\n\n**解决方案**: \n- 确保项目根目录有 `wrangler.jsonc` 文件\n- 检查 `wrangler.jsonc` 中的 `main` 字段指向 `worker.js`\n\n#### 2. GitHub Actions 部署失败\n**解决方案**:\n- 在 GitHub 仓库设置中添加以下 Secrets:",
  "origin_sha": "zr7tJc8hvOfDo46UzlFuACJMOON5tS4gQJwIF+1J9LU=",
  "translate": "2. **Pages 프로젝트 생성**\n   - [Cloudflare Pages](https://pages.cloudflare.com/) 방문\n   - GitHub 저장소 연결\n   - 프로젝트 저장소 선택\n\n3. **빌드 설정**\n   - 빌드 명령어: 비워두거나 `echo \"No build required\"`\n   - 빌드 출력 디렉터리: `/` (루트 디렉터리)\n   - 환경 변수: 설정 불필요\n\n#### 옵션 B: 직접 업로드\n\n```bash\n# Wrangler Pages로 배포\nnpm run deploy:pages\n```\n\n## 🛠️ 기술 아키텍처\n\n### 프론트엔드 기술 스택\n- **HTML5** - 현대적인 마크업 언어\n- **CSS3** - 반응형 디자인 및 애니메이션 효과\n- **Vanilla JavaScript** - 경량 프론트엔드 상호작용\n\n### 백엔드 기술 스택\n- **Cloudflare Workers** - 엣지 컴퓨팅 플랫폼\n- **Web APIs** - 표준 Fetch API 및 응답 처리\n\n### 지원 프로토콜 형식\n- **VMess** - V2Ray 표준 프로토콜\n- **VLESS** - V2Ray 경량 프로토콜 (Reality 지원)\n- **Shadowsocks** - 고전적인 프록시 프로토콜\n- **Trojan** - 최신 프록시 프로토콜\n\n### API 엔드포인트\n- `GET /` - 메인 페이지\n- `POST /convert` - 구독 변환 API\n- `GET /clash/{config-id}` - YAML 구성 파일 가져오기 (구독 링크)\n- `GET /yaml/{config-id}` - YAML 구성 파일 다운로드\n- `OPTIONS /*` - CORS 사전 요청\n\n## 📖 사용 가이드\n\n### 기본 사용법\n\n1. **구독 링크 입력**\n   - 프록시 구독 링크를 입력란에 붙여넣기\n   - Base64 인코딩된 구독 링크 지원\n\n2. **구성 이름 설정**\n   - 구성 파일에 사용자 지정 이름 선택 가능\n   - 기본값은 \"My Clash Config\"\n\n3. **구성 변환**\n   - \"구독 변환\" 버튼 클릭\n   - 변환 완료까지 대기\n\n4. **구성 사용**\n   - 생성된 YAML 구성 복사\n   - Clash 클라이언트에 가져와서 사용\n\n5. **구독 링크 사용(추천)**\n   - 생성된 구독 링크 복사\n   - Clash 클라이언트에서 구독 추가\n   - 구성 자동 동기화, 수동 업데이트 불필요\n\n### 고급 구성\n\n생성된 Clash 구성에는 다음과 같은 기능이 포함됩니다:\n\n- **프록시 그룹 정책**\n  - 🚀 노드 선택 - 수동 프록시 선택\n  - ♻️ 자동 선택 - 지연 테스트 자동 선택\n  - 🎯 글로벌 직결 - 직접 연결\n\n- **DNS 구성**\n  - DNS 해석 활성화\n  - fake-ip 모드 지원\n  - 국내외 DNS 분기\n\n- **라우팅 규칙**\n  - 로컬 주소 직접 연결\n  - 국내 IP 직접 연결\n  - 기타 트래픽 프록시 경유\n\n## 🔧 배포 문제 해결\n\n### 자주 묻는 질문\n\n#### 1. Wrangler에서 엔트리 포인트를 찾을 수 없음\n**오류 메시지**: `Missing entry-point to Worker script`\n\n**해결 방법**: \n- 프로젝트 루트에 `wrangler.jsonc` 파일이 있는지 확인\n- `wrangler.jsonc`의 `main` 필드가 `worker.js`를 가리키는지 확인\n\n#### 2. GitHub Actions 배포 실패\n**해결 방법**:\n- GitHub 저장소 설정에 다음 Secrets 추가:",
  "status": "ok"
}