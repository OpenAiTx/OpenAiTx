{
  "id": 1,
  "origin": "![Gitcontainer](https://raw.githubusercontent.com/cyclotruc/gitcontainer/main/docs/image.png)\n\n# Gitcontainer 🐳\n\n**Turn any GitHub repository into a production-ready Docker container with AI-powered Dockerfile generation.**\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)\n[![FastAPI](https://img.shields.io/badge/FastAPI-0.68+-00a393.svg)](https://fastapi.tiangolo.com/)\n\nGitcontainer is an AI-powered web application that automatically generates production-ready Dockerfiles by analyzing GitHub repositories. Simply paste a GitHub URL and get a tailored Dockerfile with intelligent base image selection, dependency management, and Docker best practices.\n\n## 🌟 Quick Access\n\nSimply replace `github.com` with `gitcontainer.com` in any GitHub repository URL to instantly access the Dockerfile generation page for that repository.\n\nFor example:\n```\nhttps://github.com/username/repo  →  https://gitcontainer.com/username/repo\n```\n\n## ✨ Features\n\n- **🔄 Instant URL Access**: Just replace 'github.com' with 'gitcontainer.com' in any GitHub URL\n- **🤖 AI-Powered Analysis**: Uses OpenAI GPT-4 to analyze repository structure and generate intelligent Dockerfiles\n- **⚡ Real-time Streaming**: Watch the AI generate your Dockerfile in real-time with WebSocket streaming\n- **🎯 Smart Detection**: Automatically detects technology stacks (Python, Node.js, Java, Go, etc.)\n- **🔧 Production-Ready**: Generates Dockerfiles following best practices with proper security, multi-stage builds, and optimization\n- **📋 Additional Instructions**: Add custom requirements for specialized environments\n- **📄 Docker Compose**: Automatically suggests docker-compose.yml for complex applications\n- **🎨 Modern UI**: Clean, responsive interface with Monaco editor for syntax highlighting\n- **📱 Mobile Friendly**: Works seamlessly on desktop and mobile devices\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n- Python 3.9 or higher\n- Git\n- OpenAI API key\n\n### Installation\n\n1. **Clone the repository:**\n   ```bash\n   git clone https://github.com/cyclotruc/gitcontainer.git\n   cd gitcontainer\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **Set up environment variables:**\n   ```bash\n   # Create .env file\n   echo \"OPENAI_API_KEY=your_openai_api_key_here\" > .env\n   ```\n\n4. **Run the application:**\n   ```bash\n   python app.py\n   ```\n\n5. **Open your browser:**\n   Navigate to `http://localhost:8000`\n\n## 🛠️ How It Works\n\n1. **URL Processing**: Access any repository by replacing 'github.com' with 'gitcontainer.com' in the URL\n2. **Repository Cloning**: Gitcontainer clones the GitHub repository locally using Git\n3. **Code Analysis**: Uses [gitingest](https://github.com/cyclotruc/gitingest) to analyze the repository structure and extract relevant information\n4. **AI Generation**: Sends the analysis to OpenAI GPT-4 with specialized prompts for Dockerfile generation\n5. **Smart Optimization**: The AI considers:\n   - Technology stack detection\n   - Dependency management\n   - Security best practices\n   - Multi-stage builds when beneficial\n   - Port configuration\n   - Environment variables\n   - Health checks\n\n## 📁 Project Structure\n\n```\ncyclotruc-gitcontainer/\n├── app.py                 # Main FastAPI application\n├── requirements.txt       # Python dependencies\n├── .env                  # Environment variables (create this)\n├── static/               # Static assets (icons, CSS)\n├── templates/\n│   └── index.jinja       # Main HTML template\n└── tools/                # Core functionality modules\n    ├── __init__.py\n    ├── create_container.py  # AI Dockerfile generation\n    ├── git_operations.py    # GitHub repository cloning\n    └── gitingest.py        # Repository analysis\n```\n",
  "origin_sha": "2Kx7T2O6AIyfCMQIH5hRrimkSCQb/noMCAe+9k5GlBM=",
  "translate": "![Gitcontainer](https://raw.githubusercontent.com/cyclotruc/gitcontainer/main/docs/image.png)\n\n# Gitcontainer 🐳\n\n**將任何 GitHub 儲存庫轉換為可投入生產環境的 Docker 容器，並利用 AI 自動生成 Dockerfile。**\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)\n[![FastAPI](https://img.shields.io/badge/FastAPI-0.68+-00a393.svg)](https://fastapi.tiangolo.com/)\n\nGitcontainer 是一個 AI 驅動的網頁應用程式，能夠自動分析 GitHub 儲存庫並生成可投入生產環境的 Dockerfile。只需貼上 GitHub URL，即可獲得量身打造的 Dockerfile，包含智慧型基礎映像選擇、相依性管理及最佳 Docker 實踐。\n\n## 🌟 快速存取\n\n只需將任何 GitHub 儲存庫 URL 中的 `github.com` 替換為 `gitcontainer.com`，即可立即進入該儲存庫的 Dockerfile 生成頁面。\n\n例如：\n```\nhttps://github.com/username/repo  →  https://gitcontainer.com/username/repo\n```\n\n## ✨ 特色\n\n- **🔄 即時 URL 存取**：只需將任何 GitHub URL 中的 'github.com' 替換為 'gitcontainer.com'\n- **🤖 AI 智能分析**：運用 OpenAI GPT-4 來分析儲存庫結構並生成智慧型 Dockerfile\n- **⚡ 即時串流**：透過 WebSocket 串流即時觀看 AI 生成 Dockerfile 的過程\n- **🎯 智慧偵測**：自動偵測技術棧（Python、Node.js、Java、Go 等）\n- **🔧 生產環境就緒**：依循最佳實踐生成 Dockerfile，具備完善的安全性、多階段建置及最佳化\n- **📋 額外指令**：可新增自訂需求以建構特殊環境\n- **📄 Docker Compose**：對於複雜應用程式自動建議 docker-compose.yml\n- **🎨 現代化介面**：乾淨、響應式介面，並以 Monaco 編輯器進行語法高亮\n- **📱 行動裝置友善**：桌面與行動裝置皆可順暢操作\n\n## 🚀 快速開始\n\n### 先決條件\n\n- Python 3.9 或更高版本\n- Git\n- OpenAI API 金鑰\n\n### 安裝步驟\n\n1. **複製儲存庫：**\n   ```bash\n   git clone https://github.com/cyclotruc/gitcontainer.git\n   cd gitcontainer\n   ```\n\n2. **安裝相依套件：**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **設定環境變數：**\n   ```bash\n   # 建立 .env 檔案\n   echo \"OPENAI_API_KEY=your_openai_api_key_here\" > .env\n   ```\n\n4. **啟動應用程式：**\n   ```bash\n   python app.py\n   ```\n\n5. **打開瀏覽器：**\n   前往 `http://localhost:8000`\n\n## 🛠️ 運作流程\n\n1. **URL 處理**：將任何儲存庫的 'github.com' 替換為 'gitcontainer.com' 即可存取\n2. **儲存庫複製**：Gitcontainer 透過 Git 將 GitHub 儲存庫複製到本地\n3. **程式碼分析**：使用 [gitingest](https://github.com/cyclotruc/gitingest) 來分析儲存庫結構並擷取相關資訊\n4. **AI 生成**：將分析結果與專業提示一同發送至 OpenAI GPT-4 以生成 Dockerfile\n5. **智慧最佳化**：AI 會考量：\n   - 技術棧偵測\n   - 相依性管理\n   - 安全性最佳實踐\n   - 當有利時採用多階段建置\n   - 埠口設定\n   - 環境變數\n   - 健康檢查\n\n## 📁 專案結構\n\n```\ncyclotruc-gitcontainer/\n├── app.py                 # 主要 FastAPI 應用程式\n├── requirements.txt       # Python 相依套件\n├── .env                  # 環境變數（請自行建立）\n├── static/               # 靜態資源（圖示、CSS）\n├── templates/\n│   └── index.jinja       # 主要 HTML 樣板\n└── tools/                # 核心功能模組\n    ├── __init__.py\n    ├── create_container.py  # AI Dockerfile 生成\n    ├── git_operations.py    # GitHub 儲存庫複製\n    └── gitingest.py        # 儲存庫分析\n```\n",
  "status": "ok"
}