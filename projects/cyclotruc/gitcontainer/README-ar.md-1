{
  "id": 1,
  "origin": "![Gitcontainer](https://raw.githubusercontent.com/cyclotruc/gitcontainer/main/docs/image.png)\n\n# Gitcontainer 🐳\n\n**Turn any GitHub repository into a production-ready Docker container with AI-powered Dockerfile generation.**\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)\n[![FastAPI](https://img.shields.io/badge/FastAPI-0.68+-00a393.svg)](https://fastapi.tiangolo.com/)\n\nGitcontainer is an AI-powered web application that automatically generates production-ready Dockerfiles by analyzing GitHub repositories. Simply paste a GitHub URL and get a tailored Dockerfile with intelligent base image selection, dependency management, and Docker best practices.\n\n## 🌟 Quick Access\n\nSimply replace `github.com` with `gitcontainer.com` in any GitHub repository URL to instantly access the Dockerfile generation page for that repository.\n\nFor example:\n```\nhttps://github.com/username/repo  →  https://gitcontainer.com/username/repo\n```\n\n## ✨ Features\n\n- **🔄 Instant URL Access**: Just replace 'github.com' with 'gitcontainer.com' in any GitHub URL\n- **🤖 AI-Powered Analysis**: Uses OpenAI GPT-4 to analyze repository structure and generate intelligent Dockerfiles\n- **⚡ Real-time Streaming**: Watch the AI generate your Dockerfile in real-time with WebSocket streaming\n- **🎯 Smart Detection**: Automatically detects technology stacks (Python, Node.js, Java, Go, etc.)\n- **🔧 Production-Ready**: Generates Dockerfiles following best practices with proper security, multi-stage builds, and optimization\n- **📋 Additional Instructions**: Add custom requirements for specialized environments\n- **📄 Docker Compose**: Automatically suggests docker-compose.yml for complex applications\n- **🎨 Modern UI**: Clean, responsive interface with Monaco editor for syntax highlighting\n- **📱 Mobile Friendly**: Works seamlessly on desktop and mobile devices\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n- Python 3.9 or higher\n- Git\n- OpenAI API key\n\n### Installation\n\n1. **Clone the repository:**\n   ```bash\n   git clone https://github.com/cyclotruc/gitcontainer.git\n   cd gitcontainer\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **Set up environment variables:**\n   ```bash\n   # Create .env file\n   echo \"OPENAI_API_KEY=your_openai_api_key_here\" > .env\n   ```\n\n4. **Run the application:**\n   ```bash\n   python app.py\n   ```\n\n5. **Open your browser:**\n   Navigate to `http://localhost:8000`\n\n## 🛠️ How It Works\n\n1. **URL Processing**: Access any repository by replacing 'github.com' with 'gitcontainer.com' in the URL\n2. **Repository Cloning**: Gitcontainer clones the GitHub repository locally using Git\n3. **Code Analysis**: Uses [gitingest](https://github.com/cyclotruc/gitingest) to analyze the repository structure and extract relevant information\n4. **AI Generation**: Sends the analysis to OpenAI GPT-4 with specialized prompts for Dockerfile generation\n5. **Smart Optimization**: The AI considers:\n   - Technology stack detection\n   - Dependency management\n   - Security best practices\n   - Multi-stage builds when beneficial\n   - Port configuration\n   - Environment variables\n   - Health checks\n\n## 📁 Project Structure\n\n```\ncyclotruc-gitcontainer/\n├── app.py                 # Main FastAPI application\n├── requirements.txt       # Python dependencies\n├── .env                  # Environment variables (create this)\n├── static/               # Static assets (icons, CSS)\n├── templates/\n│   └── index.jinja       # Main HTML template\n└── tools/                # Core functionality modules\n    ├── __init__.py\n    ├── create_container.py  # AI Dockerfile generation\n    ├── git_operations.py    # GitHub repository cloning\n    └── gitingest.py        # Repository analysis\n```\n",
  "origin_sha": "2Kx7T2O6AIyfCMQIH5hRrimkSCQb/noMCAe+9k5GlBM=",
  "translate": "![Gitcontainer](https://raw.githubusercontent.com/cyclotruc/gitcontainer/main/docs/image.png)\n\n# Gitcontainer 🐳\n\n**حوّل أي مستودع GitHub إلى حاوية Docker جاهزة للإنتاج عبر توليد ملف Dockerfile مدعوم بالذكاء الاصطناعي.**\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)\n[![FastAPI](https://img.shields.io/badge/FastAPI-0.68+-00a393.svg)](https://fastapi.tiangolo.com/)\n\nGitcontainer هو تطبيق ويب مدعوم بالذكاء الاصطناعي يقوم تلقائيًا بإنشاء ملفات Dockerfile جاهزة للإنتاج من خلال تحليل مستودعات GitHub. فقط الصق رابط GitHub واحصل على ملف Dockerfile مخصص مع اختيار ذكي لصورة الأساس، إدارة الاعتمادات، وأفضل ممارسات Docker.\n\n## 🌟 وصول سريع\n\nببساطة استبدل `github.com` بـ `gitcontainer.com` في أي رابط مستودع GitHub للوصول مباشرة إلى صفحة توليد ملف Dockerfile لذلك المستودع.\n\nعلى سبيل المثال:\n```\nhttps://github.com/username/repo  →  https://gitcontainer.com/username/repo\n```\n\n## ✨ الميزات\n\n- **🔄 وصول فوري عبر الرابط**: فقط استبدل 'github.com' بـ 'gitcontainer.com' في أي رابط GitHub\n- **🤖 تحليل مدعوم بالذكاء الاصطناعي**: يستخدم OpenAI GPT-4 لتحليل بنية المستودع وتوليد ملفات Dockerfile ذكية\n- **⚡ بث في الوقت الحقيقي**: شاهد الذكاء الاصطناعي ينشئ ملف Dockerfile الخاص بك مباشرة عبر بث WebSocket\n- **🎯 كشف ذكي**: يكتشف تلقائيًا تقنيات البرمجة المستخدمة (Python، Node.js، Java، Go، إلخ)\n- **🔧 جاهز للإنتاج**: ينشئ ملفات Dockerfile باتباع أفضل الممارسات مع الأمان المناسب، وبناء متعدد المراحل، وتحسين الأداء\n- **📋 تعليمات إضافية**: أضف متطلبات مخصصة لبيئات متخصصة\n- **📄 Docker Compose**: يقترح تلقائيًا ملف docker-compose.yml للتطبيقات المعقدة\n- **🎨 واجهة عصرية**: واجهة نظيفة ومتجاوبة مع محرر Monaco لإبراز الصيغة البرمجية\n- **📱 متوافق مع الجوال**: يعمل بسلاسة على أجهزة الكمبيوتر المكتبية والهواتف المحمولة\n\n## 🚀 البدء السريع\n\n### المتطلبات الأساسية\n\n- Python 3.9 أو أعلى\n- Git\n- مفتاح واجهة برمجة تطبيقات OpenAI\n\n### التثبيت\n\n1. **استنساخ المستودع:**\n   ```bash\n   git clone https://github.com/cyclotruc/gitcontainer.git\n   cd gitcontainer\n   ```\n\n2. **تثبيت الاعتمادات:**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **إعداد متغيرات البيئة:**\n   ```bash\n   # إنشاء ملف .env\n   echo \"OPENAI_API_KEY=your_openai_api_key_here\" > .env\n   ```\n\n4. **تشغيل التطبيق:**\n   ```bash\n   python app.py\n   ```\n\n5. **فتح المتصفح:**\n   انتقل إلى `http://localhost:8000`\n\n## 🛠️ كيفية العمل\n\n1. **معالجة الرابط**: الوصول إلى أي مستودع عبر استبدال 'github.com' بـ 'gitcontainer.com' في الرابط\n2. **استنساخ المستودع**: يقوم Gitcontainer باستنساخ مستودع GitHub محليًا باستخدام Git\n3. **تحليل الكود**: يستخدم [gitingest](https://github.com/cyclotruc/gitingest) لتحليل بنية المستودع واستخلاص المعلومات ذات الصلة\n4. **توليد بالذكاء الاصطناعي**: يرسل التحليل إلى OpenAI GPT-4 مع مطالبات متخصصة لتوليد ملف Dockerfile\n5. **تحسين ذكي**: يأخذ الذكاء الاصطناعي بعين الاعتبار:\n   - كشف تقنيات البرمجة المستخدمة\n   - إدارة الاعتمادات\n   - أفضل ممارسات الأمان\n   - البناء متعدد المراحل عند الحاجة\n   - إعداد المنافذ\n   - متغيرات البيئة\n   - اختبارات الصحة\n\n## 📁 هيكل المشروع\n\n```\ncyclotruc-gitcontainer/\n├── app.py                 # التطبيق الرئيسي FastAPI\n├── requirements.txt       # اعتمادات بايثون\n├── .env                  # متغيرات البيئة (أنشئ هذا)\n├── static/               # الملفات الثابتة (أيقونات، CSS)\n├── templates/\n│   └── index.jinja       # القالب الرئيسي HTML\n└── tools/                # وحدات الوظائف الأساسية\n    ├── __init__.py\n    ├── create_container.py  # توليد Dockerfile بالذكاء الاصطناعي\n    ├── git_operations.py    # استنساخ مستودعات GitHub\n    └── gitingest.py        # تحليل المستودع\n```",
  "status": "ok"
}