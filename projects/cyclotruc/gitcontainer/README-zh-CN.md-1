{
  "id": 1,
  "origin": "![Gitcontainer](https://raw.githubusercontent.com/cyclotruc/gitcontainer/main/docs/image.png)\n\n# Gitcontainer 🐳\n\n**Turn any GitHub repository into a production-ready Docker container with AI-powered Dockerfile generation.**\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)\n[![FastAPI](https://img.shields.io/badge/FastAPI-0.68+-00a393.svg)](https://fastapi.tiangolo.com/)\n\nGitcontainer is an AI-powered web application that automatically generates production-ready Dockerfiles by analyzing GitHub repositories. Simply paste a GitHub URL and get a tailored Dockerfile with intelligent base image selection, dependency management, and Docker best practices.\n\n## 🌟 Quick Access\n\nSimply replace `github.com` with `gitcontainer.com` in any GitHub repository URL to instantly access the Dockerfile generation page for that repository.\n\nFor example:\n```\nhttps://github.com/username/repo  →  https://gitcontainer.com/username/repo\n```\n\n## ✨ Features\n\n- **🔄 Instant URL Access**: Just replace 'github.com' with 'gitcontainer.com' in any GitHub URL\n- **🤖 AI-Powered Analysis**: Uses OpenAI GPT-4 to analyze repository structure and generate intelligent Dockerfiles\n- **⚡ Real-time Streaming**: Watch the AI generate your Dockerfile in real-time with WebSocket streaming\n- **🎯 Smart Detection**: Automatically detects technology stacks (Python, Node.js, Java, Go, etc.)\n- **🔧 Production-Ready**: Generates Dockerfiles following best practices with proper security, multi-stage builds, and optimization\n- **📋 Additional Instructions**: Add custom requirements for specialized environments\n- **📄 Docker Compose**: Automatically suggests docker-compose.yml for complex applications\n- **🎨 Modern UI**: Clean, responsive interface with Monaco editor for syntax highlighting\n- **📱 Mobile Friendly**: Works seamlessly on desktop and mobile devices\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n- Python 3.9 or higher\n- Git\n- OpenAI API key\n\n### Installation\n\n1. **Clone the repository:**\n   ```bash\n   git clone https://github.com/cyclotruc/gitcontainer.git\n   cd gitcontainer\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **Set up environment variables:**\n   ```bash\n   # Create .env file\n   echo \"OPENAI_API_KEY=your_openai_api_key_here\" > .env\n   ```\n\n4. **Run the application:**\n   ```bash\n   python app.py\n   ```\n\n5. **Open your browser:**\n   Navigate to `http://localhost:8000`\n\n## 🛠️ How It Works\n\n1. **URL Processing**: Access any repository by replacing 'github.com' with 'gitcontainer.com' in the URL\n2. **Repository Cloning**: Gitcontainer clones the GitHub repository locally using Git\n3. **Code Analysis**: Uses [gitingest](https://github.com/cyclotruc/gitingest) to analyze the repository structure and extract relevant information\n4. **AI Generation**: Sends the analysis to OpenAI GPT-4 with specialized prompts for Dockerfile generation\n5. **Smart Optimization**: The AI considers:\n   - Technology stack detection\n   - Dependency management\n   - Security best practices\n   - Multi-stage builds when beneficial\n   - Port configuration\n   - Environment variables\n   - Health checks\n\n## 📁 Project Structure\n\n```\ncyclotruc-gitcontainer/\n├── app.py                 # Main FastAPI application\n├── requirements.txt       # Python dependencies\n├── .env                  # Environment variables (create this)\n├── static/               # Static assets (icons, CSS)\n├── templates/\n│   └── index.jinja       # Main HTML template\n└── tools/                # Core functionality modules\n    ├── __init__.py\n    ├── create_container.py  # AI Dockerfile generation\n    ├── git_operations.py    # GitHub repository cloning\n    └── gitingest.py        # Repository analysis\n```\n",
  "origin_sha": "2Kx7T2O6AIyfCMQIH5hRrimkSCQb/noMCAe+9k5GlBM=",
  "translate": "![Gitcontainer](https://raw.githubusercontent.com/cyclotruc/gitcontainer/main/docs/image.png)\n\n# Gitcontainer 🐳\n\n**将任何 GitHub 仓库转化为可用于生产环境的 Docker 容器，支持 AI 驱动的 Dockerfile 生成。**\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)\n[![FastAPI](https://img.shields.io/badge/FastAPI-0.68+-00a393.svg)](https://fastapi.tiangolo.com/)\n\nGitcontainer 是一个 AI 驱动的 Web 应用，通过分析 GitHub 仓库自动生成可用于生产环境的 Dockerfile。只需粘贴 GitHub 仓库链接，即可获得智能选择基础镜像、依赖管理及符合 Docker 最佳实践的定制 Dockerfile。\n\n## 🌟 快速访问\n\n只需将任何 GitHub 仓库链接中的 `github.com` 替换为 `gitcontainer.com`，即可立即进入该仓库的 Dockerfile 生成页面。\n\n例如：\n```\nhttps://github.com/username/repo  →  https://gitcontainer.com/username/repo\n```\n\n## ✨ 功能亮点\n\n- **🔄 即时 URL 访问**：只需将 GitHub 链接中的 'github.com' 替换为 'gitcontainer.com'\n- **🤖 AI 驱动分析**：利用 OpenAI GPT-4 分析仓库结构，智能生成 Dockerfile\n- **⚡ 实时流式传输**：通过 WebSocket 流式传输，实时观看 AI 生成 Dockerfile\n- **🎯 智能识别**：自动识别技术栈（Python、Node.js、Java、Go 等）\n- **🔧 生产级标准**：遵循最佳实践生成 Dockerfile，具备安全性、多阶段构建及优化\n- **📋 附加指令**：可添加自定义要求，满足特殊环境需求\n- **📄 Docker Compose**：复杂应用可自动建议 docker-compose.yml\n- **🎨 现代 UI**：简洁、响应式界面，内置 Monaco 编辑器高亮语法\n- **📱 移动友好**：桌面与移动端无缝使用\n\n## 🚀 快速开始\n\n### 先决条件\n\n- Python 3.9 或更高版本\n- Git\n- OpenAI API key\n\n### 安装步骤\n\n1. **克隆仓库：**\n   ```bash\n   git clone https://github.com/cyclotruc/gitcontainer.git\n   cd gitcontainer\n   ```\n\n2. **安装依赖：**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **配置环境变量：**\n   ```bash\n   # 创建 .env 文件\n   echo \"OPENAI_API_KEY=your_openai_api_key_here\" > .env\n   ```\n\n4. **运行应用：**\n   ```bash\n   python app.py\n   ```\n\n5. **打开浏览器：**\n   访问 `http://localhost:8000`\n\n## 🛠️ 工作原理\n\n1. **URL 处理**：将 GitHub 链接中的 'github.com' 替换为 'gitcontainer.com' 即可访问任意仓库\n2. **仓库克隆**：Gitcontainer 使用 Git 本地克隆 GitHub 仓库\n3. **代码分析**：利用 [gitingest](https://github.com/cyclotruc/gitingest) 分析仓库结构并提取相关信息\n4. **AI 生成**：将分析结果和专用提示词发送给 OpenAI GPT-4 以生成 Dockerfile\n5. **智能优化**：AI 会考虑以下因素：\n   - 技术栈识别\n   - 依赖管理\n   - 安全最佳实践\n   - 需要时采用多阶段构建\n   - 端口配置\n   - 环境变量\n   - 健康检查\n\n## 📁 项目结构\n\n```\ncyclotruc-gitcontainer/\n├── app.py                 # 主 FastAPI 应用\n├── requirements.txt       # Python 依赖\n├── .env                  # 环境变量（需自行创建）\n├── static/               # 静态资源（图标、CSS）\n├── templates/\n│   └── index.jinja       # 主要 HTML 模板\n└── tools/                # 核心功能模块\n    ├── __init__.py\n    ├── create_container.py  # AI Dockerfile 生成\n    ├── git_operations.py    # GitHub 仓库克隆\n    └── gitingest.py        # 仓库分析\n```",
  "status": "ok"
}