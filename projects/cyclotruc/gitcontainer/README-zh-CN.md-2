{
  "id": 2,
  "origin": "## 🔧 Configuration\n\n### Environment Variables\n\n| Variable | Description | Required |\n|----------|-------------|----------|\n| `OPENAI_API_KEY` | Your OpenAI API key | Yes |\n| `PORT` | Server port (default: 8000) | No |\n| `HOST` | Server host (default: 0.0.0.0) | No |\n\n### Advanced Usage\n\nYou can use the tools programmatically:\n\n```python\nfrom tools import clone_repo_tool, gitingest_tool, create_container_tool\nimport asyncio\n\nasync def generate_dockerfile(github_url):\n    # Clone repository\n    clone_result = await clone_repo_tool(github_url)\n    \n    # Analyze with gitingest\n    analysis = await gitingest_tool(clone_result['local_path'])\n    \n    # Generate Dockerfile\n    dockerfile = await create_container_tool(\n        gitingest_summary=analysis['summary'],\n        gitingest_tree=analysis['tree'],\n        gitingest_content=analysis['content']\n    )\n    \n    return dockerfile\n\n# Usage\nresult = asyncio.run(generate_dockerfile(\"https://github.com/user/repo\"))\nprint(result['dockerfile'])\n```\n\n## 🎨 Customization\n\n### Adding Custom Instructions\n\nUse the \"Additional instructions\" feature to customize generation:\n\n- `\"Use Alpine Linux for smaller image size\"`\n- `\"Include Redis and PostgreSQL\"`\n- `\"Optimize for production deployment\"`\n- `\"Add development tools for debugging\"`\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- **[OpenAI](https://openai.com/)** for providing the GPT-4 API\n- **[gitingest](https://github.com/cyclotruc/gitingest)** for repository analysis capabilities\n- **[FastAPI](https://fastapi.tiangolo.com/)** for the excellent web framework\n- **[Monaco Editor](https://microsoft.github.io/monaco-editor/)** for code syntax highlighting\n\n## 🔗 Links\n\n- **GitHub Repository**: [https://github.com/cyclotruc/gitcontainer](https://github.com/cyclotruc/gitcontainer)\n- **Demo**: Try it live with example repositories\n- **Issues**: [Report bugs or request features](https://github.com/cyclotruc/gitcontainer/issues)\n\n---\n\n**Made with ❤️ by [Romain Courtois](https://github.com/cyclotruc)**\n\n*Turn any repository into a container in seconds!*",
  "origin_sha": "3JQ1X9vch4E/c8oWTX7bz47yaMLKRFr/2Tcnh9fXVCk=",
  "translate": "## 🔧 配置\n\n### 环境变量\n\n| 变量 | 描述 | 是否必填 |\n|------|------|----------|\n| `OPENAI_API_KEY` | 您的 OpenAI API 密钥 | 是 |\n| `PORT` | 服务器端口（默认：8000） | 否 |\n| `HOST` | 服务器主机（默认：0.0.0.0） | 否 |\n\n### 高级用法\n\n您可以以编程方式使用这些工具：\n\n```python\nfrom tools import clone_repo_tool, gitingest_tool, create_container_tool\nimport asyncio\n\nasync def generate_dockerfile(github_url):\n    # 克隆仓库\n    clone_result = await clone_repo_tool(github_url)\n    \n    # 使用 gitingest 进行分析\n    analysis = await gitingest_tool(clone_result['local_path'])\n    \n    # 生成 Dockerfile\n    dockerfile = await create_container_tool(\n        gitingest_summary=analysis['summary'],\n        gitingest_tree=analysis['tree'],\n        gitingest_content=analysis['content']\n    )\n    \n    return dockerfile\n\n# 用法\nresult = asyncio.run(generate_dockerfile(\"https://github.com/user/repo\"))\nprint(result['dockerfile'])\n```\n\n## 🎨 个性化定制\n\n### 添加自定义指令\n\n使用“附加指令”功能进行生成自定义：\n\n- `\"使用 Alpine Linux 以减小镜像体积\"`\n- `\"包含 Redis 和 PostgreSQL\"`\n- `\"为生产部署进行优化\"`\n- `\"添加开发工具以便调试\"`\n\n## 📝 许可证\n\n本项目采用 MIT 许可证，详见 [LICENSE](LICENSE) 文件。\n\n## 🙏 鸣谢\n\n- **[OpenAI](https://openai.com/)** 提供 GPT-4 API\n- **[gitingest](https://github.com/cyclotruc/gitingest)** 提供仓库分析功能\n- **[FastAPI](https://fastapi.tiangolo.com/)** 优秀的 Web 框架\n- **[Monaco Editor](https://microsoft.github.io/monaco-editor/)** 代码语法高亮工具\n\n## 🔗 链接\n\n- **GitHub 仓库**: [https://github.com/cyclotruc/gitcontainer](https://github.com/cyclotruc/gitcontainer)\n- **演示**: 通过示例仓库在线试用\n- **问题反馈**: [报告 Bug 或请求功能](https://github.com/cyclotruc/gitcontainer/issues)\n\n---\n\n**由 [Romain Courtois](https://github.com/cyclotruc) ❤️ 制作**\n\n*让任何仓库秒变容器！*",
  "status": "ok"
}