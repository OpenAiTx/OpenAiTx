{
  "id": 1,
  "origin": "![Gitcontainer](https://raw.githubusercontent.com/cyclotruc/gitcontainer/main/docs/image.png)\n\n# Gitcontainer 🐳\n\n**Turn any GitHub repository into a production-ready Docker container with AI-powered Dockerfile generation.**\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)\n[![FastAPI](https://img.shields.io/badge/FastAPI-0.68+-00a393.svg)](https://fastapi.tiangolo.com/)\n\nGitcontainer is an AI-powered web application that automatically generates production-ready Dockerfiles by analyzing GitHub repositories. Simply paste a GitHub URL and get a tailored Dockerfile with intelligent base image selection, dependency management, and Docker best practices.\n\n## 🌟 Quick Access\n\nSimply replace `github.com` with `gitcontainer.com` in any GitHub repository URL to instantly access the Dockerfile generation page for that repository.\n\nFor example:\n```\nhttps://github.com/username/repo  →  https://gitcontainer.com/username/repo\n```\n\n## ✨ Features\n\n- **🔄 Instant URL Access**: Just replace 'github.com' with 'gitcontainer.com' in any GitHub URL\n- **🤖 AI-Powered Analysis**: Uses OpenAI GPT-4 to analyze repository structure and generate intelligent Dockerfiles\n- **⚡ Real-time Streaming**: Watch the AI generate your Dockerfile in real-time with WebSocket streaming\n- **🎯 Smart Detection**: Automatically detects technology stacks (Python, Node.js, Java, Go, etc.)\n- **🔧 Production-Ready**: Generates Dockerfiles following best practices with proper security, multi-stage builds, and optimization\n- **📋 Additional Instructions**: Add custom requirements for specialized environments\n- **📄 Docker Compose**: Automatically suggests docker-compose.yml for complex applications\n- **🎨 Modern UI**: Clean, responsive interface with Monaco editor for syntax highlighting\n- **📱 Mobile Friendly**: Works seamlessly on desktop and mobile devices\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n- Python 3.9 or higher\n- Git\n- OpenAI API key\n\n### Installation\n\n1. **Clone the repository:**\n   ```bash\n   git clone https://github.com/cyclotruc/gitcontainer.git\n   cd gitcontainer\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **Set up environment variables:**\n   ```bash\n   # Create .env file\n   echo \"OPENAI_API_KEY=your_openai_api_key_here\" > .env\n   ```\n\n4. **Run the application:**\n   ```bash\n   python app.py\n   ```\n\n5. **Open your browser:**\n   Navigate to `http://localhost:8000`\n\n## 🛠️ How It Works\n\n1. **URL Processing**: Access any repository by replacing 'github.com' with 'gitcontainer.com' in the URL\n2. **Repository Cloning**: Gitcontainer clones the GitHub repository locally using Git\n3. **Code Analysis**: Uses [gitingest](https://github.com/cyclotruc/gitingest) to analyze the repository structure and extract relevant information\n4. **AI Generation**: Sends the analysis to OpenAI GPT-4 with specialized prompts for Dockerfile generation\n5. **Smart Optimization**: The AI considers:\n   - Technology stack detection\n   - Dependency management\n   - Security best practices\n   - Multi-stage builds when beneficial\n   - Port configuration\n   - Environment variables\n   - Health checks\n\n## 📁 Project Structure\n\n```\ncyclotruc-gitcontainer/\n├── app.py                 # Main FastAPI application\n├── requirements.txt       # Python dependencies\n├── .env                  # Environment variables (create this)\n├── static/               # Static assets (icons, CSS)\n├── templates/\n│   └── index.jinja       # Main HTML template\n└── tools/                # Core functionality modules\n    ├── __init__.py\n    ├── create_container.py  # AI Dockerfile generation\n    ├── git_operations.py    # GitHub repository cloning\n    └── gitingest.py        # Repository analysis\n```\n",
  "origin_sha": "2Kx7T2O6AIyfCMQIH5hRrimkSCQb/noMCAe+9k5GlBM=",
  "translate": "![Gitcontainer](https://raw.githubusercontent.com/cyclotruc/gitcontainer/main/docs/image.png)\n\n# Gitcontainer 🐳\n\n**Transformez n’importe quel dépôt GitHub en un conteneur Docker prêt pour la production grâce à la génération de Dockerfile assistée par l’IA.**\n\n[![Licence MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)\n[![FastAPI](https://img.shields.io/badge/FastAPI-0.68+-00a393.svg)](https://fastapi.tiangolo.com/)\n\nGitcontainer est une application web alimentée par l’IA qui génère automatiquement des Dockerfiles prêts pour la production en analysant les dépôts GitHub. Il suffit de coller une URL GitHub pour obtenir un Dockerfile personnalisé avec une sélection intelligente de l’image de base, la gestion des dépendances et les meilleures pratiques Docker.\n\n## 🌟 Accès rapide\n\nRemplacez simplement `github.com` par `gitcontainer.com` dans n’importe quelle URL de dépôt GitHub pour accéder instantanément à la page de génération du Dockerfile pour ce dépôt.\n\nPar exemple :\n```\nhttps://github.com/username/repo  →  https://gitcontainer.com/username/repo\n```\n\n## ✨ Fonctionnalités\n\n- **🔄 Accès instantané par URL** : Remplacez simplement 'github.com' par 'gitcontainer.com' dans n’importe quelle URL GitHub\n- **🤖 Analyse par IA** : Utilise OpenAI GPT-4 pour analyser la structure du dépôt et générer des Dockerfiles intelligents\n- **⚡ Streaming en temps réel** : Regardez l’IA générer votre Dockerfile en temps réel grâce au streaming WebSocket\n- **🎯 Détection intelligente** : Détecte automatiquement les stacks technologiques (Python, Node.js, Java, Go, etc.)\n- **🔧 Prêt pour la production** : Génère des Dockerfiles respectant les meilleures pratiques avec sécurité, constructions multi-étapes et optimisation\n- **📋 Instructions supplémentaires** : Ajoutez des exigences personnalisées pour des environnements spécialisés\n- **📄 Docker Compose** : Propose automatiquement un docker-compose.yml pour les applications complexes\n- **🎨 Interface moderne** : Interface propre et réactive avec l’éditeur Monaco pour la coloration syntaxique\n- **📱 Compatible mobile** : Fonctionne parfaitement sur ordinateurs et appareils mobiles\n\n## 🚀 Démarrage rapide\n\n### Prérequis\n\n- Python 3.9 ou supérieur\n- Git\n- Clé API OpenAI\n\n### Installation\n\n1. **Clonez le dépôt :**\n   ```bash\n   git clone https://github.com/cyclotruc/gitcontainer.git\n   cd gitcontainer\n   ```\n\n2. **Installez les dépendances :**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **Configurez les variables d’environnement :**\n   ```bash\n   # Créez le fichier .env\n   echo \"OPENAI_API_KEY=your_openai_api_key_here\" > .env\n   ```\n\n4. **Lancez l’application :**\n   ```bash\n   python app.py\n   ```\n\n5. **Ouvrez votre navigateur :**\n   Rendez-vous sur `http://localhost:8000`\n\n## 🛠️ Fonctionnement\n\n1. **Traitement de l’URL** : Accédez à n’importe quel dépôt en remplaçant 'github.com' par 'gitcontainer.com' dans l’URL\n2. **Clonage du dépôt** : Gitcontainer clone localement le dépôt GitHub via Git\n3. **Analyse du code** : Utilise [gitingest](https://github.com/cyclotruc/gitingest) pour analyser la structure du dépôt et extraire les informations pertinentes\n4. **Génération IA** : Envoie l’analyse à OpenAI GPT-4 avec des prompts spécialisés pour la génération du Dockerfile\n5. **Optimisation intelligente** : L’IA prend en compte :\n   - Détection du stack technologique\n   - Gestion des dépendances\n   - Bonnes pratiques de sécurité\n   - Constructions multi-étapes si bénéfique\n   - Configuration des ports\n   - Variables d’environnement\n   - Health checks\n\n## 📁 Structure du projet\n\n```\ncyclotruc-gitcontainer/\n├── app.py                 # Application principale FastAPI\n├── requirements.txt       # Dépendances Python\n├── .env                  # Variables d’environnement (à créer)\n├── static/               # Fichiers statiques (icônes, CSS)\n├── templates/\n│   └── index.jinja       # Modèle HTML principal\n└── tools/                # Modules de fonctionnalité principale\n    ├── __init__.py\n    ├── create_container.py  # Génération du Dockerfile par IA\n    ├── git_operations.py    # Clonage du dépôt GitHub\n    └── gitingest.py        # Analyse du dépôt\n```\n",
  "status": "ok"
}