[
  {
    "Id": 1,
    "Content": "# Safe Units\n\n[![NPM Version](https://img.shields.io/npm/v/safe-units.svg)](https://www.npmjs.com/package/safe-units) [![MIT License](https://img.shields.io/npm/l/safe-units.svg)](https://github.com/jscheiny/safe-units/blob/master/LICENSE)\n\nSafe Units is a type safe library for using units of measurement in TypeScript.  Safe Units provides an implementation of an SI based unit system but is flexible enough to allow users to create their own unit systems which can be independent or can interoperate with the built-in units. Users can also make unit systems for any numeric type they'd like not just the JavaScript `number` type. This library requires TypeScript 3.2 or higher.\n",
    "ContentSha": "E5OmC837yki2BMcbp35ZxWDMJDaIpRwbg90UYyKUSjI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# 안전 단위\n\n[![NPM 버전](https://img.shields.io/npm/v/safe-units.svg)](https://www.npmjs.com/package/safe-units) [![MIT 라이선스](https://img.shields.io/npm/l/safe-units.svg)](https://github.com/jscheiny/safe-units/blob/master/LICENSE)\n\n안전 단위는 TypeScript에서 측정 단위를 사용할 때 타입 안전성을 제공하는 라이브러리입니다. 안전 단위는 SI 기반 단위 시스템을 구현하지만 사용자가 독립적이거나 내장 단위와 상호 운용할 수 있는 자체 단위 시스템을 생성할 수 있을 만큼 유연합니다. 사용자는 JavaScript `number` 타입뿐만 아니라 원하는 모든 숫자 타입에 대한 단위 시스템도 만들 수 있습니다. 이 라이브러리는 TypeScript 3.2 이상이 필요합니다.\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "wZa1GHRABvSjbFqk946ylLZ9r/kyFqjm6LRSDe2/T8U=",
        "originContent": "# Safe Units",
        "translatedContent": "# 안전 단위"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "yEXeuqyHdxTDpPQssaEW8L3lBkneAlGwhNiSGAK8cKw=",
        "originContent": "[![NPM Version](https://img.shields.io/npm/v/safe-units.svg)](https://www.npmjs.com/package/safe-units) [![MIT License](https://img.shields.io/npm/l/safe-units.svg)](https://github.com/jscheiny/safe-units/blob/master/LICENSE)",
        "translatedContent": "[![NPM 버전](https://img.shields.io/npm/v/safe-units.svg)](https://www.npmjs.com/package/safe-units) [![MIT 라이선스](https://img.shields.io/npm/l/safe-units.svg)](https://github.com/jscheiny/safe-units/blob/master/LICENSE)"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "vioI+yqs8vukzSqART6bOGTyU/9X3E3heZi98/A+Lks=",
        "originContent": "Safe Units is a type safe library for using units of measurement in TypeScript.  Safe Units provides an implementation of an SI based unit system but is flexible enough to allow users to create their own unit systems which can be independent or can interoperate with the built-in units. Users can also make unit systems for any numeric type they'd like not just the JavaScript `number` type. This library requires TypeScript 3.2 or higher.",
        "translatedContent": "안전 단위는 TypeScript에서 측정 단위를 사용할 때 타입 안전성을 제공하는 라이브러리입니다. 안전 단위는 SI 기반 단위 시스템을 구현하지만 사용자가 독립적이거나 내장 단위와 상호 운용할 수 있는 자체 단위 시스템을 생성할 수 있을 만큼 유연합니다. 사용자는 JavaScript `number` 타입뿐만 아니라 원하는 모든 숫자 타입에 대한 단위 시스템도 만들 수 있습니다. 이 라이브러리는 TypeScript 3.2 이상이 필요합니다."
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "```ts\nimport { Length, Measure, meters, seconds, Time, Velocity } from \"safe-units\";\n\nconst length: Length = Measure.of(30, meters);\nconst time: Time = Measure.of(15, seconds);\nconst velocity: Velocity = length.over(time);\n\nconsole.log(length.toString()); // 30 m\nconsole.log(time.toString()); // 15 s\nconsole.log(velocity.toString()); // 2 m * s^-1\n\n// @ts-expect-error ERROR: A measure of m*s isn't assignable to a measure of m/s.\nconst error: Velocity = length.times(time);\n```",
    "ContentSha": "LjPOsvls5WcgBcqjT2m+ojXsti/kjO1qNtDfFGDXliI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ts\nimport { Length, Measure, meters, seconds, Time, Velocity } from \"safe-units\";\n\nconst length: Length = Measure.of(30, meters);\nconst time: Time = Measure.of(15, seconds);\nconst velocity: Velocity = length.over(time);\n\nconsole.log(length.toString()); // 30 m\nconsole.log(time.toString()); // 15 s\nconsole.log(velocity.toString()); // 2 m * s^-1\n\n// @ts-expect-error ERROR: A measure of m*s isn't assignable to a measure of m/s.\nconst error: Velocity = length.times(time);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "wBgRKHhGgYr2NL03UCGza3nc2bR+8fO3ER5l5F6RvXE=",
        "originContent": "```ts",
        "translatedContent": "```ts"
      },
      {
        "row": 2,
        "rowsha": "SQaJfRZSXKdfdt5fCWopCFw7uYsCmOMyBmawxGN1vqY=",
        "originContent": "import { Length, Measure, meters, seconds, Time, Velocity } from \"safe-units\";",
        "translatedContent": "import { Length, Measure, meters, seconds, Time, Velocity } from \"safe-units\";"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "2YHv0QWwk7bbUVkyJZpYHyQ2p0WnHv1uCyPClwPU8Tc=",
        "originContent": "const length: Length = Measure.of(30, meters);",
        "translatedContent": "const length: Length = Measure.of(30, meters);"
      },
      {
        "row": 5,
        "rowsha": "fI66jAZbt3+6Qmy0/kjtUzh4ZOnXJBpBZFsqz35G3X4=",
        "originContent": "const time: Time = Measure.of(15, seconds);",
        "translatedContent": "const time: Time = Measure.of(15, seconds);"
      },
      {
        "row": 6,
        "rowsha": "Gacev+TR2E/5NKyXah8iMNV2Tb7bWhNcrINaI27cAo4=",
        "originContent": "const velocity: Velocity = length.over(time);",
        "translatedContent": "const velocity: Velocity = length.over(time);"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "RiRCxPcOwM2gefhnrTTXbNaDsZqqbh56i1ToRUwG7aE=",
        "originContent": "console.log(length.toString()); // 30 m",
        "translatedContent": "console.log(length.toString()); // 30 m"
      },
      {
        "row": 9,
        "rowsha": "f6uV9rQJIZhyGoVc6UC7R2zFKavl6CdTgiVALDJMLMk=",
        "originContent": "console.log(time.toString()); // 15 s",
        "translatedContent": "console.log(time.toString()); // 15 s"
      },
      {
        "row": 10,
        "rowsha": "y3/q62D4+LzB+brK8JYw+xvRuxmms2HeJmttxJCo/T0=",
        "originContent": "console.log(velocity.toString()); // 2 m * s^-1",
        "translatedContent": "console.log(velocity.toString()); // 2 m * s^-1"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "u5Vt8OAtxa1eRTQ9/Y2ArN6lUoBSewJ7O1rbmRAXZ+Q=",
        "originContent": "// @ts-expect-error ERROR: A measure of m*s isn't assignable to a measure of m/s.",
        "translatedContent": "// @ts-expect-error ERROR: A measure of m*s isn't assignable to a measure of m/s."
      },
      {
        "row": 13,
        "rowsha": "rJ5ykaK3ytrqYjXSgj0FmftKr6JlOmb3nnyEJXWOn70=",
        "originContent": "const error: Velocity = length.times(time);",
        "translatedContent": "const error: Velocity = length.times(time);"
      },
      {
        "row": 14,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 3,
    "Content": "\n## Features\n\n⭐&nbsp; Compile-time unit arithmetic for typesafe dimensional analysis (with exponents between -5 and +5)!\n\n⭐&nbsp; Large library of predefined units including SI (with prefixes), Imperial, and US customary units!\n\n⭐&nbsp; Ability to add your own unit system that can work with built-in units!\n\n⭐&nbsp; Long build times & cryptic error messages!\n\n## Prerequisites\n\nSafe units is written in TypeScript and should be consumed by TypeScript users to take full advantage of what it provides. In addition you will need the following:\n\n- [TypeScript](http://www.typescriptlang.org/) 3.2 or later\n- [Strict null checks](https://www.typescriptlang.org/docs/handbook/compiler-options.html) enabled for your project\n\n## Installation\n",
    "ContentSha": "VvgZ3juRh49cwMAzq1BJQfipuXN3Tf089qrINYjgpJo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 기능\n\n⭐&nbsp; 타입 안전 차원 분석을 위한 컴파일 타임 단위 산술(지수는 -5에서 +5 사이)!\n\n⭐&nbsp; SI(접두사 포함), 임페리얼, 미국 관습 단위를 포함한 방대한 미리 정의된 단위 라이브러리!\n\n⭐&nbsp; 내장 단위와 함께 작동할 수 있는 자체 단위 시스템 추가 기능!\n\n⭐&nbsp; 긴 빌드 시간 및 난해한 오류 메시지!\n\n## 전제 조건\n\nSafe units는 TypeScript로 작성되었으며 제공하는 모든 기능을 최대한 활용하려면 TypeScript 사용자가 사용해야 합니다. 또한 다음이 필요합니다:\n\n- [TypeScript](http://www.typescriptlang.org/) 3.2 이상\n- 프로젝트에 대해 [엄격한 널 검사](https://www.typescriptlang.org/docs/handbook/compiler-options.html) 활성화\n\n## 설치\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## 기능"
      },
      {
        "row": 2,
        "rowsha": "nrVeE3oDH0tNFm9CX5stkYPKAaCrnePTkJZtrLHmoDg=",
        "originContent": "## Features",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "⭐&nbsp; 타입 안전 차원 분석을 위한 컴파일 타임 단위 산술(지수는 -5에서 +5 사이)!"
      },
      {
        "row": 4,
        "rowsha": "1P1+RtnEerRTys4XBNmbKPI5jJxUfDzVM0Or1CzrinQ=",
        "originContent": "⭐&nbsp; Compile-time unit arithmetic for typesafe dimensional analysis (with exponents between -5 and +5)!",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "⭐&nbsp; SI(접두사 포함), 임페리얼, 미국 관습 단위를 포함한 방대한 미리 정의된 단위 라이브러리!"
      },
      {
        "row": 6,
        "rowsha": "A+rWj6F2nh5gzjUh0Wbhk1zOgFkVnP9R59WqQL0eoxY=",
        "originContent": "⭐&nbsp; Large library of predefined units including SI (with prefixes), Imperial, and US customary units!",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "⭐&nbsp; 내장 단위와 함께 작동할 수 있는 자체 단위 시스템 추가 기능!"
      },
      {
        "row": 8,
        "rowsha": "gVdg+HDxuGpCTXh5zvvSvpbv7c6u/L6G6chdhAgYzeU=",
        "originContent": "⭐&nbsp; Ability to add your own unit system that can work with built-in units!",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "⭐&nbsp; 긴 빌드 시간 및 난해한 오류 메시지!"
      },
      {
        "row": 10,
        "rowsha": "7axLA0Vq+uve+WNFoTohylCybmx/nvt2xyGJjiy5wOo=",
        "originContent": "⭐&nbsp; Long build times & cryptic error messages!",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## 전제 조건"
      },
      {
        "row": 12,
        "rowsha": "u9PUlJpvI379jU/1x8XzDZaOepia0S89fc72nJgFORI=",
        "originContent": "## Prerequisites",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Safe units는 TypeScript로 작성되었으며 제공하는 모든 기능을 최대한 활용하려면 TypeScript 사용자가 사용해야 합니다. 또한 다음이 필요합니다:"
      },
      {
        "row": 14,
        "rowsha": "zMYUv+NI0hln7ahs2HT0ENW4SYC4ODMNXnbFzKcBg+E=",
        "originContent": "Safe units is written in TypeScript and should be consumed by TypeScript users to take full advantage of what it provides. In addition you will need the following:",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- [TypeScript](http://www.typescriptlang.org/) 3.2 이상"
      },
      {
        "row": 16,
        "rowsha": "Gns4zKm1pAmY0f7kKQizhkKbyIivU5CqDgJpqhZrYuI=",
        "originContent": "- [TypeScript](http://www.typescriptlang.org/) 3.2 or later",
        "translatedContent": "- 프로젝트에 대해 [엄격한 널 검사](https://www.typescriptlang.org/docs/handbook/compiler-options.html) 활성화"
      },
      {
        "row": 17,
        "rowsha": "qsF/ixrFH5WRSMSI5RIfmd4ElHBsqvAHVx4rTLdZjM8=",
        "originContent": "- [Strict null checks](https://www.typescriptlang.org/docs/handbook/compiler-options.html) enabled for your project",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## 설치"
      },
      {
        "row": 19,
        "rowsha": "oV0SUDvwD2VN8Gi9nlr2JZ2xcDrASmE2W5kc5SVX5eo=",
        "originContent": "## Installation",
        "translatedContent": ""
      },
      {
        "row": 20,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 4,
    "Content": "```\nnpm install safe-units\n```",
    "ContentSha": "nWsw+vK9YpJwk96Mw/XAvWmc1CZptN3Yy441mnkebhk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nnpm install safe-units\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      },
      {
        "row": 2,
        "rowsha": "ns98dqgqiqR2u2F4N7cbJCT9pDRY5WeKfW1KptM5HmM=",
        "originContent": "npm install safe-units",
        "translatedContent": "npm install safe-units"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 5,
    "Content": "\nor \n",
    "ContentSha": "2sQm6wOV70rrglvEa2AO27vpAoaXxc8sIycNadve4yU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nor \n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "8dEJDWTRfIIynqsywcuYmX/EtZKSl9M8iZGXOt6bOnU=",
        "originContent": "or ",
        "translatedContent": "or "
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 6,
    "Content": "```\nyarn add safe-units\n```",
    "ContentSha": "S2xcZd4JsLC/zoPjeOz6YogW9Pj67FpEMyFGDcNhZTM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nyarn add safe-units\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      },
      {
        "row": 2,
        "rowsha": "jJ0rFbvuA+vXjl2+xIv+iMtSECEoUiokGejGvM+cMig=",
        "originContent": "yarn add safe-units",
        "translatedContent": "yarn add safe-units"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 7,
    "Content": "\n## Examples\n\n### Unit Arithmetic\n",
    "ContentSha": "AULAWTcH6+Und3IuetYWMCxwI1PYdsvIDH/ZBwKTLQs=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n## 예제\n\n### 단위 산술\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "DRmrRjGXhXaABVNjE/Ar07m3eartgu6sW/en95atPvE=",
        "originContent": "## Examples",
        "translatedContent": "## 예제"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "u0RiDJY99IcQpgtZrqvOZ6MGdp75dM3QCnFNbvLWcS0=",
        "originContent": "### Unit Arithmetic",
        "translatedContent": "### 단위 산술"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 8,
    "Content": "```ts\nimport { bars, kilograms, Measure, meters, milli, seconds } from \"safe-units\";\n\nconst width = Measure.of(3, meters);\nconst height = Measure.of(4, meters);\nconst area = width.times(height).scale(0.5);\n\nconst mass = Measure.of(30, kilograms);\nconst mps2 = meters.per(seconds.squared());\nconst acceleration = Measure.of(9.8, mps2);\n\nconst force = mass.times(acceleration); // 294 N\nconst pressure = force.over(area); // 49 Pa\nconst maxPressure = Measure.of(0.5, milli(bars)); // 0.5 mbar\npressure.lt(maxPressure); // true\n\n```",
    "ContentSha": "tyXl6rzXfcD3dY4eWW8XOIYmyTjiup0tzV45ZbJNXLw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ts\nimport { bars, kilograms, Measure, meters, milli, seconds } from \"safe-units\";\n\nconst width = Measure.of(3, meters);\nconst height = Measure.of(4, meters);\nconst area = width.times(height).scale(0.5);\n\nconst mass = Measure.of(30, kilograms);\nconst mps2 = meters.per(seconds.squared());\nconst acceleration = Measure.of(9.8, mps2);\n\nconst force = mass.times(acceleration); // 294 N\nconst pressure = force.over(area); // 49 Pa\nconst maxPressure = Measure.of(0.5, milli(bars)); // 0.5 mbar\npressure.lt(maxPressure); // true\n\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "wBgRKHhGgYr2NL03UCGza3nc2bR+8fO3ER5l5F6RvXE=",
        "originContent": "```ts",
        "translatedContent": "```ts"
      },
      {
        "row": 2,
        "rowsha": "+kpmg911XcQcztDX+vk9U7IZeAQ2R53l5zt0aqODCbI=",
        "originContent": "import { bars, kilograms, Measure, meters, milli, seconds } from \"safe-units\";",
        "translatedContent": "import { bars, kilograms, Measure, meters, milli, seconds } from \"safe-units\";"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "IdbFg6HXu7rN61lEih+1WPo4A1xAsA0HChPQqgKCivc=",
        "originContent": "const width = Measure.of(3, meters);",
        "translatedContent": "const width = Measure.of(3, meters);"
      },
      {
        "row": 5,
        "rowsha": "FyKqoSJjaAXg/UTL23fMX9yFbOk/DOomeOc9BI0/E2Y=",
        "originContent": "const height = Measure.of(4, meters);",
        "translatedContent": "const height = Measure.of(4, meters);"
      },
      {
        "row": 6,
        "rowsha": "BDphCGp7x0xMD7Og7rccZbDyjwgLqEIFwBkHq7XMCg4=",
        "originContent": "const area = width.times(height).scale(0.5);",
        "translatedContent": "const area = width.times(height).scale(0.5);"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "4BikPO6TQCrWl5tQXeUJ6LtmcAwVzSmLGVRfAoxEvhg=",
        "originContent": "const mass = Measure.of(30, kilograms);",
        "translatedContent": "const mass = Measure.of(30, kilograms);"
      },
      {
        "row": 9,
        "rowsha": "iwtt5eeJKRIhrtm3wvUN1f8OKa4f9yeDzfuu77Lib/M=",
        "originContent": "const mps2 = meters.per(seconds.squared());",
        "translatedContent": "const mps2 = meters.per(seconds.squared());"
      },
      {
        "row": 10,
        "rowsha": "FC6iG5sqoGL+KN1KaE+1QElHEnQ2l7eRuv7zR/6YzW8=",
        "originContent": "const acceleration = Measure.of(9.8, mps2);",
        "translatedContent": "const acceleration = Measure.of(9.8, mps2);"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "zfHXd3TmjT/p9jJKO6HI2KqqkuPrL61C1m3QNVfcI+U=",
        "originContent": "const force = mass.times(acceleration); // 294 N",
        "translatedContent": "const force = mass.times(acceleration); // 294 N"
      },
      {
        "row": 13,
        "rowsha": "pxVh/HdnXZ3q5Uy4nBcaiLp3ljVe3lg8R3cMGkgbnAw=",
        "originContent": "const pressure = force.over(area); // 49 Pa",
        "translatedContent": "const pressure = force.over(area); // 49 Pa"
      },
      {
        "row": 14,
        "rowsha": "tTjTyFXfwQ5EcIAvy2mncopP95VdzsoOEs63UiNkVMk=",
        "originContent": "const maxPressure = Measure.of(0.5, milli(bars)); // 0.5 mbar",
        "translatedContent": "const maxPressure = Measure.of(0.5, milli(bars)); // 0.5 mbar"
      },
      {
        "row": 15,
        "rowsha": "f30WYYYsQbYRTexaG5BkKJybWdI5+00CFc8s+b6cYT0=",
        "originContent": "pressure.lt(maxPressure); // true",
        "translatedContent": "pressure.lt(maxPressure); // true"
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 9,
    "Content": "\n### Type Errors\n",
    "ContentSha": "B98DbwI1EnMaTv7c7M0OYPvQk6W8px6BFakY+0tMcg0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n### 타입 오류\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "bvqIwNb0t5Cb/21jATUGN07JCiy4kYHs4eJdpLNKQKY=",
        "originContent": "### Type Errors",
        "translatedContent": "### 타입 오류"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 10,
    "Content": "```ts\nimport { Force, hours, Length, Measure, meters, seconds, Time } from \"safe-units\";\n\nconst length: Length = Measure.of(10, meters);\nconst time: Time = Measure.of(10, seconds);\n\n// @ts-expect-error - Measures of different units cannot be added\nlength.plus(time);\n\n// @ts-expect-error - Measures of different units cannot be compared\nlength.eq(time);\n\n// @ts-expect-error - Measure of m/s is not assigneable to measure of kg*m/s^2\nconst force: Force = length.over(time);\n\n// @ts-expect-error - Cannot convert length measure to time measure\nlength.in(hours);\n\n```",
    "ContentSha": "cJ+O7aOJ/4TYNmwJyweViam+YTnnZDoiTEiX8N43QeU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ts\nimport { Force, hours, Length, Measure, meters, seconds, Time } from \"safe-units\";\n\nconst length: Length = Measure.of(10, meters);\nconst time: Time = Measure.of(10, seconds);\n\n// @ts-expect-error - Measures of different units cannot be added\nlength.plus(time);\n\n// @ts-expect-error - Measures of different units cannot be compared\nlength.eq(time);\n\n// @ts-expect-error - Measure of m/s is not assigneable to measure of kg*m/s^2\nconst force: Force = length.over(time);\n\n// @ts-expect-error - Cannot convert length measure to time measure\nlength.in(hours);\n\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "wBgRKHhGgYr2NL03UCGza3nc2bR+8fO3ER5l5F6RvXE=",
        "originContent": "```ts",
        "translatedContent": "```ts"
      },
      {
        "row": 2,
        "rowsha": "sEmFZ/VM6gnkq/ugZNUlDf9RxAkBuwONM1ng5/2W9ew=",
        "originContent": "import { Force, hours, Length, Measure, meters, seconds, Time } from \"safe-units\";",
        "translatedContent": "import { Force, hours, Length, Measure, meters, seconds, Time } from \"safe-units\";"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "/w/LVqnxf9NCio6SWQJQ99tW67a5NOMoapUD7IcMk2U=",
        "originContent": "const length: Length = Measure.of(10, meters);",
        "translatedContent": "const length: Length = Measure.of(10, meters);"
      },
      {
        "row": 5,
        "rowsha": "1vRTUs+UfLvkK5YgsHfmVlXd8TaIgBOYmCImXq37LpI=",
        "originContent": "const time: Time = Measure.of(10, seconds);",
        "translatedContent": "const time: Time = Measure.of(10, seconds);"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "0yvDIofihZe0QeXpTSyhpEy6kHzsWamkpUbDL1JFf9M=",
        "originContent": "// @ts-expect-error - Measures of different units cannot be added",
        "translatedContent": "// @ts-expect-error - Measures of different units cannot be added"
      },
      {
        "row": 8,
        "rowsha": "VYX+Kl0808mce2oz6dnjfKLq9xuj1o8ggG3d2OWzWQ0=",
        "originContent": "length.plus(time);",
        "translatedContent": "length.plus(time);"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "U7+dne+OPrV5/ymoe1cWdDK6936Lfoe+2wPg09iWIYU=",
        "originContent": "// @ts-expect-error - Measures of different units cannot be compared",
        "translatedContent": "// @ts-expect-error - Measures of different units cannot be compared"
      },
      {
        "row": 11,
        "rowsha": "e1axUHvOaIvyTOkFoWk/kGWzQcbHIOUSMDv5DgsUAec=",
        "originContent": "length.eq(time);",
        "translatedContent": "length.eq(time);"
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "+vAGqwhAEDaAVrsE7IvW0TSgWvBfB5f7GflREitfejY=",
        "originContent": "// @ts-expect-error - Measure of m/s is not assigneable to measure of kg*m/s^2",
        "translatedContent": "// @ts-expect-error - Measure of m/s is not assigneable to measure of kg*m/s^2"
      },
      {
        "row": 14,
        "rowsha": "CWZyjtpxOLS/jAzvT8g/apGiY+ewfRwoimg4NT84OR4=",
        "originContent": "const force: Force = length.over(time);",
        "translatedContent": "const force: Force = length.over(time);"
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "OkmxpBRd1BA4duScqK+BJMgOGyGh2PnBhQyrV4um3ew=",
        "originContent": "// @ts-expect-error - Cannot convert length measure to time measure",
        "translatedContent": "// @ts-expect-error - Cannot convert length measure to time measure"
      },
      {
        "row": 17,
        "rowsha": "WMkZR0VDJ75dyWglguG/TyTkBuX2bACdYjmFuyTHhpg=",
        "originContent": "length.in(hours);",
        "translatedContent": "length.in(hours);"
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 11,
    "Content": "\n### Naming Units\n",
    "ContentSha": "MogFD/Uk3XTkgewUrFXJr+RJWP8rm2DvE4SkAHyHPfM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n### 단위 명명법\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "4o3eY9jBml3bPQJ8MWTE9qmzAgXzrnR6ZIZuMThR+eM=",
        "originContent": "### Naming Units",
        "translatedContent": "### 단위 명명법"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 12,
    "Content": "```ts\nimport { days, Measure, mega, micro, miles, speedOfLight, yards } from \"safe-units\";\n\nconst furlongs = Measure.of(220, yards, \"fur\");\n\nMeasure.of(8, furlongs).in(miles); // \"1 mi\"\nMeasure.of(1, miles).in(furlongs); // \"8 fur\"\n\nconst fortnights = Measure.of(14, days, \"ftn\");\nconst megafurlong = mega(furlongs);\nconst microfortnight = micro(fortnights);\nconst mfPerUFtn = megafurlong.per(microfortnight).withSymbol(\"Mfur/µftn\");\n\nspeedOfLight.in(mfPerUFtn); // \"1.8026174997852542 Mfur/µftn\"\n\n```",
    "ContentSha": "+m2Vw6PWsWpR6Ep7hTimeZxvlq5jBVaJWmQkw9NnAJY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ts\nimport { days, Measure, mega, micro, miles, speedOfLight, yards } from \"safe-units\";\n\nconst furlongs = Measure.of(220, yards, \"fur\");\n\nMeasure.of(8, furlongs).in(miles); // \"1 mi\"\nMeasure.of(1, miles).in(furlongs); // \"8 fur\"\n\nconst fortnights = Measure.of(14, days, \"ftn\");\nconst megafurlong = mega(furlongs);\nconst microfortnight = micro(fortnights);\nconst mfPerUFtn = megafurlong.per(microfortnight).withSymbol(\"Mfur/µftn\");\n\nspeedOfLight.in(mfPerUFtn); // \"1.8026174997852542 Mfur/µftn\"\n\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "wBgRKHhGgYr2NL03UCGza3nc2bR+8fO3ER5l5F6RvXE=",
        "originContent": "```ts",
        "translatedContent": "```ts"
      },
      {
        "row": 2,
        "rowsha": "yJ5yV2GAMdMz+TPNuPDc/OxXPYOkpLWy8qRvls5WXNw=",
        "originContent": "import { days, Measure, mega, micro, miles, speedOfLight, yards } from \"safe-units\";",
        "translatedContent": "import { days, Measure, mega, micro, miles, speedOfLight, yards } from \"safe-units\";"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "FG+56/nMLuE2nL3YsQacwer3KEkG/gscV5LThQcVw4Q=",
        "originContent": "const furlongs = Measure.of(220, yards, \"fur\");",
        "translatedContent": "const furlongs = Measure.of(220, yards, \"fur\");"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "eoj5xiH63HLKFZTHKC8Ry+axJ+xhWb2lU5Shx8eQHkY=",
        "originContent": "Measure.of(8, furlongs).in(miles); // \"1 mi\"",
        "translatedContent": "Measure.of(8, furlongs).in(miles); // \"1 mi\""
      },
      {
        "row": 7,
        "rowsha": "8Vbfd0fsI1APsj+4cFUXFKiGmgxIthy881jnZHjPKXU=",
        "originContent": "Measure.of(1, miles).in(furlongs); // \"8 fur\"",
        "translatedContent": "Measure.of(1, miles).in(furlongs); // \"8 fur\""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "2dfrxz6PoZ6XVir2XAOOSSAyf0ESSrT2sAI9YHZVTt0=",
        "originContent": "const fortnights = Measure.of(14, days, \"ftn\");",
        "translatedContent": "const fortnights = Measure.of(14, days, \"ftn\");"
      },
      {
        "row": 10,
        "rowsha": "AkhOEmUiUWJ2+BiWtkP3avt6l/KF2S38m6Q9DzYQGoI=",
        "originContent": "const megafurlong = mega(furlongs);",
        "translatedContent": "const megafurlong = mega(furlongs);"
      },
      {
        "row": 11,
        "rowsha": "FQjoGEaT98VIxw6cgQOfLwb1k36uJIot2v2d6yacyAo=",
        "originContent": "const microfortnight = micro(fortnights);",
        "translatedContent": "const microfortnight = micro(fortnights);"
      },
      {
        "row": 12,
        "rowsha": "DsMzLE9BoAdq9dYMzEvNWYkBbQcpp4NTpY9mAn9Xg14=",
        "originContent": "const mfPerUFtn = megafurlong.per(microfortnight).withSymbol(\"Mfur/µftn\");",
        "translatedContent": "const mfPerUFtn = megafurlong.per(microfortnight).withSymbol(\"Mfur/µftn\");"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "2vMdf9KQfCaazPMXqYiJLpw2l/Y1xw6SFzgFXZLfXN8=",
        "originContent": "speedOfLight.in(mfPerUFtn); // \"1.8026174997852542 Mfur/µftn\"",
        "translatedContent": "speedOfLight.in(mfPerUFtn); // \"1.8026174997852542 Mfur/µftn\""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 13,
    "Content": "\n### Deriving Quantities\n",
    "ContentSha": "60mgBdqwUg9Wb8t5O9aPi534zDJJRkAx7neoz8F+4vg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n### 양 도출하기\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "WTbo8IhQB+OUu1rWL8VhXJtazOVEvF7o4zDVoE6Qs48=",
        "originContent": "### Deriving Quantities",
        "translatedContent": "### 양 도출하기"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 14,
    "Content": "```ts\nimport { kilograms, liters, Mass, Measure, Volume } from \"safe-units\";\n\nconst VolumeDensity = Mass.over(Volume);\ntype VolumeDensity = typeof VolumeDensity;\n\nconst mass = Measure.of(30, kilograms);\nconst volume = Measure.of(3, liters);\n\nconst density: VolumeDensity = mass.over(volume);\n\nconsole.log(density.toString()); // 10 kg * m^-3\n\n```",
    "ContentSha": "uSPIl8pvHbFUfYE7Wk4f5q1vF3hbr+8bSIpsAcYHcgE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ts\nimport { kilograms, liters, Mass, Measure, Volume } from \"safe-units\";\n\nconst VolumeDensity = Mass.over(Volume);\ntype VolumeDensity = typeof VolumeDensity;\n\nconst mass = Measure.of(30, kilograms);\nconst volume = Measure.of(3, liters);\n\nconst density: VolumeDensity = mass.over(volume);\n\nconsole.log(density.toString()); // 10 kg * m^-3\n\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "wBgRKHhGgYr2NL03UCGza3nc2bR+8fO3ER5l5F6RvXE=",
        "originContent": "```ts",
        "translatedContent": "```ts"
      },
      {
        "row": 2,
        "rowsha": "MgX+V/GJPeKMKMoIbEArHBsbOf/oCF1DuNdQpDYZDaU=",
        "originContent": "import { kilograms, liters, Mass, Measure, Volume } from \"safe-units\";",
        "translatedContent": "import { kilograms, liters, Mass, Measure, Volume } from \"safe-units\";"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "ywUPVGt3S7S703FQPJJpuWZhaFiOU/J59F5qmzxS5D8=",
        "originContent": "const VolumeDensity = Mass.over(Volume);",
        "translatedContent": "const VolumeDensity = Mass.over(Volume);"
      },
      {
        "row": 5,
        "rowsha": "kmerQR/KHLdzSvYB4kyz9ZMlLRxMRsqEUXZVEd7JNEw=",
        "originContent": "type VolumeDensity = typeof VolumeDensity;",
        "translatedContent": "type VolumeDensity = typeof VolumeDensity;"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "4BikPO6TQCrWl5tQXeUJ6LtmcAwVzSmLGVRfAoxEvhg=",
        "originContent": "const mass = Measure.of(30, kilograms);",
        "translatedContent": "const mass = Measure.of(30, kilograms);"
      },
      {
        "row": 8,
        "rowsha": "X6c09wHBETw9h+AY0Y7B2ic6YMcX4DxfsPKlCyxXN2w=",
        "originContent": "const volume = Measure.of(3, liters);",
        "translatedContent": "const volume = Measure.of(3, liters);"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "X0cePw/kwEJRzWn4M0S8iCIjt5Sh7snnYsSp2Jhb3Xg=",
        "originContent": "const density: VolumeDensity = mass.over(volume);",
        "translatedContent": "const density: VolumeDensity = mass.over(volume);"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "hHrZV8hKDUTkOtWlLhu6NR09+BvLs9dWLXakT0Y8cr4=",
        "originContent": "console.log(density.toString()); // 10 kg * m^-3",
        "translatedContent": "console.log(density.toString()); // 10 kg * m^-3"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 15,
    "Content": "\n### Defining Unit Systems\n",
    "ContentSha": "ZAaZqPlu9JvdD4Mc/g07CxWcb79wQx8dNH8JR+przlg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n### 단위계 정의하기\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "e112aPPAItgECSBwq+36ci3qoTIsvOER4fqOJgcJGqM=",
        "originContent": "### Defining Unit Systems",
        "translatedContent": "### 단위계 정의하기"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 16,
    "Content": "```ts\nimport { Measure, UnitSystem } from \"safe-units\";\n\nconst GameUnitSystem = UnitSystem.from({\n    frames: \"fr\",\n    time: \"s\",\n});\n\nconst frames = Measure.dimension(GameUnitSystem, \"frames\");\nconst seconds = Measure.dimension(GameUnitSystem, \"time\");\n\nconst Frames = frames;\ntype Frames = typeof frames;\n\nconst Time = seconds;\ntype Time = typeof seconds;\n\nconst FrameRate = Frames.over(Time);\ntype FrameRate = typeof FrameRate;\n\nconst fps: FrameRate = frames.per(seconds).withSymbol(\"fps\");\n\nconst minFrameRate = Measure.of(60, fps);\n\nconst measuredFrames = Measure.of(8000, frames);\nconst elapsedTime = Measure.of(120, seconds);\nconst measuredFps: FrameRate = measuredFrames.over(elapsedTime);\n\nif (measuredFps.lt(minFrameRate)) {\n    // Optimize\n}\n\n```",
    "ContentSha": "HQhrQdSqn1ICZ3U6elkaxOFIe4w8VKJNHa7samTkhqE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ts\nimport { Measure, UnitSystem } from \"safe-units\";\n\nconst GameUnitSystem = UnitSystem.from({\n    frames: \"fr\",\n    time: \"s\",\n});\n\nconst frames = Measure.dimension(GameUnitSystem, \"frames\");\nconst seconds = Measure.dimension(GameUnitSystem, \"time\");\n\nconst Frames = frames;\ntype Frames = typeof frames;\n\nconst Time = seconds;\ntype Time = typeof seconds;\n\nconst FrameRate = Frames.over(Time);\ntype FrameRate = typeof FrameRate;\n\nconst fps: FrameRate = frames.per(seconds).withSymbol(\"fps\");\n\nconst minFrameRate = Measure.of(60, fps);\n\nconst measuredFrames = Measure.of(8000, frames);\nconst elapsedTime = Measure.of(120, seconds);\nconst measuredFps: FrameRate = measuredFrames.over(elapsedTime);\n\nif (measuredFps.lt(minFrameRate)) {\n    // Optimize\n}\n\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "wBgRKHhGgYr2NL03UCGza3nc2bR+8fO3ER5l5F6RvXE=",
        "originContent": "```ts",
        "translatedContent": "```ts"
      },
      {
        "row": 2,
        "rowsha": "nl/ToOgsvJnN1tIgFnqTPZu4ArUTeZkn2Qo0ejnVuTQ=",
        "originContent": "import { Measure, UnitSystem } from \"safe-units\";",
        "translatedContent": "import { Measure, UnitSystem } from \"safe-units\";"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "EVmE+fA+Fw4p1aEpIwjy+IjCK0y/PIPq7AcnuXKmIcc=",
        "originContent": "const GameUnitSystem = UnitSystem.from({",
        "translatedContent": "const GameUnitSystem = UnitSystem.from({"
      },
      {
        "row": 5,
        "rowsha": "D+5sRKtC22SdxcrpDwckZ0BNAWSUUv0wXxI9ktzf8oc=",
        "originContent": "    frames: \"fr\",",
        "translatedContent": "    frames: \"fr\","
      },
      {
        "row": 6,
        "rowsha": "bmjO99JkpJS+04m+10LWbAJjsxkGNorGQ6af1D9XxUw=",
        "originContent": "    time: \"s\",",
        "translatedContent": "    time: \"s\","
      },
      {
        "row": 7,
        "rowsha": "KVdrVOJV48lI7qW1kE+ji4FoL908vZroQf8Oe9gNOUw=",
        "originContent": "});",
        "translatedContent": "});"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "xjwhuWHWDDfjBMs3Rv2NXZ5uh3lcR3DrmWZdVRDc5LE=",
        "originContent": "const frames = Measure.dimension(GameUnitSystem, \"frames\");",
        "translatedContent": "const frames = Measure.dimension(GameUnitSystem, \"frames\");"
      },
      {
        "row": 10,
        "rowsha": "+SoAEYw2lIP+icGdCkkk657PT0ajseUvLEhq3af2064=",
        "originContent": "const seconds = Measure.dimension(GameUnitSystem, \"time\");",
        "translatedContent": "const seconds = Measure.dimension(GameUnitSystem, \"time\");"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "q5S4K0A3JxsKgysVAl+wdZGDoVv5p23bbaTlHQ20tLg=",
        "originContent": "const Frames = frames;",
        "translatedContent": "const Frames = frames;"
      },
      {
        "row": 13,
        "rowsha": "qLigHpFF3/eT6sT868ecttZjl7LaB275tNHdQRFG1ZM=",
        "originContent": "type Frames = typeof frames;",
        "translatedContent": "type Frames = typeof frames;"
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "d7qlJRcAbq23vnRSzVIzquwS0KcTX65L8wgA4mu/Xuk=",
        "originContent": "const Time = seconds;",
        "translatedContent": "const Time = seconds;"
      },
      {
        "row": 16,
        "rowsha": "4z+IB3yPt/5e9aTV75f2UMoab0lMbgfNLeOy9MgEW2o=",
        "originContent": "type Time = typeof seconds;",
        "translatedContent": "type Time = typeof seconds;"
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "ECkgnwiCsjefOmkY4sXFNR+fcdm4jq3LerlBKr+B33A=",
        "originContent": "const FrameRate = Frames.over(Time);",
        "translatedContent": "const FrameRate = Frames.over(Time);"
      },
      {
        "row": 19,
        "rowsha": "p276wMRApTpCndPcWrYvhI13j2GI4s50l13CR1tCsfM=",
        "originContent": "type FrameRate = typeof FrameRate;",
        "translatedContent": "type FrameRate = typeof FrameRate;"
      },
      {
        "row": 20,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "UTxCWeuiWpeGZReTMxlutlaYjB/Nm0lErfcE0RkoII0=",
        "originContent": "const fps: FrameRate = frames.per(seconds).withSymbol(\"fps\");",
        "translatedContent": "const fps: FrameRate = frames.per(seconds).withSymbol(\"fps\");"
      },
      {
        "row": 22,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 23,
        "rowsha": "9rRWMlgqizNuLncrUkHePpnMRJ25GSocupYEr1JHFTw=",
        "originContent": "const minFrameRate = Measure.of(60, fps);",
        "translatedContent": "const minFrameRate = Measure.of(60, fps);"
      },
      {
        "row": 24,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "n3Jv2/JEqhi+krL5YzNvBbTcQKviP0rW+r5pUWiTD1U=",
        "originContent": "const measuredFrames = Measure.of(8000, frames);",
        "translatedContent": "const measuredFrames = Measure.of(8000, frames);"
      },
      {
        "row": 26,
        "rowsha": "EKe8LBfwhRwcChvCzPVXvm8m6VOTwIFgJOC/Gscgxaw=",
        "originContent": "const elapsedTime = Measure.of(120, seconds);",
        "translatedContent": "const elapsedTime = Measure.of(120, seconds);"
      },
      {
        "row": 27,
        "rowsha": "Kqsf2EFhy+/3pOyaw7QYGnA9nroi/r0Ee33nUlfvGco=",
        "originContent": "const measuredFps: FrameRate = measuredFrames.over(elapsedTime);",
        "translatedContent": "const measuredFps: FrameRate = measuredFrames.over(elapsedTime);"
      },
      {
        "row": 28,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 29,
        "rowsha": "oajOdg5o82RiSRWbYtNEXLmmAb8C6oMYqk/Mx2z4jcw=",
        "originContent": "if (measuredFps.lt(minFrameRate)) {",
        "translatedContent": "if (measuredFps.lt(minFrameRate)) {"
      },
      {
        "row": 30,
        "rowsha": "aDKGAtUqQSR1DcXW8L8ddxk4j9oVeaOR6zmfIiIsrH8=",
        "originContent": "    // Optimize",
        "translatedContent": "    // Optimize"
      },
      {
        "row": 31,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 32,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 33,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 17,
    "Content": "",
    "ContentSha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  }
]