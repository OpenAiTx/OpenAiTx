[
  {
    "Id": 1,
    "Content": "<!-- markdownlint-disable MD041 MD033 -->\n<div align=\"center\">\n    <picture>\n        <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/images/typedef-fenic-logo-dark.png\">\n        <img src=\"https://raw.githubusercontent.com/typedef-ai/fenic/main/docs/images/typedef-fenic-logo.png\" alt=\"fenic, by typedef\" width=\"90%\">\n    </picture>\n</div>\n\n# fenic: the dataframe (re)built for LLM inference\n\n[![PyPI version](https://img.shields.io/pypi/v/fenic.svg)](https://pypi.org/project/fenic/)\n[![Python versions](https://img.shields.io/pypi/pyversions/fenic.svg)](https://pypi.org/project/fenic/)\n[![License](https://img.shields.io/github/license/typedef-ai/fenic.svg)](https://github.com/typedef-ai/fenic/blob/main/LICENSE)\n[![Discord](https://img.shields.io/discord/1381706122322513952?label=Discord&logo=discord)](https://discord.gg/GdqF3J7huR)\n\n---\n\n## **Documentation**: [docs.fenic.ai](https://docs.fenic.ai/)\n\nfenic is an opinionated, PySpark-inspired DataFrame framework from typedef.ai for building AI and agentic applications. Transform unstructured and structured data into insights using familiar DataFrame operations enhanced with semantic intelligence. With first-class support for markdown, transcripts, and semantic operators, plus efficient batch inference across any model provider.\n",
    "ContentSha": "tmub1AxUb0Y4Al5Ltz67crbP453GMVUntyWUISmU7NQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<!-- markdownlint-disable MD041 MD033 -->\n<div align=\"center\">\n    <picture>\n        <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/images/typedef-fenic-logo-dark.png\">\n        <img src=\"https://raw.githubusercontent.com/typedef-ai/fenic/main/docs/images/typedef-fenic-logo.png\" alt=\"fenic, by typedef\" width=\"90%\">\n    </picture>\n</div>\n\n# fenic: dataframe được (tái) xây dựng cho suy luận LLM\n\n[![Phiên bản PyPI](https://img.shields.io/pypi/v/fenic.svg)](https://pypi.org/project/fenic/)\n[![Các phiên bản Python](https://img.shields.io/pypi/pyversions/fenic.svg)](https://pypi.org/project/fenic/)\n[![Giấy phép](https://img.shields.io/github/license/typedef-ai/fenic.svg)](https://github.com/typedef-ai/fenic/blob/main/LICENSE)\n[![Discord](https://img.shields.io/discord/1381706122322513952?label=Discord&logo=discord)](https://discord.gg/GdqF3J7huR)\n\n---\n\n## **Tài liệu**: [docs.fenic.ai](https://docs.fenic.ai/)\n\nfenic là một framework DataFrame lấy cảm hứng từ PySpark, có định hướng rõ ràng, đến từ typedef.ai, dành cho việc xây dựng các ứng dụng AI và agentic. Chuyển đổi dữ liệu không có cấu trúc và có cấu trúc thành những thông tin giá trị bằng các thao tác DataFrame quen thuộc được tăng cường với trí tuệ ngữ nghĩa. Hỗ trợ ưu việt cho markdown, bản ghi hội thoại và các toán tử ngữ nghĩa, cùng với khả năng suy luận hàng loạt hiệu quả trên bất kỳ nhà cung cấp mô hình nào.",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "## Install\n\nfenic supports Python `[3.10, 3.11, 3.12]`\n\n```bash\npip install fenic\n```\n\n### LLM Provider Setup\n\nfenic requires an API key from at least one LLM provider. Set the appropriate environment variable for your chosen provider:\n\n```bash\n# For OpenAI\nexport OPENAI_API_KEY=\"your-openai-api-key\"\n\n# For Anthropic\nexport ANTHROPIC_API_KEY=\"your-anthropic-api-key\"\n\n# For Google",
    "ContentSha": "QT2GWoHGnyfwnJxlfZAk0I5rpIsEfvGEhJD38oz6lCY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## Cài đặt\n\nfenic hỗ trợ Python `[3.10, 3.11, 3.12]`\n\n```bash\npip install fenic\n```\n\n### Thiết lập nhà cung cấp LLM\n\nfenic yêu cầu một khóa API từ ít nhất một nhà cung cấp LLM. Thiết lập biến môi trường phù hợp cho nhà cung cấp bạn chọn:\n\n```bash\n# Đối với OpenAI\nexport OPENAI_API_KEY=\"your-openai-api-key\"\n\n# Đối với Anthropic\nexport ANTHROPIC_API_KEY=\"your-anthropic-api-key\"\n\n# Đối với Google",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "export GEMINI_API_KEY=\"your-google-api-key\"\n```\n\n## Quickstart\n\nThe fastest way to learn about fenic is by checking the examples.\n\nBelow is a quick list of the examples in this repo:\n\n| Example                                                                 | Description                                                                                                                         |\n| ----------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| [Hello World!](examples/hello_world)                                    | Introduction to semantic extraction and classification using fenic's core operators through error log analysis.                     |\n| [Enrichment](examples/enrichment)                                       | Multi-stage DataFrames with template-based text extraction, joins, and LLM-powered transformations demonstrated via log enrichment. |\n| [Meeting Transcript Processing](examples/meeting_transcript_processing) | Native transcript parsing, Pydantic schema integration, and complex aggregations shown through meeting analysis.                    |\n| [News Analysis](examples/news_analysis)                                 | Analyze and extract insights from news articles using semantic operators and structured data processing.                            |\n| [Podcast Summarization](examples/podcast_summarization)                 | Process and summarize podcast transcripts with speaker-aware analysis and key point extraction.                                     |\n| [Semantic Join](examples/semantic_joins)                                | Instead of simple fuzzy matching, use fenic's powerful semantic join functionality to match data across tables.                     |\n| [Named Entity Recognition](examples/named_entity_recognition)           | Extract and classify named entities from text using semantic extraction and classification.                                         |\n| [Markdown Processing](examples/markdown_processing)                     | Process and transform markdown documents with structured data extraction and formatting.                                            |\n| [JSON Processing](examples/json_processing)                             | Handle complex JSON data structures with semantic operations and schema validation.                                                 |\n| [Feedback Clustering](examples/feedback_clustering)                     | Group and analyze feedback using semantic similarity and clustering operations.                                                     |\n| [Document Extraction](examples/document_extraction)                     | Extract structured information from various document formats using semantic operators.                                              |\n\n(Feel free to click any example above to jump right to its folder.)\n",
    "ContentSha": "RBvJ+qAaDZODC8rvu1sFp9QTE4SUhSKTTu/91HAxBRc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "export GEMINI_API_KEY=\"your-google-api-key\"\n```\n\n## Khởi động nhanh\n\nCách nhanh nhất để tìm hiểu về fenic là xem qua các ví dụ.\n\nDưới đây là danh sách nhanh các ví dụ trong kho lưu trữ này:\n\n| Ví dụ                                                                   | Mô tả                                                                                                                               |\n| ----------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| [Hello World!](examples/hello_world)                                    | Giới thiệu về trích xuất ngữ nghĩa và phân loại sử dụng các toán tử cốt lõi của fenic thông qua phân tích nhật ký lỗi.              |\n| [Enrichment](examples/enrichment)                                       | DataFrame nhiều giai đoạn với trích xuất văn bản dựa trên mẫu, kết nối, và chuyển đổi dựa trên LLM được minh họa qua enrich log.    |\n| [Xử lý bản ghi cuộc họp](examples/meeting_transcript_processing)         | Phân tích bản ghi gốc, tích hợp schema Pydantic, và tổng hợp phức tạp được trình bày qua phân tích cuộc họp.                       |\n| [Phân tích tin tức](examples/news_analysis)                             | Phân tích và trích xuất thông tin chi tiết từ các bài báo sử dụng toán tử ngữ nghĩa và xử lý dữ liệu có cấu trúc.                   |\n| [Tóm tắt podcast](examples/podcast_summarization)                       | Xử lý và tóm tắt bản ghi podcast với phân tích nhận biết người nói và trích xuất ý chính.                                          |\n| [Semantic Join](examples/semantic_joins)                                | Thay vì so khớp mờ đơn giản, sử dụng tính năng semantic join mạnh mẽ của fenic để so khớp dữ liệu giữa các bảng.                   |\n| [Nhận diện thực thể có tên](examples/named_entity_recognition)          | Trích xuất và phân loại các thực thể có tên từ văn bản bằng cách sử dụng trích xuất và phân loại ngữ nghĩa.                         |\n| [Xử lý Markdown](examples/markdown_processing)                          | Xử lý và chuyển đổi tài liệu markdown với trích xuất dữ liệu có cấu trúc và định dạng lại.                                          |\n| [Xử lý JSON](examples/json_processing)                                  | Xử lý các cấu trúc dữ liệu JSON phức tạp với các thao tác ngữ nghĩa và xác thực schema.                                             |\n| [Phân cụm phản hồi](examples/feedback_clustering)                       | Nhóm và phân tích phản hồi bằng sự tương đồng ngữ nghĩa và các thao tác phân cụm.                                                  |\n| [Trích xuất tài liệu](examples/document_extraction)                     | Trích xuất thông tin có cấu trúc từ nhiều định dạng tài liệu khác nhau bằng các toán tử ngữ nghĩa.                                  |\n\n(Bạn có thể nhấp vào bất kỳ ví dụ nào phía trên để chuyển ngay đến thư mục của nó.)",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "## Why use fenic?\n\nfenic is an opinionated, PySpark-inspired DataFrame framework for building production AI and agentic applications.\n\nUnlike traditional data tools retrofitted for LLMs, fenic's query engine is built from the ground up with inference in mind.\n\nTransform structured and unstructured data into insights using familiar DataFrame operations enhanced with semantic intelligence. With first-class support for markdown, transcripts, and semantic operators, plus efficient batch inference across any model provider.\n\nfenic brings the reliability of traditional data pipelines to AI workloads.\n\n### Key Features\n\n#### Purpose-Built for LLM Inference\n\n- Query engine designed from scratch for AI workloads, not retrofitted\n- Automatic batch optimization for API calls\n- Built-in retry logic and rate limiting\n- Token counting and cost tracking\n\n#### Semantic Operators as First-Class Citizens",
    "ContentSha": "POPTpr2d3zFT3V0X0/NRjmMCUTjlIPBHtMTVHIRsyfM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## Tại sao sử dụng fenic?\n\nfenic là một framework DataFrame lấy cảm hứng từ PySpark, có quan điểm rõ ràng, dành cho việc xây dựng các ứng dụng AI và agentic trong môi trường sản xuất.\n\nKhông giống như các công cụ dữ liệu truyền thống được chỉnh sửa để phù hợp với LLM, bộ máy truy vấn của fenic được xây dựng từ đầu với mục đích phục vụ suy luận.\n\nChuyển đổi dữ liệu có cấu trúc và phi cấu trúc thành thông tin chi tiết bằng các thao tác DataFrame quen thuộc, được tăng cường với trí tuệ ngữ nghĩa. Hỗ trợ hàng đầu cho markdown, bản chép lời, và các toán tử ngữ nghĩa, cùng với khả năng suy luận hàng loạt hiệu quả trên bất kỳ nhà cung cấp mô hình nào.\n\nfenic mang lại độ tin cậy của các pipeline dữ liệu truyền thống cho các tác vụ AI.\n\n### Các tính năng chính\n\n#### Được thiết kế riêng cho suy luận LLM\n\n- Bộ máy truy vấn được thiết kế từ đầu cho các tác vụ AI, không phải chỉnh sửa lại\n- Tối ưu hóa lô tự động cho các lệnh gọi API\n- Logic thử lại tích hợp sẵn và giới hạn tốc độ\n- Đếm token và theo dõi chi phí\n\n#### Các toán tử ngữ nghĩa là công dân hạng nhất",
    "Status": "ok"
  },
  {
    "Id": 5,
    "Content": "\n- `semantic.analyze_sentiment` - Built-in sentiment analysis\n- `semantic.classify` - Categorize text with few-shot examples\n- `semantic.extract` - Transform unstructured text into structured data with schemas\n- `semantic.group_by` - Group data by semantic similarity\n- `semantic.join` - Join DataFrames on meaning, not just values\n- `semantic.map` - Apply natural language transformations\n- `semantic.predicate` - Create predicates using natural language to filter rows\n- `semantic.reduce` - Aggregate grouped data with LLM operations\n\n#### Native Unstructured Data Support\n\nGoes beyond typical multimodal data types (audio, images) by creating specialized types for text-heavy workloads:\n\n- Markdown parsing and extraction as a first-class data type\n- Transcript processing (SRT, generic formats) with speaker and timestamp awareness\n- JSON manipulation with JQ expressions for nested data\n- Automatic text chunking with configurable overlap for long documents\n\n#### Production-Ready Infrastructure",
    "ContentSha": "NE5dPjdhTPxhAD1E+gcEg2tw/wEtQVkEuw1AGA1YwCQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "- `semantic.analyze_sentiment` - Phân tích cảm xúc tích hợp sẵn\n- `semantic.classify` - Phân loại văn bản với các ví dụ few-shot\n- `semantic.extract` - Chuyển đổi văn bản phi cấu trúc thành dữ liệu có cấu trúc với các lược đồ\n- `semantic.group_by` - Nhóm dữ liệu theo sự tương đồng về ngữ nghĩa\n- `semantic.join` - Kết nối các DataFrame dựa trên ý nghĩa, không chỉ giá trị\n- `semantic.map` - Áp dụng các biến đổi ngôn ngữ tự nhiên\n- `semantic.predicate` - Tạo các điều kiện lọc hàng bằng ngôn ngữ tự nhiên\n- `semantic.reduce` - Tổng hợp dữ liệu đã nhóm với các thao tác LLM\n\n#### Hỗ Trợ Dữ Liệu Phi Cấu Trúc Gốc\n\nVượt xa các kiểu dữ liệu đa phương tiện thông thường (âm thanh, hình ảnh) bằng cách tạo ra các kiểu chuyên biệt cho khối lượng công việc nặng về văn bản:\n\n- Phân tích cú pháp và trích xuất Markdown như một kiểu dữ liệu hạng nhất\n- Xử lý bản ghi (SRT, các định dạng chung) với nhận diện người nói và thời gian\n- Xử lý JSON với các biểu thức JQ cho dữ liệu lồng nhau\n- Tự động chia nhỏ văn bản với cấu hình chồng lấn cho các tài liệu dài\n\n#### Hạ Tầng Sẵn Sàng Cho Sản Xuất",
    "Status": "ok"
  },
  {
    "Id": 6,
    "Content": "\n- Multi-provider support (OpenAI, Anthropic, Gemini)\n- Local and cloud execution backends\n- Comprehensive error handling and logging\n- Pydantic integration for type safety\n\n#### Familiar DataFrame API\n\n- PySpark-compatible operations\n- Lazy evaluation and query optimization\n- SQL support for complex queries\n- Seamless integration with existing data pipelines\n\n### Why DataFrames for LLM and Agentic Applications?\n\nAI and agentic applications are fundamentally pipelines and workflows - exactly what DataFrame APIs were designed to handle. Rather than reinventing patterns for data transformation, filtering, and aggregation, fenic leverages decades of proven engineering practices.\n\n#### Decoupled Architecture for Better Agents\n\nfenic creates a clear separation between heavy inference tasks and real-time agent interactions. By moving batch processing out of the agent runtime, you get:\n\n- More predictable and responsive agents\n- Better resource utilization with batched LLM calls\n- Cleaner separation between planning/orchestration and execution\n",
    "ContentSha": "mT0TcKmDXUG4vMCvQ5Zt2Hov+kI1MOWz6tDxxgD3BGY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "- Hỗ trợ nhiều nhà cung cấp (OpenAI, Anthropic, Gemini)\n- Backend thực thi cục bộ và đám mây\n- Xử lý lỗi và ghi log toàn diện\n- Tích hợp Pydantic để đảm bảo an toàn kiểu dữ liệu\n\n#### API DataFrame Quen Thuộc\n\n- Các thao tác tương thích với PySpark\n- Đánh giá lười (lazy evaluation) và tối ưu hóa truy vấn\n- Hỗ trợ SQL cho các truy vấn phức tạp\n- Tích hợp liền mạch với các pipeline dữ liệu hiện có\n\n### Tại Sao Chọn DataFrames Cho Các Ứng Dụng LLM và Agentic?\n\nCác ứng dụng AI và agentic về cơ bản là các pipeline và quy trình làm việc - chính xác là những gì mà API DataFrame được thiết kế để xử lý. Thay vì phát minh lại các mẫu xử lý chuyển đổi dữ liệu, lọc và tổng hợp, fenic tận dụng hàng thập kỷ thực tiễn kỹ thuật đã được kiểm chứng.\n\n#### Kiến Trúc Tách Rời Cho Agent Tốt Hơn\n\nfenic tạo ra sự phân tách rõ ràng giữa các tác vụ suy luận nặng và tương tác tác nhân thời gian thực. Bằng cách chuyển xử lý theo lô ra khỏi môi trường runtime của tác nhân, bạn sẽ nhận được:\n\n- Các agent dự đoán được và phản hồi nhanh hơn\n- Tối ưu hóa sử dụng tài nguyên với các cuộc gọi LLM theo lô\n- Phân tách rõ ràng hơn giữa lập kế hoạch/điều phối và thực thi",
    "Status": "ok"
  },
  {
    "Id": 7,
    "Content": "#### Built for All Engineers\n\nDataFrames aren't just for data practitioners. The fluent, composable API design makes it accessible to any engineer:\n\n- Chain operations naturally: `df.filter(...).semantic.group_by(...)`\n- Mix imperative and declarative styles seamlessly\n- Get started quickly with familiar patterns from pandas/PySpark or SQL\n\n## Support\n\nJoin our community on [Discord](https://discord.gg/GdqF3J7huR) where you can connect with other users, ask questions, and get help with your fenic projects. Our community is always happy to welcome newcomers!\n\nIf you find fenic useful, consider giving us a ⭐ at the top of this repository. Your support helps us grow and improve the framework for everyone!\n\n## Contributing\n\nWe welcome contributions of all kinds! Whether you're interested in writing code, improving documentation, testing features, or proposing new ideas, your help is valuable to us.\n\nFor developers planning to submit code changes, we encourage you to first open an issue to discuss your ideas before creating a Pull Request. This helps ensure alignment with the project's direction and prevents duplicate efforts.\n\nPlease refer to our [contribution guidelines](https://raw.githubusercontent.com/typedef-ai/fenic/main/CONTRIBUTING.md) for detailed information about the development process and project setup.\n",
    "ContentSha": "uskg5roWGwsGUjyK072Ea16WzdZZykGudJVeAy5e46I=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### Dành cho Tất cả Kỹ sư\n\nDataFrame không chỉ dành cho những người làm việc với dữ liệu. Thiết kế API linh hoạt, có thể kết hợp giúp bất kỳ kỹ sư nào cũng dễ tiếp cận:\n\n- Kết chuỗi các thao tác một cách tự nhiên: `df.filter(...).semantic.group_by(...)`\n- Kết hợp liền mạch giữa phong cách mệnh lệnh và khai báo\n- Bắt đầu nhanh chóng với các mẫu quen thuộc từ pandas/PySpark hoặc SQL\n\n## Hỗ trợ\n\nTham gia cộng đồng của chúng tôi trên [Discord](https://discord.gg/GdqF3J7huR) để kết nối với những người dùng khác, đặt câu hỏi và nhận hỗ trợ cho các dự án fenic của bạn. Cộng đồng của chúng tôi luôn vui mừng chào đón các thành viên mới!\n\nNếu bạn thấy fenic hữu ích, hãy cân nhắc tặng cho chúng tôi một ⭐ ở đầu kho lưu trữ này. Sự ủng hộ của bạn sẽ giúp chúng tôi phát triển và cải thiện framework này cho mọi người!\n\n## Đóng góp\n\nChúng tôi hoan nghênh mọi hình thức đóng góp! Dù bạn quan tâm đến việc viết mã, cải thiện tài liệu, kiểm thử tính năng hay đề xuất ý tưởng mới, sự giúp đỡ của bạn đều rất quý giá đối với chúng tôi.\n\nĐối với các nhà phát triển dự định gửi thay đổi mã nguồn, chúng tôi khuyến khích bạn mở một issue để thảo luận ý tưởng trước khi tạo Pull Request. Điều này giúp đảm bảo sự đồng thuận với hướng đi của dự án và tránh trùng lặp công việc.\n\nVui lòng tham khảo [hướng dẫn đóng góp](https://raw.githubusercontent.com/typedef-ai/fenic/main/CONTRIBUTING.md) của chúng tôi để biết thông tin chi tiết về quy trình phát triển và thiết lập dự án.",
    "Status": "ok"
  }
]