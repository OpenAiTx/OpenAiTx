[
  {
    "Id": 1,
    "Content": "<!-- markdownlint-disable MD041 MD033 -->\n<div align=\"center\">\n    <picture>\n        <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/images/typedef-fenic-logo-dark.png\">\n        <img src=\"https://raw.githubusercontent.com/typedef-ai/fenic/main/docs/images/typedef-fenic-logo.png\" alt=\"fenic, by typedef\" width=\"90%\">\n    </picture>\n</div>\n\n# fenic: the dataframe (re)built for LLM inference\n\n[![PyPI version](https://img.shields.io/pypi/v/fenic.svg)](https://pypi.org/project/fenic/)\n[![Python versions](https://img.shields.io/pypi/pyversions/fenic.svg)](https://pypi.org/project/fenic/)\n[![License](https://img.shields.io/github/license/typedef-ai/fenic.svg)](https://github.com/typedef-ai/fenic/blob/main/LICENSE)\n[![Discord](https://img.shields.io/discord/1381706122322513952?label=Discord&logo=discord)](https://discord.gg/GdqF3J7huR)\n\n---\n\n## **Documentation**: [docs.fenic.ai](https://docs.fenic.ai/)\n\nfenic is an opinionated, PySpark-inspired DataFrame framework from typedef.ai for building AI and agentic applications. Transform unstructured and structured data into insights using familiar DataFrame operations enhanced with semantic intelligence. With first-class support for markdown, transcripts, and semantic operators, plus efficient batch inference across any model provider.\n",
    "ContentSha": "tmub1AxUb0Y4Al5Ltz67crbP453GMVUntyWUISmU7NQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<!-- markdownlint-disable MD041 MD033 -->\n<div align=\"center\">\n    <picture>\n        <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/images/typedef-fenic-logo-dark.png\">\n        <img src=\"https://raw.githubusercontent.com/typedef-ai/fenic/main/docs/images/typedef-fenic-logo.png\" alt=\"fenic, by typedef\" width=\"90%\">\n    </picture>\n</div>\n\n# fenic: LLM इनफेरेंस के लिए (पुनः) निर्मित डाटा फ्रेम\n\n[![PyPI version](https://img.shields.io/pypi/v/fenic.svg)](https://pypi.org/project/fenic/)\n[![Python versions](https://img.shields.io/pypi/pyversions/fenic.svg)](https://pypi.org/project/fenic/)\n[![License](https://img.shields.io/github/license/typedef-ai/fenic.svg)](https://github.com/typedef-ai/fenic/blob/main/LICENSE)\n[![Discord](https://img.shields.io/discord/1381706122322513952?label=Discord&logo=discord)](https://discord.gg/GdqF3J7huR)\n\n---\n\n## **प्रलेखन**: [docs.fenic.ai](https://docs.fenic.ai/)\n\nfenic, typedef.ai द्वारा प्रस्तुत एक रायपूर्ण, PySpark-प्रेरित DataFrame फ्रेमवर्क है, जो एआई और एजेंटिक अनुप्रयोगों के निर्माण के लिए है। असंरचित और संरचित डेटा को परिचित DataFrame ऑपरेशनों के माध्यम से अंतर्दृष्टि में बदलें, जिसमें सेमांटिक इंटेलिजेंस की शक्ति जोड़ी गई है। इसमें मार्कडाउन, ट्रांस्क्रिप्ट्स और सेमांटिक ऑपरेटरों के लिए प्रथम श्रेणी का समर्थन है, साथ ही किसी भी मॉडल प्रदाता पर कुशल बैच इनफेरेंस की सुविधा भी है।",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "## Install\n\nfenic supports Python `[3.10, 3.11, 3.12]`\n\n```bash\npip install fenic\n```\n\n### LLM Provider Setup\n\nfenic requires an API key from at least one LLM provider. Set the appropriate environment variable for your chosen provider:\n\n```bash\n# For OpenAI\nexport OPENAI_API_KEY=\"your-openai-api-key\"\n\n# For Anthropic\nexport ANTHROPIC_API_KEY=\"your-anthropic-api-key\"\n\n# For Google",
    "ContentSha": "QT2GWoHGnyfwnJxlfZAk0I5rpIsEfvGEhJD38oz6lCY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## इंस्टॉल\n\nfenic Python `[3.10, 3.11, 3.12]` को सपोर्ट करता है\n\n```bash\npip install fenic\n```\n\n### LLM प्रदाता सेटअप\n\nfenic को कम से कम एक LLM प्रदाता से API कुंजी की आवश्यकता होती है। अपने चुने हुए प्रदाता के लिए उपयुक्त पर्यावरण चर सेट करें:\n\n```bash\n# OpenAI के लिए\nexport OPENAI_API_KEY=\"your-openai-api-key\"\n\n# Anthropic के लिए\nexport ANTHROPIC_API_KEY=\"your-anthropic-api-key\"\n\n# Google के लिए",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "export GEMINI_API_KEY=\"your-google-api-key\"\n```\n\n## Quickstart\n\nThe fastest way to learn about fenic is by checking the examples.\n\nBelow is a quick list of the examples in this repo:\n\n| Example                                                                 | Description                                                                                                                         |\n| ----------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| [Hello World!](examples/hello_world)                                    | Introduction to semantic extraction and classification using fenic's core operators through error log analysis.                     |\n| [Enrichment](examples/enrichment)                                       | Multi-stage DataFrames with template-based text extraction, joins, and LLM-powered transformations demonstrated via log enrichment. |\n| [Meeting Transcript Processing](examples/meeting_transcript_processing) | Native transcript parsing, Pydantic schema integration, and complex aggregations shown through meeting analysis.                    |\n| [News Analysis](examples/news_analysis)                                 | Analyze and extract insights from news articles using semantic operators and structured data processing.                            |\n| [Podcast Summarization](examples/podcast_summarization)                 | Process and summarize podcast transcripts with speaker-aware analysis and key point extraction.                                     |\n| [Semantic Join](examples/semantic_joins)                                | Instead of simple fuzzy matching, use fenic's powerful semantic join functionality to match data across tables.                     |\n| [Named Entity Recognition](examples/named_entity_recognition)           | Extract and classify named entities from text using semantic extraction and classification.                                         |\n| [Markdown Processing](examples/markdown_processing)                     | Process and transform markdown documents with structured data extraction and formatting.                                            |\n| [JSON Processing](examples/json_processing)                             | Handle complex JSON data structures with semantic operations and schema validation.                                                 |\n| [Feedback Clustering](examples/feedback_clustering)                     | Group and analyze feedback using semantic similarity and clustering operations.                                                     |\n| [Document Extraction](examples/document_extraction)                     | Extract structured information from various document formats using semantic operators.                                              |\n\n(Feel free to click any example above to jump right to its folder.)\n",
    "ContentSha": "RBvJ+qAaDZODC8rvu1sFp9QTE4SUhSKTTu/91HAxBRc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "export GEMINI_API_KEY=\"your-google-api-key\"\n```\n\n## त्वरित प्रारंभ\n\nफेनिक के बारे में जानने का सबसे तेज़ तरीका उदाहरणों को देखना है।\n\nनीचे इस रिपॉजिटरी में उपलब्ध उदाहरणों की एक त्वरित सूची दी गई है:\n\n| उदाहरण                                                                  | विवरण                                                                                                                                |\n| ------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------- |\n| [हैलो वर्ल्ड!](examples/hello_world)                                    | फेनिक के कोर ऑपरेटरों के माध्यम से एरर लॉग विश्लेषण का उपयोग करके सेमांटिक एक्सट्रैक्शन और वर्गीकरण का परिचय।                       |\n| [एनरिचमेंट](examples/enrichment)                                        | लॉग एनरिचमेंट के माध्यम से टेम्पलेट-आधारित टेक्स्ट एक्सट्रैक्शन, जॉइन और LLM-समर्थित ट्रांसफॉर्मेशन के साथ मल्टी-स्टेज डेटा फ्रेम्स। |\n| [मीटिंग ट्रांसक्रिप्ट प्रोसेसिंग](examples/meeting_transcript_processing) | मीटिंग विश्लेषण के माध्यम से नेटिव ट्रांसक्रिप्ट पार्सिंग, पाइडांटिक स्कीमा एकीकरण और जटिल एग्रीगेशन दिखाया गया है।                |\n| [समाचार विश्लेषण](examples/news_analysis)                               | सेमांटिक ऑपरेटरों और संरचित डेटा प्रोसेसिंग का उपयोग करके समाचार लेखों का विश्लेषण और इनसाइट्स निकालना।                              |\n| [पॉडकास्ट सारांशण](examples/podcast_summarization)                      | स्पीकर-अवेयर विश्लेषण और मुख्य बिंदु एक्सट्रैक्शन के साथ पॉडकास्ट ट्रांसक्रिप्ट को प्रोसेस और संक्षिप्त करें।                        |\n| [सेमांटिक जॉइन](examples/semantic_joins)                                | साधारण फजी मैचिंग के बजाय, फेनिक की शक्तिशाली सेमांटिक जॉइन कार्यक्षमता का उपयोग करके टेबल्स में डेटा को जोड़ें।                    |\n| [नामित इकाई पहचान](examples/named_entity_recognition)                   | सेमांटिक एक्सट्रैक्शन और वर्गीकरण का उपयोग करके टेक्स्ट से नामित इकाइयों को निकालें और वर्गीकृत करें।                                |\n| [मार्कडाउन प्रोसेसिंग](examples/markdown_processing)                     | संरचित डेटा एक्सट्रैक्शन और फॉर्मेटिंग के साथ मार्कडाउन दस्तावेज़ों को प्रोसेस और ट्रांसफॉर्म करें।                                   |\n| [JSON प्रोसेसिंग](examples/json_processing)                              | सेमांटिक ऑपरेशन्स और स्कीमा वैलिडेशन के साथ जटिल JSON डेटा संरचनाओं को संभालें।                                                     |\n| [फीडबैक क्लस्टरिंग](examples/feedback_clustering)                       | सेमांटिक समानता और क्लस्टरिंग ऑपरेशन्स का उपयोग करके फीडबैक को समूहित और विश्लेषित करें।                                            |\n| [दस्तावेज़ एक्सट्रैक्शन](examples/document_extraction)                   | सेमांटिक ऑपरेटरों का उपयोग करके विभिन्न दस्तावेज़ प्रारूपों से संरचित जानकारी निकालें।                                               |\n\n(ऊपर दिए गए किसी भी उदाहरण पर क्लिक करके सीधे उसके फोल्डर पर जाएँ।)\n",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "## Why use fenic?\n\nfenic is an opinionated, PySpark-inspired DataFrame framework for building production AI and agentic applications.\n\nUnlike traditional data tools retrofitted for LLMs, fenic's query engine is built from the ground up with inference in mind.\n\nTransform structured and unstructured data into insights using familiar DataFrame operations enhanced with semantic intelligence. With first-class support for markdown, transcripts, and semantic operators, plus efficient batch inference across any model provider.\n\nfenic brings the reliability of traditional data pipelines to AI workloads.\n\n### Key Features\n\n#### Purpose-Built for LLM Inference\n\n- Query engine designed from scratch for AI workloads, not retrofitted\n- Automatic batch optimization for API calls\n- Built-in retry logic and rate limiting\n- Token counting and cost tracking\n\n#### Semantic Operators as First-Class Citizens",
    "ContentSha": "POPTpr2d3zFT3V0X0/NRjmMCUTjlIPBHtMTVHIRsyfM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## fenic का उपयोग क्यों करें?\n\nfenic एक राय-आधारित, PySpark-प्रेरित DataFrame फ्रेमवर्क है जो प्रोडक्शन AI और एजेंटिक एप्लिकेशन बनाने के लिए बनाया गया है।\n\nपारंपरिक डेटा टूल्स के विपरीत जिन्हें LLMs के लिए बाद में अनुकूलित किया गया है, fenic का क्वेरी इंजन शुरुआत से ही इनफेरेंस को ध्यान में रखकर बनाया गया है।\n\nसंरचित और असंरचित डेटा को परिचित DataFrame ऑपरेशनों का उपयोग करके, जो सेमांटिक इंटेलिजेंस के साथ बेहतर किए गए हैं, इनसाइट्स में बदलें। मार्कडाउन, ट्रांसक्रिप्ट्स और सेमांटिक ऑपरेटर्स के लिए प्रथम श्रेणी का समर्थन, साथ ही किसी भी मॉडल प्रदाता पर कुशल बैच इनफेरेंस की सुविधा।\n\nfenic पारंपरिक डेटा पाइपलाइनों की विश्वसनीयता को AI वर्कलोड्स में लाता है।\n\n### प्रमुख विशेषताएं\n\n#### LLM इनफेरेंस के लिए विशेष रूप से निर्मित\n\n- AI वर्कलोड्स के लिए शुरू से डिजाइन किया गया क्वेरी इंजन, बाद में अनुकूलित नहीं\n- API कॉल्स के लिए स्वचालित बैच ऑप्टिमाइजेशन\n- बिल्ट-इन रिट्राई लॉजिक और रेट लिमिटिंग\n- टोकन काउंटिंग और लागत ट्रैकिंग\n\n#### प्रथम श्रेणी नागरिक के रूप में सेमांटिक ऑपरेटर्स",
    "Status": "ok"
  },
  {
    "Id": 5,
    "Content": "\n- `semantic.analyze_sentiment` - Built-in sentiment analysis\n- `semantic.classify` - Categorize text with few-shot examples\n- `semantic.extract` - Transform unstructured text into structured data with schemas\n- `semantic.group_by` - Group data by semantic similarity\n- `semantic.join` - Join DataFrames on meaning, not just values\n- `semantic.map` - Apply natural language transformations\n- `semantic.predicate` - Create predicates using natural language to filter rows\n- `semantic.reduce` - Aggregate grouped data with LLM operations\n\n#### Native Unstructured Data Support\n\nGoes beyond typical multimodal data types (audio, images) by creating specialized types for text-heavy workloads:\n\n- Markdown parsing and extraction as a first-class data type\n- Transcript processing (SRT, generic formats) with speaker and timestamp awareness\n- JSON manipulation with JQ expressions for nested data\n- Automatic text chunking with configurable overlap for long documents\n\n#### Production-Ready Infrastructure",
    "ContentSha": "NE5dPjdhTPxhAD1E+gcEg2tw/wEtQVkEuw1AGA1YwCQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "- `semantic.analyze_sentiment` - अंतर्निहित भावनात्मक विश्लेषण\n- `semantic.classify` - कुछ उदाहरणों के साथ पाठ को श्रेणीबद्ध करें\n- `semantic.extract` - असंरचित पाठ को योजनाओं के साथ संरचित डेटा में परिवर्तित करें\n- `semantic.group_by` - डेटा को अर्थपूर्ण समानता के आधार पर समूहित करें\n- `semantic.join` - अर्थ के आधार पर DataFrames को जोड़ें, केवल मानों के आधार पर नहीं\n- `semantic.map` - प्राकृतिक भाषा रूपांतरण लागू करें\n- `semantic.predicate` - पंक्तियों को छाँटने के लिए प्राकृतिक भाषा का उपयोग करके प्रेडिकेट्स बनाएं\n- `semantic.reduce` - समूहित डेटा को LLM संचालन के साथ समेकित करें\n\n#### नेटिव असंरचित डेटा समर्थन\n\nसामान्य मल्टीमॉडल डेटा प्रकारों (ऑडियो, छवियाँ) से आगे बढ़कर, टेक्स्ट-प्रधान कार्यभार के लिए विशेष प्रकार बनाता है:\n\n- Markdown पार्सिंग और निष्कर्षण को प्रथम श्रेणी के डेटा प्रकार के रूप में सपोर्ट करना\n- वक्ता और टाइमस्टैम्प की जानकारी के साथ ट्रांसक्रिप्ट प्रोसेसिंग (SRT, सामान्य प्रारूप)\n- नेस्टेड डेटा के लिए JQ अभिव्यक्तियों के साथ JSON में हेरफेर\n- लंबे दस्तावेजों के लिए कॉन्फ़िगर करने योग्य ओवरलैप के साथ स्वचालित पाठ खंडन\n\n#### प्रोडक्शन-रेडी इन्फ्रास्ट्रक्चर",
    "Status": "ok"
  },
  {
    "Id": 6,
    "Content": "\n- Multi-provider support (OpenAI, Anthropic, Gemini)\n- Local and cloud execution backends\n- Comprehensive error handling and logging\n- Pydantic integration for type safety\n\n#### Familiar DataFrame API\n\n- PySpark-compatible operations\n- Lazy evaluation and query optimization\n- SQL support for complex queries\n- Seamless integration with existing data pipelines\n\n### Why DataFrames for LLM and Agentic Applications?\n\nAI and agentic applications are fundamentally pipelines and workflows - exactly what DataFrame APIs were designed to handle. Rather than reinventing patterns for data transformation, filtering, and aggregation, fenic leverages decades of proven engineering practices.\n\n#### Decoupled Architecture for Better Agents\n\nfenic creates a clear separation between heavy inference tasks and real-time agent interactions. By moving batch processing out of the agent runtime, you get:\n\n- More predictable and responsive agents\n- Better resource utilization with batched LLM calls\n- Cleaner separation between planning/orchestration and execution\n",
    "ContentSha": "mT0TcKmDXUG4vMCvQ5Zt2Hov+kI1MOWz6tDxxgD3BGY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "- मल्टी-प्रोवाइडर सपोर्ट (OpenAI, Anthropic, Gemini)\n- लोकल और क्लाउड निष्पादन बैकएंड्स\n- व्यापक त्रुटि हैंडलिंग और लॉगिंग\n- टाइप सेफ्टी के लिए Pydantic एकीकरण\n\n#### परिचित DataFrame API\n\n- PySpark-संगत ऑपरेशन्स\n- लेज़ी इवैल्युएशन और क्वेरी ऑप्टिमाइज़ेशन\n- जटिल क्वेरीज़ के लिए SQL सपोर्ट\n- मौजूदा डेटा पाइपलाइनों के साथ सहज एकीकरण\n\n### LLM और एजेंटिक अनुप्रयोगों के लिए DataFrames क्यों?\n\nAI और एजेंटिक अनुप्रयोग मूल रूप से पाइपलाइंस और वर्कफ्लोज़ हैं - ठीक वही जिसके लिए DataFrame API डिज़ाइन किए गए थे। डेटा ट्रांसफॉर्मेशन, फ़िल्टरिंग, और एग्रीगेशन के पैटर्न को फिर से आविष्कार करने के बजाय, fenic दशकों की सिद्ध इंजीनियरिंग प्रथाओं का लाभ उठाता है।\n\n#### बेहतर एजेंट्स के लिए डिकपल्ड आर्किटेक्चर\n\nfenic भारी इनफेरेंस कार्यों और रियल-टाइम एजेंट इंटरैक्शन्स के बीच एक स्पष्ट विभाजन बनाता है। बैच प्रोसेसिंग को एजेंट रनटाइम से बाहर ले जाकर, आपको मिलता है:\n\n- अधिक पूर्वानुमानित और उत्तरदायी एजेंट्स\n- बैच्ड LLM कॉल्स के साथ संसाधनों का बेहतर उपयोग\n- योजना/ऑर्केस्ट्रेशन और निष्पादन के बीच अधिक स्वच्छ विभाजन",
    "Status": "ok"
  },
  {
    "Id": 7,
    "Content": "#### Built for All Engineers\n\nDataFrames aren't just for data practitioners. The fluent, composable API design makes it accessible to any engineer:\n\n- Chain operations naturally: `df.filter(...).semantic.group_by(...)`\n- Mix imperative and declarative styles seamlessly\n- Get started quickly with familiar patterns from pandas/PySpark or SQL\n\n## Support\n\nJoin our community on [Discord](https://discord.gg/GdqF3J7huR) where you can connect with other users, ask questions, and get help with your fenic projects. Our community is always happy to welcome newcomers!\n\nIf you find fenic useful, consider giving us a ⭐ at the top of this repository. Your support helps us grow and improve the framework for everyone!\n\n## Contributing\n\nWe welcome contributions of all kinds! Whether you're interested in writing code, improving documentation, testing features, or proposing new ideas, your help is valuable to us.\n\nFor developers planning to submit code changes, we encourage you to first open an issue to discuss your ideas before creating a Pull Request. This helps ensure alignment with the project's direction and prevents duplicate efforts.\n\nPlease refer to our [contribution guidelines](https://raw.githubusercontent.com/typedef-ai/fenic/main/CONTRIBUTING.md) for detailed information about the development process and project setup.\n",
    "ContentSha": "uskg5roWGwsGUjyK072Ea16WzdZZykGudJVeAy5e46I=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### सभी इंजीनियरों के लिए बनाया गया\n\nDataFrames केवल डेटा प्रैक्टिशनर्स के लिए नहीं हैं। फ्लूएंट, कंपोज़ेबल API डिज़ाइन इसे किसी भी इंजीनियर के लिए सुलभ बनाता है:\n\n- ऑपरेशन्स को स्वाभाविक रूप से चेन करें: `df.filter(...).semantic.group_by(...)`\n- imperative और declarative शैलियों को सहजता से मिलाएं\n- pandas/PySpark या SQL से परिचित पैटर्न के साथ जल्दी शुरू करें\n\n## सहायता\n\nहमारे समुदाय से [Discord](https://discord.gg/GdqF3J7huR) पर जुड़ें, जहाँ आप अन्य उपयोगकर्ताओं से संपर्क कर सकते हैं, प्रश्न पूछ सकते हैं, और अपने fenic प्रोजेक्ट्स में सहायता प्राप्त कर सकते हैं। हमारा समुदाय हमेशा नए सदस्यों का स्वागत करता है!\n\nयदि आपको fenic उपयोगी लगता है, तो कृपया इस repository के शीर्ष पर हमें एक ⭐ दें। आपका समर्थन सभी के लिए फ्रेमवर्क को विकसित और बेहतर बनाने में हमारी मदद करता है!\n\n## योगदान\n\nहम हर प्रकार के योगदान का स्वागत करते हैं! चाहे आप कोड लिखने, डाक्यूमेंटेशन सुधारने, फीचर्स टेस्ट करने, या नए आइडिया प्रस्तावित करने में रुचि रखते हों, आपकी सहायता हमारे लिए मूल्यवान है।\n\nकोड परिवर्तन सबमिट करने की योजना बना रहे डेवलपर्स को हम प्रोत्साहित करते हैं कि वे पहले एक issue खोलें ताकि अपने विचारों पर चर्चा कर सकें, इससे यह सुनिश्चित होता है कि परियोजना की दिशा के साथ संरेखण बना रहे और डुप्लिकेट प्रयासों से बचा जा सके।\n\nकृपया हमारे [योगदान दिशानिर्देश](https://raw.githubusercontent.com/typedef-ai/fenic/main/CONTRIBUTING.md) देखें, जिसमें विकास प्रक्रिया और परियोजना सेटअप के बारे में विस्तृत जानकारी दी गई है।",
    "Status": "ok"
  }
]