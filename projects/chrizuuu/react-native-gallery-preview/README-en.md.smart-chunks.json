[
  {
    "Id": 1,
    "Content": "\n\n\n  \n # react-native-gallery-preview\n  \n  <div>\n    <img align=\"right\" height=\"720\" src=\"https://raw.githubusercontent.com/chrizuuu/react-native-gallery-preview/main/example.gif\">\n  </div>\n\n  **GalleryPreview** is a flexible modal component for easy gallery previews with full gesture support. Using `Reanimated` and `React Native Gesture Handler`, it gives a smooth and simple user experience for both iOS and Android.\n  \n  ### Features\n  \n  * ‚ö°  **Smooth Gesture Interactions and Animations:** Experience fluid and responsive animations and gestures for a delightful user interface.\n  * üîç **Double Tap and Pinch to zoom:** Users can effortlessly zoom in and out of images with simple double-tap and pinch gestures\n  * üëÜ **Pull down to close:** Intuitive pull-down gesture to close the gallery preview, making navigation seamless.\n  *  ‚ÜîÔ∏è **RTL Support**\n  * üì± **Supports both `iOS` and `Android`:** Fully compatible with both iOS and Android devices, ensuring a consistent experience across platforms.\n  * üì± **Compatible with `Expo`**\n  ### Get started\n  Before you can use GalleryPreview, you need to set up react-native-reanimated and react-native-gesture-handler. Follow the links below for detailed   installation guides:\n  \n  * [Setting up Reanimated](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/#installation)\n  * [Setting up React Native Gesture Handler](ht‚ÜîÔ∏ètps://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation)\n\n  Once the dependencies are installed, you can add react-native-gallery-preview to your project:\n  ",
    "ContentSha": "4iKs+Xxu/xoNMWTpxH4R+4nmHO/JfPXDT7Ay13M2FAU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "  \n  \n # react-native-gallery-preview\n  \n  <div>\n    <img align=\"right\" height=\"720\" src=\"https://raw.githubusercontent.com/chrizuuu/react-native-gallery-preview/main/example.gif\">\n  </div>\n\n  **GalleryPreview** is a flexible modal component for easy gallery previews with full gesture support. Using `Reanimated` and `React Native Gesture Handler`, it gives a smooth and simple user experience for both iOS and Android.\n  \n  ### Features\n  \n  * ‚ö°  **Smooth Gesture Interactions and Animations:** Experience fluid and responsive animations and gestures for a delightful user interface.\n  * üîç **Double Tap and Pinch to zoom:** Users can effortlessly zoom in and out of images with simple double-tap and pinch gestures\n  * üëÜ **Pull down to close:** Intuitive pull-down gesture to close the gallery preview, making navigation seamless.\n  *  ‚ÜîÔ∏è **RTL Support**\n  * üì± **Supports both `iOS` and `Android`:** Fully compatible with both iOS and Android devices, ensuring a consistent experience across platforms.\n  * üì± **Compatible with `Expo`**\n  ### Get started\n  Before you can use GalleryPreview, you need to set up react-native-reanimated and react-native-gesture-handler. Follow the links below for detailed   installation guides:\n  \n  * [Setting up Reanimated](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/#installation)\n  * [Setting up React Native Gesture Handler](ht‚ÜîÔ∏ètps://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation)\n\n  Once the dependencies are installed, you can add react-native-gallery-preview to your project:\n  \n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "  "
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "  "
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": " # react-native-gallery-preview"
      },
      {
        "row": 4,
        "rowsha": "bBefIeb2K2KQVdirQPRU7QLki2hWORNHO4V9NjjiOyg=",
        "originContent": "  ",
        "translatedContent": "  "
      },
      {
        "row": 5,
        "rowsha": "XIjAhP3XpXhSFiuRVZZlPFmrJDCf8rMaNaIMhd34sbM=",
        "originContent": " # react-native-gallery-preview",
        "translatedContent": "  <div>"
      },
      {
        "row": 6,
        "rowsha": "bBefIeb2K2KQVdirQPRU7QLki2hWORNHO4V9NjjiOyg=",
        "originContent": "  ",
        "translatedContent": "    <img align=\"right\" height=\"720\" src=\"https://raw.githubusercontent.com/chrizuuu/react-native-gallery-preview/main/example.gif\">"
      },
      {
        "row": 7,
        "rowsha": "wiE6+jWJxeFT73P55EqafPwYNbd52vNXgilScxFAB1U=",
        "originContent": "  <div>",
        "translatedContent": "  </div>"
      },
      {
        "row": 8,
        "rowsha": "UrzIjjwJWATLSyUN1zOhesmeIuq3BGa/zVp7mzUB+yM=",
        "originContent": "    <img align=\"right\" height=\"720\" src=\"https://raw.githubusercontent.com/chrizuuu/react-native-gallery-preview/main/example.gif\">",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "TFeor9sDM2gZqn6BBqB9bb7gMaKqgk0Ph1pgaT3gpaM=",
        "originContent": "  </div>",
        "translatedContent": "  **GalleryPreview** is a flexible modal component for easy gallery previews with full gesture support. Using `Reanimated` and `React Native Gesture Handler`, it gives a smooth and simple user experience for both iOS and Android."
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "  "
      },
      {
        "row": 11,
        "rowsha": "TI7qaeJWLZpDAGS8pX396a4Vrqe6ldVpLVIVnfihToI=",
        "originContent": "  **GalleryPreview** is a flexible modal component for easy gallery previews with full gesture support. Using `Reanimated` and `React Native Gesture Handler`, it gives a smooth and simple user experience for both iOS and Android.",
        "translatedContent": "  ### Features"
      },
      {
        "row": 12,
        "rowsha": "bBefIeb2K2KQVdirQPRU7QLki2hWORNHO4V9NjjiOyg=",
        "originContent": "  ",
        "translatedContent": "  "
      },
      {
        "row": 13,
        "rowsha": "MqTMHxQORRc9sR+ylNYaZRygxjaMTO6neK47Lxj+7MQ=",
        "originContent": "  ### Features",
        "translatedContent": "  * ‚ö°  **Smooth Gesture Interactions and Animations:** Experience fluid and responsive animations and gestures for a delightful user interface."
      },
      {
        "row": 14,
        "rowsha": "bBefIeb2K2KQVdirQPRU7QLki2hWORNHO4V9NjjiOyg=",
        "originContent": "  ",
        "translatedContent": "  * üîç **Double Tap and Pinch to zoom:** Users can effortlessly zoom in and out of images with simple double-tap and pinch gestures"
      },
      {
        "row": 15,
        "rowsha": "PPfZ1SP+qexH3/2vLrWShvEN27GXMgyMrXHIhJHWswI=",
        "originContent": "  * ‚ö°  **Smooth Gesture Interactions and Animations:** Experience fluid and responsive animations and gestures for a delightful user interface.",
        "translatedContent": "  * üëÜ **Pull down to close:** Intuitive pull-down gesture to close the gallery preview, making navigation seamless."
      },
      {
        "row": 16,
        "rowsha": "2QgUGWLNozsGwlCtkbceRAHAo+MCXnOIAHbH3jC9OG4=",
        "originContent": "  * üîç **Double Tap and Pinch to zoom:** Users can effortlessly zoom in and out of images with simple double-tap and pinch gestures",
        "translatedContent": "  *  ‚ÜîÔ∏è **RTL Support**"
      },
      {
        "row": 17,
        "rowsha": "/+wgd/QD8F/ki+2hcjdtegSgOSyyb7B5fsKcrYIz07s=",
        "originContent": "  * üëÜ **Pull down to close:** Intuitive pull-down gesture to close the gallery preview, making navigation seamless.",
        "translatedContent": "  * üì± **Supports both `iOS` and `Android`:** Fully compatible with both iOS and Android devices, ensuring a consistent experience across platforms."
      },
      {
        "row": 18,
        "rowsha": "/V/X+tHHJ/OxASKFrfkw0RllIHQPjdZtavCB9y3kWl4=",
        "originContent": "  *  ‚ÜîÔ∏è **RTL Support**",
        "translatedContent": "  * üì± **Compatible with `Expo`**"
      },
      {
        "row": 19,
        "rowsha": "Fh0qBftEoO1HIojja2Jl5DPw964klzmcwMGxrIgkvF4=",
        "originContent": "  * üì± **Supports both `iOS` and `Android`:** Fully compatible with both iOS and Android devices, ensuring a consistent experience across platforms.",
        "translatedContent": "  ### Get started"
      },
      {
        "row": 20,
        "rowsha": "H47o4CxoJeyE0sOH2bbKGzyrdDA3pPO9YXhhNoUaKE0=",
        "originContent": "  * üì± **Compatible with `Expo`**",
        "translatedContent": "  Before you can use GalleryPreview, you need to set up react-native-reanimated and react-native-gesture-handler. Follow the links below for detailed   installation guides:"
      },
      {
        "row": 21,
        "rowsha": "FBGo7SWhsIA34JDeM2sCYA5pcjbZ7rypCCBl2PNC2GI=",
        "originContent": "  ### Get started",
        "translatedContent": "  "
      },
      {
        "row": 22,
        "rowsha": "izbWNEwYUPopScmTL9mXzKMBOf/bQZBti3RVjmRJmxo=",
        "originContent": "  Before you can use GalleryPreview, you need to set up react-native-reanimated and react-native-gesture-handler. Follow the links below for detailed   installation guides:",
        "translatedContent": "  * [Setting up Reanimated](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/#installation)"
      },
      {
        "row": 23,
        "rowsha": "bBefIeb2K2KQVdirQPRU7QLki2hWORNHO4V9NjjiOyg=",
        "originContent": "  ",
        "translatedContent": "  * [Setting up React Native Gesture Handler](ht‚ÜîÔ∏ètps://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation)"
      },
      {
        "row": 24,
        "rowsha": "67xF1uR0PD3D1b067dOro2WOL8+pRSuCcN4IbyYSxnk=",
        "originContent": "  * [Setting up Reanimated](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/#installation)",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "n9guAtY5IVdjz6USxXFBh8JAmY9pVStyf53YvH768lA=",
        "originContent": "  * [Setting up React Native Gesture Handler](ht‚ÜîÔ∏ètps://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation)",
        "translatedContent": "  Once the dependencies are installed, you can add react-native-gallery-preview to your project:"
      },
      {
        "row": 26,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "  "
      },
      {
        "row": 27,
        "rowsha": "hOYUoxxK8fyDo4uNhKbgfFYkViV9pEJpTsxxY1NgLY8=",
        "originContent": "  Once the dependencies are installed, you can add react-native-gallery-preview to your project:",
        "translatedContent": ""
      },
      {
        "row": 28,
        "rowsha": "bBefIeb2K2KQVdirQPRU7QLki2hWORNHO4V9NjjiOyg=",
        "originContent": "  ",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "  ```sh\n  npm install react-native-gallery-preview\n  # or\n  yarn add react-native-gallery-preview\n  \n  ```",
    "ContentSha": "P49SETERh9JjD7Ik+cRRhfqv1ny/d+r8jBzYiMBqsGo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "  ```sh\n  npm install react-native-gallery-preview\n  # or\n  yarn add react-native-gallery-preview\n  \n  ```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "s5XvjNDjJMSe7iO1pVwLDYzoc26/NRqVTvAhamUfeac=",
        "originContent": "  ```sh",
        "translatedContent": "  ```sh"
      },
      {
        "row": 2,
        "rowsha": "Wt+HH+VTYKfa81kv6Lk55aoypG0GzdRUvzaGBOIFsD8=",
        "originContent": "  npm install react-native-gallery-preview",
        "translatedContent": "  npm install react-native-gallery-preview"
      },
      {
        "row": 3,
        "rowsha": "hNHFpwR5TspJYPqwSriXiw8/3vQR4OvR7sno86Xng/U=",
        "originContent": "  # or",
        "translatedContent": "  # or"
      },
      {
        "row": 4,
        "rowsha": "QBmGQiefAKBQQ7K6PP9hhhUnLKbZuhbNKzRkzBBBq7o=",
        "originContent": "  yarn add react-native-gallery-preview",
        "translatedContent": "  yarn add react-native-gallery-preview"
      },
      {
        "row": 5,
        "rowsha": "bBefIeb2K2KQVdirQPRU7QLki2hWORNHO4V9NjjiOyg=",
        "originContent": "  ",
        "translatedContent": "  "
      },
      {
        "row": 6,
        "rowsha": "Rmhu4TMsMlOs89kmG4vhE8fUZ6zORB8jNyxbJF3O88I=",
        "originContent": "  ```",
        "translatedContent": "  ```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 3,
    "Content": "\n### Example\n",
    "ContentSha": "pUKyGxD1FFX0D6BQgAVWGqivAdNmPv+4mLCxHL09AnY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### Example\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Example"
      },
      {
        "row": 2,
        "rowsha": "ubVEm05cwr9zkNMJhipJo9vwQDDsclfTaTISW9TgglY=",
        "originContent": "### Example",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 4,
    "Content": "```tsx\nimport React, { useState } from 'react';\nimport { Button, View } from 'react-native';\nimport GalleryPreview from 'react-native-gallery-preview';\n\nexport const App = () => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const images = [\n    { uri: 'https://example.com/image1.jpg' },\n    { uri: 'https://example.com/image2.jpg' },\n    // Add more images here\n  ];\n\n  return (\n    <View>\n      <Button title=\"Open Gallery Preview\" onPress={() => setIsVisible(true)} />\n      <GalleryPreview\n        isVisible={isVisible}\n        onRequestClose={() => setIsVisible(false)}\n        images={images}\n      />\n    </View>\n  );\n};\n```",
    "ContentSha": "P9v+esx3UipXQ4mAXLBt+W0Sp/JeeVot+UaEgWR8nOE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```tsx\nimport React, { useState } from 'react';\nimport { Button, View } from 'react-native';\nimport GalleryPreview from 'react-native-gallery-preview';\n\nexport const App = () => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const images = [\n    { uri: 'https://example.com/image1.jpg' },\n    { uri: 'https://example.com/image2.jpg' },\n    // Add more images here\n  ];\n\n  return (\n    <View>\n      <Button title=\"Open Gallery Preview\" onPress={() => setIsVisible(true)} />\n      <GalleryPreview\n        isVisible={isVisible}\n        onRequestClose={() => setIsVisible(false)}\n        images={images}\n      />\n    </View>\n  );\n};\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "Kb0tLgalAq69/LOaLTo7uDmJJov07gCLfgQ2PRIk3Kg=",
        "originContent": "```tsx",
        "translatedContent": "```tsx"
      },
      {
        "row": 2,
        "rowsha": "YrH4o7QoqRg9U0creBt4iBSpPtdjYmccqFfCwtWFsck=",
        "originContent": "import React, { useState } from 'react';",
        "translatedContent": "import React, { useState } from 'react';"
      },
      {
        "row": 3,
        "rowsha": "zf3i7YHUofVgJt/m7Aa4JSvwBSj7g6S366zohhEWlbY=",
        "originContent": "import { Button, View } from 'react-native';",
        "translatedContent": "import { Button, View } from 'react-native';"
      },
      {
        "row": 4,
        "rowsha": "j17vgcZQViTdVXfsZzLeQtryzb0NtPZzychyVQvWaGM=",
        "originContent": "import GalleryPreview from 'react-native-gallery-preview';",
        "translatedContent": "import GalleryPreview from 'react-native-gallery-preview';"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "+VKQWGYsguaq/bazMvVGI6D15WFEynpcqa38hQEzJwE=",
        "originContent": "export const App = () => {",
        "translatedContent": "export const App = () => {"
      },
      {
        "row": 7,
        "rowsha": "VShjVVg4EZjJpMEJFTmkHep7y9cv6d5QWuUB+PFVwHs=",
        "originContent": "  const [isVisible, setIsVisible] = useState(false);",
        "translatedContent": "  const [isVisible, setIsVisible] = useState(false);"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "7ayPQxgKM/9PGAAH5QdENZahrOnPIyNOIEuAXRg2qOU=",
        "originContent": "  const images = [",
        "translatedContent": "  const images = ["
      },
      {
        "row": 10,
        "rowsha": "YRNl3M/iprsL4fDHKADodobknBgmngbUAtIOW6WmBF4=",
        "originContent": "    { uri: 'https://example.com/image1.jpg' },",
        "translatedContent": "    { uri: 'https://example.com/image1.jpg' },"
      },
      {
        "row": 11,
        "rowsha": "V69SX+/01R6dJJmMRondsHK381p4XRuxN2FHHic0O8g=",
        "originContent": "    { uri: 'https://example.com/image2.jpg' },",
        "translatedContent": "    { uri: 'https://example.com/image2.jpg' },"
      },
      {
        "row": 12,
        "rowsha": "LlKGndraw0qtUwvyhTmT5ABYoDuzDy3kNC5wdxsiU4Y=",
        "originContent": "    // Add more images here",
        "translatedContent": "    // Add more images here"
      },
      {
        "row": 13,
        "rowsha": "mMI7keMopjE6J+2xNN1I2uXPHYIaFeV7o+4HglQUFEE=",
        "originContent": "  ];",
        "translatedContent": "  ];"
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "84SlYK5NUzfszHhEBHODzZuK+tdMNdZTAWduZ3PeP+k=",
        "originContent": "  return (",
        "translatedContent": "  return ("
      },
      {
        "row": 16,
        "rowsha": "Vl72Jh2qyrg2pG0A4Nvjpfzeup5MGt0kYmvflBiqpS4=",
        "originContent": "    <View>",
        "translatedContent": "    <View>"
      },
      {
        "row": 17,
        "rowsha": "eXuk6Cpbz3qLqWVr3YP9OPxEaU2l+SM8cxz0ZhlMGao=",
        "originContent": "      <Button title=\"Open Gallery Preview\" onPress={() => setIsVisible(true)} />",
        "translatedContent": "      <Button title=\"Open Gallery Preview\" onPress={() => setIsVisible(true)} />"
      },
      {
        "row": 18,
        "rowsha": "pAsyNuwsRZCeEO488mkqo/0t15Q1oVapE3MqIpU4uDo=",
        "originContent": "      <GalleryPreview",
        "translatedContent": "      <GalleryPreview"
      },
      {
        "row": 19,
        "rowsha": "VSyBKV0EtNMjkLsL368amZW8WW2TNsxYtj3qYuk/KL8=",
        "originContent": "        isVisible={isVisible}",
        "translatedContent": "        isVisible={isVisible}"
      },
      {
        "row": 20,
        "rowsha": "hUGkFHFGdMIgeq/PSjj850Ahb4WbdvC4eJxXLfpojsI=",
        "originContent": "        onRequestClose={() => setIsVisible(false)}",
        "translatedContent": "        onRequestClose={() => setIsVisible(false)}"
      },
      {
        "row": 21,
        "rowsha": "gI/Eck3wls6feyXICB3+HNmaqXxpylxXTJVfYsmtoZs=",
        "originContent": "        images={images}",
        "translatedContent": "        images={images}"
      },
      {
        "row": 22,
        "rowsha": "5wp2GBwQoHZoG0b0x7DA8igs4rjwg5du1U92ZziR368=",
        "originContent": "      />",
        "translatedContent": "      />"
      },
      {
        "row": 23,
        "rowsha": "VwMM2H62lD32OYdmyVIOn98ELhDNzpvoOpgkb+mht0A=",
        "originContent": "    </View>",
        "translatedContent": "    </View>"
      },
      {
        "row": 24,
        "rowsha": "Ol0LnC/YJJO2a7oQgFnjM7GQp8P0iOq4D7q2qFP0Rzo=",
        "originContent": "  );",
        "translatedContent": "  );"
      },
      {
        "row": 25,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 26,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 5,
    "Content": "\n### Props\n\n| Prop Name                  | Type                                      | Description                                                                                                                      | Default                                                                                                            |\n|----------------------------|-------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|\n| `isVisible`                | `boolean`                                 | Controls the visibility of the image viewer modal.                                                                               | -                                                                                                                  |\n| `onRequestClose`           | `() => void`                              | Function to close the image viewer modal.                                                                                        | -                                                                                                                  |\n| `images`                   | `ImageItemURI[]`                          | Array of image URIs to be displayed.                                                                                             | -                                                                                                                  |\n| `initialIndex?`             | `number`                                  | The initial index of the image to be displayed when the viewer is opened.                                                       | `0`                                                                                                                |\n| `gap?`                      | `number`                                  | The gap between images in the viewer.                                                                                           | `24`                                                                                                               |\n| `simultaneousRenderedImages?` | `number`                                  | The number of images rendered simultaneously for optimization.                                                                | `6`                                                                                                                |                                                                                                           |\n| `OverlayComponent?`          | `(props: GalleryOverlayProps) => React.ReactNode` | Optional component to be rendered above the image viewer.                                                          | -                                                                                                                  |\n| `ImageComponent?`           | `(props: GalleryImageComponentProps) => React.JSX.Element` | Optional custom component to render each image.                                                                                  | -                                                                                                                  |\n| `springConfig?`             | `SpringConfig`                            | Spring configuration for animations.                                                                                             | `{ damping: 1000, mass: 1, stiffness: 250, restDisplacementThreshold: 0.02, restSpeedThreshold: 4 }`                |\n| `doubleTabEnabled?`           | `boolean`                                        | Enable or disable double-tap to zoom functionality.                                                                              | `true`                                                                                                             |\n| `pinchEnabled?`               | `boolean`                                        | Enable or disable pinch to zoom functionality.                                                                                   | `true`                                                                                                             |\n| `swipeToCloseEnabled?`        | `boolean`                                        | Enable or disable swipe to close functionality.                                                                                  | `true`                                                                                                             |\n| `backgroundColor?`        | `string`                                        | The background color of the modal, DefaultHeader, and StatusBar.                                                                                | `#000`     \n| `headerTextColor?`        | `string`                                        |  Color of text in the header.                                                                                | `#fff`     \n\n",
    "ContentSha": "P2AqieEg2rnN7d6STNSNg3NUHAqMnxAXGvyGjFbZqNM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n### Props\n\n| Prop Name                  | Type                                      | Description                                                                                                                      | Default                                                                                                            |\n|----------------------------|-------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|\n| `isVisible`                | `boolean`                                 | Controls the visibility of the image viewer modal.                                                                               | -                                                                                                                  |\n| `onRequestClose`           | `() => void`                              | Function to close the image viewer modal.                                                                                        | -                                                                                                                  |\n| `images`                   | `ImageItemURI[]`                          | Array of image URIs to be displayed.                                                                                             | -                                                                                                                  |\n| `initialIndex?`             | `number`                                  | The initial index of the image to be displayed when the viewer is opened.                                                       | `0`                                                                                                                |\n| `gap?`                      | `number`                                  | The gap between images in the viewer.                                                                                           | `24`                                                                                                               |\n| `simultaneousRenderedImages?` | `number`                                  | The number of images rendered simultaneously for optimization.                                                                | `6`                                                                                                                |                                                                                                           |\n| `OverlayComponent?`          | `(props: GalleryOverlayProps) => React.ReactNode` | Optional component to be rendered above the image viewer.                                                          | -                                                                                                                  |\n| `ImageComponent?`           | `(props: GalleryImageComponentProps) => React.JSX.Element` | Optional custom component to render each image.                                                                                  | -                                                                                                                  |\n| `springConfig?`             | `SpringConfig`                            | Spring configuration for animations.                                                                                             | `{ damping: 1000, mass: 1, stiffness: 250, restDisplacementThreshold: 0.02, restSpeedThreshold: 4 }`                |\n| `doubleTabEnabled?`           | `boolean`                                        | Enable or disable double-tap to zoom functionality.                                                                              | `true`                                                                                                             |\n| `pinchEnabled?`               | `boolean`                                        | Enable or disable pinch to zoom functionality.                                                                                   | `true`                                                                                                             |\n| `swipeToCloseEnabled?`        | `boolean`                                        | Enable or disable swipe to close functionality.                                                                                  | `true`                                                                                                             |\n| `backgroundColor?`        | `string`                                        | The background color of the modal, DefaultHeader, and StatusBar.                                                                                | `#000`                                                                                                            |\n| `headerTextColor?`        | `string`                                        |  Color of text in the header.                                                                                | `#fff`                                                                                                            |\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "uqkoUak5NU6XcguLp3xLxLDXddGMxFMKQPGcBTocUvk=",
        "originContent": "### Props",
        "translatedContent": "### Props"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "si99Uei8PzPWP66iSvH1Lgd2Mp8GI3Y+2r/JhsjVsHo=",
        "originContent": "| Prop Name                  | Type                                      | Description                                                                                                                      | Default                                                                                                            |",
        "translatedContent": "| Prop Name                  | Type                                      | Description                                                                                                                      | Default                                                                                                            |"
      },
      {
        "row": 5,
        "rowsha": "fgmlBafhI2RgqB1yFDZkWzocxgUtmptDbyX1taYShOo=",
        "originContent": "|----------------------------|-------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|",
        "translatedContent": "|----------------------------|-------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "row": 6,
        "rowsha": "n/cp6EDW8MUt2aN6NCYgxDE5YBQ0vhDZM6GRtZnGbiA=",
        "originContent": "| `isVisible`                | `boolean`                                 | Controls the visibility of the image viewer modal.                                                                               | -                                                                                                                  |",
        "translatedContent": "| `isVisible`                | `boolean`                                 | Controls the visibility of the image viewer modal.                                                                               | -                                                                                                                  |"
      },
      {
        "row": 7,
        "rowsha": "8rEXB0p9yzesLU5LOIn+CXzctszPFIjMDUoWHFUeHIo=",
        "originContent": "| `onRequestClose`           | `() => void`                              | Function to close the image viewer modal.                                                                                        | -                                                                                                                  |",
        "translatedContent": "| `onRequestClose`           | `() => void`                              | Function to close the image viewer modal.                                                                                        | -                                                                                                                  |"
      },
      {
        "row": 8,
        "rowsha": "5YzzKCi9xP8cihbW1RHKNGTeCEPbk737+GPu2JOeV6c=",
        "originContent": "| `images`                   | `ImageItemURI[]`                          | Array of image URIs to be displayed.                                                                                             | -                                                                                                                  |",
        "translatedContent": "| `images`                   | `ImageItemURI[]`                          | Array of image URIs to be displayed.                                                                                             | -                                                                                                                  |"
      },
      {
        "row": 9,
        "rowsha": "GvmZcLN8gFzU8m02S6osGuQv8zvS+bfRjWjMRzneE+Y=",
        "originContent": "| `initialIndex?`             | `number`                                  | The initial index of the image to be displayed when the viewer is opened.                                                       | `0`                                                                                                                |",
        "translatedContent": "| `initialIndex?`             | `number`                                  | The initial index of the image to be displayed when the viewer is opened.                                                       | `0`                                                                                                                |"
      },
      {
        "row": 10,
        "rowsha": "FosJCvMKWIKCBRn3qo0oGtQeHQ+Jxmrk7+iyfhddzKc=",
        "originContent": "| `gap?`                      | `number`                                  | The gap between images in the viewer.                                                                                           | `24`                                                                                                               |",
        "translatedContent": "| `gap?`                      | `number`                                  | The gap between images in the viewer.                                                                                           | `24`                                                                                                               |"
      },
      {
        "row": 11,
        "rowsha": "QqWWV3EyY+oH9g5V/fD7gT0k8CZuspM6gD+y1TVJrIk=",
        "originContent": "| `simultaneousRenderedImages?` | `number`                                  | The number of images rendered simultaneously for optimization.                                                                | `6`                                                                                                                |                                                                                                           |",
        "translatedContent": "| `simultaneousRenderedImages?` | `number`                                  | The number of images rendered simultaneously for optimization.                                                                | `6`                                                                                                                |                                                                                                           |"
      },
      {
        "row": 12,
        "rowsha": "6yJ968UtKypOsTDRo7Y04rjYAW44SbKZqIX5TGEWuMQ=",
        "originContent": "| `OverlayComponent?`          | `(props: GalleryOverlayProps) => React.ReactNode` | Optional component to be rendered above the image viewer.                                                          | -                                                                                                                  |",
        "translatedContent": "| `OverlayComponent?`          | `(props: GalleryOverlayProps) => React.ReactNode` | Optional component to be rendered above the image viewer.                                                          | -                                                                                                                  |"
      },
      {
        "row": 13,
        "rowsha": "xicH6EAOkcdDb5qPk0tWSanGETSqiyds5+3/17t2jSQ=",
        "originContent": "| `ImageComponent?`           | `(props: GalleryImageComponentProps) => React.JSX.Element` | Optional custom component to render each image.                                                                                  | -                                                                                                                  |",
        "translatedContent": "| `ImageComponent?`           | `(props: GalleryImageComponentProps) => React.JSX.Element` | Optional custom component to render each image.                                                                                  | -                                                                                                                  |"
      },
      {
        "row": 14,
        "rowsha": "QBkqCMxLyks0HgjRBwf4SoDWdaPXvGL+HSKkEgJLyJg=",
        "originContent": "| `springConfig?`             | `SpringConfig`                            | Spring configuration for animations.                                                                                             | `{ damping: 1000, mass: 1, stiffness: 250, restDisplacementThreshold: 0.02, restSpeedThreshold: 4 }`                |",
        "translatedContent": "| `springConfig?`             | `SpringConfig`                            | Spring configuration for animations.                                                                                             | `{ damping: 1000, mass: 1, stiffness: 250, restDisplacementThreshold: 0.02, restSpeedThreshold: 4 }`                |"
      },
      {
        "row": 15,
        "rowsha": "Z671N+B1PJmc3be5CHJTwtUQOYPpKut/Imwaht3al5I=",
        "originContent": "| `doubleTabEnabled?`           | `boolean`                                        | Enable or disable double-tap to zoom functionality.                                                                              | `true`                                                                                                             |",
        "translatedContent": "| `doubleTabEnabled?`           | `boolean`                                        | Enable or disable double-tap to zoom functionality.                                                                              | `true`                                                                                                             |"
      },
      {
        "row": 16,
        "rowsha": "qtkMQKvwiHQk7oaLdh1aiSmnU8el+qH3LLw9TByHwBM=",
        "originContent": "| `pinchEnabled?`               | `boolean`                                        | Enable or disable pinch to zoom functionality.                                                                                   | `true`                                                                                                             |",
        "translatedContent": "| `pinchEnabled?`               | `boolean`                                        | Enable or disable pinch to zoom functionality.                                                                                   | `true`                                                                                                             |"
      },
      {
        "row": 17,
        "rowsha": "6l1C+SLt80rRYvehUEAB7BAwaB3eeh9ioo38xV1NVaA=",
        "originContent": "| `swipeToCloseEnabled?`        | `boolean`                                        | Enable or disable swipe to close functionality.                                                                                  | `true`                                                                                                             |",
        "translatedContent": "| `swipeToCloseEnabled?`        | `boolean`                                        | Enable or disable swipe to close functionality.                                                                                  | `true`                                                                                                             |"
      },
      {
        "row": 18,
        "rowsha": "PpoTKSpWwG1K5ar53naea5xdQZmZRo+sY8wYcajmFBQ=",
        "originContent": "| `backgroundColor?`        | `string`                                        | The background color of the modal, DefaultHeader, and StatusBar.                                                                                | `#000`     ",
        "translatedContent": "| `backgroundColor?`        | `string`                                        | The background color of the modal, DefaultHeader, and StatusBar.                                                                                | `#000`                                                                                                            |"
      },
      {
        "row": 19,
        "rowsha": "EUrUy/5axP6/voBznRupZFGcpg5NqJvY6sYfM+UjtF8=",
        "originContent": "| `headerTextColor?`        | `string`                                        |  Color of text in the header.                                                                                | `#fff`     ",
        "translatedContent": "| `headerTextColor?`        | `string`                                        |  Color of text in the header.                                                                                | `#fff`                                                                                                            |"
      },
      {
        "row": 20,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  }
]