[
  {
    "Id": 1,
    "Content": "# c4 GenAI Suite\n\nAn AI chatbot application with Model Context Provider (MCP) integration, powered by Langchain and compatibility for all major Large Language Models (LLMs) and Embedding Models.\n\nAdministrators can create assistants with different capabilities by adding extensions, such as RAG (Retrieval-Augmented Generation) services or MCP servers. The application is built using a modern tech stack, including React, NestJS, and Python FastAPI for the REI-S service.\n\nUsers can interact with assistants through a user-friendly interface. Depending on the assistant's configuration, users may be able to ask questions, upload their own files, or use other features. The assistants interact with various LLM providers to provide responses based on the configured extensions. Contextual information provided by the configured extensions allows the assistants to answer domain-specific questions and provide relevant information.\n\nThe application is designed to be modular and extensible, allowing users to create assistants with different capabilities by adding extensions.\n\n![short demo video of basic usage](https://raw.githubusercontent.com/codecentric/c4-genai-suite/main/demo/preview.webp)\n\n## Features\n\n### Large Language Models (LLM) and Multimodal Models\n\nThe c4 GenAI Suite supports already many models directly. And if your preferred model is not supported already, it should be easy to write an extension to support it.\n\n* OpenAI compatible models\n* Azure OpenAI models\n* Bedrock models\n* Google GenAI models\n* Ollama compatible models\n",
    "ContentSha": "VePwjxi+F5ttFJfuckWjhr5ujnZTyNWk2c6pu+FMFPM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# c4 GenAI Suite\n\nएक एआई चैटबॉट एप्लिकेशन जिसमें मॉडल कॉन्टेक्स्ट प्रोवाइडर (MCP) एकीकरण है, जो लैंगचेन द्वारा संचालित है और सभी प्रमुख लार्ज लैंग्वेज मॉडल्स (LLMs) और एम्बेडिंग मॉडल्स के लिए संगत है।\n\nप्रशासक विभिन्न क्षमताओं वाले असिस्टेंट्स बना सकते हैं, जैसे RAG (रिट्रीवल-ऑग्मेंटेड जेनरेशन) सर्विसेज या MCP सर्वर जोड़कर एक्सटेंशन के माध्यम से। यह एप्लिकेशन एक आधुनिक टेक्नोलॉजी स्टैक का उपयोग करके बनाई गई है, जिसमें REI-S सेवा के लिए React, NestJS, और Python FastAPI शामिल हैं।\n\nउपयोगकर्ता एक यूज़र-फ्रेंडली इंटरफेस के माध्यम से असिस्टेंट्स के साथ संवाद कर सकते हैं। असिस्टेंट के कॉन्फ़िगरेशन के आधार पर, उपयोगकर्ता प्रश्न पूछ सकते हैं, अपनी खुद की फाइलें अपलोड कर सकते हैं, या अन्य सुविधाओं का उपयोग कर सकते हैं। असिस्टेंट्स विभिन्न LLM प्रदाताओं के साथ संवाद करके, कॉन्फ़िगर किए गए एक्सटेंशन के आधार पर उत्तर प्रदान करते हैं। कॉन्फ़िगर किए गए एक्सटेंशनों द्वारा प्रदान की गई संदर्भ जानकारी असिस्टेंट्स को डोमेन-विशिष्ट प्रश्नों के उत्तर देने और प्रासंगिक जानकारी प्रदान करने में सक्षम बनाती है।\n\nएप्लिकेशन को मॉड्यूलर और एक्स्टेंसिबल रूप से डिज़ाइन किया गया है, जिससे उपयोगकर्ता एक्सटेंशन जोड़कर विभिन्न क्षमताओं वाले असिस्टेंट्स बना सकते हैं।\n\n![मूल उपयोग का संक्षिप्त डेमो वीडियो](https://raw.githubusercontent.com/codecentric/c4-genai-suite/main/demo/preview.webp)\n\n## फीचर्स\n\n### लार्ज लैंग्वेज मॉडल्स (LLM) और मल्टीमोडल मॉडल्स\n\nc4 GenAI Suite पहले से ही कई मॉडल्स का सीधा समर्थन करता है। और यदि आपका पसंदीदा मॉडल पहले से समर्थित नहीं है, तो उसके लिए एक्सटेंशन लिखना भी आसान है।\n\n* OpenAI संगत मॉडल्स\n* Azure OpenAI मॉडल्स\n* Bedrock मॉडल्स\n* Google GenAI मॉडल्स\n* Ollama संगत मॉडल्स",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "### Retrieval Augmented Generation (RAG)\n\nThe c4 GenAI Suite includes REI-S, a server to prepare files for consumption by the LLM.\n\n* REI-S, a custom integrated RAG server\n  * Vector stores\n    * pgvector\n    * Azure AI Search\n  * Embedding models\n    * OpenAI compatible embeddings\n    * Azure OpenAI embeddings\n    * Ollama compatible embeddings\n  * File formats:\n    * pdf, docx, pptx, xlsx, ...\n    * audio file voice transcription (via Whisper)\n\n### Extensions\n\nThe c4 GenAI Suite is designed for extensibility. Writing extensions is easy, as is using an already existing MCP server.\n\n* Model Context Protocol (MCP) servers\n* Custom systemprompt\n* Bing Search\n* Calculator\n\n",
    "ContentSha": "wvT4e6071qGfJDWClvklgUJiJRM71gUVIUQKaaDgVPo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### पुनः प्राप्ति संवर्धित जनरेशन (RAG)\n\nc4 GenAI सुइट में REI-S शामिल है, जो LLM द्वारा फ़ाइलों की खपत के लिए उन्हें तैयार करने वाला एक सर्वर है।\n\n* REI-S, एक कस्टम इंटीग्रेटेड RAG सर्वर\n  * वेक्टर स्टोर्स\n    * pgvector\n    * Azure AI Search\n  * एम्बेडिंग मॉडल्स\n    * OpenAI संगत एम्बेडिंग्स\n    * Azure OpenAI एम्बेडिंग्स\n    * Ollama संगत एम्बेडिंग्स\n  * फ़ाइल फ़ॉर्मेट्स:\n    * pdf, docx, pptx, xlsx, ...\n    * ऑडियो फ़ाइल वॉइस ट्रांसक्रिप्शन (Whisper के माध्यम से)\n\n### एक्सटेंशन\n\nc4 GenAI सुइट को विस्तारशीलता के लिए डिज़ाइन किया गया है। एक्सटेंशन लिखना आसान है, जैसा कि पहले से मौजूद MCP सर्वर का उपयोग करना भी।\n\n* मॉडल कॉन्टेक्स्ट प्रोटोकॉल (MCP) सर्वर\n* कस्टम सिस्टमप्रॉम्प्ट\n* बिंग सर्च\n* कैलकुलेटर",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "## Getting Started\n\n### Using Docker-Compose\n\n- Run `docker compose up` in the project root.\n- Open the [application](http://localhost:3333) in a browser. The default login credentials are user `admin@example.com` and password `secret`.\n\n![video showing assistant configuration](https://raw.githubusercontent.com/codecentric/c4-genai-suite/main/demo/assistants.webp)\n\n### Using Helm & Kubernetes\n\nFor deployment in Kubernetes environments, please refer to the [README of our Helm Chart](https://raw.githubusercontent.com/codecentric/c4-genai-suite/main/./helm-chart/README.md).\n\n### Setting up Assistants and Extensions\n\nThe c4 GenAI Suite revolves around *assistants*.\nEach assistant consists of a set of extensions, which determine the LLM model and which tools it can use.\n\n- In the admin area (click the username on the bottom left), go to the [assistants section](http://localhost:3333/admin/assistants).\n- Add an assistant with the green `+` button next to the section title. Choose a name and a description.\n- Select the created assistant and click the green `+ Add Extension`.\n- Select the model and fill in the credentials.\n- Use the `Test` Button to check that it works and `save`.\n\nNow you can return to the [chat page](http://localhost:3333/chat) (click on `c4 GenAI Suite` in the top left) and start a new conversation with your new assistant.\n\n> [!TIP]\n> Our `docker-compose` includes a local Ollama, which runs on the CPU. You can use this for quick testing. But it will be slow and you probably want to use another model. If you want to use it, just create the following model extension in your Assistant.\n> * Extension: `Dev: Ollama`\n> * Endpoint: `http://ollama:11434`\n> * Model: `llama3.2`\n",
    "ContentSha": "bLa8wjqGffqM6ThWqBWA15QpuTagUJbPEAqi4FPI4X4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## शुरुआत करें\n\n### Docker-Compose का उपयोग करना\n\n- प्रोजेक्ट रूट में `docker compose up` चलाएँ।\n- ब्राउज़र में [एप्लिकेशन](http://localhost:3333) खोलें। डिफ़ॉल्ट लॉगिन क्रेडेंशियल्स हैं यूज़र `admin@example.com` और पासवर्ड `secret`।\n\n![video showing assistant configuration](https://raw.githubusercontent.com/codecentric/c4-genai-suite/main/demo/assistants.webp)\n\n### Helm और Kubernetes का उपयोग करना\n\nKubernetes वातावरण में डिप्लॉयमेंट के लिए, कृपया हमारे Helm Chart के [README](https://raw.githubusercontent.com/codecentric/c4-genai-suite/main/./helm-chart/README.md) को देखें।\n\n### असिस्टेंट्स और एक्सटेंशन सेटअप करना\n\nc4 GenAI Suite *असिस्टेंट्स* के इर्द-गिर्द घूमती है।\nप्रत्येक असिस्टेंट में एक्सटेंशन्स का एक सेट होता है, जो LLM मॉडल और उपलब्ध टूल्स को निर्धारित करता है।\n\n- एडमिन एरिया में (नीचे बाईं ओर यूज़रनेम पर क्लिक करें), [असिस्टेंट्स सेक्शन](http://localhost:3333/admin/assistants) पर जाएँ।\n- सेक्शन टाइटल के पास हरे रंग के `+` बटन से एक नया असिस्टेंट जोड़ें। एक नाम और विवरण चुनें।\n- बनाए गए असिस्टेंट को चुनें और हरे `+ Add Extension` पर क्लिक करें।\n- मॉडल चुनें और क्रेडेंशियल्स भरें।\n- यह जांचने के लिए कि सब कुछ सही है, `Test` बटन का उपयोग करें और फिर `save` करें।\n\nअब आप [चैट पेज](http://localhost:3333/chat) (ऊपर बाईं ओर `c4 GenAI Suite` पर क्लिक करें) पर वापस जा सकते हैं और अपने नए असिस्टेंट के साथ एक नई बातचीत शुरू कर सकते हैं।\n\n> [!TIP]\n> हमारे `docker-compose` में एक लोकल Ollama शामिल है, जो CPU पर चलता है। आप इसका उपयोग त्वरित परीक्षण के लिए कर सकते हैं। लेकिन यह धीमा होगा और संभवतः आप कोई दूसरा मॉडल इस्तेमाल करना चाहेंगे। यदि आप इसका उपयोग करना चाहते हैं, तो अपने असिस्टेंट में निम्नलिखित मॉडल एक्सटेंशन बनाएं।\n> * एक्सटेंशन: `Dev: Ollama`\n> * एंडपॉइंट: `http://ollama:11434`\n> * मॉडल: `llama3.2`\n",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "### Model Context Protocol (MCP) [optional]\n\nUse any MCP server offering an `sse` interface with the `MCP Tools` Extension (or use our `mcp-tool-as-server` as a proxy in front of an `stdio` MCP server).\nEach MCP server can be configured in detail as an extension.\n\n### Retrieval Augmented Generation (RAG) / File Search [optional]\n\nUse our RAG server `REI-S` to search user provided files. Just configure a `Search Files` extension for the assistant.\nThis process is described in detail in [the `services/reis` subdirectory](services/reis/#example-configuration-in-c4).\n\n## Contributing & Development\n\n* See [CONTRIBUTING.md](https://raw.githubusercontent.com/codecentric/c4-genai-suite/main/CONTRIBUTING.md) for guidelines on how to contribute.\n* For developer onboarding, check [DEVELOPERS.md](https://raw.githubusercontent.com/codecentric/c4-genai-suite/main/DEVELOPERS.md).\n\n## Main Building Blocks\n\nThe application consists of a **Frontend** , a **Backend**  and a **REI-S**  service.\n\n```",
    "ContentSha": "X5WCsc3MMbiH/lsJf83tTEO6Cfl/16Nw2tPJwgCKYpc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### मॉडल कंटेक्स्ट प्रोटोकॉल (MCP) [वैकल्पिक]\n\nकिसी भी MCP सर्वर का उपयोग करें जो `sse` इंटरफेस के साथ `MCP Tools` एक्सटेंशन प्रदान करता है (या हमारे `mcp-tool-as-server` का उपयोग करें जो `stdio` MCP सर्वर के सामने एक प्रॉक्सी के रूप में कार्य करता है)।\nप्रत्येक MCP सर्वर को विस्तार से एक एक्सटेंशन के रूप में कॉन्फ़िगर किया जा सकता है।\n\n### रिट्रीवल ऑगमेंटेड जनरेशन (RAG) / फ़ाइल खोज [वैकल्पिक]\n\nउपयोगकर्ता द्वारा प्रदान की गई फ़ाइलों को खोजने के लिए हमारे RAG सर्वर `REI-S` का उपयोग करें। बस सहायक के लिए एक `Search Files` एक्सटेंशन कॉन्फ़िगर करें।\nइस प्रक्रिया का विस्तृत विवरण [ `services/reis` उपनिर्देशिका ](services/reis/#example-configuration-in-c4) में दिया गया है।\n\n## योगदान और विकास\n\n* योगदान करने के लिए दिशानिर्देशों के लिए देखें [CONTRIBUTING.md](https://raw.githubusercontent.com/codecentric/c4-genai-suite/main/CONTRIBUTING.md)।\n* डेवलपर ऑनबोर्डिंग के लिए देखें [DEVELOPERS.md](https://raw.githubusercontent.com/codecentric/c4-genai-suite/main/DEVELOPERS.md)।\n\n## मुख्य निर्माण खंड\n\nएप्लिकेशन में एक **फ्रंटएंड**, एक **बैकएंड** और एक **REI-S** सेवा होती है।\n\n```",
    "Status": "ok"
  },
  {
    "Id": 5,
    "Content": "┌──────────┐\n│   User   │\n└─────┬────┘\n      │ access\n      ▼\n┌──────────┐\n│ Frontend │\n└─────┬────┘\n      │ access\n      ▼\n┌──────────┐     ┌─────────────────┐\n│ Backend  │────►│      LLM        │\n└─────┬────┘     └─────────────────┘\n      │ access\n      ▼\n┌──────────┐     ┌─────────────────┐\n│  REI-S   │────►│ Embedding Model │\n│          │     └─────────────────┘\n│          │\n│          │     ┌─────────────────┐\n│          │────►│  Vector Store   │\n└──────────┘     └─────────────────┘\n```",
    "ContentSha": "IO09RXKALRyYzMSXIVzGJTmyROh56hbqbTTI4NQfxtQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "┌──────────┐\n│   उपयोगकर्ता   │\n└─────┬────┘\n      │ पहुँच\n      ▼\n┌──────────┐\n│ फ्रंटएंड │\n└─────┬────┘\n      │ पहुँच\n      ▼\n┌──────────┐     ┌─────────────────┐\n│ बैकएंड   │────►│      LLM        │\n└─────┬────┘     └─────────────────┘\n      │ पहुँच\n      ▼\n┌──────────┐     ┌─────────────────┐\n│  REI-S   │────►│ एम्बेडिंग मॉडल  │\n│          │     └─────────────────┘\n│          │\n│          │     ┌─────────────────┐\n│          │────►│  वेक्टर स्टोर    │\n└──────────┘     └─────────────────┘\n```",
    "Status": "ok"
  },
  {
    "Id": 6,
    "Content": "\n\n### Frontend\n\nThe frontend is built with React and TypeScript, providing a user-friendly interface for interacting with the backend and REI-S service. It includes features for managing assistants, extensions, and chat functionalities.\n\n> Sources: `/frontend`\n\n### Backend\n\nThe backend is developed using NestJS and TypeScript, serving as the main API layer for the application. It handles requests from the frontend and interacts with llm providers to facilitate chat functionalities. The backend also manages assistants and their extensions, allowing users to configure and use various AI models for their chats.\n\nAdditionally, the backend manages user authentication, and communicates with the REI-S service for file indexing and retrieval.\n\nFor data persistence, the backend uses a **PostgreSQL** database.\n\n> Sources: `/backend`\n\n### REI-S\n\nThe REI-S (**R**etrieval **E**xtraction **I**ngestion **S**erver) is a Python-based server that provides basic RAG (Retrieval-Augmented Generation) capabilities. It allows for file content extraction, indexing and querying, enabling the application to handle large datasets efficiently. The REI-S service is designed to work seamlessly with the backend, providing necessary data for chat functionalities and file searches.\n\nThe REI-S supports Azure AI Search and pgvector for vector storage, allowing for flexible and scalable data retrieval options. The service can be configured using environment variables to specify the type of vector store and connection details.\n\n> Sources: `/services/reis`\n",
    "ContentSha": "Sceh4YX3ZYIBDEtdTMWIBUucYWH+hEUJMben1cxfrAc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### फ्रंटएंड\n\nफ्रंटएंड React और TypeScript के साथ बनाया गया है, जो बैकएंड और REI-S सेवा के साथ इंटरैक्ट करने के लिए एक यूज़र-फ्रेंडली इंटरफेस प्रदान करता है। इसमें असिस्टेंट्स, एक्सटेंशन्स और चैट फंक्शनैलिटी को प्रबंधित करने के लिए फीचर्स शामिल हैं।\n\n> स्रोत: `/frontend`\n\n### बैकएंड\n\nबैकएंड NestJS और TypeScript का उपयोग करके विकसित किया गया है, जो एप्लिकेशन के लिए मुख्य API लेयर के रूप में कार्य करता है। यह फ्रंटएंड से अनुरोधों को संभालता है और चैट फंक्शनैलिटी को सक्षम करने के लिए llm प्रदाताओं के साथ इंटरैक्ट करता है। बैकएंड असिस्टेंट्स और उनकी एक्सटेंशन्स का भी प्रबंधन करता है, जिससे उपयोगकर्ता अपनी चैट्स के लिए विभिन्न AI मॉडल्स को कॉन्फ़िगर और उपयोग कर सकते हैं।\n\nइसके अतिरिक्त, बैकएंड यूज़र ऑथेंटिकेशन का प्रबंधन करता है, और फ़ाइल इंडेक्सिंग और रिट्रीवल के लिए REI-S सेवा के साथ संचार करता है।\n\nडेटा को सुरक्षित रखने के लिए, बैकएंड **PostgreSQL** डेटाबेस का उपयोग करता है।\n\n> स्रोत: `/backend`\n\n### REI-S\n\nREI-S (**R**etrieval **E**xtraction **I**ngestion **S**erver) एक Python-आधारित सर्वर है जो बेसिक RAG (Retrieval-Augmented Generation) क्षमताएँ प्रदान करता है। यह फ़ाइल सामग्री निष्कर्षण, इंडेक्सिंग और क्वेरी करने की सुविधा देता है, जिससे एप्लिकेशन बड़े डेटा सेट्स को कुशलतापूर्वक संभाल सकता है। REI-S सेवा को बैकएंड के साथ सहज रूप से काम करने के लिए डिज़ाइन किया गया है, जो चैट फंक्शनैलिटी और फ़ाइल खोज के लिए आवश्यक डेटा प्रदान करता है।\n\nREI-S Azure AI Search और pgvector को वेक्टर स्टोरेज के लिए सपोर्ट करता है, जिससे लचीले और स्केलेबल डेटा रिट्रीवल विकल्प उपलब्ध होते हैं। सेवा को वातावरण वेरिएबल्स का उपयोग करके कॉन्फ़िगर किया जा सकता है, जिसमें वेक्टर स्टोर का प्रकार और कनेक्शन डिटेल्स निर्दिष्ट की जाती हैं।\n\n> स्रोत: `/services/reis`\n",
    "Status": "ok"
  }
]