{
  "id": 1,
  "origin": "![](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/logo-no-background.png)\n# Scheme-langserver\n[![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\nYou may read my [paper](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf) and cite like this \n> WANG, Z. (2025, May 12). Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern. The 18th European Lisp Symposium (ELS`25), Zurich. https://doi.org/10.5281/zenodo.15384882\n\nDue to GitHub may block Chinese IP addresses, I have to copy this repository to [here](https://codeberg.org/ufo5260987423/scheme-langserver) and [here](https://gitee.com/ufo5260987423/scheme-langserver). I will continually update all repositories but I can't guarrentee. I now also collaborate with [XmacsLabs](https://github.com/XmacsLabs), you may also find a fork [here](https://github.com/XmacsLabs/scheme-langserver).\n\n<video src=\"https://github.com/user-attachments/assets/893bba98-6709-4fac-a4d3-dc7b6aab46fb\" controls=\"controls\" width=\"500\" height=\"300\"></video>\n\n**Now, VSCode can use scheme-langserver!** Please refere [HERE](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md).\n\n>NOTE: There're many many bugs in scheme-langserver. I'm just fixing and appealing help from the community. Please be patient.\n\n>NOTE: you can find the auto generated type information [here](https://ufo5260987423.github.io/scheme-langserver/doc/analysis/type-inference-result). It's now mainly used for next-stage-development (maybe include AKKU) and debugging.\n\nImplementing support like autocomplete, goto definition, or documentation on hover is a significant effort for programming. However, comparing to other language like java, python, javascript and c, language server protocol implementation for lisp language are just made in a vacuum. [Geiser](https://gitlab.com/emacs-geiser), [racket langserver](https://github.com/jeapostrophe/racket-langserver) and [swish-lint](https://github.com/becls/swish-lint) etc., their works are all based on `repl`(Read-Eval-Print Loop) or keyword tokenizer instead of programming. For example, if a programmer was coding on an unaccomplished project, in which the codes were not fully executable, [Geiser](https://gitlab.com/emacs-geiser) or any others would only complete top-level binding identifiers listed by `environment-symbols` procedure (for [Chez](https://cisco.github.io/ChezScheme/)), or complete symbols instead of identifiers. Which means for local bindings and unaccomplished codes, though making effort for programming is supposed of the importance mostly, [Geiser](https://gitlab.com/emacs-geiser) and its counterparts help nothing on recognizing identifier's valid scope. Familiar cases occur with goto definition and many other functionalities.\n\nA primary cause is, for scheme and other lisp dialects, their abundant data sets and flexible control structures raise program analysis a big challenge. Especially the macro, it seems like that scheme is mainly used for genius and meta/macro programming. But I say no. Scheme can make many interesting things if a better programming environment is provided. And now you may [**STARTUP HERE**](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md).\n\nThis package is a language server protocol implementation helping scheme programming. It provides completion, definition and type inference. These functionalities are established on static code analysis with [r6rs standard](http://www.r6rs.org/) and some obvious rules for unaccomplished codes. This package itself and related libraries are published or going to be published with [Akku](https://akkuscm.org/), which is a package manager for Scheme. \n\nThis package also has been tested with [Chez Scheme](https://cisco.github.io/ChezScheme/) versions 9.4 and 9.5. A detailed test on version 10.0.0 will be done after upgrading my laptop OS to a newer version.\n\nI do this open source work just in my spare time and I can contribute many splendid ideas to the community like embedding data flow analysis into scheme-langserver or many other things. And I'm continuously asking for much more donation or funding. You can donate with [this patreon page](https://www.patreon.com/PoorProgrammer/membership) or [爱发电](https://afdian.com/a/ufo5260987423).\n\n\n## Compilation , Intallation & Configuration is [HERE](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md)\n\n## Recent Status\nI'll keep fixing bugs, profiling the code, and collecting information for my giant book on homemade type inference system. This will take me about 1 years. Further developments including a [VScode](https://code.visualstudio.com/) plugin and data flow analysis. But actually, I'm now setting this open source work a part-time job, and I can not guarantee a schedule.\n\n## Release \n1.2.9 Now, enjoy type inference!\n\nPrevious releases please refer to [this file](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/release-log.md).\n\n### Features\n1. Top-level and local identifiers binding completion.\n![Top-level and local identifiers binding](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/auto-completion.png \"Top-level and local identifiers binding\")\n2. Goto definition.\n![Goto definition with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/definition.png \"Goto Definition with telescope.nvim\")\n3. Compatible with package manager: Akku.\n4. File changes synchronizing and corresponding index changing.\n5. Hover.\n6. References and document highlight (document-scoped references).\n![Find references with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/find-references.png \"Find references with telescope.nvim\")\n7. Document symbol.\n![Find document symbols with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/document-symbol.png \"find document symbols with telescope.nvim\")\n8. Catching *-syntax(define-syntax, let-syntax, etc.) based local identifier binding. \n9. Cross-platform parallel indexing.\n10. Self-made source code annotator to be compatible with .sps files.\n11. Peephole optimization for API requests with suspendable task.\n12. Type inference with a homemade DSL interpreter(I'm very proud of it!). And now it has been embedded into the auto-completion. As the following figure indicated, the \"length-b\" and \"length-a\" having \"integer?\" type are in the front of those recommended options because they can match the parameter type requiring from \"<=\". \n![Autocompletion with type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/auto-completion-with-type-inference.png \"Autocompletion with type inference\")\nA test in can prove this result, just run `scheme --script tests/protocol/apis/test-completion.sps` and the log file `scheme-langserver.log` would contain results like this:\n```bash\nsend-message\n2023 11 21 11 26 41 967266866\n{\"jsonrpc\":\"2.0\",\"id\":\"3\",\"result\":[{\"label\":\"length-a\"},{\"label\":\"length-b\"},{\"label\":\"lambda\"},{\"label\":\"latin-1-codec\"},{\"label\":\"lcm\"},{\"label\":\"least-fixnum\"},{\"label\":\"length\"},{\"label\":\"let\"},{\"label\":\"let*\"},{\"label\":\"let*-values\"},{\"label\":\"let-syntax\"},{\"label\":\"let-values\"},{\"label\":\"letrec\"},{\"label\":\"letrec*\"},{\"label\":\"letrec-syntax\"},{\"label\":\"lexical-violation?\"},{\"label\":\"list\"},{\"label\":\"list->string\"},{\"label\":\"list->vector\"},{\"label\":\"list-ref\"},{\"label\":\"list-sort\"},{\"label\":\"list-tail\"},{\"label\":\"list?\"},{\"label\":\"log\"},{\"label\":\"lookahead-char\"},{\"label\":\"lookahead-u8\"}]}\n```\n13. Abstract interpreter for identifier catching among different file extensions like scm, ss, sps, sls and sld.\n\n### TODOs\n14. Renaming. \n15. Fully compatible with [r6rs standard](http://www.r6rs.org/).\n16. Step-by-step macro expander: well, I actually have implemented one and I wanted to make it a key step catching identifier binding in self-defined macros. Now, I find this catching is much harder than I thought, and the expander I don't know where it could work.\n17. Code eval.\n18. Code diagnostic.\n19. Add cross-language semantic supporting. Well, would java, c, python and many other languages can be supported with an AST transformer?\n20. Extract expression/statements into a procedure.\n\n## TODO:Contributing \n\n## Debug\n\n### How to Debug\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nFollowing tips from [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) and [Installation for VScode](#todo-installation-for-vscode), if anyone wants to do some developing and log something, it will be convenient to add `path-to-log-file` and re-write file `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` as follows:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },",
  "origin_sha": "ByAuc8ttFDx8I3FA7LrI5TbHTWYZzzYJh6NmdcHCDso=",
  "translate": "![](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/logo-no-background.png)\n# Scheme-langserver\n[![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\nคุณสามารถอ่าน [เปเปอร์ของฉัน](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf) และอ้างอิงได้ดังนี้ \n> WANG, Z. (2025, May 12). Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern. The 18th European Lisp Symposium (ELS`25), Zurich. https://doi.org/10.5281/zenodo.15384882\n\nเนื่องจาก GitHub อาจบล็อกที่อยู่ IP ของจีน ฉันจึงต้องคัดลอกที่เก็บนี้ไปไว้ที่ [ที่นี่](https://codeberg.org/ufo5260987423/scheme-langserver) และ [ที่นี่](https://gitee.com/ufo5260987423/scheme-langserver) ฉันจะอัปเดตที่เก็บทั้งหมดอย่างต่อเนื่องแต่ไม่สามารถรับประกันได้ ขณะนี้ฉันยังร่วมมือกับ [XmacsLabs](https://github.com/XmacsLabs) คุณอาจพบ fork ได้ [ที่นี่](https://github.com/XmacsLabs/scheme-langserver)\n\n<video src=\"https://github.com/user-attachments/assets/893bba98-6709-4fac-a4d3-dc7b6aab46fb\" controls=\"controls\" width=\"500\" height=\"300\"></video>\n\n**ขณะนี้ VSCode สามารถใช้ scheme-langserver ได้แล้ว!** โปรดดู [ที่นี่](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md)\n\n>หมายเหตุ: มีบั๊กจำนวนมากใน scheme-langserver ฉันกำลังแก้ไขและขอความช่วยเหลือจากชุมชน โปรดอดทน\n\n>หมายเหตุ: คุณสามารถดูข้อมูลประเภทที่สร้างอัตโนมัติ [ที่นี่](https://ufo5260987423.github.io/scheme-langserver/doc/analysis/type-inference-result) ตอนนี้ใช้หลักสำหรับการพัฒนาขั้นถัดไป (อาจรวมถึง AKKU) และการดีบัก\n\nการพัฒนาฟีเจอร์ต่าง ๆ เช่น autocomplete, goto definition หรือแสดงเอกสารขณะวางเมาส์ถือเป็นงานใหญ่สำหรับการเขียนโปรแกรม อย่างไรก็ตาม เมื่อเทียบกับภาษาอื่น ๆ เช่น java, python, javascript และ c การพัฒนา language server protocol สำหรับภาษา lisp นั้นเหมือนทำอยู่ในสุญญากาศ [Geiser](https://gitlab.com/emacs-geiser), [racket langserver](https://github.com/jeapostrophe/racket-langserver) และ [swish-lint](https://github.com/becls/swish-lint) ฯลฯ งานของพวกเขาทั้งหมดอาศัย `repl`(Read-Eval-Print Loop) หรือ keyword tokenizer แทนที่จะเป็นการเขียนโปรแกรมจริง เช่น ถ้านักพัฒนากำลังเขียนโค้ดในโปรเจกต์ที่ยังไม่เสร็จสมบูรณ์ ซึ่งโค้ดยังไม่สามารถรันได้ทั้งหมด [Geiser](https://gitlab.com/emacs-geiser) หรือเครื่องมืออื่น ๆ จะทำได้แค่เติม identifier ที่ binding ไว้ในระดับบนสุดซึ่งแสดงโดย procedure `environment-symbols` (สำหรับ [Chez](https://cisco.github.io/ChezScheme/)) หรือเติม symbol แทน identifier ซึ่งหมายความว่า สำหรับ local binding และโค้ดที่ยังไม่สมบูรณ์ แม้ว่าการสนับสนุนด้าน programming จะมีความสำคัญมากที่สุด [Geiser](https://gitlab.com/emacs-geiser) และเครื่องมืออื่น ๆ ก็ไม่ช่วยอะไรในการระบุขอบเขตที่ถูกต้องของ identifier กรณีเดียวกันนี้เกิดขึ้นกับ goto definition และฟีเจอร์อื่น ๆ อีกมากมาย\n\nสาเหตุหลักคือ สำหรับ scheme และ lisp dialects อื่น ๆ ชุดข้อมูลที่หลากหลายและโครงสร้างควบคุมที่ยืดหยุ่นทำให้การวิเคราะห์โปรแกรมเป็นความท้าทายครั้งใหญ่ โดยเฉพาะ macro ดูเหมือนว่า scheme จะใช้หลัก ๆ เพื่อ meta/macro programming สำหรับคนเก่งเท่านั้น แต่ฉันไม่เห็นด้วย Scheme สามารถสร้างสิ่งที่น่าสนใจมากมายหากมีสภาพแวดล้อมการเขียนโปรแกรมที่ดี และตอนนี้คุณสามารถ [**เริ่มต้นได้ที่นี่**](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md)\n\nแพ็กเกจนี้เป็นการพัฒนา language server protocol ที่ช่วยในการเขียนโปรแกรม scheme โดยให้ฟีเจอร์ completion, definition และ type inference ฟีเจอร์เหล่านี้สร้างขึ้นบนการวิเคราะห์โค้ดแบบ static ตาม [r6rs standard](http://www.r6rs.org/) และกฎที่ชัดเจนสำหรับโค้ดที่ยังไม่สมบูรณ์ แพ็กเกจนี้และไลบรารีที่เกี่ยวข้องจะถูกเผยแพร่หรือกำลังจะเผยแพร่ใน [Akku](https://akkuscm.org/) ซึ่งเป็น package manager สำหรับ Scheme\n\nแพ็กเกจนี้ยังผ่านการทดสอบกับ [Chez Scheme](https://cisco.github.io/ChezScheme/) เวอร์ชัน 9.4 และ 9.5 โดยจะทดสอบอย่างละเอียดกับเวอร์ชัน 10.0.0 หลังจากอัปเกรด OS ของแล็ปท็อปเป็นเวอร์ชันใหม่\n\nฉันทำ open source นี้ในเวลาว่างเท่านั้น และฉันสามารถนำไอเดียดี ๆ มาสู่ชุมชนได้มากมาย เช่น การฝัง data flow analysis ลงใน scheme-langserver หรือสิ่งอื่น ๆ อีกมากมาย และฉันกำลังขอรับบริจาคหรือทุนสนับสนุนอย่างต่อเนื่อง คุณสามารถบริจาคผ่าน [patreon หน้านี้](https://www.patreon.com/PoorProgrammer/membership) หรือ [爱发电](https://afdian.com/a/ufo5260987423)\n\n\n## การคอมไพล์ ติดตั้ง & ตั้งค่า [ที่นี่](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md)\n\n## สถานะล่าสุด\nฉันจะยังคงแก้บั๊ก, โปรไฟล์โค้ด, และรวบรวมข้อมูลสำหรับหนังสือยักษ์เกี่ยวกับระบบ type inference แบบโฮมเมดของฉัน ซึ่งจะใช้เวลาประมาณ 1 ปี การพัฒนาต่อไปจะรวมถึง [ปลั๊กอิน VScode](https://code.visualstudio.com/) และ data flow analysis แต่จริง ๆ แล้ว ตอนนี้ฉันถือว่าการทำ open source นี้เป็นงาน part-time และไม่สามารถรับประกันกำหนดการได้\n\n## การปล่อยเวอร์ชัน\n1.2.9 ขณะนี้สนุกกับ type inference ได้เลย!\n\nสำหรับเวอร์ชันก่อนหน้าโปรดดูที่ [ไฟล์นี้](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/release-log.md)\n\n### ฟีเจอร์\n1. การเติม binding identifier ทั้งในระดับบนสุดและภายในฟังก์ชัน\n![Top-level and local identifiers binding](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/auto-completion.png \"Top-level and local identifiers binding\")\n2. Goto definition.\n![Goto definition with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/definition.png \"Goto Definition with telescope.nvim\")\n3. รองรับการใช้งานร่วมกับ package manager: Akku\n4. การซิงโครไนซ์ไฟล์ที่เปลี่ยนแปลงและเปลี่ยนแปลง index ที่เกี่ยวข้อง\n5. Hover\n6. References และ document highlight (อ้างอิงในขอบเขตเอกสาร)\n![Find references with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/find-references.png \"Find references with telescope.nvim\")\n7. Document symbol\n![Find document symbols with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/document-symbol.png \"find document symbols with telescope.nvim\")\n8. จับ *-syntax (define-syntax, let-syntax ฯลฯ) สำหรับ binding identifier แบบ local \n9. การทำ parallel indexing ข้ามแพลตฟอร์ม\n10. ตัว annotator โค้ดต้นฉบับที่เขียนเองเพื่อรองรับไฟล์ .sps\n11. Peephole optimization สำหรับ API requests พร้อมงานที่ suspend ได้\n12. Type inference ด้วย homemade DSL interpreter (ฉันภูมิใจมาก!) และตอนนี้ฝังเข้าไปในระบบ auto-completion แล้ว ดังรูปด้านล่าง \"length-b\" และ \"length-a\" ที่มี type \"integer?\" จะอยู่ด้านหน้าของตัวเลือกที่แนะนำเพราะสามารถตรงกับ type ของพารามิเตอร์ที่ฟังก์ชัน \"<=\" ต้องการ\n![Autocompletion with type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/auto-completion-with-type-inference.png \"Autocompletion with type inference\")\nสามารถทดสอบผลลัพธ์นี้ได้ โดยรัน `scheme --script tests/protocol/apis/test-completion.sps` และไฟล์ log `scheme-langserver.log` จะมีผลลัพธ์เช่นนี้:\n```bash\nsend-message\n2023 11 21 11 26 41 967266866\n{\"jsonrpc\":\"2.0\",\"id\":\"3\",\"result\":[{\"label\":\"length-a\"},{\"label\":\"length-b\"},{\"label\":\"lambda\"},{\"label\":\"latin-1-codec\"},{\"label\":\"lcm\"},{\"label\":\"least-fixnum\"},{\"label\":\"length\"},{\"label\":\"let\"},{\"label\":\"let*\"},{\"label\":\"let*-values\"},{\"label\":\"let-syntax\"},{\"label\":\"let-values\"},{\"label\":\"letrec\"},{\"label\":\"letrec*\"},{\"label\":\"letrec-syntax\"},{\"label\":\"lexical-violation?\"},{\"label\":\"list\"},{\"label\":\"list->string\"},{\"label\":\"list->vector\"},{\"label\":\"list-ref\"},{\"label\":\"list-sort\"},{\"label\":\"list-tail\"},{\"label\":\"list?\"},{\"label\":\"log\"},{\"label\":\"lookahead-char\"},{\"label\":\"lookahead-u8\"}]}\n```\n13. Abstract interpreter สำหรับการจับ identifier ข้ามไฟล์นามสกุลต่าง ๆ เช่น scm, ss, sps, sls และ sld\n\n### สิ่งที่ต้องทำต่อไป\n14. การเปลี่ยนชื่อ (Renaming)\n15. รองรับ [r6rs standard](http://www.r6rs.org/) อย่างสมบูรณ์\n16. Macro expander แบบ step-by-step: จริง ๆ ฉันได้ทำมาแล้วและตั้งใจใช้สำหรับจับ binding identifier ใน macro ที่นิยามเอง แต่ตอนนี้พบว่าการจับนี้ยากกว่าที่คิด และ macro expander นี้ไม่แน่ใจว่าจะใช้ที่ไหนได้\n17. Code eval\n18. Code diagnostic\n19. เพิ่มการรองรับ semantic ข้ามภาษา อาจจะรองรับ java, c, python และภาษาอื่น ๆ ผ่าน AST transformer?\n20. แยก expression/statements ออกเป็น procedure\n\n## สิ่งที่ต้องทำ: การร่วมพัฒนา\n\n## การดีบัก\n\n### วิธีดีบัก\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nตามคำแนะนำจาก [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) และ [Installation for VScode](#todo-installation-for-vscode) หากใครต้องการพัฒนาและ log ข้อมูล จะสะดวกถ้าเพิ่ม `path-to-log-file` และเขียนทับไฟล์ `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` ดังนี้:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },",
  "status": "ok"
}