{
  "id": 2,
  "origin": "18. Code diagnostic.\n19. Add cross-language semantic supporting. Well, would java, c, python and many other languages can be supported with an AST transformer?\n20. Extract expression/statements into a procedure.\n\n## TODO:Contributing \n\n## Debug\n\n### How to Debug\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nFollowing tips from [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) and [Installation for VScode](#todo-installation-for-vscode), if anyone wants to do some developing and log something, it will be convenient to add `path-to-log-file` and re-write file `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` as follows:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },\n}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "5DE2vbVNWd2xISKGEJV/OEt8a/in5A1akTBaub2CMj0=",
  "translate": "18. कोड डायग्नोस्टिक।\n19. क्रॉस-लैंग्वेज सेमांटिक सपोर्टिंग जोड़ें। क्या जावा, सी, पायथन और कई अन्य भाषाओं को AST ट्रांसफार्मर के साथ सपोर्ट किया जा सकता है?\n20. एक्सप्रेशन/स्टेटमेंट्स को एक प्रोसीजर में एक्सट्रैक्ट करें।\n\n## TODO: योगदान\n\n## डिबग\n\n### कैसे डिबग करें\nhttps://www.scheme.com/debug/debug.html#g1\n\n### आउटपुट लॉग\n[Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) और [Installation for VScode](#todo-installation-for-vscode) के टिप्स को फॉलो करते हुए, यदि कोई डेवलपर कुछ डेवलपमेंट करना चाहता है और कुछ लॉग करना चाहता है, तो `path-to-log-file` जोड़ना और फाइल `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` को निम्नानुसार फिर से लिखना सुविधाजनक रहेगा:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, एक लैंग्वेज सर्वर प्रोटोकॉल इम्प्लीमेंटेशन फॉर स्कीम\n]]   ,\n  },\n}\n```\n### लॉग के साथ पुनरावृत्ति \nऊपर दिए गए [आउटपुट लॉग](#output-log) के साथ, आप `tests/log-debug.sps` का उपयोग करके बग्स की पुनरावृत्ति कर सकते हैं:\n1. `{path-to-log}` (आमतौर पर `~/scheme-langserver.log`) का नाम बदलकर `~/ready-for-analyse.log` रखें;\n2. `scheme --script tests/log-debug.sps` चलाएं। यदि आप मल्टी-थ्रेड एनवायरनमेंट को फिर से प्रोड्यूस करना चाहते हैं, तो `scheme --script tests/log-debug.sps` चलाना भी संभव है।\n\n## टेस्ट\nलगभग सभी प्रमुख प्रोसीजर और API का परीक्षण किया गया है। मेरा काम बहुत रफ लेकिन उपयोगी है, शायद आप `tests` डायरेक्टरी में देखना चाहेंगे या `{scheme-langserver-root-directory}` में निम्नलिखित कमांड चलाएं:\n``` bash\nbash test.sh\n```\n>नोट\nथ्रेडेड एनवायरनमेंट के साथ टेस्ट करना कठिन है। इसलिए, वर्तमान टेस्ट सिंगल थ्रेड पर केंद्रित हैं।\n\n## अन्य उद्देश्यों के लिए Scheme-langserver का उपयोग करें\n### GIMP में Script-Fu\nScript-Fu एक इंटरप्रेटेड भाषा स्कीम पर आधारित है, और GIMP के आंतरिक फंक्शनों के साथ इंटरैक्ट करने वाले फंक्शनों का उपयोग करके काम करता है। [इस पेज](https://dalelane.co.uk/blog/?p=628) के स्क्रिप्ट को उदाहरण के रूप में लेते हुए, आप \"SCM\" एक्सटेंशन वाली स्क्रिप्ट फाइल के साथ scheme-langserver का उपयोग कर सकते हैं।\n\n### अन्य\n\nमैं [OMN (Opusmodus Notation)](https://opusmodus.com/) और AutoLisp में भी रुचि रखता हूँ। लेकिन मुझे अभी भी बहुत कुछ करना है।\n\n## कोड काउंट\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## विस्तृत दस्तावेज़\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf)।\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(डिप्रिकेटेड, और मैं इसके लिए एक चीनी किताब लिख रहा हूँ)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## स्टार हिस्ट्री\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## योगदानकर्ता\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}