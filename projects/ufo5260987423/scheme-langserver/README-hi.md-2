{
  "id": 2,
  "origin": "}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "i8bdxDkredZSYF30cehi08nt4c/wbKSSDdwbhUH7Ti4=",
  "translate": "```\n}\n```\n### लॉग के साथ पुनरावृत्ति \nऊपर दिए गए [आउटपुट लॉग](#output-log) के साथ, आप `tests/log-debug.sps` का उपयोग पुनरावर्ती बग के लिए कर सकते हैं:\n1. `{path-to-log}` (आमतौर पर `~/scheme-langserver.log`) का नाम बदलें और उसे `~/ready-for-analyse.log` रखें;\n2. `scheme --script tests/log-debug.sps` चलाएँ। यदि आप मल्टी-थ्रेड वातावरण को फिर से बनाना चाहते हैं, तो `scheme --script tests/log-debug.sps` चलाना भी उपलब्ध है।\n\n## परीक्षण\nलगभग सभी मुख्य प्रक्रियाओं और एपीआई का परीक्षण किया गया है। मेरा काम बहुत ही सामान्य लेकिन उपयोगी है, शायद आप यह देखना चाहेंगे कि मैंने `tests` डायरेक्टरी में क्या किया है या निम्नलिखित कमांड को `{scheme-langserver-root-directory}` में चलाएँ:\n``` bash\nbash test.sh\n```\n>नोट  \nथ्रेडेड वातावरण में परीक्षण करना कठिन है। इसलिए, वर्तमान परीक्षण एकल थ्रेड पर केंद्रित हैं।\n\n## अन्य उद्देश्यों के लिए Scheme-langserver का उपयोग करें\n### GIMP में Script-Fu\nScript-Fu एक इंटरप्रेटेड भाषा Scheme पर आधारित है, और यह GIMP के आंतरिक कार्यों के साथ इंटरैक्ट करने वाले फ़ंक्शनों का उपयोग करता है। [इस पेज](https://dalelane.co.uk/blog/?p=628) की स्क्रिप्ट का उदाहरण लेते हुए, आप \"SCM\" एक्सटेंशन वाली स्कीम फ़ाइल के साथ scheme-langserver लागू कर सकते हैं।\n\n### अन्य\n\nखैर, मुझे [OMN (Opusmodus Notation)](https://opusmodus.com/) और AutoLisp में भी रुचि है। लेकिन अभी भी मुझे बहुत कुछ करना है।\n\n## कोड गिनती\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## विस्तृत दस्तावेज़\n1. [Scheme-langserver: Scheme कोड संपादन को प्रथम श्रेणी की चिंता के रूप में मानना](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf)।\n2. [पहचानकर्ता बाइंडिंग पकड़ना](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [सिंक्रनाइज़ेशन](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [टाइप इनफेरेंस](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(अप्रचलित, और मैं इसके लिए एक चीनी किताब लिख रहा हूँ)\n5. [API विश्लेषण](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## स्टार इतिहास\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## योगदानकर्ता\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)\n```",
  "status": "ok"
}