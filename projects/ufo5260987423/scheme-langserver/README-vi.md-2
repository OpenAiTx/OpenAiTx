{
  "id": 2,
  "origin": "18. Code diagnostic.\n19. Add cross-language semantic supporting. Well, would java, c, python and many other languages can be supported with an AST transformer?\n20. Extract expression/statements into a procedure.\n\n## TODO:Contributing \n\n## Debug\n\n### How to Debug\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nFollowing tips from [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) and [Installation for VScode](#todo-installation-for-vscode), if anyone wants to do some developing and log something, it will be convenient to add `path-to-log-file` and re-write file `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` as follows:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },\n}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "5DE2vbVNWd2xISKGEJV/OEt8a/in5A1akTBaub2CMj0=",
  "translate": "18. Chẩn đoán mã nguồn.\n19. Thêm hỗ trợ ngữ nghĩa đa ngôn ngữ. Liệu java, c, python và nhiều ngôn ngữ khác có thể được hỗ trợ thông qua bộ chuyển đổi AST không?\n20. Trích xuất biểu thức/câu lệnh thành một thủ tục.\n\n## TODO:Đóng góp\n\n## Gỡ lỗi\n\n### Cách gỡ lỗi\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Nhật ký đầu ra\nTheo các hướng dẫn từ [Xây dựng](#building), [Cài đặt cho Lunar Vim](#installation-for-lunarvim) và [Cài đặt cho VScode](#todo-installation-for-vscode), nếu ai đó muốn phát triển và ghi lại nhật ký, sẽ rất tiện lợi nếu thêm `path-to-log-file` và viết lại tệp `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` như sau:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, một triển khai giao thức ngôn ngữ cho scheme\n]]   ,\n  },\n}\n```\n### Lặp lại với Nhật ký \nVới phần [nhật ký đầu ra](#output-log) ở trên, bạn có thể sử dụng `tests/log-debug.sps` để lặp lại các lỗi:\n1. Đổi tên `{path-to-log}` (thường là `~/scheme-langserver.log`) thành `~/ready-for-analyse.log`;\n2. chạy `scheme --script tests/log-debug.sps`. Nếu bạn muốn tái tạo môi trường đa luồng, cũng có thể chạy `scheme --script tests/log-debug.sps`.\n\n## Kiểm thử\nHầu hết tất cả các thủ tục và API chính đều đã được kiểm thử. Công việc của tôi còn khá sơ sài nhưng hữu ích, có thể bạn muốn xem những gì tôi đã làm trong thư mục `tests` hoặc chỉ cần chạy lệnh sau trong `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>LƯU Ý\nRất khó để kiểm thử với môi trường đa luồng. Vì vậy, các kiểm thử hiện tại tập trung vào đơn luồng.\n\n## Sử dụng Scheme-langserver cho Mục đích Khác\n### Script-Fu trong GIMP\nScript-Fu dựa trên một ngôn ngữ thông dịch gọi là Scheme, hoạt động thông qua việc sử dụng các hàm tương tác với các hàm nội bộ của GIMP. Lấy ví dụ từ [trang này](https://dalelane.co.uk/blog/?p=628), bạn có thể áp dụng scheme-langserver với tệp script có phần mở rộng \"SCM\".\n\n### Khác\n\nTôi cũng quan tâm đến [OMN (Opusmodus Notation)](https://opusmodus.com/) và AutoLisp. Nhưng tôi vẫn còn nhiều việc phải làm.\n\n## Đếm dòng mã\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Tài liệu Chi tiết\n1. [Scheme-langserver: Xem chỉnh sửa mã Scheme là mối quan tâm hàng đầu](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Bắt các ràng buộc định danh](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Đồng bộ hóa](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Suy luận kiểu dữ liệu](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Không còn dùng nữa, và tôi đang viết một cuốn sách tiếng Trung về chủ đề này)\n5. [Phân tích API](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Lịch sử Star\n\n[![Biểu đồ lịch sử Star](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Người đóng góp\n\n![Người đóng góp](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}