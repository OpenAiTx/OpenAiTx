{
  "id": 2,
  "origin": "18. Code diagnostic.\n19. Add cross-language semantic supporting. Well, would java, c, python and many other languages can be supported with an AST transformer?\n20. Extract expression/statements into a procedure.\n\n## TODO:Contributing \n\n## Debug\n\n### How to Debug\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nFollowing tips from [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) and [Installation for VScode](#todo-installation-for-vscode), if anyone wants to do some developing and log something, it will be convenient to add `path-to-log-file` and re-write file `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` as follows:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },\n}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "5DE2vbVNWd2xISKGEJV/OEt8a/in5A1akTBaub2CMj0=",
  "translate": "18. 代碼診斷。\n19. 增加跨語言語意支持。那麼，Java、C、Python 以及許多其他語言是否能透過 AST 轉換器支援？\n20. 將運算式/敘述抽取為程序。\n\n## TODO: 貢獻指南\n\n## 除錯\n\n### 如何除錯\nhttps://www.scheme.com/debug/debug.html#g1\n\n### 輸出日誌\n根據 [編譯](#building)、[Lunar Vim 安裝](#installation-for-lunarvim) 及 [VScode 安裝](#todo-installation-for-vscode) 的相關提示，如果有人想要進行開發並記錄日誌，只需新增 `path-to-log-file` 並重寫檔案 `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` 如下：\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`，一個 scheme 的語言伺服器協議實作\n]]   ,\n  },\n}\n```\n### 日誌重現\n有了上述的 [輸出日誌](#output-log)，你可以用 `tests/log-debug.sps` 來重現錯誤：\n1. 將 `{path-to-log}`（通常是 `~/scheme-langserver.log`）重新命名為 `~/ready-for-analyse.log`；\n2. 執行 `scheme --script tests/log-debug.sps`。如果你想重現多執行緒環境，也可以執行 `scheme --script tests/log-debug.sps`。\n\n## 測試\n幾乎所有的關鍵程序與 API 都已經過測試。我的工作雖然粗糙但很實用，也許你可以在 `tests` 目錄下找到我做過的事，或直接在 `{scheme-langserver-root-directory}` 執行以下指令：\n``` bash\nbash test.sh\n```\n>注意\n在多執行緒環境下很難進行測試。因此，目前的測試主要集中在單執行緒上。\n\n## 將 Scheme-langserver 用於其他用途\n### GIMP 的 Script-Fu\nScript-Fu 基於一種稱為 Scheme 的直譯語言，通過使用函數與 GIMP 內部函數互動。以[這個頁面](https://dalelane.co.uk/blog/?p=628)的腳本為例，你可以將 scheme-langserver 應用於副檔名為 \"SCM\" 的腳本檔案。\n\n### 其他\n\n嗯，我也對 [OMN (Opusmodus Notation)](https://opusmodus.com/) 和 AutoLisp 感興趣。但我還有很多事情要做。\n\n## 代碼行數統計\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## 詳細文件\n1. [Scheme-langserver: 將 Scheme 代碼編輯視為第一要務](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf)。\n2. [捕獲識別符繫結](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [同步機制](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [型別推斷](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md)，~~[類型推斷（中文）](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~（已棄用，且我正在寫一本相關的中文書籍）\n5. [API 分析](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star 歷史\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## 貢獻者\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}