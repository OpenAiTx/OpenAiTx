{
  "id": 2,
  "origin": "}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "i8bdxDkredZSYF30cehi08nt4c/wbKSSDdwbhUH7Ti4=",
  "translate": "```\n### Exécution récurrente avec Log\nAvec le [journal de sortie](#output-log) ci-dessus, vous pouvez utiliser `tests/log-debug.sps` pour reproduire des bugs :\n1. Renommez `{path-to-log}` (généralement `~/scheme-langserver.log`) en `~/ready-for-analyse.log` ;\n2. exécutez `scheme --script tests/log-debug.sps`. Si vous souhaitez reproduire l'environnement multi-thread, il est aussi possible d'exécuter `scheme --script tests/log-debug.sps`.\n\n## Test\nPresque toutes les procédures et API clés sont testées. Mon travail est encore brut mais utile, peut-être voudrez-vous voir ce que j'ai fait dans le répertoire `tests` ou simplement exécuter la commande suivante dans le `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>REMARQUE\nIl est difficile de tester dans un environnement multi-thread. Donc, les tests actuels se concentrent sur un seul thread.\n\n## Utiliser Scheme-langserver pour d'autres usages\n### Script-Fu dans GIMP\nScript-Fu est basé sur un langage interprété appelé Scheme, et fonctionne en utilisant des fonctions qui interagissent avec les fonctions internes de GIMP. En prenant le script de [cette page](https://dalelane.co.uk/blog/?p=628) comme exemple, vous pouvez appliquer scheme-langserver avec des fichiers script ayant l'extension \"SCM\".\n\n### Autres\n\nEh bien, je m'intéresse aussi à [OMN (Opusmodus Notation)](https://opusmodus.com/) et à AutoLisp. Mais j'ai encore beaucoup de choses à faire.\n\n## Comptage de code\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Documentation détaillée\n1. [Scheme-langserver : Traiter l'édition de code Scheme comme une priorité absolue](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Capter les liaisons d'identificateur](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronisation](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Inférence de type](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Obsolète, et j'écris un livre en chinois à ce sujet)\n5. [Analyse de l'API](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Historique des étoiles\n\n[![Graphique d'historique des étoiles](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributeurs\n\n![Contributeurs](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)\n```",
  "status": "ok"
}