{
  "id": 2,
  "origin": "18. Code diagnostic.\n19. Add cross-language semantic supporting. Well, would java, c, python and many other languages can be supported with an AST transformer?\n20. Extract expression/statements into a procedure.\n\n## TODO:Contributing \n\n## Debug\n\n### How to Debug\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nFollowing tips from [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) and [Installation for VScode](#todo-installation-for-vscode), if anyone wants to do some developing and log something, it will be convenient to add `path-to-log-file` and re-write file `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` as follows:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },\n}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "5DE2vbVNWd2xISKGEJV/OEt8a/in5A1akTBaub2CMj0=",
  "translate": "18. Code de diagnostic.\n19. Ajouter la prise en charge sémantique multilingue. Eh bien, Java, C, Python et de nombreux autres langages peuvent-ils être pris en charge avec un transformateur AST ?\n20. Extraire des expressions/instructions dans une procédure.\n\n## TODO : Contribution\n\n## Débogage\n\n### Comment déboguer\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Journal de sortie\nEn suivant les conseils de [Compilation](#building), [Installation pour Lunar Vim](#installation-for-lunarvim) et [Installation pour VScode](#todo-installation-for-vscode), si quelqu’un souhaite faire du développement et consigner des informations, il sera pratique d’ajouter `chemin-vers-le-fichier-log` et de réécrire le fichier `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` comme suit :\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{chemin-vers-exécutable}'\nlocal cmd = { bin_name ,\"chemin-vers-le-fichier-log\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, une implémentation du protocole Language Server pour scheme\n]]   ,\n  },\n}\n```\n### Rejouer avec le journal \nAvec le [journal de sortie](#output-log) ci-dessus, vous pouvez utiliser `tests/log-debug.sps` pour reproduire les bugs :\n1. Renommez `{chemin-vers-le-log}` (généralement `~/scheme-langserver.log`) en `~/ready-for-analyse.log` ;\n2. Exécutez `scheme --script tests/log-debug.sps`. Si vous souhaitez reproduire l’environnement multithread, il est également possible d’exécuter `scheme --script tests/log-debug.sps`.\n\n## Test\nPresque toutes les procédures et API clés sont testées. Mon travail est assez rudimentaire mais utile, peut-être voudrez-vous voir ce que j’ai fait dans le répertoire `tests` ou simplement exécuter la commande suivante dans `{répertoire-racine-scheme-langserver}`\n``` bash\nbash test.sh\n```\n> REMARQUE  \nIl est difficile de tester dans un environnement multithread. Ainsi, les tests actuels se concentrent sur un seul thread.\n\n## Utiliser Scheme-langserver à d'autres fins\n### Script-Fu dans GIMP\nScript-Fu est basé sur un langage interprété appelé Scheme et fonctionne en utilisant des fonctions qui interagissent avec les fonctions internes de GIMP. En prenant comme exemple le script de [cette page](https://dalelane.co.uk/blog/?p=628), vous pouvez appliquer scheme-langserver avec un fichier script portant l’extension \"SCM\".\n\n### Autres\n\nEh bien, je m'intéresse aussi à [OMN (Opusmodus Notation)](https://opusmodus.com/) et à AutoLisp. Mais j’ai encore beaucoup de choses à faire.\n\n## Comptage du code\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Documentation détaillée\n1. [Scheme-langserver : Considérer l’édition de code Scheme comme une préoccupation de premier ordre](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Capturer les liaisons d’identificateurs](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronisation](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Inférence de types](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Obsolète, et j’écris un livre en chinois à ce sujet)\n5. [Analyse des API](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Historique des étoiles\n\n[![Graphique de l’historique des étoiles](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributeurs\n\n![Contributeurs](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}