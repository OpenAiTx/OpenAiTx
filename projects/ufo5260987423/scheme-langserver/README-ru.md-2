{
  "id": 2,
  "origin": "}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "i8bdxDkredZSYF30cehi08nt4c/wbKSSDdwbhUH7Ti4=",
  "translate": "}\n```\n### Повторное использование с журналом (Log)\nС помощью приведенного выше [журнала вывода](#output-log) вы можете использовать `tests/log-debug.sps` для воспроизведения ошибок:\n1. Переименуйте `{path-to-log}` (обычно `~/scheme-langserver.log`) в `~/ready-for-analyse.log`;\n2. Запустите `scheme --script tests/log-debug.sps`. Если вы хотите воспроизвести многопоточную среду, также возможно запустить `scheme --script tests/log-debug.sps`.\n\n## Тестирование\nПочти все ключевые процедуры и API протестированы. Моя работа довольно грубая, но полезная, возможно, вам будет интересно посмотреть, что я сделал в каталоге `tests`, или просто выполните следующую команду в `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>ПРИМЕЧАНИЕ\nТрудно тестировать в многопоточной среде. Поэтому текущие тесты сосредоточены на одном потоке.\n\n## Использование Scheme-langserver для других целей\n### Script-Fu в GIMP\nScript-Fu основан на интерпретируемом языке Scheme и работает с помощью функций, которые взаимодействуют с внутренними функциями GIMP. Взяв за пример скрипт с [этой страницы](https://dalelane.co.uk/blog/?p=628), вы можете применять scheme-langserver к файлам скриптов с расширением \"SCM\".\n\n### Прочее\n\nЯ также интересуюсь [OMN (Opusmodus Notation)](https://opusmodus.com/) и AutoLisp. Но у меня еще много дел.\n\n## Подсчет строк кода\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Подробная документация\n1. [Scheme-langserver: Относитесь к редактированию кода Scheme как к первостепенной задаче](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Отслеживание привязок идентификаторов](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Синхронизация](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Вывод типов](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[Типовое выведение](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Устарело, и я пишу по этому поводу книгу на китайском)\n5. [Анализ API](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## История звезд\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Участники\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}