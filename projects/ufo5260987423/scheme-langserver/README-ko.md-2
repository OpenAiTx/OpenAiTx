{
  "id": 2,
  "origin": "18. Code diagnostic.\n19. Add cross-language semantic supporting. Well, would java, c, python and many other languages can be supported with an AST transformer?\n20. Extract expression/statements into a procedure.\n\n## TODO:Contributing \n\n## Debug\n\n### How to Debug\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nFollowing tips from [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) and [Installation for VScode](#todo-installation-for-vscode), if anyone wants to do some developing and log something, it will be convenient to add `path-to-log-file` and re-write file `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` as follows:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },\n}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "5DE2vbVNWd2xISKGEJV/OEt8a/in5A1akTBaub2CMj0=",
  "translate": "18. 코드 진단.\n19. 교차 언어 시맨틱 지원 추가. 자바, C, 파이썬 그리고 많은 다른 언어들이 AST 변환기를 통해 지원될 수 있을까?\n20. 식/문장을 프로시저로 추출하기.\n\n## TODO: 기여 \n\n## 디버그\n\n### 디버그 방법\nhttps://www.scheme.com/debug/debug.html#g1\n\n### 로그 출력\n[빌드](#building), [Lunar Vim 설치](#installation-for-lunarvim), [VScode 설치](#todo-installation-for-vscode)에서 제공하는 팁을 따라, 개발을 하거나 로그를 남기고 싶은 경우 `path-to-log-file`을 추가하고 파일 `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua`를 다음과 같이 수정하면 편리합니다:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },\n}\n```\n### 로그를 활용한 반복 디버깅\n위의 [로그 출력](#output-log)을 사용하면 `tests/log-debug.sps`로 버그를 반복적으로 재현할 수 있습니다:\n1. `{path-to-log}`(보통 `~/scheme-langserver.log`) 파일명을 `~/ready-for-analyse.log`로 변경합니다;\n2. `scheme --script tests/log-debug.sps`를 실행합니다. 멀티스레드 환경을 재현하고 싶다면, 역시 `scheme --script tests/log-debug.sps`로 실행하면 됩니다.\n\n## 테스트\n거의 모든 주요 프로시저와 API가 테스트되어 있습니다. 제 작업은 거칠지만 유용합니다. 혹시 관심이 있으시다면 `tests` 디렉터리에서 확인하거나 `{scheme-langserver-root-directory}`에서 아래 명령어를 실행해보세요.\n``` bash\nbash test.sh\n```\n>참고  \n스레드 환경에서 테스트하는 것은 어렵습니다. 그래서 현재 테스트는 단일 스레드에 집중되어 있습니다.\n\n## Scheme-langserver의 기타 용도\n### GIMP의 Script-Fu\nScript-Fu는 Scheme이라는 인터프리터 언어를 기반으로 하며, GIMP의 내부 함수와 상호작용하는 함수들을 사용합니다. [이 페이지](https://dalelane.co.uk/blog/?p=628)의 스크립트 예시처럼, \"SCM\" 확장자를 가진 스크립트 파일에 scheme-langserver를 적용할 수 있습니다.\n\n### 기타\n\n저는 [OMN (Opusmodus Notation)](https://opusmodus.com/)과 AutoLisp에도 관심이 있습니다. 하지만 아직 해야 할 일이 많네요.\n\n## 코드 라인 수\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## 상세 문서\n1. [Scheme-langserver: Scheme 코드 편집을 최우선 과제로 다루다](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf)\n2. [식별자 바인딩 잡기](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [동기화](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [타입 추론](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(사용 중단됨, 그리고 이를 위한 중국어 책을 집필 중입니다)\n5. [API 분석](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## 기여자\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}