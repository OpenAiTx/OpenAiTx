{
  "id": 2,
  "origin": "}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "i8bdxDkredZSYF30cehi08nt4c/wbKSSDdwbhUH7Ti4=",
  "translate": "}\n```\n### 로그를 사용한 반복(Recurring with Log)\n위의 [출력 로그](#output-log)를 사용하여 `tests/log-debug.sps`로 버그를 반복 재현할 수 있습니다:\n1. `{path-to-log}`(보통 `~/scheme-langserver.log`)를 `~/ready-for-analyse.log`로 이름을 바꿉니다;\n2. `scheme --script tests/log-debug.sps`를 실행합니다. 멀티스레드 환경을 재현하고 싶다면, 역시 `scheme --script tests/log-debug.sps`를 실행하면 됩니다.\n\n## 테스트\n거의 모든 주요 프로시저와 API들이 테스트되어 있습니다. 제 작업은 다소 거칠지만 유용합니다. `tests` 디렉터리에서 제가 한 일을 찾아보거나, `{scheme-langserver-root-directory}`에서 아래 명령어를 실행해 보십시오.\n``` bash\nbash test.sh\n```\n>참고  \n스레드 환경에서 테스트를 수행하는 것은 어렵습니다. 그래서 현재 테스트는 단일 스레드에 초점을 맞추고 있습니다.\n\n## 다른 목적으로 Scheme-langserver 사용하기\n### GIMP에서 Script-Fu\nScript-Fu는 Scheme이라는 인터프리터 언어를 기반으로 하며, GIMP의 내부 함수와 상호작용하는 함수들을 사용합니다. [이 페이지](https://dalelane.co.uk/blog/?p=628)의 스크립트를 예로 들어, \"SCM\" 확장자를 가진 스크립트 파일에 scheme-langserver를 적용할 수 있습니다.\n\n### 기타\n\n저 역시 [OMN (Opusmodus Notation)](https://opusmodus.com/)과 AutoLisp에도 관심이 있습니다. 하지만 아직 해야 할 일이 많습니다.\n\n## 코드 수 집계\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## 상세 문서\n1. [Scheme-langserver: Scheme 코드 편집을 1급 관심사로 다루기](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf)\n2. [식별자 바인딩 잡아내기](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [동기화](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [타입 추론](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(폐기됨, 현재 이를 위한 중국어 책을 집필 중)\n5. [API 분석](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star 히스토리\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## 기여자\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}