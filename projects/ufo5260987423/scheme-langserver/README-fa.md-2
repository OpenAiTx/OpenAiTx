{
  "id": 2,
  "origin": "18. Code diagnostic.\n19. Add cross-language semantic supporting. Well, would java, c, python and many other languages can be supported with an AST transformer?\n20. Extract expression/statements into a procedure.\n\n## TODO:Contributing \n\n## Debug\n\n### How to Debug\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nFollowing tips from [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) and [Installation for VScode](#todo-installation-for-vscode), if anyone wants to do some developing and log something, it will be convenient to add `path-to-log-file` and re-write file `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` as follows:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },\n}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "5DE2vbVNWd2xISKGEJV/OEt8a/in5A1akTBaub2CMj0=",
  "translate": "18. عیب‌یابی کد.\n19. افزودن پشتیبانی معنایی بین‌زبانی. خب، آیا جاوا، سی، پایتون و بسیاری زبان‌های دیگر می‌توانند با یک مبدل AST پشتیبانی شوند؟\n20. استخراج عبارات/دستورات به یک رویه.\n\n## TODO: مشارکت\n\n## اشکال‌زدایی\n\n### نحوه اشکال‌زدایی\nhttps://www.scheme.com/debug/debug.html#g1\n\n### خروجی لاگ\nبا توجه به نکات [ساخت](#building)، [نصب برای Lunar Vim](#installation-for-lunarvim) و [نصب برای VScode](#todo-installation-for-vscode)، اگر کسی بخواهد توسعه‌ای انجام دهد و چیزی را لاگ کند، راحت است که `path-to-log-file` را اضافه کرده و فایل `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` را به صورت زیر بازنویسی کند:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`، یک پیاده‌سازی پروتکل سرور زبان برای Scheme\n]]   ,\n  },\n}\n```\n### تکرار با لاگ\nبا استفاده از [خروجی لاگ](#output-log) بالا، می‌توانید با فایل `tests/log-debug.sps` اشکالات را دوباره تکرار کنید:\n1. نام `{path-to-log}` (معمولاً `~/scheme-langserver.log`) را به `~/ready-for-analyse.log` تغییر دهید؛\n2. دستور `scheme --script tests/log-debug.sps` را اجرا کنید. اگر می‌خواهید محیط چندریسمانی را بازتولید کنید، می‌توانید همین دستور را اجرا کنید.\n\n## تست\nتقریباً تمام رویه‌ها و APIهای کلیدی تست شده‌اند. کار من بسیار ابتدایی ولی مفید است، شاید بخواهید آنچه را که انجام داده‌ام در پوشه `tests` پیدا کنید یا فقط دستور زیر را در `{scheme-langserver-root-directory}` اجرا کنید:\n``` bash\nbash test.sh\n```\n>توجه\nتست در محیط چندریسمانی دشوار است. بنابراین تست‌های فعلی روی تک‌ریسمان تمرکز دارند.\n\n## استفاده از Scheme-langserver برای اهداف دیگر\n### Script-Fu در GIMP\nScript-Fu مبتنی بر یک زبان تفسیری به نام Scheme است و با استفاده از توابعی که با توابع داخلی GIMP تعامل دارند، کار می‌کند. با استفاده از اسکریپت [این صفحه](https://dalelane.co.uk/blog/?p=628) به عنوان مثال، می‌توانید scheme-langserver را برای فایل‌های اسکریپت با پسوند \"SCM\" به کار ببرید.\n\n### سایر موارد\n\nخب، من همچنین به [OMN (Opusmodus Notation)](https://opusmodus.com/) و AutoLisp علاقه‌مندم. اما هنوز کارهای زیادی برای انجام دادن دارم.\n\n## شمارش کد\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## مستندات جزئی\n1. [Scheme-langserver: ویرایش کد Scheme به عنوان نگرانی درجه اول](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [شناسایی اتصال‌دهنده‌ها](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [همگام‌سازی](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [استنتاج نوع](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(منسوخ شده و من در حال نوشتن یک کتاب چینی درباره آن هستم)\n5. [تحلیل API](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## تاریخچه ستاره‌ها\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## مشارکت‌کنندگان\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}