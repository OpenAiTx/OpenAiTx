{
  "id": 2,
  "origin": "}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "i8bdxDkredZSYF30cehi08nt4c/wbKSSDdwbhUH7Ti4=",
  "translate": "```\n}\n```\n### اجرای مکرر با Log \nبا استفاده از [log خروجی](#output-log) بالا، می‌توانید برای اشکال‌زدایی‌های مکرر از `tests/log-debug.sps` استفاده کنید:\n1. نام فایل log خود را از `{path-to-log}` (معمولاً `~/scheme-langserver.log`) به `~/ready-for-analyse.log` تغییر دهید؛\n2. فرمان `scheme --script tests/log-debug.sps` را اجرا کنید. اگر می‌خواهید محیط چندریسمانی را بازتولید کنید، اجرای `scheme --script tests/log-debug.sps` نیز ممکن است.\n\n## تست\nتقریباً همه رویه‌ها و APIهای کلیدی تست شده‌اند. کار من بسیار ابتدایی اما کاربردی است، شاید بخواهید آنچه را که انجام داده‌ام در پوشه `tests` بیابید یا فقط دستور زیر را در `{scheme-langserver-root-directory}` اجرا کنید:\n``` bash\nbash test.sh\n```\n>توجه\nتست کردن در محیط چندریسمانی دشوار است. بنابراین، تست‌های فعلی بر روی تک ریسمان تمرکز دارند.\n\n## استفاده از Scheme-langserver برای اهداف دیگر\n### Script-Fu در GIMP\nScript-Fu بر پایه زبان تفسیری Scheme است و با استفاده از توابعی که با توابع داخلی GIMP تعامل دارند کار می‌کند. با استفاده از اسکریپت [این صفحه](https://dalelane.co.uk/blog/?p=628) به عنوان مثال، می‌توانید scheme-langserver را با فایل اسکریپت با پسوند \"SCM\" به کار ببرید.\n\n### سایر موارد\n\nخوب، من همچنین به [OMN (Opusmodus Notation)](https://opusmodus.com/) و AutoLisp علاقه‌مندم. اما هنوز کارهای زیادی برای انجام دادن دارم.\n\n## شمارش کد\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## مستندات دقیق\n1. [Scheme-langserver: ویرایش کد Scheme به عنوان یک دغدغه درجه‌یک](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [گرفتن binding شناسه‌ها](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [همگام‌سازی](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [استنتاج نوع](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(منسوخ شده و در حال نوشتن یک کتاب چینی برای آن هستم)\n5. [تحلیل API](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## تاریخچه ستاره‌ها\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## مشارکت‌کنندگان\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)\n```",
  "status": "ok"
}