{
  "id": 2,
  "origin": "18. Code diagnostic.\n19. Add cross-language semantic supporting. Well, would java, c, python and many other languages can be supported with an AST transformer?\n20. Extract expression/statements into a procedure.\n\n## TODO:Contributing \n\n## Debug\n\n### How to Debug\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nFollowing tips from [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) and [Installation for VScode](#todo-installation-for-vscode), if anyone wants to do some developing and log something, it will be convenient to add `path-to-log-file` and re-write file `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` as follows:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },\n}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "5DE2vbVNWd2xISKGEJV/OEt8a/in5A1akTBaub2CMj0=",
  "translate": "18. Code-diagnostiek.\n19. Toevoegen van cross-language semantische ondersteuning. Nou, zouden Java, C, Python en vele andere talen ondersteund kunnen worden met een AST-transformator?\n20. Expressies/statements extraheren naar een procedure.\n\n## TODO:Bijdragen\n\n## Debuggen\n\n### Hoe te debuggen\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Uitvoerlogboek\nVolg de tips van [Bouwen](#building), [Installatie voor Lunar Vim](#installation-for-lunarvim) en [Installatie voor VScode](#todo-installation-for-vscode). Als iemand wil ontwikkelen en iets wil loggen, is het handig om `pad-naar-log-bestand` toe te voegen en het bestand `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` als volgt te herschrijven:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{pad-naar-uitvoerbare-bestand}'\nlocal cmd = { bin_name ,\"pad-naar-log-bestand\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, een implementatie van het language server protocol voor scheme\n]]   ,\n  },\n}\n```\n### Herhalen met Log\nMet bovenstaande [uitvoerlogboek](#output-log), kun je `tests/log-debug.sps` gebruiken om bugs te reproduceren:\n1. Hernoem `{pad-naar-log}` (meestal `~/scheme-langserver.log`) naar `~/ready-for-analyse.log`;\n2. Voer `scheme --script tests/log-debug.sps` uit. Als je de multi-thread-omgeving wilt nabootsen, kun je ook `scheme --script tests/log-debug.sps` uitvoeren.\n\n## Testen\nBijna alle belangrijke procedures en API's zijn getest. Mijn werk is nogal grof maar bruikbaar; misschien wil je bekijken wat ik heb gedaan in de map `tests` of gewoon het volgende commando uitvoeren in `{scheme-langserver-root-directory}`\n```bash\nbash test.sh\n```\n>OPMERKING\nHet is lastig om te testen met een multi-threaded omgeving. De huidige tests richten zich dus op single-thread.\n\n## Scheme-langserver gebruiken voor andere doeleinden\n### Script-Fu in GIMP\nScript-Fu is gebaseerd op een geïnterpreteerde taal genaamd Scheme en werkt door functies te gebruiken die interageren met de interne functies van GIMP. Neem als voorbeeld het script van [deze pagina](https://dalelane.co.uk/blog/?p=628); je kunt scheme-langserver toepassen op scriptbestanden met de extensie \"SCM\".\n\n### Overig\n\nNou, ik ben ook geïnteresseerd in [OMN (Opusmodus Notation)](https://opusmodus.com/) en AutoLisp. Maar ik heb nog veel te doen.\n\n## Code-aantallen\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Gedetailleerde Documentatie\n1. [Scheme-langserver: Behandel Scheme Code Editing als de First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Identifier-bindings vangen](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchroniseren](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type-inferentie](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Verouderd, en ik schrijf er een Chinees boek over)\n5. [API-analyse](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Sterren-geschiedenis\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Bijdragers\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}