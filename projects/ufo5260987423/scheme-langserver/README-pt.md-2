{
  "id": 2,
  "origin": "18. Code diagnostic.\n19. Add cross-language semantic supporting. Well, would java, c, python and many other languages can be supported with an AST transformer?\n20. Extract expression/statements into a procedure.\n\n## TODO:Contributing \n\n## Debug\n\n### How to Debug\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nFollowing tips from [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) and [Installation for VScode](#todo-installation-for-vscode), if anyone wants to do some developing and log something, it will be convenient to add `path-to-log-file` and re-write file `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` as follows:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },\n}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "5DE2vbVNWd2xISKGEJV/OEt8a/in5A1akTBaub2CMj0=",
  "translate": "18. Diagnóstico de código.\n19. Adicionar suporte semântico entre linguagens. Bem, seria possível suportar Java, C, Python e muitas outras linguagens com um transformador de AST?\n20. Extrair expressões/comandos em um procedimento.\n\n## TODO:Contribuindo\n\n## Depuração\n\n### Como Depurar\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Log de Saída\nSeguindo as dicas de [Compilação](#building), [Instalação para Lunar Vim](#installation-for-lunarvim) e [Instalação para VScode](#todo-installation-for-vscode), se alguém quiser desenvolver e registrar logs, será conveniente adicionar `path-to-log-file` e reescrever o arquivo `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` como segue:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, uma implementação do protocolo de servidor de linguagem para scheme\n]]   ,\n  },\n}\n```\n### Execução Recorrente com Log\nCom o [log de saída](#output-log) acima, você pode usar `tests/log-debug.sps` para reproduzir bugs:\n1. Renomeie `{path-to-log}` (geralmente `~/scheme-langserver.log`) para `~/ready-for-analyse.log`;\n2. execute `scheme --script tests/log-debug.sps`. Se quiser reproduzir o ambiente multi-thread, também é possível executar `scheme --script tests/log-debug.sps`.\n\n## Teste\nQuase todos os procedimentos e APIs principais são testados. Meu trabalho é meio grosseiro, mas útil; talvez você queira ver o que fiz no diretório `tests` ou apenas rodar o comando a seguir no `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTA\nÉ difícil testar em ambiente com threads. Portanto, os testes atuais focam em thread única.\n\n## Usando o Scheme-langserver para Outros Propósitos\n### Script-Fu no GIMP\nScript-Fu é baseado em uma linguagem interpretada chamada Scheme e funciona usando funções que interagem com as funções internas do GIMP. Tomando como exemplo o script desta [página](https://dalelane.co.uk/blog/?p=628), você pode aplicar o scheme-langserver em arquivos de script com extensão \"SCM\".\n\n### Outros\n\nBem, também me interesso por [OMN (Opusmodus Notation)](https://opusmodus.com/) e AutoLisp. Mas ainda tenho muitas coisas para fazer.\n\n## Contagem de Código\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Documentação Detalhada\n1. [Scheme-langserver: Tratando a Edição de Código Scheme como uma Preocupação de Primeira Classe](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Capturando ligações de identificadores](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Sincronizando](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Inferência de tipo](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Obsoleto, e estou escrevendo um livro em chinês sobre isso)\n5. [Análise de API](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Histórico de Estrelas\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contribuidores\n\n![Contribuidores](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}