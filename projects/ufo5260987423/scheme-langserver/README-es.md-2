{
  "id": 2,
  "origin": "}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "i8bdxDkredZSYF30cehi08nt4c/wbKSSDdwbhUH7Ti4=",
  "translate": "}\n```\n### Recurrencia con Log\nCon el [registro de salida](#output-log) anterior, puedes utilizar `tests/log-debug.sps` para reproducir errores recurrentes:\n1. Renombra `{path-to-log}` (usualmente `~/scheme-langserver.log`) como `~/ready-for-analyse.log`;\n2. ejecuta `scheme --script tests/log-debug.sps`. Si deseas reproducir el entorno multihilo, también puedes ejecutar `scheme --script tests/log-debug.sps`.\n\n## Prueba\nCasi todos los procedimientos clave y APIs están probados. Mi trabajo es bastante rudimentario pero útil, tal vez quieras ver lo que he hecho en el directorio `tests` o simplemente ejecutar el siguiente comando en `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTA\nEs difícil realizar pruebas en un entorno con hilos. Por lo tanto, las pruebas actuales se centran en un solo hilo.\n\n## Usar Scheme-langserver para Otro Propósito\n### Script-Fu en GIMP\nScript-Fu está basado en un lenguaje interpretado llamado Scheme, y funciona utilizando funciones que interactúan con las funciones internas de GIMP. Tomando como ejemplo el script de [esta página](https://dalelane.co.uk/blog/?p=628), puedes aplicar scheme-langserver a archivos de script con extensión \"SCM\".\n\n### Otros\n\nBueno, también estoy interesado en [OMN (Opusmodus Notation)](https://opusmodus.com/) y AutoLisp. Pero todavía tengo muchas cosas por hacer.\n\n## Conteo de Código\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Documento Detallado\n1. [Scheme-langserver: Tratar la Edición de Código Scheme como una Preocupación de Primera Clase](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Capturando enlaces de identificadores](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Sincronizando](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Inferencia de tipos](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Obsoleto, y estoy escribiendo un libro en chino al respecto)\n5. [Análisis de API](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Historial de Estrellas\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Colaboradores\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}