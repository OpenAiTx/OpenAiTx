{
  "id": 2,
  "origin": "18. Code diagnostic.\n19. Add cross-language semantic supporting. Well, would java, c, python and many other languages can be supported with an AST transformer?\n20. Extract expression/statements into a procedure.\n\n## TODO:Contributing \n\n## Debug\n\n### How to Debug\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Output Log\nFollowing tips from [Building](#building), [Installation for Lunar Vim](#installation-for-lunarvim) and [Installation for VScode](#todo-installation-for-vscode), if anyone wants to do some developing and log something, it will be convenient to add `path-to-log-file` and re-write file `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` as follows:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, a language server protocol implementation for scheme\n]]   ,\n  },\n}\n```\n### Recurring with Log \nWith above [output log](#output-log), you may use `tests/log-debug.sps` recurring bugs:\n1. Rename `{path-to-log}`(usually `~/scheme-langserver.log`) as `~/ready-for-analyse.log`;\n2. run `scheme --script tests/log-debug.sps`. If you want to re-produce the multi-thread environment, it would also be available to run `scheme --script tests/log-debug.sps`.\n\n## Test\nAlmost all key procedures and APIs are tested. My work is just so rough but useful, maybe you would like to find what I've done in `tests` directory or just run following command in `{scheme-langserver-root-directory}`\n``` bash\nbash test.sh\n```\n>NOTE\nIt's hard to do test with threaded environment. So, current tests focus on single thread.\n\n## Use Scheme-langserver for Other Purpose\n### Script-Fu in GIMP\nScript-Fu is based on an interpreted language called Scheme, and works by using functions that interact with GIMP's internal functions. Taking [this page](https://dalelane.co.uk/blog/?p=628)'s script as an example, you can apply scheme-langserver with script file with \"SCM\" extension.\n\n### Others\n\nWell, I'm also interested in [OMN (Opusmodus Notation)](https://opusmodus.com/) and AutoLisp. But I still have many things to do.\n\n## Code Count\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detailed Document\n1. [Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Catching identifier bindings](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Synchronizing](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Deprecated, and I'm writing a Chinese book for it)\n5. [API Analysis](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Contributors\n\n![Contributors](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "origin_sha": "5DE2vbVNWd2xISKGEJV/OEt8a/in5A1akTBaub2CMj0=",
  "translate": "18. Kod tanılaması.\n19. Çapraz dil semantik desteği ekle. Peki, bir AST dönüştürücü ile java, c, python ve birçok başka dil desteklenebilir mi?\n20. İfade/durumları bir prosedüre çıkar.\n\n## YAPILACAKLAR: Katkıda Bulunma\n\n## Hata Ayıklama\n\n### Nasıl Hata Ayıklanır\nhttps://www.scheme.com/debug/debug.html#g1\n\n### Çıktı Günlüğü\n[Derleme](#building), [Lunar Vim için Kurulum](#installation-for-lunarvim) ve [VScode için Kurulum](#todo-installation-for-vscode) başlıklarındaki ipuçlarını takiben, eğer biri geliştirme yapmak ve bir şeyleri günlüğe kaydetmek isterse, `path-to-log-file` eklemek ve `~/.local/share/lunarvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/server_configurations/scheme_langserver.lua` dosyasını aşağıdaki gibi yeniden yazmak uygun olacaktır:\n```lua\nlocal util = require 'lspconfig.util'\nlocal bin_name = '{path-to-run}'\nlocal cmd = { bin_name ,\"path-to-log-file\"}\n\nreturn {\n  default_config = {\n    cmd = cmd,\n    filetypes = { 'scheme' },\n    root_dir = util.find_git_ancestor,\n    single_file_support = true,\n  },\n  docs = {\n    description = [[\nhttps://github.com/ufo5260987423/scheme-langserver\n`scheme-langserver`, scheme için bir dil sunucu protokolü uygulamasıdır\n]]   ,\n  },\n}\n```\n### Günlük ile Yineleme\nYukarıdaki [çıktı günlüğü](#output-log) ile, `tests/log-debug.sps` dosyasını kullanarak hataları yineleyebilirsiniz:\n1. `{path-to-log}` dosyasının adını (genellikle `~/scheme-langserver.log`) `~/ready-for-analyse.log` olarak değiştirin;\n2. `scheme --script tests/log-debug.sps` komutunu çalıştırın. Çoklu iş parçacığı ortamını yeniden üretmek isterseniz, `scheme --script tests/log-debug.sps` komutunu çalıştırmak da mümkündür.\n\n## Test\nNeredeyse tüm temel prosedürler ve API’ler test edilmiştir. Yaptığım işler oldukça kaba ama kullanışlı, belki `tests` dizininde neler yaptığımı bulmak isteyebilirsiniz veya `{scheme-langserver-root-directory}` içinde aşağıdaki komutu çalıştırabilirsiniz:\n``` bash\nbash test.sh\n```\n>NOT\nÇoklu iş parçacıklı ortamda test yapmak zordur. Bu yüzden, mevcut testler tek iş parçacığına odaklanır.\n\n## Scheme-langserver’ı Diğer Amaçlar İçin Kullanmak\n### GIMP’te Script-Fu\nScript-Fu, Scheme tabanlı yorumlanan bir dile dayanır ve GIMP’in dahili işlevleriyle etkileşime giren fonksiyonlar kullanır. [Bu sayfadaki](https://dalelane.co.uk/blog/?p=628) örnek bir script üzerinden, \"SCM\" uzantılı script dosyalarıyla scheme-langserver’ı uygulayabilirsiniz.\n\n### Diğerleri\n\nAyrıca [OMN (Opusmodus Notation)](https://opusmodus.com/) ve AutoLisp ile de ilgileniyorum. Ama hâlâ yapacak çok işim var.\n\n## Kod Sayısı\n```bash\nfind . -name \"*.sls\" ! -path \"./.akku/*\" |xargs wc -l\n```\n## Detaylı Doküman\n1. [Scheme-langserver: Scheme Kod Düzenlemeyi Birinci Sınıf Bir Konu Olarak Ele Almak](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf).\n2. [Tanımlayıcı bağlarını yakalama](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/identifier.md)\n3. [Senkronizasyon](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/util/synchronize.md)\n4. [Tip çıkarımı](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.md),~~[类型推断](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/analysis/type-inference.cn.md)~~(Kullanımdan kaldırıldı ve bunun için bir Çince kitap yazıyorum)\n5. [API Analizi](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/protocol/analysis.md)\n6. [Deepwiki](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\n## Yıldız Geçmişi\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ufo5260987423/scheme-langserver&type=Date)](https://star-history.com/#ufo5260987423/scheme-langserver)\n\n## Katkıda Bulunanlar\n\n![Katkıda Bulunanlar](https://contrib.rocks/image?repo=ufo5260987423/scheme-langserver)",
  "status": "ok"
}