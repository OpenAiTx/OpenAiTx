{
  "id": 1,
  "origin": "\n<div align=\"right\">\n  <details>\n    <summary >üåê Language</summary>\n    <div>\n      <div align=\"right\">\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=en\">English</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=zh-CN\">ÁÆÄ‰Ωì‰∏≠Êñá</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=zh-TW\">ÁπÅÈ´î‰∏≠Êñá</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=ja\">Êó•Êú¨Ë™û</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=ko\">ÌïúÍµ≠Ïñ¥</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=hi\">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=th\">‡πÑ‡∏ó‡∏¢</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=fr\">Fran√ßais</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=de\">Deutsch</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=es\">Espa√±ol</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=it\">Itapano</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=ru\">–†—É—Å—Å–∫–∏–π</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=pt\">Portugu√™s</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=nl\">Nederlands</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=pl\">Polski</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=ar\">ÿßŸÑÿπÿ±ÿ®Ÿäÿ©</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=fa\">ŸÅÿßÿ±ÿ≥€å</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=tr\">T√ºrk√ße</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=vi\">Ti·∫øng Vi·ªát</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=id\">Bahasa Indonesia</a></p>\n      </div>\n    </div>\n  </details>\n</div>\n\n![](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/logo-no-background.png)\n# Scheme-langserver\n[![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\nYou may read my [paper](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf) and cite like this \n> WANG, Z. (2025, May 12). Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern. The 18th European Lisp Symposium (ELS`25), Zurich. https://doi.org/10.5281/zenodo.15384882\n\nDue to GitHub may block Chinese IP addresses, I have to copy this repository to [here](https://codeberg.org/ufo5260987423/scheme-langserver) and [here](https://gitee.com/ufo5260987423/scheme-langserver). I will continually update all repositories but I can't guarrentee. I now also collaborate with [XmacsLabs](https://github.com/XmacsLabs), you may also find a fork [here](https://github.com/XmacsLabs/scheme-langserver).\n\n<video src=\"https://github.com/user-attachments/assets/893bba98-6709-4fac-a4d3-dc7b6aab46fb\" controls=\"controls\" width=\"500\" height=\"300\"></video>\n\n**Now, VSCode can use scheme-langserver!** Please refere [HERE](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md).\n\n>NOTE: There're many many bugs in scheme-langserver. I'm just fixing and appealing help from the community. Please be patient.\n\n>NOTE: you can find the auto generated type information [here](https://ufo5260987423.github.io/scheme-langserver/doc/analysis/type-inference-result). It's now mainly used for next-stage-development (maybe include AKKU) and debugging.\n\nImplementing support like autocomplete, goto definition, or documentation on hover is a significant effort for programming. However, comparing to other language like java, python, javascript and c, language server protocol implementation for lisp language are just made in a vacuum. [Geiser](https://gitlab.com/emacs-geiser), [racket langserver](https://github.com/jeapostrophe/racket-langserver) and [swish-lint](https://github.com/becls/swish-lint) etc., their works are all based on `repl`(Read-Eval-Print Loop) or keyword tokenizer instead of programming. For example, if a programmer was coding on an unaccomplished project, in which the codes were not fully executable, [Geiser](https://gitlab.com/emacs-geiser) or any others would only complete top-level binding identifiers listed by `environment-symbols` procedure (for [Chez](https://cisco.github.io/ChezScheme/)), or complete symbols instead of identifiers. Which means for local bindings and unaccomplished codes, though making effort for programming is supposed of the importance mostly, [Geiser](https://gitlab.com/emacs-geiser) and its counterparts help nothing on recognizing identifier's valid scope. Familiar cases occur with goto definition and many other functionalities.\n\nA primary cause is, for scheme and other lisp dialects, their abundant data sets and flexible control structures raise program analysis a big challenge. Especially the macro, it seems like that scheme is mainly used for genius and meta/macro programming. But I say no. Scheme can make many interesting things if a better programming environment is provided. And now you may [**STARTUP HERE**](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md).\n\nThis package is a language server protocol implementation helping scheme programming. It provides completion, definition and type inference. These functionalities are established on static code analysis with [r6rs standard](http://www.r6rs.org/) and some obvious rules for unaccomplished codes. This package itself and related libraries are published or going to be published with [Akku](https://akkuscm.org/), which is a package manager for Scheme. \n\nThis package also has been tested with [Chez Scheme](https://cisco.github.io/ChezScheme/) versions 9.4 and 9.5. A detailed test on version 10.0.0 will be done after upgrading my laptop OS to a newer version.\n\nI do this open source work just in my spare time and I can contribute many splendid ideas to the community like embedding data flow analysis into scheme-langserver or many other things. And I'm continuously asking for much more donation or funding. You can donate with [this patreon page](https://www.patreon.com/PoorProgrammer/membership) or [Áà±ÂèëÁîµ](https://afdian.com/a/ufo5260987423).\n\n\n## Compilation , Intallation & Configuration is [HERE](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md)\n\n## Recent Status\nI'll keep fixing bugs, profiling the code, and collecting information for my giant book on homemade type inference system. This will take me about 1 years. Further developments including a [VScode](https://code.visualstudio.com/) plugin and data flow analysis. But actually, I'm now setting this open source work a part-time job, and I can not guarantee a schedule.\n\n## Release \n1.2.9 Now, enjoy type inference!\n\nPrevious releases please refer to [this file](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/release-log.md).\n\n### Features\n1. Top-level and local identifiers binding completion.\n![Top-level and local identifiers binding](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/auto-completion.png \"Top-level and local identifiers binding\")\n2. Goto definition.\n![Goto definition with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/definition.png \"Goto Definition with telescope.nvim\")\n3. Compatible with package manager: Akku.\n4. File changes synchronizing and corresponding index changing.\n5. Hover.\n6. References and document highlight (document-scoped references).\n![Find references with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/find-references.png \"Find references with telescope.nvim\")\n7. Document symbol.\n![Find document symbols with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/document-symbol.png \"find document symbols with telescope.nvim\")\n8. Catching *-syntax(define-syntax, let-syntax, etc.) based local identifier binding. \n9. Cross-platform parallel indexing.\n10. Self-made source code annotator to be compatible with .sps files.\n11. Peephole optimization for API requests with suspendable task.\n12. Type inference with a homemade DSL interpreter(I'm very proud of it!). And now it has been embedded into the auto-completion. As the following figure indicated, the \"length-b\" and \"length-a\" having \"integer?\" type are in the front of those recommended options because they can match the parameter type requiring from \"<=\". \n![Autocompletion with type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/auto-completion-with-type-inference.png \"Autocompletion with type inference\")\nA test in can prove this result, just run `scheme --script tests/protocol/apis/test-completion.sps` and the log file `scheme-langserver.log` would contain results like this:\n```bash\nsend-message\n2023 11 21 11 26 41 967266866\n{\"jsonrpc\":\"2.0\",\"id\":\"3\",\"result\":[{\"label\":\"length-a\"},{\"label\":\"length-b\"},{\"label\":\"lambda\"},{\"label\":\"latin-1-codec\"},{\"label\":\"lcm\"},{\"label\":\"least-fixnum\"},{\"label\":\"length\"},{\"label\":\"let\"},{\"label\":\"let*\"},{\"label\":\"let*-values\"},{\"label\":\"let-syntax\"},{\"label\":\"let-values\"},{\"label\":\"letrec\"},{\"label\":\"letrec*\"},{\"label\":\"letrec-syntax\"},{\"label\":\"lexical-violation?\"},{\"label\":\"list\"},{\"label\":\"list->string\"},{\"label\":\"list->vector\"},{\"label\":\"list-ref\"},{\"label\":\"list-sort\"},{\"label\":\"list-tail\"},{\"label\":\"list?\"},{\"label\":\"log\"},{\"label\":\"lookahead-char\"},{\"label\":\"lookahead-u8\"}]}\n```\n13. Abstract interpreter for identifier catching among different file extensions like scm, ss, sps, sls and sld.\n\n### TODOs\n14. Renaming. \n15. Fully compatible with [r6rs standard](http://www.r6rs.org/).\n16. Step-by-step macro expander: well, I actually have implemented one and I wanted to make it a key step catching identifier binding in self-defined macros. Now, I find this catching is much harder than I thought, and the expander I don't know where it could work.\n17. Code eval.",
  "origin_sha": "EUEvRAM1Xn8cCqrPvuBQ0V6xXYO3O33rxE42JkAjX+s=",
  "translate": "<div align=\"right\">\n  <details>\n    <summary >üåê Jƒôzyk</summary>\n    <div>\n      <div align=\"right\">\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=en\">English</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=zh-CN\">ÁÆÄ‰Ωì‰∏≠Êñá</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=zh-TW\">ÁπÅÈ´î‰∏≠Êñá</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=ja\">Êó•Êú¨Ë™û</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=ko\">ÌïúÍµ≠Ïñ¥</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=hi\">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=th\">‡πÑ‡∏ó‡∏¢</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=fr\">Fran√ßais</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=de\">Deutsch</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=es\">Espa√±ol</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=it\">Itapano</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=ru\">–†—É—Å—Å–∫–∏–π</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=pt\">Portugu√™s</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=nl\">Nederlands</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=pl\">Polski</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=ar\">ÿßŸÑÿπÿ±ÿ®Ÿäÿ©</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=fa\">ŸÅÿßÿ±ÿ≥€å</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=tr\">T√ºrk√ße</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=vi\">Ti·∫øng Vi·ªát</a></p>\n        <p><a href=\"https://openaitx.github.io/view.html?user=ufo5260987423&project=scheme-langserver&lang=id\">Bahasa Indonesia</a></p>\n      </div>\n    </div>\n  </details>\n</div>\n\n![](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/logo-no-background.png)\n# Scheme-langserver\n[![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/ufo5260987423/scheme-langserver)\n\nMo≈ºesz przeczytaƒá mojƒÖ [pracƒô](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/paper.pdf) i cytowaƒá jƒÖ tak:\n> WANG, Z. (2025, 12 maja). Scheme-langserver: Treat Scheme Code Editing as the First-Class Concern. The 18th European Lisp Symposium (ELS`25), Zurich. https://doi.org/10.5281/zenodo.15384882\n\nPoniewa≈º GitHub mo≈ºe blokowaƒá adresy IP z Chin, musia≈Çem skopiowaƒá to repozytorium [tutaj](https://codeberg.org/ufo5260987423/scheme-langserver) oraz [tutaj](https://gitee.com/ufo5260987423/scheme-langserver). Bƒôdƒô stale aktualizowa≈Ç wszystkie repozytoria, ale nie mogƒô tego zagwarantowaƒá. Wsp√≥≈Çpracujƒô tak≈ºe z [XmacsLabs](https://github.com/XmacsLabs), znajdziesz fork [tutaj](https://github.com/XmacsLabs/scheme-langserver).\n\n<video src=\"https://github.com/user-attachments/assets/893bba98-6709-4fac-a4d3-dc7b6aab46fb\" controls=\"controls\" width=\"500\" height=\"300\"></video>\n\n**Teraz VSCode mo≈ºe korzystaƒá ze scheme-langserver!** Zajrzyj [TUTAJ](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md).\n\n>UWAGA: Scheme-langserver zawiera wiele, wiele b≈Çƒôd√≥w. Pracujƒô nad ich usuwaniem i apelujƒô o pomoc spo≈Çeczno≈õci. Proszƒô o cierpliwo≈õƒá.\n\n>UWAGA: automatycznie wygenerowane informacje o typach znajdziesz [tutaj](https://ufo5260987423.github.io/scheme-langserver/doc/analysis/type-inference-result). Obecnie wykorzystywane sƒÖ g≈Ç√≥wnie do dalszego rozwoju (mo≈ºe tak≈ºe dla AKKU) oraz debugowania.\n\nImplementacja wsparcia takich funkcji jak autouzupe≈Çnianie, przej≈õcie do definicji czy dokumentacja po najechaniu jest du≈ºym wyzwaniem programistycznym. Jednak w por√≥wnaniu do innych jƒôzyk√≥w jak java, python, javascript czy c, implementacje protoko≈Çu language server dla jƒôzyk√≥w lispowych powstajƒÖ niejako w pr√≥≈ºni. [Geiser](https://gitlab.com/emacs-geiser), [racket langserver](https://github.com/jeapostrophe/racket-langserver) oraz [swish-lint](https://github.com/becls/swish-lint) i inne ‚Äì wszystkie opierajƒÖ siƒô na `repl` (Read-Eval-Print Loop) lub tokenizatorze s≈Ç√≥w kluczowych, a nie na analizie programistycznej. Przyk≈Çadowo, je≈õli programista pracuje nad niedoko≈Ñczonym projektem, w kt√≥rym kod nie jest w pe≈Çni wykonywalny, [Geiser](https://gitlab.com/emacs-geiser) lub inne narzƒôdzia bƒôdƒÖ uzupe≈Çnia≈Çy jedynie identyfikatory powiƒÖzane na najwy≈ºszym poziomie, wylistowane przez procedurƒô `environment-symbols` (dla [Chez](https://cisco.github.io/ChezScheme/)), lub uzupe≈Çnia≈Çy symbole zamiast identyfikator√≥w. Oznacza to, ≈ºe dla lokalnych powiƒÖza≈Ñ i nieuko≈Ñczonego kodu, mimo ≈ºe analiza programistyczna jest tu najwa≈ºniejsza, [Geiser](https://gitlab.com/emacs-geiser) i podobne narzƒôdzia nie rozpoznajƒÖ poprawnego zakresu identyfikator√≥w. Podobne przypadki wystƒôpujƒÖ przy przej≈õciu do definicji i wielu innych funkcjach.\n\nPodstawowƒÖ przyczynƒÖ jest to, ≈ºe dla Scheme i innych dialekt√≥w Lispa ich bogate zbiory danych i elastyczne struktury sterujƒÖce stanowiƒÖ du≈ºe wyzwanie dla analizy program√≥w. Szczeg√≥lnie makra ‚Äì wydaje siƒô, ≈ºe Scheme jest przeznaczony g≈Ç√≥wnie dla geniuszy i do programowania meta/makro. Ale m√≥wiƒô: nie. Scheme pozwala na wiele ciekawych rzeczy, je≈õli zapewni siƒô lepsze ≈õrodowisko programistyczne. I teraz mo≈ºesz [**ZACZƒÑƒÜ TUTAJ**](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md).\n\nTen pakiet to implementacja protoko≈Çu language server wspierajƒÖca programowanie w Scheme. Zapewnia uzupe≈Çnianie kodu, przechodzenie do definicji oraz wnioskowanie typ√≥w. Funkcjonalno≈õci te opierajƒÖ siƒô na statycznej analizie kodu wed≈Çug [standardu r6rs](http://www.r6rs.org/) oraz oczywistych regu≈Çach dla nieuko≈Ñczonego kodu. Sam pakiet i powiƒÖzane biblioteki sƒÖ publikowane lub bƒôdƒÖ publikowane przez [Akku](https://akkuscm.org/), czyli mened≈ºera pakiet√≥w dla Scheme.\n\nPakiet by≈Ç r√≥wnie≈º testowany z [Chez Scheme](https://cisco.github.io/ChezScheme/) w wersjach 9.4 i 9.5. Szczeg√≥≈Çowe testy dla wersji 10.0.0 zostanƒÖ przeprowadzone po aktualizacji mojego systemu operacyjnego.\n\nPracujƒô nad tym projektem open source w wolnym czasie i mogƒô wnie≈õƒá do spo≈Çeczno≈õci wiele ciekawych pomys≈Ç√≥w, takich jak integracja analizy przep≈Çywu danych z scheme-langserver czy wiele innych rzeczy. Ca≈Çy czas proszƒô o wsparcie finansowe lub darowizny. Mo≈ºesz przekazaƒá darowiznƒô poprzez [stronƒô patreona](https://www.patreon.com/PoorProgrammer/membership) lub [Áà±ÂèëÁîµ](https://afdian.com/a/ufo5260987423).\n\n\n## Kompilacja, Instalacja i Konfiguracja znajdujƒÖ siƒô [TUTAJ](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/startup.md)\n\n## Ostatni Status\nBƒôdƒô dalej naprawiaƒá b≈Çƒôdy, profilowaƒá kod i zbieraƒá materia≈Çy do mojej ogromnej ksiƒÖ≈ºki o w≈Çasnorƒôcznym systemie wnioskowania typ√≥w. Zajmie mi to oko≈Ço roku. Dalszy rozw√≥j obejmuje plugin do [VScode](https://code.visualstudio.com/) oraz analizƒô przep≈Çywu danych. Ale tak naprawdƒô, traktujƒô teraz to open source jako pracƒô dorywczƒÖ i nie mogƒô zagwarantowaƒá harmonogramu.\n\n## Wydania\n1.2.9 Teraz, korzystaj z wnioskowania typ√≥w!\n\nPoprzednie wydania znajdziesz w [tym pliku](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/release-log.md).\n\n### Funkcje\n1. Uzupe≈Çnianie powiƒÖza≈Ñ identyfikator√≥w na najwy≈ºszym i lokalnym poziomie.\n![Top-level and local identifiers binding](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/auto-completion.png \"Top-level and local identifiers binding\")\n2. Przej≈õcie do definicji.\n![Goto definition with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/definition.png \"Goto Definition with telescope.nvim\")\n3. Kompatybilno≈õƒá z mened≈ºerem pakiet√≥w: Akku.\n4. Synchronizacja zmian w plikach i odpowiednia aktualizacja indeks√≥w.\n5. PodglƒÖd (hover).\n6. Wyszukiwanie referencji i pod≈õwietlanie dokumentu (referencje w zakresie dokumentu).\n![Find references with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/find-references.png \"Find references with telescope.nvim\")\n7. Symbole dokumentu.\n![Find document symbols with telescope.nvim](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/document-symbol.png \"find document symbols with telescope.nvim\")\n8. Wykrywanie powiƒÖza≈Ñ lokalnych identyfikator√≥w opartych na *-syntax (define-syntax, let-syntax, itd.).\n9. Wieloplatformowe, r√≥wnoleg≈Çe indeksowanie.\n10. Autorski adnotator kodu ≈∫r√≥d≈Çowego kompatybilny z plikami .sps.\n11. Optymalizacja peephole dla ≈ºƒÖda≈Ñ API z zadaniami wstrzymywanymi.\n12. Wnioskowanie typ√≥w z u≈ºyciem w≈Çasnego interpretera DSL (jestem z tego bardzo dumny!). Teraz zosta≈Ço ono wbudowane w autouzupe≈Çnianie. Jak pokazuje poni≈ºsza ilustracja, \"length-b\" i \"length-a\" majƒÖce typ \"integer?\" sƒÖ na poczƒÖtku rekomendowanych opcji, poniewa≈º pasujƒÖ do wymaganego typu parametru dla \"<=\".\n![Autocompletion with type inference](https://raw.githubusercontent.com/ufo5260987423/scheme-langserver/main/./doc/figure/auto-completion-with-type-inference.png \"Autocompletion with type inference\")\nTest mo≈ºe to potwierdziƒá, wystarczy uruchomiƒá `scheme --script tests/protocol/apis/test-completion.sps` a plik log√≥w `scheme-langserver.log` zawiera takie wyniki:\n```bash\nsend-message\n2023 11 21 11 26 41 967266866\n{\"jsonrpc\":\"2.0\",\"id\":\"3\",\"result\":[{\"label\":\"length-a\"},{\"label\":\"length-b\"},{\"label\":\"lambda\"},{\"label\":\"latin-1-codec\"},{\"label\":\"lcm\"},{\"label\":\"least-fixnum\"},{\"label\":\"length\"},{\"label\":\"let\"},{\"label\":\"let*\"},{\"label\":\"let*-values\"},{\"label\":\"let-syntax\"},{\"label\":\"let-values\"},{\"label\":\"letrec\"},{\"label\":\"letrec*\"},{\"label\":\"letrec-syntax\"},{\"label\":\"lexical-violation?\"},{\"label\":\"list\"},{\"label\":\"list->string\"},{\"label\":\"list->vector\"},{\"label\":\"list-ref\"},{\"label\":\"list-sort\"},{\"label\":\"list-tail\"},{\"label\":\"list?\"},{\"label\":\"log\"},{\"label\":\"lookahead-char\"},{\"label\":\"lookahead-u8\"}]}\n```\n13. Abstrakcyjny interpreter do wykrywania identyfikator√≥w miƒôdzy r√≥≈ºnymi rozszerzeniami plik√≥w, takimi jak scm, ss, sps, sls i sld.\n\n### TODO\n14. Zmiana nazw (renaming).\n15. Pe≈Çna zgodno≈õƒá ze [standardem r6rs](http://www.r6rs.org/).\n16. Krokowy ekspander makr: w≈Ça≈õciwie ju≈º taki zaimplementowa≈Çem i chcia≈Çem, ≈ºeby by≈Ç kluczowym krokiem wykrywania powiƒÖza≈Ñ identyfikator√≥w w makrach zdefiniowanych przez u≈ºytkownika. Teraz widzƒô, ≈ºe to wykrywanie jest du≈ºo trudniejsze ni≈º my≈õla≈Çem, a ekspander nie wiem, gdzie dok≈Çadnie siƒô sprawdzi.\n17. Ewaluacja kodu.",
  "status": "ok"
}