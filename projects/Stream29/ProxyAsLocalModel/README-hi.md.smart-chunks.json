[
  {
    "Id": 1,
    "Content": "# ProxyAsLocalModel\n\nProxy remote LLM API as Local model. Especially works for using custom LLM in JetBrains AI Assistant.\n\nPowered by Ktor and kotlinx.serialization. Thanks to their no-reflex features.\n\n## Story of this project\n\nCurrently, JetBrains AI Assistant provides a free plan with very limited quotes. I tried out and my quote ran out quickly.\n\nI already bought other LLM API tokens, such like Gemini and Qwen. So I started to think of using them in AI Assistant. Unfortunately, only local models from LM Studio and Ollama are supported. So I started to work on this proxy application that proxy third party LLM API as LM Studio and Ollama API so that I can use them in my JetBrains IDEs.\n\nThis is Just a simple task, so I started to use the official SDKs as clients and write a simple Ktor server that provides endpoints as LM Studio and Ollama. The problem appears when I try to distribute it as a GraalVM native image. The official Java SDKS uses too many dynamic features, making it hard to compile into a native image, even with a tracing agent. So I decided to implement a simple client of streaming chat completion API by myself with Ktor and kotlinx.serialization which are both no-reflex, functional and DSL styled.\n\nAs you can see, this application is distributed as a fat runnable jar and a GraalVM native image, which makes it cross-platform and fast to start.\n\nThe development of this application gives me confidence in Kotlin/Ktor/kotlinx.serialization. The Kotlin world uses more functional programming and less reflexion, which makes it more suitable for GraalVM native image, with faster startup and less memory usage.\n\n## Currently supported\n\nProxy from: OpenAI, Claude, DashScope(Alibaba Qwen), Gemini, Deepseek, Mistral, SiliconFlow.\n\nProxy as: LM Studio, Ollama.\n\nStreaming chat completion API only.\n",
    "ContentSha": "RqoxS65Q2kmC/NFTNk+2QDY1yLetU7emS9EGMv38jJo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# ProxyAsLocalModel\n\nरिमोट LLM API को लोकल मॉडल के रूप में प्रॉक्सी करें। विशेष रूप से JetBrains AI Assistant में कस्टम LLM का उपयोग करने के लिए काम करता है।\n\nKtor और kotlinx.serialization द्वारा संचालित। उनके बिना-रिफ्लेक्स फीचर्स के लिए धन्यवाद।\n\n## इस प्रोजेक्ट की कहानी\n\nवर्तमान में, JetBrains AI Assistant एक फ्री प्लान प्रदान करता है जिसमें बहुत सीमित कोट्स हैं। मैंने इसे आज़माया और मेरी कोटा जल्दी ही समाप्त हो गई।\n\nमैंने पहले ही अन्य LLM API टोकन खरीद लिए थे, जैसे कि Gemini और Qwen। इसलिए मैंने सोचना शुरू किया कि इन्हें AI Assistant में कैसे उपयोग किया जाए। दुर्भाग्य से, केवल LM Studio और Ollama के लोकल मॉडल ही समर्थित हैं। इसलिए मैंने इस प्रॉक्सी एप्लिकेशन पर काम शुरू किया, जो थर्ड पार्टी LLM API को LM Studio और Ollama API के रूप में प्रॉक्सी करता है ताकि मैं इन्हें अपने JetBrains IDEs में उपयोग कर सकूं।\n\nयह एक सरल कार्य था, इसलिए मैंने आधिकारिक SDKs का क्लाइंट के रूप में उपयोग करना शुरू किया और एक सरल Ktor सर्वर लिखा जो LM Studio और Ollama के रूप में एंडपॉइंट्स प्रदान करता है। समस्या तब आई जब मैंने इसे GraalVM नेटिव इमेज के रूप में वितरित करने की कोशिश की। आधिकारिक Java SDKs बहुत अधिक डायनेमिक फीचर्स का उपयोग करते हैं, जिससे इसे नेटिव इमेज में कंपाइल करना मुश्किल हो जाता है, यहां तक कि ट्रेसिंग एजेंट के साथ भी। इसलिए मैंने Ktor और kotlinx.serialization के साथ खुद ही स्ट्रीमिंग चैट कंप्लीशन API का एक सरल क्लाइंट इम्प्लीमेंट करने का निर्णय लिया, जो दोनों ही बिना-रिफ्लेक्स, फंक्शनल और DSL स्टाइल्ड हैं।\n\nजैसा कि आप देख सकते हैं, यह एप्लिकेशन एक फैट रननेबल जार और एक GraalVM नेटिव इमेज के रूप में वितरित किया जाता है, जिससे यह क्रॉस-प्लेटफॉर्म और जल्दी स्टार्ट होने वाला बन जाता है।\n\nइस एप्लिकेशन के विकास ने मुझे Kotlin/Ktor/kotlinx.serialization में आत्मविश्वास दिया। Kotlin वर्ल्ड अधिक फंक्शनल प्रोग्रामिंग और कम रिफ्लेक्शन का उपयोग करती है, जिससे यह GraalVM नेटिव इमेज के लिए अधिक उपयुक्त बनती है, तेज़ स्टार्टअप और कम मेमोरी उपयोग के साथ।\n\n## वर्तमान में समर्थित\n\nप्रॉक्सी फ्रॉम: OpenAI, Claude, DashScope(Alibaba Qwen), Gemini, Deepseek, Mistral, SiliconFlow।\n\nप्रॉक्सी ऐज़: LM Studio, Ollama।\n\nसिर्फ स्ट्रीमिंग चैट कंप्लीशन API।",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "## How to use\n\nThis application is a proxy server, distributed as a fat runnable jar and a GraalVM native image (Windows x64).\n\nRun the application, and you will see a help message:\n\n```\n2025-05-02 10:43:53 INFO  Help - It looks that you are starting the program for the first time here.\n2025-05-02 10:43:53 INFO  Help - A default config file is created at your_path\\config.yml with schema annotation.\n2025-05-02 10:43:53 INFO  Config - Config file watcher started at your_path\\config.yml\n2025-05-02 10:43:53 INFO  LM Studio Server - LM Studio Server started at 1234\n2025-05-02 10:43:53 INFO  Ollama Server - Ollama Server started at 11434\n2025-05-02 10:43:53 INFO  Model List - Model list loaded with: []\n```\n\nThen you can edit the config file to set up your proxy server.\n\n## Config file\n\nThis config file is automatically hot-reloaded when you change it. Only the influenced parts of the server will be updated.\n\nWhen first generating the config file, it will be created with schema annotations. This will bring completion and check in your editor.\n",
    "ContentSha": "jSta+CN7gfDD+W3lmWAocZcdmJOQZkgX0LDlOBWiy1Y=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## उपयोग कैसे करें\n\nयह एप्लिकेशन एक प्रॉक्सी सर्वर है, जो एक फैट रननेबल जार और GraalVM नेटिव इमेज (Windows x64) के रूप में वितरित किया गया है।\n\nएप्लिकेशन चलाएँ, और आपको एक सहायता संदेश दिखाई देगा:\n\n```\n2025-05-02 10:43:53 INFO  Help - ऐसा लगता है कि आप पहली बार यहाँ प्रोग्राम शुरू कर रहे हैं।\n2025-05-02 10:43:53 INFO  Help - एक डिफ़ॉल्ट कॉन्फ़िग फाइल आपके_path\\config.yml पर स्कीमा एनोटेशन के साथ बनाई गई है।\n2025-05-02 10:43:53 INFO  Config - कॉन्फ़िग फाइल वॉचर आपके_path\\config.yml पर शुरू हो गया है।\n2025-05-02 10:43:53 INFO  LM Studio Server - LM Studio सर्वर 1234 पर शुरू हो गया है।\n2025-05-02 10:43:53 INFO  Ollama Server - Ollama सर्वर 11434 पर शुरू हो गया है।\n2025-05-02 10:43:53 INFO  Model List - मॉडल सूची लोड की गई: []\n```\n\nइसके बाद आप अपने प्रॉक्सी सर्वर को सेटअप करने के लिए कॉन्फ़िग फाइल को एडिट कर सकते हैं।\n\n## कॉन्फ़िग फाइल\n\nयह कॉन्फ़िग फाइल स्वचालित रूप से हॉट-रिलोड होती है जब भी आप इसमें बदलाव करते हैं। सर्वर के केवल प्रभावित हिस्से ही अपडेट होंगे।\n\nजब पहली बार कॉन्फ़िग फाइल जेनरेट होती है, तो यह स्कीमा एनोटेशन के साथ बनाई जाएगी। यह आपके एडिटर में ऑटो-कम्प्लीशन और चेकिंग प्रदान करेगा।",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "## Example config file\n\n```yaml\n# $schema: https://github.com/Stream29/ProxyAsLocalModel/raw/master/config_v3.schema.json\nlmStudio:\n  port: 1234 # This is default value\n  enabled: true # This is default value\n  host: 0.0.0.0 # This is default value\n  path: /your/path # Will be add before the original endpoints, default value is empty\nollama:\n  port: 11434 # This is default value\n  enabled: true # This is default value\n  host: 0.0.0.0 # This is default value\n  path: /your/path # Will be add before the original endpoints, default value is empty\nclient:\n  socketTimeout: 1919810 # Long.MAX_VALUE is default value, in milliseconds\n  connectionTimeout: 1919810 # Long.MAX_VALUE is default value, in milliseconds\n  requestTimeout: 1919810 # Long.MAX_VALUE is default value, in milliseconds\n  retry: 3 # This is default value\n  delayBeforeRetry: 1000 # This is default value, in milliseconds\n\napiProviders:\n  OpenAI:\n    type: OpenAi\n    baseUrl: https://api.openai.com/v1\n    apiKey: <your_api_key>\n    modelList:\n      - gpt-4o\n  Claude:\n    type: Claude\n    apiKey: <your_api_key>\n    modelList:\n      - claude-3-7-sonnet\n  Qwen:\n    type: DashScope\n    apiKey: <your_api_key>\n    modelList: # This is default value\n      - qwen-max\n      - qwen-plus\n      - qwen-turbo\n      - qwen-long\n  DeepSeek:\n    type: DeepSeek\n    apiKey: <your_api_key>\n    modelList: # This is default value\n      - deepseek-chat\n      - deepseek-reasoner\n  Mistral:\n    type: Mistral\n    apiKey: <your_api_key>\n    modelList: # This is default value\n      - codestral-latest\n      - mistral-large\n  SiliconFlow:\n    type: SiliconFlow\n    apiKey: <your_api_key>\n    modelList:\n      - Qwen/Qwen3-235B-A22B\n      - Pro/deepseek-ai/DeepSeek-V3\n      - THUDM/GLM-4-32B-0414\n  OpenRouter:\n    type: OpenRouter\n    apiKey: <your_api_key>\n    modelList:\n      - openai/gpt-4o\n  Gemini:\n    type: Gemini\n    apiKey: <your_api_key>\n    modelList:\n      - gemini-2.5-flash-preview-04-17\n```",
    "ContentSha": "70Ur2u1pGxwgBRWrkWendSuM8NT3qhqj6cqjS9POUPs=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## उदाहरण कॉन्फ़िग फ़ाइल\n\n```yaml\n# $schema: https://github.com/Stream29/ProxyAsLocalModel/raw/master/config_v3.schema.json\nlmStudio:\n  port: 1234 # यह डिफ़ॉल्ट मान है\n  enabled: true # यह डिफ़ॉल्ट मान है\n  host: 0.0.0.0 # यह डिफ़ॉल्ट मान है\n  path: /your/path # मूल एंडपॉइंट्स से पहले जोड़ा जाएगा, डिफ़ॉल्ट मान खाली है\nollama:\n  port: 11434 # यह डिफ़ॉल्ट मान है\n  enabled: true # यह डिफ़ॉल्ट मान है\n  host: 0.0.0.0 # यह डिफ़ॉल्ट मान है\n  path: /your/path # मूल एंडपॉइंट्स से पहले जोड़ा जाएगा, डिफ़ॉल्ट मान खाली है\nclient:\n  socketTimeout: 1919810 # Long.MAX_VALUE डिफ़ॉल्ट मान है, मिलीसेकंड में\n  connectionTimeout: 1919810 # Long.MAX_VALUE डिफ़ॉल्ट मान है, मिलीसेकंड में\n  requestTimeout: 1919810 # Long.MAX_VALUE डिफ़ॉल्ट मान है, मिलीसेकंड में\n  retry: 3 # यह डिफ़ॉल्ट मान है\n  delayBeforeRetry: 1000 # यह डिफ़ॉल्ट मान है, मिलीसेकंड में\n\napiProviders:\n  OpenAI:\n    type: OpenAi\n    baseUrl: https://api.openai.com/v1\n    apiKey: <your_api_key>\n    modelList:\n      - gpt-4o\n  Claude:\n    type: Claude\n    apiKey: <your_api_key>\n    modelList:\n      - claude-3-7-sonnet\n  Qwen:\n    type: DashScope\n    apiKey: <your_api_key>\n    modelList: # यह डिफ़ॉल्ट मान है\n      - qwen-max\n      - qwen-plus\n      - qwen-turbo\n      - qwen-long\n  DeepSeek:\n    type: DeepSeek\n    apiKey: <your_api_key>\n    modelList: # यह डिफ़ॉल्ट मान है\n      - deepseek-chat\n      - deepseek-reasoner\n  Mistral:\n    type: Mistral\n    apiKey: <your_api_key>\n    modelList: # यह डिफ़ॉल्ट मान है\n      - codestral-latest\n      - mistral-large\n  SiliconFlow:\n    type: SiliconFlow\n    apiKey: <your_api_key>\n    modelList:\n      - Qwen/Qwen3-235B-A22B\n      - Pro/deepseek-ai/DeepSeek-V3\n      - THUDM/GLM-4-32B-0414\n  OpenRouter:\n    type: OpenRouter\n    apiKey: <your_api_key>\n    modelList:\n      - openai/gpt-4o\n  Gemini:\n    type: Gemini\n    apiKey: <your_api_key>\n    modelList:\n      - gemini-2.5-flash-preview-04-17\n```",
    "Status": "ok"
  }
]