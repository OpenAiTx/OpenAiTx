{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "```markdown\n    return data;\n  }],\n\n  // `transformResponse` 允许在响应数据传递到 then/catch 之前对其进行更改\n  transformResponse: [function (data) {\n    // 可以对数据进行任意转换\n\n    return data;\n  }],\n\n  // `headers` 是要发送的自定义请求头\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` 是随请求一起发送的 URL 参数\n  // 必须为普通对象或 URLSearchParams 对象\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` 是一个可选配置，允许你自定义 `params` 的序列化方式。\n  paramsSerializer: {\n\n    // 自定义编码器函数，按迭代方式发送键/值对。\n    encode?: (param: string): string => { /* 在这里进行自定义操作并返回转换后的字符串 */ }, \n    \n    // 对整个参数进行自定义序列化的函数。允许用户模拟 1.x 之前的行为。\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // 配置参数中数组索引的格式化方式。\n    indexes: false // 三种可选方式：(1) indexes: null（无括号），(2)（默认）indexes: false（空括号），(3) indexes: true（带索引的括号）。\n  },\n\n  // `data` 是作为请求体发送的数据\n  // 仅适用于 'PUT'、'POST'、'DELETE' 和 'PATCH' 请求方法\n  // 当未设置 `transformRequest` 时，必须为以下类型之一：\n  // - 字符串、普通对象、ArrayBuffer、ArrayBufferView、URLSearchParams\n  // - 仅浏览器：FormData、File、Blob\n  // - 仅 Node：Stream、Buffer、FormData（form-data 包）\n  data: {\n    firstName: 'Fred'\n  },\n\n  // 发送数据到请求体的语法替代方式\n  // post 方法\n  // 只发送值，不发送键\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` 指定请求超时前的毫秒数\n  // 如果请求超出 `timeout` 时间，请求会被中止\n  timeout: 1000, // 默认值为 `0`（无超时）\n\n  // `withCredentials` 指示是否应使用凭证进行跨站点的访问控制请求\n  withCredentials: false, // 默认值\n\n  // `adapter` 允许自定义请求处理，使测试更加容易。\n  // 返回一个 promise 并提供一个有效的响应（参见 lib/adapters/README.md）\n  adapter: function (config) {\n    /* ... */\n  },\n  // 你也可以设置内置适配器的名称，或者提供一个包含名称的数组\n  // 以便在环境中选择第一个可用的\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` 表示应使用 HTTP Basic 认证，并提供凭据。\n  // 这将设置一个 `Authorization` 请求头，覆盖你通过 `headers` 设置的任何已有\n  // `Authorization` 自定义请求头。\n  // 请注意，通过此参数仅可配置 HTTP Basic 认证。\n  // 对于 Bearer 等令牌，请使用 `Authorization` 自定义请求头。\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` 指示服务器响应的数据类型\n  // 可选项为：'arraybuffer'、'document'、'json'、'text'、'stream'\n  //   仅浏览器：'blob'\n  responseType: 'json', // 默认值\n\n  // `responseEncoding` 指定用于解码响应的编码（仅限 Node.js）\n  // 注意：对于 `responseType` 为 'stream' 或客户端请求时会被忽略\n  // 可选项为：'ascii'、'ASCII'、'ansi'、'ANSI'、'binary'、'BINARY'、'base64'、'BASE64'、'base64url'、\n  // 'BASE64URL'、'hex'、'HEX'、'latin1'、'LATIN1'、'ucs-2'、'UCS-2'、'ucs2'、'UCS2'、'utf-8'、'UTF-8'、\n  // 'utf8'、'UTF8'、'utf16le'、'UTF16LE'\n  responseEncoding: 'utf8', // 默认值\n\n  // `xsrfCookieName` 用作 xsrf token 值的 cookie 名称\n  xsrfCookieName: 'XSRF-TOKEN', // 默认值\n\n  // `xsrfHeaderName` 承载 xsrf token 值的 http 头名称\n  xsrfHeaderName: 'X-XSRF-TOKEN', // 默认值\n    \n  // `undefined`（默认）- 仅对同源请求设置 XSRF 头\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` 允许处理上传的进度事件\n  // 浏览器 & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {\n```",
  "status": "ok"
}