{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Remarque :** le paramètre options (contenant les propriétés `synchronous` et `runWhen`) n'est actuellement pris en charge que pour les intercepteurs de requête.\n\n### Intercepteurs Multiples\n\nSi vous ajoutez plusieurs intercepteurs de réponse\net lorsque la réponse est remplie\n- alors chaque intercepteur est exécuté\n- puis ils sont exécutés dans l'ordre dans lequel ils ont été ajoutés\n- ensuite, seul le résultat du dernier intercepteur est retourné\n- chaque intercepteur reçoit le résultat de son prédécesseur\n- et si l'intercepteur fulfillment lève une exception\n    - alors l'intercepteur fulfillment suivant n'est pas appelé\n    - alors l'intercepteur de rejet suivant est appelé\n    - une fois capturé, un autre intercepteur fulfillment suivant est de nouveau appelé (comme dans une chaîne de promesses).\n\nLisez [les tests d'intercepteurs](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) pour voir tout cela en code.\n\n## Types d'Erreurs\n\nIl existe différents messages d'erreurs axios qui peuvent apparaître et fournir des informations de base sur la spécificité de l'erreur et où des opportunités de débogage peuvent se présenter.\n\nLa structure générale des erreurs axios est la suivante :\n| Propriété  | Définition  |\n| -------- | ----------  |\n| message  | Un résumé rapide du message d'erreur et du statut avec lequel il a échoué. |\n| name     | Définit l'origine de l'erreur. Pour axios, ce sera toujours 'AxiosError'. |\n| stack    | Fournit la trace de la pile de l'erreur. | \n| config   | Un objet de configuration axios avec des configurations d'instance spécifiques définies par l'utilisateur lors de la requête |\n| code     | Représente une erreur identifiée par axios. Le tableau ci-dessous liste les définitions spécifiques pour les erreurs internes axios.  |\n| status   | Code de statut de réponse HTTP. Voir [ici](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) pour la signification des codes de statut HTTP courants. \n\nCi-dessous une liste des erreurs potentielles identifiées par axios :\n\n| Code                      | Définition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Valeur invalide fournie dans la configuration axios.                                                                                                                                                                                                                                                                                                                                           |\n| ERR_BAD_OPTION            | Option invalide fournie dans la configuration axios.                                                                                                                                                                                                                                                                                                                                           |\n| ERR_NOT_SUPPORT           | Fonctionnalité ou méthode non prise en charge dans l'environnement axios actuel.                                                                                                                                                                                                                                                                        |\n| ERR_DEPRECATED            | Fonctionnalité ou méthode obsolète utilisée dans axios.                                                                                                                                                                                                                                                                                                 |\n| ERR_INVALID_URL           | URL invalide fournie pour la requête axios.                                                                                                                                                                                                                                                                                                             |\n| ECONNABORTED              | Indique généralement que la requête a expiré (sauf si `transitional.clarifyTimeoutError` est défini) ou a été interrompue par le navigateur ou son plugin.                                                                                                                                                                                             |\n| ERR_CANCELED              | Fonctionnalité ou méthode explicitement annulée par l'utilisateur via un AbortSignal (ou un CancelToken).                                                                                                                                                                                                                                              |\n| ETIMEDOUT                 | La requête a expiré en dépassant la limite de temps par défaut d'axios. `transitional.clarifyTimeoutError` doit être défini à `true`, sinon une erreur générique `ECONNABORTED` sera levée à la place.                                                                                                                                                 |\n| ERR_NETWORK               | Problème lié au réseau. Dans le navigateur, cette erreur peut également être causée par une violation de la politique [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) ou de [contenu mixte](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content). Le navigateur n'autorise pas le code JS à clarifier la véritable raison de l'erreur causée par des questions de sécurité, veuillez donc vérifier la console. |\n| ERR_FR_TOO_MANY_REDIRECTS | La requête est redirigée trop de fois ; dépasse le nombre maximal de redirections spécifié dans la configuration axios.                                                                                                                                                                                                                                 |\n| ERR_BAD_RESPONSE          | La réponse ne peut pas être correctement analysée ou est dans un format inattendu. Généralement lié à une réponse avec un code de statut `5xx`.                                                                                                                                                                                                      |\n| ERR_BAD_REQUEST           | La requête a un format inattendu ou des paramètres obligatoires manquants. Généralement lié à une réponse avec un code de statut `4xx`.                                                                                                                                                                                                               |\n\n## Gestion des Erreurs\n\nLe comportement par défaut est de rejeter toute réponse qui retourne un code de statut hors de la plage 2xx et de la traiter comme une erreur.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // La requête a été faite et le serveur a répondu avec un code de statut\n      // qui est hors de la plage 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // La requête a été faite mais aucune réponse n'a été reçue\n      // `error.request` est une instance de XMLHttpRequest dans le navigateur et une instance de\n      // http.ClientRequest dans node.js\n      console.log(error.request);\n    } else {\n      // Une erreur s'est produite lors de la configuration de la requête qui a déclenché une erreur\n      console.log('Erreur', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nEn utilisant l'option de configuration `validateStatus`, vous pouvez remplacer la condition par défaut (status >= 200 && status < 300) et définir le(s) code(s) HTTP qui doivent lever une erreur.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Résoudre uniquement si le code de statut est inférieur à 500\n  }\n})\n```\n\nEn utilisant `toJSON`, vous obtenez un objet avec plus d'informations sur l'erreur HTTP.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}