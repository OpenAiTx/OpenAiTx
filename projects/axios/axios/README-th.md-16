{
  "id": 16,
  "origin": "### AxiosHeaders#delete(header, matcher?)\n\n```\ndelete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n```\n\nReturns `true` if at least one header has been removed.\n\n### AxiosHeaders#clear(matcher?)\n\n```\nclear(matcher?: AxiosHeaderMatcher): boolean;\n```\n\nRemoves all headers. \nUnlike the `delete` method matcher, this optional matcher will be used to match against the header name rather than the value.\n\n```ts\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\nReturns `true` if at least one header has been cleared.\n\n### AxiosHeaders#normalize(format);\n\nIf the headers object was changed directly, it can have duplicates with the same name but in different cases.\nThis method normalizes the headers object by combining duplicate keys into one.\nAxios uses this method internally after calling each interceptor.\nSet `format` to true for converting headers name to lowercase and capitalize the initial letters (`cOntEnt-type` => `Content-Type`)\n\n```js\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\nReturns `this`.\n\n### AxiosHeaders#concat(...targets)\n\n```\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n```\n\nMerges the instance with targets into a new `AxiosHeaders` instance. If the target is a string, it will be parsed as RAW HTTP headers.\n\nReturns a new `AxiosHeaders` instance.\n\n### AxiosHeaders#toJSON(asStrings?)\n\n````\ntoJSON(asStrings?: boolean): RawAxiosHeaders;\n````\n\nResolve all internal headers values into a new null prototype object. \nSet `asStrings` to true to resolve arrays as a string containing all elements, separated by commas.\n\n### AxiosHeaders.from(thing?)\n\n````\nfrom(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n````\n\nReturns a new `AxiosHeaders` instance created from the raw headers passed in,\nor simply returns the given headers object if it's an `AxiosHeaders` instance.\n\n### AxiosHeaders.concat(...targets)\n\n````\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n````\n\nReturns a new `AxiosHeaders` instance created by merging the target objects.\n\n### Shortcuts\n\nThe following shortcuts are available:\n\n- `setContentType`, `getContentType`, `hasContentType`\n\n- `setContentLength`, `getContentLength`, `hasContentLength`\n\n- `setAccept`, `getAccept`, `hasAccept`\n\n- `setUserAgent`, `getUserAgent`, `hasUserAgent`",
  "origin_sha": "4qmvmNfwyVCT9uHZjtTFtv2Zx71NrACZgX9WsiFZ/kg=",
  "translate": "### AxiosHeaders#delete(header, matcher?)\n\n```\ndelete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n```\n\nคืนค่า `true` หากมี header อย่างน้อยหนึ่งรายการที่ถูกลบออกไป\n\n### AxiosHeaders#clear(matcher?)\n\n```\nclear(matcher?: AxiosHeaderMatcher): boolean;\n```\n\nลบ header ทั้งหมด  \nแตกต่างจาก matcher ของเมธอด `delete` โดย matcher ตัวเลือกนี้จะถูกใช้เพื่อจับกับชื่อของ header แทนที่จะเป็นค่าของมัน\n\n```ts\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\nคืนค่า `true` หากมี header อย่างน้อยหนึ่งรายการที่ถูกล้างออกไป\n\n### AxiosHeaders#normalize(format);\n\nหากมีการเปลี่ยนแปลงวัตถุ headers โดยตรง อาจมีชื่อซ้ำกันแต่มีตัวพิมพ์ใหญ่-เล็กต่างกัน  \nเมธอดนี้จะทำการปรับ headers ให้อยู่ในรูปแบบที่เหมาะสมโดยรวมคีย์ที่ซ้ำกันให้เหลืออันเดียว  \nAxios ใช้เมธอดนี้ภายในหลังจากเรียกแต่ละ interceptor  \nตั้งค่า `format` เป็น true เพื่อแปลงชื่อ header ให้เป็นตัวพิมพ์เล็กและขึ้นต้นแต่ละคำด้วยตัวพิมพ์ใหญ่ (`cOntEnt-type` => `Content-Type`)\n\n```js\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\nคืนค่า `this`\n\n### AxiosHeaders#concat(...targets)\n\n```\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n```\n\nรวมอินสแตนซ์นี้กับ targets เข้าเป็นอินสแตนซ์ `AxiosHeaders` ใหม่ หาก target เป็น string จะถูกแปลงเป็น RAW HTTP headers\n\nคืนค่าอินสแตนซ์ `AxiosHeaders` ใหม่\n\n### AxiosHeaders#toJSON(asStrings?)\n\n````\ntoJSON(asStrings?: boolean): RawAxiosHeaders;\n````\n\nแปลงค่าของ header ทั้งหมดภายในเป็นอ็อบเจกต์ใหม่ที่มี prototype เป็น null  \nตั้งค่า `asStrings` เป็น true เพื่อแปลง array ให้เป็นสตริงที่ประกอบด้วยทุก element คั่นด้วยเครื่องหมายจุลภาค\n\n### AxiosHeaders.from(thing?)\n\n````\nfrom(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n````\n\nคืนค่าอินสแตนซ์ `AxiosHeaders` ใหม่ที่ถูกสร้างจาก raw headers ที่ส่งเข้ามา  \nหรือคืนค่าวัตถุ headers ที่ให้มาโดยตรงหากเป็นอินสแตนซ์ของ `AxiosHeaders`\n\n### AxiosHeaders.concat(...targets)\n\n````\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n````\n\nคืนค่าอินสแตนซ์ `AxiosHeaders` ใหม่ที่ถูกสร้างจากการรวมวัตถุเป้าหมายเข้าด้วยกัน\n\n### ทางลัด (Shortcuts)\n\nมีทางลัดดังต่อไปนี้:\n\n- `setContentType`, `getContentType`, `hasContentType`\n\n- `setContentLength`, `getContentLength`, `hasContentLength`\n\n- `setAccept`, `getAccept`, `hasAccept`\n\n- `setUserAgent`, `getUserAgent`, `hasUserAgent`",
  "status": "ok"
}