{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **注意：** 目前，options 参数（包含 `synchronous` 和 `runWhen` 属性）仅支持请求拦截器。\n\n### 多个拦截器\n\n假设你添加了多个响应拦截器，\n当响应被成功处理时：\n- 每个拦截器都会被执行\n- 它们按照添加顺序依次执行\n- 只有最后一个拦截器的结果会被返回\n- 每个拦截器都会接收其前一个拦截器的结果\n- 当 fulfillment-interceptor 抛出异常时\n    - 后续的 fulfillment-interceptor 不会被调用\n    - 后续的 rejection-interceptor 会被调用\n    - 一旦被捕获，下一个 fulfill-interceptor 会再次被调用（就像在 promise 链中一样）。\n\n查看[拦截器测试代码](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js)以了解所有相关实现。\n\n## 错误类型\n\naxios 可能会出现多种不同的错误信息，这些信息可以为错误的具体原因和调试提供基本信息。\n\naxios 错误的一般结构如下：\n| 属性      | 定义  |\n| -------- | ----------  |\n| message  | 错误信息的简要摘要以及失败的状态码。 |\n| name     | 定义错误的来源。对于 axios，这里始终是 'AxiosError'。 |\n| stack    | 提供错误的堆栈追踪。 | \n| config   | 一个 axios 配置对象，包含用户请求时定义的具体实例配置。 |\n| code     | 表示 axios 识别的错误。下表列出了 axios 内部错误的具体定义。  |\n| status   | HTTP 响应状态码。常见 HTTP 响应状态码的含义见[此处](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)。\n\n以下是 axios 可能识别的错误列表：\n\n| 代码                      | 定义                                                                                                                                                                                                                                                                                                                                                                                      |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | 在 axios 配置中提供了无效的值。                                                                                                                                                                                                                                                                                                                                                           |\n| ERR_BAD_OPTION            | 在 axios 配置中提供了无效的选项。                                                                                                                                                                                                                                                                                                                                                         |\n| ERR_NOT_SUPPORT           | 当前 axios 环境下不支持的功能或方法。                                                                                                                                                                                                                                                                                                                                                      |\n| ERR_DEPRECATED            | 使用了 axios 已废弃的功能或方法。                                                                                                                                                                                                                                                                                                                                                        |\n| ERR_INVALID_URL           | 为 axios 请求提供了无效的 URL。                                                                                                                                                                                                                                                                                                                                                          |\n| ECONNABORTED              | 通常表示请求超时（除非设置了 `transitional.clarifyTimeoutError`），或者被浏览器或其插件中止。                                                                                                                                                                                                                                                      |\n| ERR_CANCELED              | 功能或方法被用户通过 AbortSignal（或 CancelToken）显式取消。                                                                                                                                                                                                                                                                                      |\n| ETIMEDOUT                 | 请求因超出 axios 默认时间限制而超时。必须将 `transitional.clarifyTimeoutError` 设置为 `true`，否则会抛出通用的 `ECONNABORTED` 错误。                                                                                                                                                                                                               |\n| ERR_NETWORK               | 与网络相关的问题。在浏览器中，该错误也可能由 [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) 或 [混合内容](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) 策略违规引起。浏览器不会允许 JS 代码明确说明由安全问题引起的错误的真实原因，请检查控制台。                      |\n| ERR_FR_TOO_MANY_REDIRECTS | 请求重定向次数过多，超过了 axios 配置中指定的最大重定向次数。                                                                                                                                                                                                                                                                                    |\n| ERR_BAD_RESPONSE          | 响应无法被正确解析或格式不符合预期。通常与 `5xx` 状态码的响应相关。                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_REQUEST           | 请求格式异常或缺少必要参数。通常与 `4xx` 状态码的响应相关。                                                                                                                                                                                                                                                                                         |\n\n## 错误处理\n\n默认行为是拒绝所有返回状态码不在 2xx 范围内的响应，并将其视为错误。\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // 请求已发出，服务器响应了状态码\n      // 状态码超出了 2xx 范围\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // 请求已发出，但没有收到响应\n      // `error.request` 在浏览器中是 XMLHttpRequest 的实例，在 node.js 中是 http.ClientRequest 的实例\n      console.log(error.request);\n    } else {\n      // 请求设置过程中发生错误\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n通过使用 `validateStatus` 配置选项，你可以覆盖默认条件（status >= 200 && status < 300），自定义哪些 HTTP 状态码会抛出错误。\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // 只有状态码小于 500 时才会被处理为成功\n  }\n})\n```\n\n使用 `toJSON` 可以获得包含更多 HTTP 错误信息的对象。\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}