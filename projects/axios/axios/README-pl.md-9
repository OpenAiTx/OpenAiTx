{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Uwaga:** parametr options (posiadający właściwości `synchronous` i `runWhen`) jest obecnie obsługiwany tylko dla interceptorów żądań.\n\n### Wiele interceptorów\n\nZakładając, że dodasz wiele interceptorów odpowiedzi\ni gdy odpowiedź zostanie spełniona:\n- wtedy każdy interceptor jest wykonywany\n- wtedy są wykonywane w kolejności, w jakiej zostały dodane\n- wtedy zwracany jest tylko wynik ostatniego interceptora\n- wtedy każdy interceptor otrzymuje wynik swojego poprzednika\n- a gdy interceptor do spełnienia rzuci wyjątek\n    - wtedy kolejny interceptor do spełnienia nie jest wywoływany\n    - wtedy wywoływany jest kolejny interceptor odrzucenia\n    - po złapaniu, kolejny interceptor do spełnienia jest ponownie wywoływany (tak jak w łańcuchu promes).\n\nPrzeczytaj [testy interceptorów](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js), aby zobaczyć to wszystko w kodzie.\n\n## Typy błędów\n\nIstnieje wiele różnych komunikatów o błędach axios, które mogą dostarczyć podstawowych informacji na temat szczegółów błędu i możliwości jego debugowania.\n\nOgólna struktura błędów axios jest następująca:\n| Właściwość  | Definicja  |\n| -------- | ----------  |\n| message  | Krótkie podsumowanie komunikatu błędu oraz statusu, z którym wystąpił. |\n| name     | Określa, skąd pochodzi błąd. Dla axios będzie to zawsze 'AxiosError'. |\n| stack    | Dostarcza ślad stosu błędu. | \n| config   | Obiekt konfiguracyjny axios z określonymi przez użytkownika ustawieniami instancji z momentu wysłania żądania |\n| code     | Reprezentuje zidentyfikowany przez axios błąd. Poniższa tabela zawiera szczegółowe definicje wewnętrznych błędów axios.  |\n| status   | Kod statusu odpowiedzi HTTP. Zobacz [tutaj](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) znaczenia popularnych kodów statusu HTTP. \n\nPoniżej znajduje się lista potencjalnych błędów zidentyfikowanych przez axios:\n\n| Kod                      | Definicja                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Podano nieprawidłową wartość w konfiguracji axios.                                                                                                                                                                                                                                                                                                                                            |\n| ERR_BAD_OPTION            | Podano nieprawidłową opcję w konfiguracji axios.                                                                                                                                                                                                                                                                                                                                              |\n| ERR_NOT_SUPPORT           | Funkcja lub metoda nie jest obsługiwana w bieżącym środowisku axios.                                                                                                                                                                                                                                                                                                                         |\n| ERR_DEPRECATED            | Użyto przestarzałej funkcji lub metody w axios.                                                                                                                                                                                                                                                                                                                                              |\n| ERR_INVALID_URL           | Podano nieprawidłowy URL dla żądania axios.                                                                                                                                                                                                                                                                                                                                                  |\n| ECONNABORTED              | Zazwyczaj wskazuje, że żądanie zostało przerwane z powodu przekroczenia limitu czasu (chyba że ustawiono `transitional.clarifyTimeoutError`) lub zostało przerwane przez przeglądarkę lub jej wtyczkę.                                                                                                                                                                                      |\n| ERR_CANCELED              | Funkcja lub metoda została anulowana przez użytkownika przy użyciu AbortSignal (lub CancelToken).                                                                                                                                                                                                                                                                                            |\n| ETIMEDOUT                 | Przekroczono limit czasu żądania z powodu przekroczenia domyślnego limitu czasu axios. `transitional.clarifyTimeoutError` musi być ustawione na `true`, w przeciwnym razie zostanie rzucony ogólny błąd `ECONNABORTED`.                                                                                                                                                                      |\n| ERR_NETWORK               | Problem związany z siecią. W przeglądarce ten błąd może być również spowodowany naruszeniem polityki [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) lub [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content). Przeglądarka nie pozwala kodowi JS na wyjaśnienie rzeczywistej przyczyny błędu spowodowanego problemami z bezpieczeństwem, więc sprawdź konsolę. |\n| ERR_FR_TOO_MANY_REDIRECTS | Żądanie zostało przekierowane zbyt wiele razy; przekroczono maksymalną liczbę przekierowań określoną w konfiguracji axios.                                                                                                                                                                                                                                                                   |\n| ERR_BAD_RESPONSE          | Odpowiedź nie może zostać poprawnie sparsowana lub ma nieoczekiwany format. Zwykle związane z odpowiedzią o statusie `5xx`.                                                                                                                                                                                                                                                                  |\n| ERR_BAD_REQUEST           | Żądanie ma nieoczekiwany format lub brakuje wymaganych parametrów. Zwykle związane z odpowiedzią o statusie `4xx`.                                                                                                                                                                                                                                                                            |\n\n## Obsługa błędów\n\nDomyślne zachowanie polega na odrzuceniu każdej odpowiedzi, która zwraca kod statusu spoza zakresu 2xx i traktowaniu jej jako błąd.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // Żądanie zostało wykonane i serwer odpowiedział kodem statusu\n      // spoza zakresu 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // Żądanie zostało wykonane, ale nie otrzymano odpowiedzi\n      // `error.request` to instancja XMLHttpRequest w przeglądarce oraz instancja\n      // http.ClientRequest w node.js\n      console.log(error.request);\n    } else {\n      // Wystąpił błąd podczas przygotowywania żądania\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUżywając opcji konfiguracyjnej `validateStatus`, możesz nadpisać domyślne warunki (status >= 200 && status < 300) i zdefiniować kod(y) HTTP, które powinny generować błąd.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Rozwiązuj tylko jeśli kod statusu jest mniejszy niż 500\n  }\n})\n```\n\nUżywając `toJSON` otrzymasz obiekt z większą ilością informacji o błędzie HTTP.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}