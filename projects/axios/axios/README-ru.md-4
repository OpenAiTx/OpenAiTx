{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// GET-запрос для удалённого изображения в node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Отправить GET-запрос (метод по умолчанию)\naxios('/user/12345');\n```\n\n### Алиасы методов запроса\n\nДля удобства предоставлены алиасы для всех распространённых методов запросов.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### ПРИМЕЧАНИЕ\nПри использовании алиасов методы `url`, `method` и `data` не нужно указывать в config.\n\n### Конкурентность (Устарело)\nПожалуйста, используйте `Promise.all` вместо функций ниже.\n\nВспомогательные функции для работы с параллельными запросами.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Создание экземпляра\n\nВы можете создать новый экземпляр axios с пользовательским конфигом.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Методы экземпляра\n\nДоступные методы экземпляра перечислены ниже. Указанный config будет объединён с конфигом экземпляра.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Конфигурация запроса\n\nЭто доступные параметры конфигурации для выполнения запросов. Только `url` является обязательным. Если `method` не указан, запросы по умолчанию будут использовать `GET`.\n\n```js\n{\n  // `url` — это URL сервера, который будет использоваться для запроса\n  url: '/user',\n\n  // `method` — это HTTP-метод, который будет использоваться при выполнении запроса\n  method: 'get', // по умолчанию\n\n  // `baseURL` будет добавлен в начало `url`, если `url` не абсолютный и опция `allowAbsoluteUrls` установлена в true.\n  // Удобно задавать `baseURL` для экземпляра axios, чтобы передавать относительные URL\n  // в методы этого экземпляра.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` определяет, будут ли абсолютные URL переопределять настроенный `baseUrl`.\n  // Если установлено в true (по умолчанию), абсолютные значения для `url` будут переопределять `baseUrl`.\n  // Если установлено в false, абсолютные значения для `url` всегда будут иметь префикс `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` позволяет изменять данные запроса перед их отправкой на сервер\n  // Применяется только для методов 'PUT', 'POST', 'PATCH' и 'DELETE'\n  // Последняя функция в массиве должна возвращать строку или экземпляр Buffer, ArrayBuffer,\n  // FormData или Stream\n  // Вы можете модифицировать объект заголовков.\n  transformRequest: [function (data, headers) {\n    // Выполните любые преобразования данных\n```",
  "status": "ok"
}