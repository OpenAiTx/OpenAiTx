{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // см. также https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // по умолчанию\n\n  // переходные опции для обратной совместимости, которые могут быть удалены в новых версиях\n  transitional: {\n    // тихий режим парсинга JSON\n    // `true`  - игнорировать ошибки парсинга JSON и устанавливать response.data в null, если парсинг не удался (старое поведение)\n    // `false` - выбрасывать SyntaxError, если парсинг JSON не удался (Примечание: responseType должен быть установлен в 'json')\n    silentJSONParsing: true, // значение по умолчанию для текущей версии Axios\n\n    // пытаться парсить строку ответа как JSON, даже если `responseType` не 'json'\n    forcedJSONParsing: true,\n\n    // выбрасывать ошибку ETIMEDOUT вместо общей ECONNABORTED при тайм-ауте запроса\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // Класс FormData, который будет использоваться для автоматической сериализации данных запроса в объект FormData\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // пользовательская функция-обходчик для сериализации значений формы\n      dots: boolean, // использовать точки вместо формата скобок\n      metaTokens: boolean, // сохранять специальные окончания, такие как {} в ключе параметра\n      indexes: boolean, // формат индексов массива: null - без скобок, false - пустые скобки, true - скобки с индексами\n  },\n\n  // только для http-адаптера (node.js)\n  maxRate: [\n    100 * 1024, // лимит загрузки 100КБ/с,\n    100 * 1024  // лимит скачивания 100КБ/с\n  ]\n}\n```\n\n## Схема ответа\n\nОтвет на запрос содержит следующую информацию.\n\n```js\n{\n  // `data` — это ответ, предоставленный сервером\n  data: {},\n\n  // `status` — HTTP-код статуса из ответа сервера\n  status: 200,\n\n  // `statusText` — HTTP-сообщение статуса из ответа сервера\n  statusText: 'OK',\n\n  // `headers` — HTTP-заголовки, с которыми ответил сервер\n  // Все имена заголовков в нижнем регистре и доступны через скобочную нотацию.\n  // Пример: `response.headers['content-type']`\n  headers: {},\n\n  // `config` — конфигурация, переданная в `axios` для этого запроса\n  config: {},\n\n  // `request` — запрос, который сгенерировал этот ответ\n  // Это последний экземпляр ClientRequest в node.js (при редиректах)\n  // и экземпляр XMLHttpRequest в браузере\n  request: {}\n}\n```\n\nПри использовании `then` вы получите ответ следующим образом:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nПри использовании `catch` или передачи [обработчика отклонения](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) в качестве второго параметра метода `then`, ответ будет доступен через объект `error`, как описано в разделе [Обработка ошибок](#handling-errors).\n\n## Значения по умолчанию для конфигурации\n\nВы можете указать значения конфигурации по умолчанию, которые будут применяться ко всем запросам.\n\n### Глобальные значения по умолчанию для axios\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Важно: если axios используется с несколькими доменами, AUTH_TOKEN будет отправляться на все из них.\n// См. ниже пример использования пользовательских значений по умолчанию для экземпляра.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Пользовательские значения по умолчанию для экземпляра\n```",
  "status": "ok"
}