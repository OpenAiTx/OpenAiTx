{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "    return data;\n  }],\n\n  // `transformResponse` позволяет изменять данные ответа до того,\n  // как они будут переданы в then/catch\n  transformResponse: [function (data) {\n    // Выполните любые необходимые преобразования данных\n\n    return data;\n  }],\n\n  // `headers` — это пользовательские заголовки, которые будут отправлены\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` — это параметры URL, которые будут отправлены с запросом\n  // Должен быть простым объектом или объектом URLSearchParams\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` — это необязательная настройка, позволяющая кастомизировать сериализацию `params`.\n  paramsSerializer: {\n\n    // Пользовательская функция кодирования, отправляющая пары ключ/значение итеративно.\n    encode?: (param: string): string => { /* Выполните необходимые операции и верните преобразованную строку */ }, \n    \n    // Пользовательская функция сериализации для всех параметров. Позволяет пользователю имитировать поведение до версии 1.x.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Конфигурация для форматирования индексов массивов в параметрах.\n    indexes: false // Доступны три варианта: (1) indexes: null (без скобок), (2) (по умолчанию) indexes: false (пустые скобки), (3) indexes: true (скобки с индексами).    \n  },\n\n  // `data` — это данные, которые будут отправлены в теле запроса\n  // Применяется только для методов запросов 'PUT', 'POST', 'DELETE' и 'PATCH'\n  // Если `transformRequest` не задан, должен быть одним из следующих типов:\n  // - строка, простой объект, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Только для браузера: FormData, File, Blob\n  // - Только для Node: Stream, Buffer, FormData (пакет form-data)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // альтернативный синтаксис для отправки данных в тело запроса\n  // метод post\n  // отправляется только значение, а не ключ\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` задает количество миллисекунд до истечения времени ожидания запроса.\n  // Если запрос занимает больше времени, чем указано в `timeout`, он будет прерван.\n  timeout: 1000, // по умолчанию `0` (без тайм-аута)\n\n  // `withCredentials` указывает, должны ли кросс-сайтовые запросы Access-Control\n  // выполняться с использованием учетных данных\n  withCredentials: false, // по умолчанию\n\n  // `adapter` позволяет реализовать пользовательскую обработку запросов, что облегчает тестирование.\n  // Верните promise и предоставьте допустимый ответ (см. lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Также можно указать имя встроенного адаптера или предоставить массив с их именами,\n  // чтобы выбрать первый доступный в окружении\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` указывает, что должна использоваться HTTP Basic аутентификация, и предоставляет учетные данные.\n  // Это установит заголовок `Authorization`, перезаписав любые другие заголовки\n  // `Authorization`, которые вы устанавливали через `headers`.\n  // Обратите внимание, что только HTTP Basic auth настраивается через этот параметр.\n  // Для Bearer-токенов и других случаев используйте пользовательские заголовки `Authorization`.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` указывает тип данных, с которыми сервер ответит\n  // варианты: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   только для браузера: 'blob'\n  responseType: 'json', // по умолчанию\n\n  // `responseEncoding` указывает кодировку для декодирования ответов (только Node.js)\n  // Примечание: игнорируется для `responseType` со значением 'stream' или клиентских запросов\n  // варианты: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // по умолчанию\n\n  // `xsrfCookieName` — имя cookie, используемого в качестве значения xsrf-токена\n  xsrfCookieName: 'XSRF-TOKEN', // по умолчанию\n\n  // `xsrfHeaderName` — имя HTTP-заголовка, который содержит значение xsrf-токена\n  xsrfHeaderName: 'X-XSRF-TOKEN', // по умолчанию\n    \n  // `undefined` (по умолчанию) — устанавливать XSRF-заголовок только для запросов к тому же источнику\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` позволяет обрабатывать события прогресса загрузки\n  // браузер и node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "status": "ok"
}