{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **‚ö†Ô∏è Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## üÜï Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## üÜï AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "```js\n      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // velocidad de descarga en bytes\n      download: true; // indicador de descarga\n    }*/\n  }\n});  \n```\n\nTambi√©n puedes rastrear el progreso de carga/descarga de streams en node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // evita almacenar en b√∫fer todo el stream\n});\n````\n\n> **Nota:**\n> Actualmente no se admite capturar el progreso de carga de FormData en entornos node.js.\n\n> **‚ö†Ô∏è Advertencia**\n> Se recomienda deshabilitar las redirecciones configurando maxRedirects: 0 para cargar el stream en el entorno **node.js**,\n> ya que el paquete follow-redirects almacenar√° en b√∫fer todo el stream en RAM sin seguir el algoritmo de \"backpressure\".\n\n\n## üÜï Limitaci√≥n de velocidad\n\nLos l√≠mites de velocidad de descarga y carga solo se pueden establecer para el adaptador http (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Subida [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // l√≠mite de 100KB/s\n});\n```\n\n## üÜï AxiosHeaders\n\nAxios tiene su propia clase `AxiosHeaders` para manipular encabezados usando una API similar a Map que garantiza el trabajo sin distinci√≥n de may√∫sculas y min√∫sculas.\nAunque HTTP no distingue entre may√∫sculas y min√∫sculas en los encabezados, Axios conservar√° la may√∫scula original del encabezado por razones de estilo\ny como soluci√≥n alternativa cuando los servidores consideran err√≥neamente la may√∫scula del encabezado.\nEl m√©todo antiguo de manipular directamente el objeto headers sigue estando disponible, pero est√° obsoleto y no se recomienda para uso futuro.\n\n### Trabajando con encabezados\n\nUna instancia del objeto AxiosHeaders puede contener diferentes tipos de valores internos que controlan la l√≥gica de establecimiento y fusi√≥n.\nEl objeto final de encabezados con valores de tipo string se obtiene en Axios llamando al m√©todo `toJSON`.\n\n> Nota: Por JSON aqu√≠ nos referimos a un objeto que consiste solo en valores de tipo string destinados a ser enviados por la red.\n\nEl valor del encabezado puede ser uno de los siguientes tipos:\n- `string` - valor de tipo cadena normal que se enviar√° al servidor\n- `null` - omite el encabezado al convertir a JSON\n- `false` - omite el encabezado al convertir a JSON, adem√°s indica que el m√©todo `set` debe llamarse con la opci√≥n `rewrite` establecida en `true`\n  para sobrescribir este valor (Axios utiliza esto internamente para permitir a los usuarios optar por no instalar ciertos encabezados como `User-Agent` o `Content-Type`)\n- `undefined` - el valor no est√° establecido\n\n> Nota: Se considera que el valor del encabezado est√° establecido si no es igual a undefined.\n\nEl objeto headers siempre se inicializa dentro de interceptores y transformadores:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // deshabilita el establecimiento posterior del encabezado por Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // el acceso directo est√° obsoleto\n    \n      return request;\n    }\n  );\n````\n\nPuedes iterar sobre una instancia de `AxiosHeaders` usando una instrucci√≥n `for...of`:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',\n```",
  "status": "ok"
}