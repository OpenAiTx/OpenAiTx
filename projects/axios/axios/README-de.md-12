{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### üÜï Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "axios.post('https://example.com', form)\n```\n\n### üÜï Automatische Serialisierung zu FormData\n\nAb `v0.27.0` unterst√ºtzt Axios die automatische Serialisierung von Objekten zu einem FormData-Objekt, wenn der Anfrage-Header `Content-Type`\nauf `multipart/form-data` gesetzt ist.\n\nDie folgende Anfrage sendet die Daten im FormData-Format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIm `node.js`-Build wird standardm√§√üig das ([`form-data`](https://github.com/form-data/form-data)) Polyfill verwendet.\n\nSie k√∂nnen die FormData-Klasse √ºber die Konfigurationsvariable `env.FormData` √ºberladen,\naber in den meisten F√§llen werden Sie dies wahrscheinlich nicht ben√∂tigen:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nDer Axios FormData-Serializer unterst√ºtzt einige spezielle Endungen, um folgende Operationen durchzuf√ºhren:\n\n- `{}` - serialisiert den Wert mit JSON.stringify\n- `[]` - entpackt das array-√§hnliche Objekt als separate Felder mit dem gleichen Schl√ºssel\n\n> **Hinweis**: Die Entpackungs-/Erweiterungsoperation wird standardm√§√üig bei Arrays und FileList-Objekten verwendet\n\nDer FormData-Serializer unterst√ºtzt zus√§tzliche Optionen √ºber die Eigenschaft `config.formSerializer: object`, um seltene F√§lle zu behandeln:\n\n- `visitor: Function` - benutzerdefinierte Visitor-Funktion, die rekursiv aufgerufen wird, um das Datenobjekt\nnach individuellen Regeln in ein `FormData`-Objekt zu serialisieren.\n\n- `dots: boolean = false` - Punktnotation statt Klammern zur Serialisierung von Arrays und Objekten verwenden;\n\n- `metaTokens: boolean = true` - f√ºgt das spezielle Suffix (z. B. `user{}: '{\"name\": \"John\"}'`) im FormData-Schl√ºssel hinzu.\nDer Back-End-Body-Parser kann diese Metainformation eventuell nutzen, um den Wert automatisch als JSON zu parsen.\n\n- `indexes: null|false|true = false` - steuert, wie Indizes zu entpackten Schl√ºsseln von `flat` array-√§hnlichen Objekten hinzugef√ºgt werden.\n\n    - `null` - keine Klammern hinzuf√ºgen (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(Standard) - leere Klammern hinzuf√ºgen (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - Klammern mit Indizes hinzuf√ºgen (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nAngenommen, wir haben ein Objekt wie dieses:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nDie folgenden Schritte werden intern vom Axios-Serializer ausgef√ºhrt:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios unterst√ºtzt die folgenden Kurzbefehle: `postForm`, `putForm`, `patchForm`\nwelche einfach die entsprechenden HTTP-Methoden mit dem auf `multipart/form-data` voreingestellten `Content-Type`-Header sind.\n\n## Dateien hochladen\n\nSie k√∂nnen ganz einfach eine einzelne Datei √ºbermitteln:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "status": "ok"
}