{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "    return data;\n  }],\n\n  // `transformResponse` 允許在回傳資料傳遞給 then/catch 前進行變更\n  transformResponse: [function (data) {\n    // 你可以在這裡對資料進行任何需要的轉換\n\n    return data;\n  }],\n\n  // `headers` 是要發送的自訂標頭\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` 是與請求一起發送的 URL 參數\n  // 必須是純物件或 URLSearchParams 物件\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` 是一個可選的設定，允許你自訂序列化 `params` 的方式。\n  paramsSerializer: {\n\n    // 自訂編碼器函式，以迭代方式傳送 key/value 對。\n    encode?: (param: string): string => { /* 在這裡自訂操作並回傳轉換後的字串 */ }, \n    \n    // 針對整個參數自訂序列化函式。允許使用者模擬 1.x 之前的行為。\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // 設定陣列索引在參數中的格式。\n    indexes: false // 有三種可用選項：(1) indexes: null（不加括號），(2)（預設）indexes: false（空括號），(3) indexes: true（加索引的括號）。\n  },\n\n  // `data` 是要作為請求主體發送的資料\n  // 只適用於 'PUT'、'POST'、'DELETE' 和 'PATCH' 請求方法\n  // 當未設定 `transformRequest` 時，必須是以下其中一種型態：\n  // - 字串、純物件、ArrayBuffer、ArrayBufferView、URLSearchParams\n  // - 僅限瀏覽器：FormData、File、Blob\n  // - 僅限 Node：Stream、Buffer、FormData（form-data 套件）\n  data: {\n    firstName: 'Fred'\n  },\n\n  // 傳送資料到主體的語法替代方式\n  // 方法為 post\n  // 只會傳送值，不會傳送鍵\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` 指定請求逾時前的毫秒數。\n  // 如果請求超過 `timeout`，請求會被中止。\n  timeout: 1000, // 預設為 `0`（無逾時）\n\n  // `withCredentials` 指示是否應使用認證進行跨站存取控制請求\n  withCredentials: false, // 預設值\n\n  // `adapter` 允許自訂請求處理，方便測試。\n  // 回傳一個 promise 並提供有效的回應（請參閱 lib/adapters/README.md）\n  adapter: function (config) {\n    /* ... */\n  },\n  // 你也可以設定內建 adapter 的名稱，或提供一個名稱陣列\n  // 以選擇在環境中可用的第一個\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` 表示要使用 HTTP Basic 認證，並提供認證資訊。\n  // 這會設定一個 `Authorization` 標頭，會覆蓋你用 `headers` 設定的任何現有\n  // `Authorization` 自訂標頭。\n  // 請注意，只有 HTTP Basic 認證可透過此參數設定。\n  // 若需 Bearer token 等，請改用 `Authorization` 自訂標頭。\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` 表示伺服器將回應的資料型態\n  // 選項有：'arraybuffer'、'document'、'json'、'text'、'stream'\n  //   僅瀏覽器：'blob'\n  responseType: 'json', // 預設值\n\n  // `responseEncoding` 表示解碼回應時要使用的編碼（僅限 Node.js）\n  // 注意：對於 'stream' 的 `responseType` 或用戶端請求將被忽略\n  // 選項有：'ascii'、'ASCII'、'ansi'、'ANSI'、'binary'、'BINARY'、'base64'、'BASE64'、'base64url'、\n  // 'BASE64URL'、'hex'、'HEX'、'latin1'、'LATIN1'、'ucs-2'、'UCS-2'、'ucs2'、'UCS2'、'utf-8'、'UTF-8'、\n  // 'utf8'、'UTF8'、'utf16le'、'UTF16LE'\n  responseEncoding: 'utf8', // 預設值\n\n  // `xsrfCookieName` 是要作為 xsrf token 值使用的 cookie 名稱\n  xsrfCookieName: 'XSRF-TOKEN', // 預設值\n\n  // `xsrfHeaderName` 是攜帶 xsrf token 值的 http 標頭名稱\n  xsrfHeaderName: 'X-XSRF-TOKEN', // 預設值\n    \n  // `undefined`（預設）- 僅對同源請求設置 XSRF 標頭\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` 允許上傳時處理進度事件\n  // 瀏覽器與 node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "status": "ok"
}