{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "    return data;\n  }],\n\n  // `transformResponse` ermöglicht Änderungen an den Antwortdaten, bevor\n  // sie an then/catch übergeben werden\n  transformResponse: [function (data) {\n    // Beliebige Transformation der Daten durchführen\n\n    return data;\n  }],\n\n  // `headers` sind benutzerdefinierte Header, die gesendet werden sollen\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` sind die URL-Parameter, die mit der Anfrage gesendet werden\n  // Muss ein Plain-Object oder ein URLSearchParams-Objekt sein\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` ist eine optionale Konfiguration, die es ermöglicht, die Serialisierung von `params` anzupassen.\n  paramsSerializer: {\n\n    // Benutzerdefinierte Encoder-Funktion, die Schlüssel/Wert-Paare iterativ sendet.\n    encode?: (param: string): string => { /* Führen Sie hier benutzerdefinierte Operationen durch und geben Sie den transformierten String zurück */ }, \n    \n    // Benutzerdefinierte Serialisierungsfunktion für den gesamten Parameter. Ermöglicht es dem Benutzer, das Verhalten vor Version 1.x nachzuahmen.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Konfiguration zur Formatierung von Array-Indizes in den Parametern.\n    indexes: false // Drei verfügbare Optionen: (1) indexes: null (führt zu keinen Klammern), (2) (Standard) indexes: false (führt zu leeren Klammern), (3) indexes: true (führt zu Klammern mit Indizes).\n  },\n\n  // `data` sind die Daten, die als Anfrage-Body gesendet werden\n  // Nur anwendbar für die Anfragemethoden 'PUT', 'POST', 'DELETE' und 'PATCH'\n  // Wenn kein `transformRequest` gesetzt ist, muss einer der folgenden Typen verwendet werden:\n  // - string, Plain-Object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Nur Browser: FormData, File, Blob\n  // - Nur Node: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // Syntaxalternative, um Daten im Body zu senden\n  // Methode post\n  // nur der Wert wird gesendet, nicht der Schlüssel\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` gibt die Anzahl der Millisekunden an, bevor die Anfrage abgebrochen wird.\n  // Wenn die Anfrage länger als `timeout` dauert, wird sie abgebrochen.\n  timeout: 1000, // Standard ist `0` (kein Timeout)\n\n  // `withCredentials` gibt an, ob Cross-Site-Access-Control-Anfragen\n  // mit Anmeldeinformationen durchgeführt werden sollen\n  withCredentials: false, // Standard\n\n  // `adapter` ermöglicht eine benutzerdefinierte Behandlung von Anfragen, was das Testen erleichtert.\n  // Gibt ein Promise zurück und liefert eine gültige Antwort (siehe lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Sie können auch den Namen des eingebauten Adapters angeben oder ein Array mit deren Namen bereitstellen,\n  // um den ersten verfügbaren in der Umgebung auszuwählen\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` gibt an, dass HTTP Basic Auth verwendet werden soll und stellt Anmeldedaten bereit.\n  // Dadurch wird ein `Authorization`-Header gesetzt, der alle bestehenden\n  // benutzerdefinierten `Authorization`-Header, die Sie über `headers` gesetzt haben, überschreibt.\n  // Bitte beachten Sie, dass nur HTTP Basic Auth über diesen Parameter konfigurierbar ist.\n  // Für Bearer-Tokens und dergleichen verwenden Sie stattdessen benutzerdefinierte `Authorization`-Header.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` gibt an, welchen Typ von Daten der Server zurückgeben wird\n  // Optionen sind: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   nur im Browser: 'blob'\n  responseType: 'json', // Standard\n\n  // `responseEncoding` gibt die Kodierung an, die für das Dekodieren der Antwort verwendet werden soll (nur Node.js)\n  // Hinweis: Wird für `responseType` 'stream' oder clientseitige Anfragen ignoriert\n  // Optionen sind: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // Standard\n\n  // `xsrfCookieName` ist der Name des Cookies, das als Wert für das xsrf-Token verwendet wird\n  xsrfCookieName: 'XSRF-TOKEN', // Standard\n\n  // `xsrfHeaderName` ist der Name des HTTP-Headers, der den xsrf-Token-Wert überträgt\n  xsrfHeaderName: 'X-XSRF-TOKEN', // Standard\n    \n  // `undefined` (Standard) – XSRF-Header wird nur für Anfragen an die gleiche Origin gesetzt\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` ermöglicht das Handling von Fortschritts-Events für Uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "status": "ok"
}