{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // tốc độ tải xuống tính bằng byte\n      download: true; // dấu hiệu tải xuống\n    }*/\n  }\n});  \n```\n\nBạn cũng có thể theo dõi tiến trình tải lên/tải xuống luồng trong node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // tránh lưu bộ đệm toàn bộ luồng\n});\n````\n\n> **Lưu ý:**\n> Hiện tại, việc ghi nhận tiến trình tải lên FormData chưa được hỗ trợ trong môi trường node.js.\n\n> **⚠️ Cảnh báo**\n> Khuyến nghị tắt chuyển hướng bằng cách đặt maxRedirects: 0 để tải lên luồng trong môi trường **node.js**,\n> vì gói follow-redirects sẽ lưu toàn bộ luồng vào RAM mà không tuân theo thuật toán \"backpressure\".\n\n\n## 🆕 Giới hạn tốc độ (Rate limiting)\n\nChỉ có thể đặt giới hạn tốc độ tải lên và tải xuống cho adapter http (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // giới hạn 100KB/s\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios có lớp riêng `AxiosHeaders` để thao tác với header bằng API tương tự Map giúp đảm bảo xử lý không phân biệt chữ hoa/thường.\nMặc dù HTTP không phân biệt chữ hoa/thường ở header, Axios vẫn giữ nguyên kiểu chữ của header gốc vì lý do thẩm mỹ\nvà để xử lý một số trường hợp máy chủ yêu cầu đúng kiểu chữ của header.\nCách tiếp cận cũ là thao tác trực tiếp trên đối tượng headers vẫn còn, nhưng đã bị phản đối và không được khuyến nghị sử dụng trong tương lai.\n\n### Làm việc với headers\n\nMột đối tượng AxiosHeaders có thể chứa nhiều kiểu giá trị nội bộ khác nhau, kiểm soát logic thiết lập và hợp nhất.\nĐối tượng headers cuối cùng với các giá trị là chuỗi sẽ được Axios thu được bằng cách gọi phương thức `toJSON`.\n\n> Lưu ý: \"JSON\" ở đây ám chỉ đối tượng chỉ gồm các giá trị chuỗi, dùng để truyền qua mạng.\n\nGiá trị header có thể là một trong các kiểu sau:\n- `string` - giá trị chuỗi thông thường sẽ được gửi tới máy chủ\n- `null` - bỏ qua header khi render sang JSON\n- `false` - bỏ qua header khi render sang JSON, đồng thời cho biết phương thức `set` phải được gọi với tùy chọn `rewrite` đặt là `true`\n  để ghi đè giá trị này (Axios sử dụng nội bộ để cho phép người dùng bỏ qua việc cài đặt một số header như `User-Agent` hoặc `Content-Type`)\n- `undefined` - giá trị chưa được thiết lập\n\n> Lưu ý: Giá trị header được coi là đã thiết lập nếu nó khác undefined.\n\nĐối tượng headers luôn được khởi tạo bên trong interceptor và transformer:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // vô hiệu hóa việc Axios tự động thiết lập header này\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // truy cập trực tiếp đã bị phản đối\n    \n      return request;\n    }\n  );\n````\n\nBạn có thể lặp qua một instance của `AxiosHeaders` bằng câu lệnh `for...of`:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "status": "ok"
}