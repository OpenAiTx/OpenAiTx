{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Hinweis:** Der Parameter options (mit den Eigenschaften `synchronous` und `runWhen`) wird momentan nur für Request-Interceptor unterstützt.\n\n### Mehrere Interceptors\n\nAngenommen, Sie fügen mehrere Response-Interceptors hinzu\nund die Antwort wurde erfüllt\n- dann wird jeder Interceptor ausgeführt\n- dann werden sie in der Reihenfolge ausgeführt, in der sie hinzugefügt wurden\n- dann wird nur das Ergebnis des letzten Interceptors zurückgegeben\n- dann erhält jeder Interceptor das Ergebnis seines Vorgängers\n- und wenn der Fulfillment-Interceptor einen Fehler wirft\n    - dann wird der folgende Fulfillment-Interceptor nicht aufgerufen\n    - dann wird der folgende Rejection-Interceptor aufgerufen\n    - sobald abgefangen, wird erneut ein weiterer Fulfillment-Interceptor wie in einer Promise-Kette aufgerufen.\n\nLesen Sie [die Interceptor-Tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js), um all dies im Code zu sehen.\n\n## Fehlertypen\n\nEs gibt viele verschiedene Axios-Fehlermeldungen, die grundlegende Informationen über die Spezifika des Fehlers und mögliche Debugging-Ansätze liefern können.\n\nDie allgemeine Struktur von Axios-Fehlern ist wie folgt:\n| Eigenschaft  | Definition  |\n| -------- | ----------  |\n| message  | Eine kurze Zusammenfassung der Fehlermeldung und des Status, mit dem sie fehlgeschlagen ist. |\n| name     | Definiert, wo der Fehler entstanden ist. Für Axios ist dies immer 'AxiosError'. |\n| stack    | Gibt den Stacktrace des Fehlers an. | \n| config   | Ein Axios-Konfigurationsobjekt mit benutzerdefinierten Instanzkonfigurationen zum Zeitpunkt der Anfrage |\n| code     | Stellt einen von Axios erkannten Fehler dar. Die folgende Tabelle listet spezifische Definitionen für interne Axios-Fehler auf.  |\n| status   | HTTP-Antwortstatuscode. Siehe [hier](https://de.wikipedia.org/wiki/HTTP-Statuscode) für gängige Bedeutungen von HTTP-Antwortstatuscodes. \n\nIm Folgenden eine Liste möglicher von Axios erkannter Fehler:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Ungültiger Wert in der Axios-Konfiguration bereitgestellt.                                                                                                                                                                                                                                                                                                                                    |\n| ERR_BAD_OPTION            | Ungültige Option in der Axios-Konfiguration bereitgestellt.                                                                                                                                                                                                                                                                                                                                   |\n| ERR_NOT_SUPPORT           | Funktion oder Methode wird in der aktuellen Axios-Umgebung nicht unterstützt.                                                                                                                                                                                                                                                                                                                 |\n| ERR_DEPRECATED            | Veraltete Funktion oder Methode in Axios verwendet.                                                                                                                                                                                                                                                                                                                                            |\n| ERR_INVALID_URL           | Ungültige URL für Axios-Anfrage angegeben.                                                                                                                                                                                                                                                                                                              |\n| ECONNABORTED              | Deutet normalerweise darauf hin, dass die Anfrage abgelaufen ist (es sei denn, `transitional.clarifyTimeoutError` ist gesetzt) oder vom Browser oder einem Plugin abgebrochen wurde.                                                                                                                                                                                                          |\n| ERR_CANCELED              | Funktion oder Methode wurde explizit vom Benutzer mit einem AbortSignal (oder einem CancelToken) abgebrochen.                                                                                                                                                                                                                                                                                |\n| ETIMEDOUT                 | Anfrage ist wegen Überschreitung des Standardzeitlimits von Axios abgelaufen. `transitional.clarifyTimeoutError` muss auf `true` gesetzt werden, ansonsten wird stattdessen ein generischer `ECONNABORTED` Fehler geworfen.                                                                                                                                                                   |\n| ERR_NETWORK               | Netzwerkbezogenes Problem. Im Browser kann dieser Fehler auch durch eine [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS)- oder [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content)-Richtlinienverletzung verursacht werden. Der Browser erlaubt dem JS-Code nicht, den eigentlichen Grund des sicherheitsbedingten Fehlers zu erfahren, bitte prüfen Sie die Konsole. |\n| ERR_FR_TOO_MANY_REDIRECTS | Anfrage wurde zu oft umgeleitet; überschreitet die in der Axios-Konfiguration angegebenen maximalen Weiterleitungen.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_RESPONSE          | Antwort kann nicht richtig geparst werden oder hat ein unerwartetes Format. Meistens im Zusammenhang mit einer Antwort mit `5xx` Statuscode.                                                                                                                                                                                                                                                 |\n| ERR_BAD_REQUEST           | Die Anfrage hat ein unerwartetes Format oder es fehlen erforderliche Parameter. Meistens im Zusammenhang mit einer Antwort mit `4xx` Statuscode.                                                                                                                                                                                                                                              |\n\n## Fehlerbehandlung\n\nDas Standardverhalten ist, jede Antwort, die mit einem Statuscode außerhalb des Bereichs von 2xx zurückgegeben wird, als Fehler abzulehnen.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // Die Anfrage wurde ausgeführt und der Server hat mit einem Statuscode geantwortet,\n      // der außerhalb des Bereichs von 2xx liegt\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // Die Anfrage wurde gestellt, aber keine Antwort erhalten\n      // `error.request` ist im Browser eine Instanz von XMLHttpRequest und in node.js eine Instanz von\n      // http.ClientRequest\n      console.log(error.request);\n    } else {\n      // Beim Einrichten der Anfrage ist ein Fehler aufgetreten\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nMit der Konfigurationsoption `validateStatus` können Sie die Standardbedingung (status >= 200 && status < 300) überschreiben und HTTP-Code(s) definieren, die einen Fehler auslösen sollen.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Nur auflösen, wenn der Statuscode kleiner als 500 ist\n  }\n})\n```\n\nMit `toJSON` erhalten Sie ein Objekt mit weiteren Informationen zum HTTP-Fehler.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}