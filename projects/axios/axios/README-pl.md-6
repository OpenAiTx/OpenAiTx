{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // Zrób cokolwiek chcesz z eventem postępu Axios\n  },\n\n  // `onDownloadProgress` umożliwia obsługę zdarzeń postępu dla pobierania\n  // przeglądarka & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Zrób cokolwiek chcesz z eventem postępu Axios\n  },\n\n  // `maxContentLength` definiuje maksymalny rozmiar treści odpowiedzi http w bajtach dozwolony w node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (opcja tylko dla Node) definiuje maksymalny rozmiar treści żądania http w bajtach dozwolony\n  maxBodyLength: 2000,\n\n  // `validateStatus` definiuje czy promesa powinna być rozwiązana czy odrzucona dla danego\n  // kodu statusu odpowiedzi HTTP. Jeśli `validateStatus` zwraca `true` (lub jest ustawione na `null`\n  // lub `undefined`), promesa zostanie rozwiązana; w przeciwnym razie promesa zostanie\n  // odrzucona.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // domyślnie\n  },\n\n  // `maxRedirects` definiuje maksymalną liczbę przekierowań do śledzenia w node.js.\n  // Jeśli ustawione na 0, żadne przekierowania nie będą śledzone.\n  maxRedirects: 21, // domyślnie\n\n  // `beforeRedirect` definiuje funkcję, która zostanie wywołana przed przekierowaniem.\n  // Użyj tego, aby dostosować opcje żądania podczas przekierowania,\n  // sprawdzić najnowsze nagłówki odpowiedzi,\n  // lub anulować żądanie przez wyrzucenie błędu.\n  // Jeśli maxRedirects jest ustawione na 0, `beforeRedirect` nie jest używane.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` definiuje UNIX Socket do użycia w node.js.\n  // np. '/var/run/docker.sock' aby wysyłać żądania do demona dockera.\n  // Można zdefiniować tylko `socketPath` albo `proxy`.\n  // Jeśli oba są określone, używany jest `socketPath`.\n  socketPath: null, // domyślnie\n  \n  // `transport` określa metodę transportu, która zostanie użyta do wykonania żądania.\n  // Jeśli zdefiniowane, zostanie użyte. W przeciwnym razie, jeśli `maxRedirects` wynosi 0,\n  // zostanie użyta domyślna biblioteka `http` lub `https`, w zależności od protokołu określonego w `protocol`.\n  // W innym przypadku zostanie użyta biblioteka `httpFollow` lub `httpsFollow`, również w zależności od protokołu,\n  // która obsługuje przekierowania.\n  transport: undefined, // domyślnie\n\n  // `httpAgent` i `httpsAgent` definiują niestandardowego agenta używanego przy wykonywaniu żądań http\n  // i https odpowiednio w node.js. Pozwala to na dodanie opcji takich jak\n  // `keepAlive`, które nie są domyślnie włączone przed Node.js v19.0.0. Po Node.js\n  // v19.0.0 nie trzeba już dostosowywać agenta, aby włączyć `keepAlive`, ponieważ\n  // `http.globalAgent` ma domyślnie włączone `keepAlive`.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` definiuje nazwę hosta, port i protokół serwera proxy.\n  // Możesz również zdefiniować swój proxy używając konwencjonalnych zmiennych środowiskowych `http_proxy` i\n  // `https_proxy`. Jeśli używasz zmiennych środowiskowych\n  // do konfiguracji proxy, możesz także zdefiniować zmienną środowiskową `no_proxy`\n  // jako listę domen oddzieloną przecinkami, które nie powinny być proxy’owane.\n  // Użyj `false`, aby wyłączyć proxy, ignorując zmienne środowiskowe.\n  // `auth` wskazuje, że do połączenia z proxy powinna być użyta autoryzacja HTTP Basic,\n  // oraz dostarcza poświadczenia.\n  // To ustawi nagłówek `Proxy-Authorization`, nadpisując wszelkie istniejące\n  // niestandardowe nagłówki `Proxy-Authorization`, które ustawiłeś przy użyciu `headers`.\n  // Jeśli serwer proxy używa HTTPS, musisz ustawić protokół na `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Ma pierwszeństwo przed 'host', jeśli oba są zdefiniowane\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` określa token anulowania, który można użyć do anulowania żądania\n  // (szczegóły w sekcji Anulowanie poniżej)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // alternatywny sposób anulowania żądań Axios przy użyciu AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` wskazuje, czy treść odpowiedzi powinna być automatycznie dekompresowana\n  // Jeśli ustawione na `true`, usunie również nagłówek 'content-encoding'\n  // z obiektów odpowiedzi wszystkich zdekompresowanych odpowiedzi\n  // - tylko Node (XHR nie może wyłączyć dekompresji)\n  decompress: true, // domyślnie\n\n  // `insecureHTTPParser` boolean.\n  // Wskazuje, czy użyć niebezpiecznego parsera HTTP, który akceptuje nieprawidłowe nagłówki HTTP.\n  // Może to pozwolić na interoperacyjność z niezgodnymi implementacjami HTTP.\n  // Używanie niebezpiecznego parsera powinno być unikane.\n  // zobacz opcje https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}