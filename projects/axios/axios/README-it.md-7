{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // vedi anche https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // predefinito\n\n  // opzioni transitorie per la retrocompatibilità che potrebbero essere rimosse nelle versioni più recenti\n  transitional: {\n    // modalità silenziosa di parsing JSON\n    // `true`  - ignora gli errori di parsing JSON e imposta response.data a null se il parsing fallisce (vecchio comportamento)\n    // `false` - genera SyntaxError se il parsing JSON fallisce (Nota: responseType deve essere impostato a 'json')\n    silentJSONParsing: true, // valore predefinito per la versione attuale di Axios\n\n    // prova a interpretare la stringa di risposta come JSON anche se `responseType` non è 'json'\n    forcedJSONParsing: true,\n\n    // genera errore ETIMEDOUT invece del generico ECONNABORTED in caso di timeout della richiesta\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // La classe FormData da utilizzare per serializzare automaticamente il payload in un oggetto FormData\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // funzione visitor personalizzata per serializzare i valori del form\n      dots: boolean, // utilizza i punti invece del formato con parentesi\n      metaTokens: boolean, // mantiene terminazioni speciali come {} nella chiave del parametro\n      indexes: boolean, // formato degli indici degli array: null - nessuna parentesi, false - parentesi vuote, true - parentesi con indici\n  },\n\n  // solo adattatore http (node.js)\n  maxRate: [\n    100 * 1024, // limite di upload 100KB/s,\n    100 * 1024  // limite di download 100KB/s\n  ]\n}\n```\n\n## Schema della Risposta\n\nLa risposta di una richiesta contiene le seguenti informazioni.\n\n```js\n{\n  // `data` è la risposta fornita dal server\n  data: {},\n\n  // `status` è il codice di stato HTTP dalla risposta del server\n  status: 200,\n\n  // `statusText` è il messaggio di stato HTTP dalla risposta del server\n  statusText: 'OK',\n\n  // `headers` sono gli header HTTP con cui il server ha risposto\n  // Tutti i nomi degli header sono in minuscolo e possono essere accessibili usando la notazione tra parentesi.\n  // Esempio: `response.headers['content-type']`\n  headers: {},\n\n  // `config` è la configurazione che è stata fornita ad `axios` per la richiesta\n  config: {},\n\n  // `request` è la richiesta che ha generato questa risposta\n  // È l'istanza ClientRequest finale in node.js (nei redirect)\n  // e un'istanza XMLHttpRequest nel browser\n  request: {}\n}\n```\n\nQuando si usa `then`, si riceverà la risposta come segue:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nQuando si usa `catch`, o si passa una [callback di rifiuto](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) come secondo parametro di `then`, la risposta sarà disponibile tramite l'oggetto `error` come spiegato nella sezione [Gestione degli Errori](#handling-errors).\n\n## Configurazione Predefinita\n\nÈ possibile specificare configurazioni predefinite che verranno applicate a ogni richiesta.\n\n### Predefiniti globali di axios\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Importante: se axios viene utilizzato con più domini, l'AUTH_TOKEN sarà inviato a tutti.\n// Vedi sotto per un esempio che utilizza predefiniti di istanze personalizzate.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Predefiniti per istanza personalizzata\n```",
  "status": "ok"
}