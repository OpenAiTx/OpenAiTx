{
  "id": 13,
  "origin": "});\n```\n\nor multiple files as `multipart/form-data`:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'files[]': document.querySelector('#fileInput').files\n});\n```\n\n`FileList` object can be passed directly:\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)\n```\n\nAll files will be sent with the same field names: `files[]`.\n\n## 🆕 HTML Form Posting (browser)\n\nPass HTML Form element as a payload to submit it as `multipart/form-data` content.\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));\n```\n\n`FormData` and `HTMLForm` objects can also be posted as `JSON` by explicitly setting the `Content-Type` header to `application/json`:\n\n```js\nawait axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n```\n\nFor example, the Form\n\n```html\n<form id=\"form\">\n  <input type=\"text\" name=\"foo\" value=\"1\">\n  <input type=\"text\" name=\"deep.prop\" value=\"2\">\n  <input type=\"text\" name=\"deep prop spaced\" value=\"3\">\n  <input type=\"text\" name=\"baz\" value=\"4\">\n  <input type=\"text\" name=\"baz\" value=\"5\">\n\n  <select name=\"user.age\">\n    <option value=\"value1\">Value 1</option>\n    <option value=\"value2\" selected>Value 2</option>\n    <option value=\"value3\">Value 3</option>\n  </select>\n\n  <input type=\"submit\" value=\"Save\">\n</form>\n```\n\nwill be submitted as the following JSON object:\n\n```js\n{\n  \"foo\": \"1\",\n  \"deep\": {\n    \"prop\": {\n      \"spaced\": \"3\"\n    }\n  },\n  \"baz\": [\n    \"4\",\n    \"5\"\n  ],\n  \"user\": {\n    \"age\": \"value2\"\n  }\n}\n````\n\nSending `Blobs`/`Files` as JSON (`base64`) is not currently supported.\n\n## 🆕 Progress capturing\n\nAxios supports both browser and node environments to capture request upload/download progress.\nThe frequency of progress events is forced to be limited to `3` times per second.\n\n```js    \nawait axios.post(url, data, {\n  onUploadProgress: function (axiosProgressEvent) {\n    /*{\n      loaded: number;\n      total?: number;\n      progress?: number; // in range [0..1]\n      bytes: number; // how many bytes have been transferred since the last trigger (delta)\n      estimated?: number; // estimated time in seconds\n      rate?: number; // upload speed in bytes\n      upload: true; // upload sign\n    }*/\n  },\n\n  onDownloadProgress: function (axiosProgressEvent) {\n    /*{",
  "origin_sha": "pHLZ21gy3hXhOAeOHsMkCCM4OH1wGWHASYhQzNgbqb4=",
  "translate": "});\n```\n\nまたは、複数のファイルを `multipart/form-data` として送信する場合:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'files[]': document.querySelector('#fileInput').files\n});\n```\n\n`FileList` オブジェクトは直接渡すことができます:\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)\n```\n\nすべてのファイルは同じフィールド名 `files[]` で送信されます。\n\n## 🆕 HTMLフォームの送信（ブラウザ）\n\nHTMLフォーム要素をペイロードとして渡すことで、`multipart/form-data` コンテンツとして送信できます。\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));\n```\n\n`FormData` や `HTMLForm` オブジェクトも、`Content-Type` ヘッダーを `application/json` に明示的に設定することで `JSON` として送信可能です:\n\n```js\nawait axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n```\n\n例えば、以下のフォーム\n\n```html\n<form id=\"form\">\n  <input type=\"text\" name=\"foo\" value=\"1\">\n  <input type=\"text\" name=\"deep.prop\" value=\"2\">\n  <input type=\"text\" name=\"deep prop spaced\" value=\"3\">\n  <input type=\"text\" name=\"baz\" value=\"4\">\n  <input type=\"text\" name=\"baz\" value=\"5\">\n\n  <select name=\"user.age\">\n    <option value=\"value1\">Value 1</option>\n    <option value=\"value2\" selected>Value 2</option>\n    <option value=\"value3\">Value 3</option>\n  </select>\n\n  <input type=\"submit\" value=\"Save\">\n</form>\n```\n\nは、以下のJSONオブジェクトとして送信されます:\n\n```js\n{\n  \"foo\": \"1\",\n  \"deep\": {\n    \"prop\": {\n      \"spaced\": \"3\"\n    }\n  },\n  \"baz\": [\n    \"4\",\n    \"5\"\n  ],\n  \"user\": {\n    \"age\": \"value2\"\n  }\n}\n````\n\n`Blobs`/`Files` を `JSON`（`base64`）として送信することは、現在サポートされていません。\n\n## 🆕 進捗の取得\n\nAxiosは、リクエストのアップロード/ダウンロード進捗を取得するために、ブラウザとNode両方の環境をサポートしています。\n進捗イベントの頻度は、1秒間に最大3回に制限されています。\n\n```js    \nawait axios.post(url, data, {\n  onUploadProgress: function (axiosProgressEvent) {\n    /*{\n      loaded: number;\n      total?: number;\n      progress?: number; // [0..1] の範囲\n      bytes: number; // 最後にトリガーされてから転送されたバイト数（差分）\n      estimated?: number; // 推定残り時間（秒）\n      rate?: number; // アップロード速度（バイト/秒）\n      upload: true; // アップロードであることを示す\n    }*/\n  },\n\n  onDownloadProgress: function (axiosProgressEvent) {\n    /*{",
  "status": "ok"
}