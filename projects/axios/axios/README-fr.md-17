{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## üî• Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can‚Äôt use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## üî• Adaptateur Fetch\n\nL‚Äôadaptateur Fetch a √©t√© introduit dans la version `v1.7.0`. Par d√©faut, il sera utilis√© si les adaptateurs `xhr` et `http` ne sont pas disponibles dans la build,\nou ne sont pas pris en charge par l‚Äôenvironnement.\nPour l‚Äôutiliser par d√©faut, il doit √™tre s√©lectionn√© explicitement :\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // par d√©faut ['xhr', 'http', 'fetch']\n})\n```\n\nVous pouvez cr√©er une instance s√©par√©e pour cela :\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nL‚Äôadaptateur prend en charge les m√™mes fonctionnalit√©s que l‚Äôadaptateur `xhr`, **y compris la capture de la progression de l‚Äôenvoi et du t√©l√©chargement**.\nDe plus, il prend en charge des types de r√©ponse suppl√©mentaires tels que `stream` et `formdata` (si pris en charge par l‚Äôenvironnement).\n\n## Semver\n\nJusqu‚Äô√† ce qu‚Äôaxios atteigne une version `1.0`, les changements majeurs seront publi√©s avec une nouvelle version mineure. Par exemple, `0.5.1` et `0.5.4` auront la m√™me API, mais `0.6.0` introduira des changements majeurs.\n\n## Promesses\n\naxios d√©pend d‚Äôune impl√©mentation native ES6 Promise pour √™tre [pris en charge](https://caniuse.com/promises).\nSi votre environnement ne prend pas en charge les Promesses ES6, vous pouvez utiliser un [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios inclut des d√©finitions [TypeScript](https://typescriptlang.org) et un garde de type pour les erreurs axios.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nParce qu‚Äôaxios publie √† la fois avec une exportation par d√©faut ESM et un `module.exports` CJS, il existe quelques particularit√©s.\nLe param√®tre recommand√© est d‚Äôutiliser `\"moduleResolution\": \"node16\"` (ceci est impliqu√© par `\"module\": \"node16\"`). Notez que cela n√©cessite TypeScript 4.7 ou sup√©rieur.\nSi vous utilisez ESM, vos param√®tres devraient √™tre corrects.\nSi vous compilez TypeScript en CJS et que vous ne pouvez pas utiliser `\"moduleResolution\": \"node16\"`, vous devez activer `esModuleInterop`.\nSi vous utilisez TypeScript pour v√©rifier le typage du code JavaScript CJS, votre seule option est d‚Äôutiliser `\"moduleResolution\": \"node16\"`.\n\n## Configuration en un clic en ligne\n\nVous pouvez utiliser Gitpod, un IDE en ligne (qui est gratuit pour l‚ÄôOpen Source) pour contribuer ou ex√©cuter les exemples en ligne.\n\n[![Ouvrir dans Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Ressources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosyst√®me](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Guide de contribution](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code de conduite](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Cr√©dits\n\naxios est fortement inspir√© par le service [$http](https://docs.angularjs.org/api/ng/service/$http) fourni dans [AngularJS](https://angularjs.org/). En fin de compte, axios est un effort pour fournir un service autonome similaire √† `$http` utilisable en dehors d‚ÄôAngularJS.\n\n## Licence\n\n[MIT](LICENSE)\n",
  "status": "ok"
}