{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Opmerking:** De options parameter (met de eigenschappen `synchronous` en `runWhen`) wordt op dit moment alleen ondersteund voor request-interceptors.\n\n### Meerdere Interceptors\n\nStel dat je meerdere response-interceptors toevoegt\nen wanneer het antwoord is ingewilligd\n- dan wordt elke interceptor uitgevoerd\n- dan worden ze uitgevoerd in de volgorde waarin ze zijn toegevoegd\n- dan wordt alleen het resultaat van de laatste interceptor geretourneerd\n- dan ontvangt elke interceptor het resultaat van zijn voorganger\n- en wanneer de fulfillment-interceptor een fout gooit\n    - dan wordt de volgende fulfillment-interceptor niet aangeroepen\n    - dan wordt de volgende rejection-interceptor aangeroepen\n    - zodra afgehandeld, wordt een volgende fulfillment-interceptor opnieuw aangeroepen (net als in een promise-keten).\n\nLees [de interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) om dit alles in code te zien.\n\n## Fouttypen\n\nEr zijn veel verschillende axios-foutmeldingen die basisinformatie kunnen geven over de aard van de fout en waar er mogelijkheden zijn om te debuggen.\n\nDe algemene structuur van axios-fouten is als volgt:\n| Eigenschap  | Definitie  |\n| -------- | ----------  |\n| message  | Een korte samenvatting van het foutbericht en de status waarmee het is mislukt. |\n| name     | Dit definieert waar de fout vandaan komt. Voor axios zal dit altijd 'AxiosError' zijn. |\n| stack    | Geeft de stacktrace van de fout weer. | \n| config   | Een axios config-object met specifieke instantieconfiguraties die door de gebruiker zijn gedefinieerd op het moment dat het verzoek werd gedaan |\n| code     | Vertegenwoordigt een door axios geïdentificeerde fout. De onderstaande tabel geeft specifieke definities voor interne axios-fouten.  |\n| status   | HTTP response status code. Zie [hier](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) voor veelvoorkomende HTTP-responsstatuscodes en hun betekenis.\n\nHieronder volgt een lijst van potentiële door axios geïdentificeerde fouten:\n\n| Code                      | Definitie                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Ongeldige waarde opgegeven in axios-configuratie.                                                                                                                                                                                                                                                                                                                                             |\n| ERR_BAD_OPTION            | Ongeldige optie opgegeven in axios-configuratie.                                                                                                                                                                                                                                                                                                                                              |\n| ERR_NOT_SUPPORT           | Functie of methode wordt niet ondersteund in de huidige axios-omgeving.                                                                                                                                                                                                                                                                                                                      |\n| ERR_DEPRECATED            | Verouderde functie of methode gebruikt in axios.                                                                                                                                                                                                                                                                                                                                              |\n| ERR_INVALID_URL           | Ongeldige URL opgegeven voor het axios-verzoek.                                                                                                                                                                                                                                                                                                                                              |\n| ECONNABORTED              | Geeft meestal aan dat het verzoek is getimed-out (tenzij `transitional.clarifyTimeoutError` is ingesteld) of is afgebroken door de browser of een plug-in.                                                                                                                                                                                                                                   |\n| ERR_CANCELED              | Functie of methode is expliciet geannuleerd door de gebruiker met een AbortSignal (of een CancelToken).                                                                                                                                                                                                                                                                                      |\n| ETIMEDOUT                 | Verzoek is getimed-out door het overschrijden van de standaard axios-tijdslimiet. `transitional.clarifyTimeoutError` moet op `true` staan, anders wordt in plaats daarvan een algemene `ECONNABORTED`-fout opgegooid.                                                                                                                                                                         |\n| ERR_NETWORK               | Netwerkgerelateerd probleem. In de browser kan deze fout ook worden veroorzaakt door een [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) of [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) beleidschending. De browser staat de JS-code niet toe de echte reden van de fout te verduidelijken bij beveiligingsproblemen, dus controleer de console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Verzoek is te vaak omgeleid; overschrijdt het maximum aantal redirects gespecificeerd in de axios-configuratie.                                                                                                                                                                                                                                                                              |\n| ERR_BAD_RESPONSE          | Antwoord kan niet correct worden geparseerd of is in een onverwacht formaat. Meestal gerelateerd aan een antwoord met statuscode `5xx`.                                                                                                                                                                                                                                                        |\n| ERR_BAD_REQUEST           | Het verzoek heeft een onverwacht formaat of mist verplichte parameters. Meestal gerelateerd aan een antwoord met statuscode `4xx`.                                                                                                                                                                                                                                                            |\n\n## Omgaan met fouten\n\nHet standaardgedrag is om elk antwoord dat wordt geretourneerd met een statuscode buiten het bereik van 2xx te weigeren en als een fout te behandelen.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // Het verzoek is gedaan en de server heeft geantwoord met een statuscode\n      // die buiten het bereik van 2xx valt\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // Het verzoek is gedaan maar er is geen antwoord ontvangen\n      // `error.request` is een instantie van XMLHttpRequest in de browser en een instantie van\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Er is iets misgegaan bij het opzetten van het verzoek dat een fout veroorzaakte\n      console.log('Fout', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nMet de `validateStatus` config-optie kun je de standaardvoorwaarde (status >= 200 && status < 300) overschrijven en HTTP-code(s) definiëren die een fout moeten gooien.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Alleen oplossen als de statuscode lager is dan 500\n  }\n})\n```\n\nMet `toJSON` krijg je een object met meer informatie over de HTTP-fout.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}