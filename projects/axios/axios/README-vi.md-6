{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // Làm bất cứ điều gì bạn muốn với sự kiện tiến trình của Axios\n  },\n\n  // `onDownloadProgress` cho phép xử lý các sự kiện tiến trình cho việc tải xuống\n  // trình duyệt & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Làm bất cứ điều gì bạn muốn với sự kiện tiến trình của Axios\n  },\n\n  // `maxContentLength` xác định kích thước tối đa của nội dung phản hồi http tính bằng byte được phép trong node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Chỉ tùy chọn cho Node) xác định kích thước tối đa của nội dung yêu cầu http tính bằng byte được phép\n  maxBodyLength: 2000,\n\n  // `validateStatus` xác định liệu promise sẽ được resolve hay reject cho một\n  // mã trạng thái phản hồi HTTP nhất định. Nếu `validateStatus` trả về `true` (hoặc được thiết lập là `null`\n  // hoặc `undefined`), promise sẽ được resolve; ngược lại, promise sẽ bị\n  // reject.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // mặc định\n  },\n\n  // `maxRedirects` xác định số lần chuyển hướng tối đa được theo dõi trong node.js.\n  // Nếu đặt là 0, sẽ không có chuyển hướng nào được theo dõi.\n  maxRedirects: 21, // mặc định\n\n  // `beforeRedirect` xác định một hàm sẽ được gọi trước khi chuyển hướng.\n  // Sử dụng điều này để điều chỉnh các tùy chọn yêu cầu khi chuyển hướng,\n  // để kiểm tra các header phản hồi mới nhất,\n  // hoặc để hủy yêu cầu bằng cách ném ra lỗi\n  // Nếu maxRedirects được đặt là 0, `beforeRedirect` sẽ không được sử dụng.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` xác định một UNIX Socket sẽ được sử dụng trong node.js.\n  // ví dụ '/var/run/docker.sock' để gửi yêu cầu tới docker daemon.\n  // Chỉ có thể chỉ định hoặc `socketPath` hoặc `proxy`.\n  // Nếu cả hai đều được chỉ định, `socketPath` sẽ được sử dụng.\n  socketPath: null, // mặc định\n\n  // `transport` xác định phương thức truyền tải sẽ được sử dụng để thực hiện yêu cầu.\n  // Nếu được xác định, nó sẽ được sử dụng. Ngược lại, nếu `maxRedirects` là 0,\n  // thư viện `http` hoặc `https` mặc định sẽ được sử dụng, tùy thuộc vào giao thức được chỉ định trong `protocol`.\n  // Nếu không, thư viện `httpFollow` hoặc `httpsFollow` sẽ được sử dụng, cũng tùy thuộc vào giao thức,\n  // thư viện này có thể xử lý chuyển hướng.\n  transport: undefined, // mặc định\n\n  // `httpAgent` và `httpsAgent` xác định một agent tùy chỉnh sẽ được sử dụng khi thực hiện\n  // các yêu cầu http và https tương ứng trong node.js. Điều này cho phép thêm các tùy chọn như\n  // `keepAlive` mà mặc định không được bật trước Node.js v19.0.0. Sau Node.js\n  // v19.0.0, bạn không còn cần tùy chỉnh agent để bật `keepAlive` nữa vì\n  // `http.globalAgent` đã bật `keepAlive` mặc định.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` xác định hostname, port, và protocol của máy chủ proxy.\n  // Bạn cũng có thể xác định proxy của mình bằng cách sử dụng các biến môi trường thông thường\n  // `http_proxy` và `https_proxy`. Nếu bạn sử dụng biến môi trường\n  // cho cấu hình proxy của mình, bạn cũng có thể định nghĩa một biến môi trường `no_proxy`\n  // như một danh sách các domain phân tách bằng dấu phẩy mà không nên sử dụng proxy.\n  // Sử dụng `false` để tắt proxy, bỏ qua các biến môi trường.\n  // `auth` cho biết rằng HTTP Basic auth sẽ được sử dụng để kết nối tới proxy, và\n  // cung cấp thông tin xác thực.\n  // Điều này sẽ đặt một header `Proxy-Authorization`, ghi đè bất kỳ\n  // header `Proxy-Authorization` tùy chỉnh nào bạn đã thiết lập bằng `headers`.\n  // Nếu máy chủ proxy sử dụng HTTPS, thì bạn phải đặt protocol là `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Ưu tiên hơn 'host' nếu cả hai đều được xác định\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` chỉ định một token hủy có thể được sử dụng để hủy yêu cầu\n  // (xem phần Cancellation bên dưới để biết chi tiết)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // một cách thay thế để hủy các yêu cầu Axios sử dụng AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` xác định liệu nội dung phản hồi có nên được giải nén\n  // tự động hay không. Nếu đặt là `true` sẽ loại bỏ cả header 'content-encoding'\n  // khỏi các đối tượng phản hồi của tất cả các phản hồi đã được giải nén\n  // - Chỉ Node (XHR không thể tắt giải nén)\n  decompress: true, // mặc định\n\n  // `insecureHTTPParser` kiểu boolean.\n  // Chỉ định nơi sử dụng một HTTP parser không an toàn chấp nhận các header HTTP không hợp lệ.\n  // Điều này có thể cho phép khả năng tương thích với các triển khai HTTP không tuân thủ chuẩn.\n  // Nên tránh sử dụng parser không an toàn này.\n  // xem các tùy chọn https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}