{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can’t use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Fetchアダプター\n\nFetchアダプターは`v1.7.0`で導入されました。デフォルトでは、ビルドで`xhr`および`http`アダプターが利用できない場合や、環境でサポートされていない場合に使用されます。\nデフォルトで使用するには、明示的に選択する必要があります:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // デフォルトは ['xhr', 'http', 'fetch']\n})\n```\n\nこれ用に個別のインスタンスを作成することもできます:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nこのアダプターは、`xhr`アダプターと同じ機能をサポートし、**アップロードおよびダウンロード進捗の取得も含みます**。\nまた、（環境がサポートしていれば）`stream`や`formdata`などの追加レスポンスタイプもサポートしています。\n\n## セマンティックバージョニング（Semver）\n\naxiosが`1.0`リリースに到達するまでは、破壊的な変更は新しいマイナーバージョンでリリースされます。例えば、`0.5.1`と`0.5.4`は同じAPIですが、`0.6.0`には破壊的な変更が含まれる可能性があります。\n\n## プロミス（Promises）\n\naxiosは、[サポートされている](https://caniuse.com/promises)ネイティブES6 Promise実装に依存しています。\nもしご利用の環境でES6 Promisesがサポートされていない場合、[ポリフィル](https://github.com/jakearchibald/es6-promise)をご利用ください。\n\n## TypeScript\n\naxiosには[TypeScript](https://typescriptlang.org)定義と、axiosエラーの型ガードが含まれています。\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\naxiosはESMデフォルトエクスポートとCJSの`module.exports`の両方で公開されているため、いくつか注意点があります。\n推奨設定は`\"moduleResolution\": \"node16\"`を使うことです（これは`\"module\": \"node16\"`で暗黙的に設定されます）。なお、これはTypeScript 4.7以降が必要です。\nESMを利用する場合、設定は問題ありません。\nTypeScriptをCJSにコンパイルし、かつ`\"moduleResolution\": \"node16\"`が使えない場合は、`esModuleInterop`を有効にする必要があります。\nTypeScriptでCJS JavaScriptコードの型チェックのみを行う場合、唯一の選択肢は`\"moduleResolution\": \"node16\"`を使用することです。\n\n## オンラインワンクリックセットアップ\n\nGitpod（オープンソースには無料のオンラインIDE）を使って、オンラインでコントリビュートやサンプルの実行ができます。\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n## リソース\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## クレジット\n\naxiosは、[AngularJS](https://angularjs.org/)で提供されている[$httpサービス](https://docs.angularjs.org/api/ng/service/$http)から大きく影響を受けています。最終的にaxiosは、AngularJSの外部で使えるスタンドアロンな`$http`風サービスを提供するための取り組みです。\n\n## ライセンス\n\n[MIT](LICENSE)\n",
  "status": "ok"
}