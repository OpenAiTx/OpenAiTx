{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Nota:** il parametro options (che include le proprietà `synchronous` e `runWhen`) è attualmente supportato solo per gli interceptor delle richieste.\n\n### Interceptor Multipli\n\nSe aggiungi più interceptor di risposta\ne quando la risposta viene soddisfatta\n- allora ogni interceptor viene eseguito\n- vengono eseguiti nell'ordine in cui sono stati aggiunti\n- solo il risultato dell'ultimo interceptor viene restituito\n- ogni interceptor riceve il risultato del suo predecessore\n- e quando un fulfillment-interceptor genera un'eccezione\n    - il fulfillment-interceptor successivo non viene chiamato\n    - viene chiamato il rejection-interceptor successivo\n    - una volta gestita l'eccezione, viene nuovamente chiamato un altro fulfill-interceptor (proprio come in una catena di promise).\n\nConsulta [i test degli interceptor](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) per vedere tutto questo nel codice.\n\n## Tipi di Errore\n\nEsistono diversi messaggi di errore axios che possono fornire informazioni di base sulle specificità dell’errore e sulle opportunità di debugging.\n\nLa struttura generale degli errori axios è la seguente:\n| Proprietà  | Definizione  |\n| -------- | ----------  |\n| message  | Un riassunto rapido del messaggio di errore e dello stato con cui è fallito. |\n| name     | Definisce da dove ha origine l'errore. Per axios, sarà sempre 'AxiosError'. |\n| stack    | Fornisce lo stack trace dell’errore. | \n| config   | Un oggetto di configurazione axios con le configurazioni specifiche istanziate dall’utente al momento della richiesta |\n| code     | Rappresenta un errore identificato da axios. La tabella seguente elenca le definizioni specifiche per gli errori interni di axios.  |\n| status   | Codice di stato della risposta HTTP. Vedi [qui](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) per i significati comuni dei codici di stato HTTP. \n\nDi seguito un elenco degli errori identificati da axios:\n\n| Codice                      | Definizione                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Valore non valido fornito nella configurazione di axios.                                                                                                                                                                                                                                                                                                                                         |\n| ERR_BAD_OPTION            | Opzione non valida fornita nella configurazione di axios.                                                                                                                                                                                                                                                                                                                                        |\n| ERR_NOT_SUPPORT           | Funzionalità o metodo non supportato nell’attuale ambiente axios.                                                                                                                                                                                                                                                                                                                               |\n| ERR_DEPRECATED            | Funzionalità o metodo deprecato utilizzato in axios.                                                                                                                                                                                                                                                                                                                                             |\n| ERR_INVALID_URL           | URL non valido fornito per la richiesta axios.                                                                                                                                                                                                                                                                                                                                                   |\n| ECONNABORTED              | Tipicamente indica che la richiesta è andata in timeout (a meno che `transitional.clarifyTimeoutError` sia impostato) o è stata interrotta dal browser o da un suo plugin.                                                                                                                                                                                                                        |\n| ERR_CANCELED              | Funzionalità o metodo cancellato esplicitamente dall’utente tramite un AbortSignal (o un CancelToken).                                                                                                                                                                                                                                                    |\n| ETIMEDOUT                 | La richiesta è andata in timeout per aver superato il limite di tempo predefinito di axios. `transitional.clarifyTimeoutError` deve essere impostato su `true`, altrimenti verrà generato un errore generico `ECONNABORTED`.                                                                                                                               |\n| ERR_NETWORK               | Problema legato alla rete. Nel browser, questo errore può essere causato anche da una violazione delle policy [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) o [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content). Il browser non permette al codice JS di chiarire la vera causa dell’errore dovuto a motivi di sicurezza, quindi controlla la console. |\n| ERR_FR_TOO_MANY_REDIRECTS | La richiesta viene reindirizzata troppe volte; supera il numero massimo di redirect specificato nella configurazione axios.                                                                                                                                                                                                                                |\n| ERR_BAD_RESPONSE          | La risposta non può essere analizzata correttamente o è in un formato inaspettato. Di solito è correlato a una risposta con codice di stato `5xx`.                                                                                                                                                                                                        |\n| ERR_BAD_REQUEST           | La richiesta è in un formato inaspettato o mancano parametri richiesti. Di solito è correlato a una risposta con codice di stato `4xx`.                                                                                                                                                                                                                   |\n\n## Gestione degli Errori\n\nIl comportamento predefinito è quello di rifiutare ogni risposta che ritorna con un codice di stato al di fuori dell’intervallo 2xx e considerarla come un errore.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // La richiesta è stata effettuata e il server ha risposto con un codice di stato\n      // che non rientra nell’intervallo 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // La richiesta è stata effettuata ma non è stata ricevuta alcuna risposta\n      // `error.request` è un’istanza di XMLHttpRequest nel browser e un’istanza di\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Qualcosa è andato storto durante la configurazione della richiesta che ha generato un Errore\n      console.log('Errore', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUtilizzando l’opzione di configurazione `validateStatus`, puoi sovrascrivere la condizione predefinita (status >= 200 && status < 300) e definire i codici HTTP che dovrebbero generare un errore.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Risolvi solo se il codice di stato è inferiore a 500\n  }\n})\n```\n\nUtilizzando `toJSON` ottieni un oggetto con maggiori informazioni sull’errore HTTP.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}