{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "```js\n      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // downloadsnelheid in bytes\n      download: true; // downloadteken\n    }*/\n  }\n});  \n```\n\nJe kunt ook de voortgang van stream upload/download volgen in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // voorkom het bufferen van de volledige stream\n});\n````\n\n> **Opmerking:**\n> Het vastleggen van FormData upload-voortgang wordt momenteel niet ondersteund in node.js omgevingen.\n\n> **⚠️ Waarschuwing**\n> Het is aan te raden om redirects uit te schakelen door maxRedirects: 0 in te stellen bij het uploaden van de stream in de **node.js** omgeving,\n> omdat het follow-redirects pakket anders de volledige stream in het RAM buffert zonder het \"backpressure\" algoritme te volgen.\n\n\n## 🆕 Snelheidslimiet (Rate limiting)\n\nDownload- en uploadlimieten kunnen alleen ingesteld worden voor de http-adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // limiet van 100KB/s\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios heeft een eigen `AxiosHeaders` klasse om headers te manipuleren via een Map-achtige API die caseless werken garandeert.\nHoewel HTTP niet hoofdlettergevoelig is in headers, zal Axios de hoofdlettergebruik van de originele header behouden om stilistische redenen\nen als workaround wanneer servers per ongeluk hoofdlettergebruik in de header aanhouden.\nDe oude methode om het headers-object direct te manipuleren is nog steeds beschikbaar, maar verouderd en niet aanbevolen voor toekomstig gebruik.\n\n### Werken met headers\n\nEen AxiosHeaders object-instantie kan verschillende typen interne waarden bevatten die de logica voor instellen en samenvoegen bepalen.\nHet uiteindelijke headers-object met stringwaarden wordt door Axios verkregen door de `toJSON` methode aan te roepen.\n\n> Opmerking: Met JSON bedoelen we hier een object dat alleen uit stringwaarden bestaat en bedoeld is om over het netwerk te worden verzonden.\n\nDe headerwaarde kan één van de volgende typen zijn:\n- `string` - normale stringwaarde die naar de server wordt gestuurd\n- `null` - sla header over bij het renderen naar JSON\n- `false` - sla header over bij het renderen naar JSON, geeft daarnaast aan dat de `set` methode moet worden aangeroepen met de `rewrite` optie op `true`\n  om deze waarde te overschrijven (Axios gebruikt dit intern om gebruikers toe te staan bepaalde headers zoals `User-Agent` of `Content-Type` uit te schakelen)\n- `undefined` - waarde is niet ingesteld\n\n> Opmerking: De headerwaarde wordt als ingesteld beschouwd als deze niet gelijk is aan undefined.\n\nHet headers-object wordt altijd geïnitialiseerd binnen interceptors en transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // het instellen van de header door Axios uitschakelen\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // directe toegang is verouderd\n    \n      return request;\n    }\n  );\n````\n\nJe kunt over een `AxiosHeaders` instantie itereren met een `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',\n```",
  "status": "ok"
}