{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "    return data;\n  }],\n\n  // `transformResponse` memungkinkan perubahan pada data respons sebelum\n  // data tersebut diteruskan ke then/catch\n  transformResponse: [function (data) {\n    // Lakukan apa pun yang Anda inginkan untuk mengubah data\n\n    return data;\n  }],\n\n  // `headers` adalah header kustom yang akan dikirimkan\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` adalah parameter URL yang akan dikirim bersama permintaan\n  // Harus berupa objek biasa atau objek URLSearchParams\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` adalah konfigurasi opsional yang memungkinkan Anda menyesuaikan serialisasi `params`.\n  paramsSerializer: {\n\n    // Fungsi encoder kustom yang mengirimkan pasangan key/value secara iteratif.\n    encode?: (param: string): string => { /* Lakukan operasi kustom di sini dan kembalikan string yang telah diubah */ }, \n    \n    // Fungsi serializer kustom untuk seluruh parameter. Memungkinkan pengguna meniru perilaku sebelum versi 1.x.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Konfigurasi untuk memformat indeks array dalam params.\n    indexes: false // Tiga opsi yang tersedia: (1) indexes: null (tanpa kurung), (2) (default) indexes: false (kurung kosong), (3) indexes: true (kurung dengan indeks).\n  },\n\n  // `data` adalah data yang akan dikirimkan sebagai body permintaan\n  // Hanya berlaku untuk metode permintaan 'PUT', 'POST', 'DELETE', dan 'PATCH'\n  // Jika tidak ada `transformRequest` yang diatur, harus berupa salah satu tipe berikut:\n  // - string, objek biasa, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Hanya di browser: FormData, File, Blob\n  // - Hanya di Node: Stream, Buffer, FormData (paket form-data)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // sintaks alternatif untuk mengirim data ke dalam body\n  // metode post\n  // hanya nilainya yang dikirim, bukan kuncinya\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` menentukan jumlah milidetik sebelum permintaan dihentikan.\n  // Jika permintaan memakan waktu lebih lama dari `timeout`, permintaan akan dibatalkan.\n  timeout: 1000, // default adalah `0` (tanpa timeout)\n\n  // `withCredentials` menunjukkan apakah permintaan Access-Control lintas situs\n  // harus dilakukan menggunakan kredensial\n  withCredentials: false, // default\n\n  // `adapter` memungkinkan penanganan permintaan secara kustom yang memudahkan pengujian.\n  // Kembalikan sebuah promise dan sediakan respons yang valid (lihat lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Anda juga dapat mengatur nama adapter bawaan, atau menyediakan array dengan nama-namanya\n  // untuk memilih yang pertama tersedia di lingkungan\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` menunjukkan bahwa HTTP Basic auth akan digunakan, dan menyediakan kredensial.\n  // Ini akan mengatur header `Authorization`, menimpa header kustom\n  // `Authorization` yang mungkin telah Anda atur menggunakan `headers`.\n  // Harap dicatat bahwa hanya HTTP Basic auth yang dapat dikonfigurasi melalui parameter ini.\n  // Untuk token Bearer dan sejenisnya, gunakan header kustom `Authorization` sebagai gantinya.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` menunjukkan tipe data yang akan diberikan server\n  // opsi: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   hanya di browser: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` menunjukkan encoding yang digunakan untuk mendekode respons (hanya Node.js)\n  // Catatan: Diabaikan untuk `responseType` 'stream' atau permintaan sisi klien\n  // opsi: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` adalah nama cookie yang digunakan sebagai nilai untuk token xsrf\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` adalah nama header http yang membawa nilai token xsrf\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - mengatur header XSRF hanya untuk permintaan asal yang sama\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` memungkinkan penanganan event progress untuk upload\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "status": "ok"
}