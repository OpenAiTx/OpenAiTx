{
  "id": 15,
  "origin": "  bar: '2',\n  baz: '3'\n});\n\nfor(const [header, value] of headers) {\n  console.log(header, value);\n}\n\n// foo 1\n// bar 2\n// baz 3\n````\n\n### new AxiosHeaders(headers?)\n\nConstructs a new `AxiosHeaders` instance. \n\n```\nconstructor(headers?: RawAxiosHeaders | AxiosHeaders | string);\n```\n\nIf the headers object is a string, it will be parsed as RAW HTTP headers.\n\n````js\nconst headers = new AxiosHeaders(`\nHost: www.bing.com\nUser-Agent: curl/7.54.0\nAccept: */*`);\n\nconsole.log(headers);\n\n// Object [AxiosHeaders] {\n//   host: 'www.bing.com',\n//   'user-agent': 'curl/7.54.0',\n//   accept: '*/*'\n// }\n````\n\n### AxiosHeaders#set\n\n```ts\nset(headerName, value: Axios, rewrite?: boolean);\nset(headerName, value, rewrite?: (this: AxiosHeaders, value: string, name: string, headers: RawAxiosHeaders) => boolean);\nset(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean);\n```\n\nThe `rewrite` argument controls the overwriting behavior:\n- `false` - do not overwrite if header's value is set (is not `undefined`)\n- `undefined` (default) - overwrite the header unless its value is set to `false`\n- `true` - rewrite anyway\n\nThe option can also accept a user-defined function that determines whether the value should be overwritten or not.\n\nReturns `this`.\n\n### AxiosHeaders#get(header)\n\n```\n  get(headerName: string, matcher?: true | AxiosHeaderMatcher): AxiosHeaderValue;\n  get(headerName: string, parser: RegExp): RegExpExecArray | null;\n````\n\nReturns the internal value of the header. It can take an extra argument to parse the header's value with `RegExp.exec`,\nmatcher function or internal key-value parser.\n\n```ts\nconst headers = new AxiosHeaders({\n  'Content-Type': 'multipart/form-data; boundary=Asrf456BGe4h'\n});\n\nconsole.log(headers.get('Content-Type')); \n// multipart/form-data; boundary=Asrf456BGe4h\n\nconsole.log(headers.get('Content-Type', true)); // parse key-value pairs from a string separated with \\s,;= delimiters:\n// [Object: null prototype] {\n//   'multipart/form-data': undefined,\n//    boundary: 'Asrf456BGe4h'\n// }\n\n\nconsole.log(headers.get('Content-Type', (value, name, headers) => {\n  return String(value).replace(/a/g, 'ZZZ');\n}));\n// multipZZZrt/form-dZZZtZZZ; boundZZZry=Asrf456BGe4h\n\nconsole.log(headers.get('Content-Type', /boundary=(\\w+)/)?.[0]);\n// boundary=Asrf456BGe4h\n\n```\n\nReturns the value of the header.\n\n### AxiosHeaders#has(header, matcher?)\n\n```\nhas(header: string, matcher?: AxiosHeaderMatcher): boolean;\n```\n\nReturns `true` if the header is set (has no `undefined` value).\n",
  "origin_sha": "Qrs0IUGAJdPhEDhTX6MCC6WP3uvq82R5nC+RbTs1ozQ=",
  "translate": "```js\n  bar: '2',\n  baz: '3'\n});\n\nfor(const [header, value] of headers) {\n  console.log(header, value);\n}\n\n// foo 1\n// bar 2\n// baz 3\n````\n\n### new AxiosHeaders(headers?)\n\nTworzy nową instancję `AxiosHeaders`.\n\n```\nconstructor(headers?: RawAxiosHeaders | AxiosHeaders | string);\n```\n\nJeśli obiekt nagłówków jest ciągiem znaków, zostanie on sparsowany jako surowe nagłówki HTTP.\n\n````js\nconst headers = new AxiosHeaders(`\nHost: www.bing.com\nUser-Agent: curl/7.54.0\nAccept: */*`);\n\nconsole.log(headers);\n\n// Object [AxiosHeaders] {\n//   host: 'www.bing.com',\n//   'user-agent': 'curl/7.54.0',\n//   accept: '*/*'\n// }\n````\n\n### AxiosHeaders#set\n\n```ts\nset(headerName, value: Axios, rewrite?: boolean);\nset(headerName, value, rewrite?: (this: AxiosHeaders, value: string, name: string, headers: RawAxiosHeaders) => boolean);\nset(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean);\n```\n\nArgument `rewrite` kontroluje zachowanie nadpisywania:\n- `false` - nie nadpisuj, jeśli wartość nagłówka jest ustawiona (nie jest `undefined`)\n- `undefined` (domyślnie) - nadpisz nagłówek, chyba że jego wartość jest ustawiona na `false`\n- `true` - nadpisz zawsze\n\nOpcja ta może również przyjmować funkcję zdefiniowaną przez użytkownika, która decyduje, czy wartość powinna zostać nadpisana.\n\nZwraca `this`.\n\n### AxiosHeaders#get(header)\n\n```\n  get(headerName: string, matcher?: true | AxiosHeaderMatcher): AxiosHeaderValue;\n  get(headerName: string, parser: RegExp): RegExpExecArray | null;\n````\n\nZwraca wewnętrzną wartość nagłówka. Może przyjmować dodatkowy argument do parsowania wartości nagłówka za pomocą `RegExp.exec`,\nfunkcji dopasowującej lub wewnętrznego parsera klucz-wartość.\n\n```ts\nconst headers = new AxiosHeaders({\n  'Content-Type': 'multipart/form-data; boundary=Asrf456BGe4h'\n});\n\nconsole.log(headers.get('Content-Type')); \n// multipart/form-data; boundary=Asrf456BGe4h\n\nconsole.log(headers.get('Content-Type', true)); // parsuje pary klucz-wartość z ciągu znaków rozdzielonego delimitatorami \\s,;=:\n// [Object: null prototype] {\n//   'multipart/form-data': undefined,\n//    boundary: 'Asrf456BGe4h'\n// }\n\n\nconsole.log(headers.get('Content-Type', (value, name, headers) => {\n  return String(value).replace(/a/g, 'ZZZ');\n}));\n// multipZZZrt/form-dZZZtZZZ; boundZZZry=Asrf456BGe4h\n\nconsole.log(headers.get('Content-Type', /boundary=(\\w+)/)?.[0]);\n// boundary=Asrf456BGe4h\n\n```\n\nZwraca wartość nagłówka.\n\n### AxiosHeaders#has(header, matcher?)\n\n```\nhas(header: string, matcher?: AxiosHeaderMatcher): boolean;\n```\n\nZwraca `true`, jeśli nagłówek jest ustawiony (nie ma wartości `undefined`).\n```",
  "status": "ok"
}