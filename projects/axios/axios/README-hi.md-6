{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n// आप Axios प्रोग्रेस इवेंट के साथ जो चाहें कर सकते हैं\n},\n\n// `onDownloadProgress` डाउनलोड्स के लिए प्रोग्रेस इवेंट्स को हैंडल करने की अनुमति देता है\n// ब्राउज़र और node.js\nonDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n  // आप Axios प्रोग्रेस इवेंट के साथ जो चाहें कर सकते हैं\n},\n\n// `maxContentLength` node.js में अनुमत http रिस्पॉन्स कंटेंट का अधिकतम आकार (बाइट्स में) परिभाषित करता है\nmaxContentLength: 2000,\n\n// `maxBodyLength` (केवल Node विकल्प) node.js में अनुमत http रिक्वेस्ट कंटेंट का अधिकतम आकार (बाइट्स में) परिभाषित करता है\nmaxBodyLength: 2000,\n\n// `validateStatus` यह परिभाषित करता है कि किसी दिए गए HTTP रिस्पॉन्स स्टेटस कोड के लिए प्रॉमिस को resolve या reject करना है या नहीं। \n// यदि `validateStatus` true लौटाता है (या null या undefined पर सेट है), तो प्रॉमिस resolve होगी; अन्यथा, प्रॉमिस reject होगी।\nvalidateStatus: function (status) {\n  return status >= 200 && status < 300; // डिफ़ॉल्ट\n},\n\n// `maxRedirects` node.js में फॉलो किए जाने वाले अधिकतम redirects की संख्या को परिभाषित करता है।\n// यदि 0 पर सेट किया गया है, तो कोई भी redirect फॉलो नहीं किया जाएगा।\nmaxRedirects: 21, // डिफ़ॉल्ट\n\n// `beforeRedirect` एक फंक्शन को परिभाषित करता है जिसे redirect से पहले कॉल किया जाएगा।\n// इसका उपयोग redirect करते समय रिक्वेस्ट विकल्पों को समायोजित करने,\n// नवीनतम रिस्पॉन्स हेडर्स की जांच करने,\n// या request को error फेंक कर रद्द करने के लिए करें\n// यदि maxRedirects 0 पर सेट है, तो `beforeRedirect` का उपयोग नहीं किया जाता।\nbeforeRedirect: (options, { headers }) => {\n  if (options.hostname === \"example.com\") {\n    options.auth = \"user:password\";\n  }\n},\n\n// `socketPath` node.js में उपयोग किए जाने वाले UNIX Socket को परिभाषित करता है।\n// उदाहरण: '/var/run/docker.sock' का उपयोग docker डेमन को अनुरोध भेजने के लिए किया जाता है।\n// केवल `socketPath` या `proxy` में से एक को ही निर्दिष्ट किया जा सकता है।\n// यदि दोनों निर्दिष्ट हैं, तो `socketPath` का उपयोग किया जाता है।\nsocketPath: null, // डिफ़ॉल्ट\n\n// `transport` यह निर्धारित करता है कि अनुरोध करने के लिए कौन-सा ट्रांसपोर्ट मेथड उपयोग किया जाएगा।\n// यदि परिभाषित है, तो इसका उपयोग किया जाएगा। अन्यथा, यदि `maxRedirects` 0 है,\n// तो डिफ़ॉल्ट `http` या `https` लाइब्रेरी का उपयोग किया जाएगा, यह निर्भर करता है कि `protocol` में कौन-सा प्रोटोकॉल निर्दिष्ट किया गया है।\n// अन्यथा, `httpFollow` या `httpsFollow` लाइब्रेरी का उपयोग किया जाएगा, फिर से प्रोटोकॉल के अनुसार,\n// जो redirect को संभाल सकती है।\ntransport: undefined, // डिफ़ॉल्ट\n\n// `httpAgent` और `httpsAgent` node.js में http और https अनुरोध करते समय उपयोग किए जाने वाले कस्टम एजेंट को परिभाषित करते हैं।\n// यह `keepAlive` जैसे विकल्प जोड़ने की अनुमति देता है जो Node.js v19.0.0 से पहले डिफ़ॉल्ट रूप से सक्षम नहीं हैं।\n// Node.js v19.0.0 के बाद, आपको `keepAlive` सक्षम करने के लिए एजेंट को कस्टमाइज़ करने की आवश्यकता नहीं है क्योंकि\n// `http.globalAgent` में डिफ़ॉल्ट रूप से `keepAlive` सक्षम होता है।\nhttpAgent: new http.Agent({ keepAlive: true }),\nhttpsAgent: new https.Agent({ keepAlive: true }),\n\n// `proxy` प्रॉक्सी सर्वर के होस्टनाम, पोर्ट, और प्रोटोकॉल को परिभाषित करता है।\n// आप अपने प्रॉक्सी को पारंपरिक `http_proxy` और `https_proxy` एनवायरनमेंट वेरिएबल्स का उपयोग करके भी परिभाषित कर सकते हैं।\n// यदि आप अपने प्रॉक्सी कॉन्फ़िगरेशन के लिए एनवायरनमेंट वेरिएबल्स का उपयोग कर रहे हैं,\n// तो आप एक `no_proxy` एनवायरनमेंट वेरिएबल को भी परिभाषित कर सकते हैं,\n// जो उन डोमेन की कॉमा-सेपरेटेड सूची है जिन्हें प्रॉक्सी नहीं किया जाना चाहिए।\n// प्रॉक्सी को अक्षम करने के लिए `false` का उपयोग करें, एनवायरनमेंट वेरिएबल्स को अनदेखा करते हुए।\n// `auth` यह इंगित करता है कि प्रॉक्सी से कनेक्ट करने के लिए HTTP बेसिक ऑथ का उपयोग किया जाना चाहिए,\n// और क्रेडेंशियल्स प्रदान करता है।\n// यह एक `Proxy-Authorization` हेडर सेट करेगा, जो आपके द्वारा `headers` के माध्यम से सेट किए गए किसी भी मौजूदा\n// `Proxy-Authorization` कस्टम हेडर को ओवरराइट कर देगा।\n// यदि प्रॉक्सी सर्वर HTTPS का उपयोग करता है, तो आपको प्रोटोकॉल को `https` पर सेट करना होगा।\nproxy: {\n  protocol: 'https',\n  host: '127.0.0.1',\n  // hostname: '127.0.0.1' // अगर दोनों परिभाषित हैं तो 'host' पर प्राथमिकता होगी\n  port: 9000,\n  auth: {\n    username: 'mikeymike',\n    password: 'rapunz3l'\n  }\n},\n\n// `cancelToken` एक कैंसल टोकन को निर्दिष्ट करता है जिसका उपयोग अनुरोध को रद्द करने के लिए किया जा सकता है\n// (विवरण के लिए नीचे Cancellation अनुभाग देखें)\ncancelToken: new CancelToken(function (cancel) {\n}),\n\n// AbortController का उपयोग करके Axios अनुरोधों को रद्द करने का एक वैकल्पिक तरीका\nsignal: new AbortController().signal,\n\n// `decompress` इंगित करता है कि रिस्पॉन्स बॉडी को स्वचालित रूप से डीकंप्रेस किया जाना चाहिए या नहीं\n// यदि true पर सेट किया गया है तो यह सभी डीकंप्रेस रिस्पॉन्स ऑब्जेक्ट्स से 'content-encoding' हेडर भी हटा देगा\n// - केवल Node (XHR डीकंप्रेशन को बंद नहीं कर सकता)\ndecompress: true, // डिफ़ॉल्ट\n\n// `insecureHTTPParser` बूलियन।\n// यह इंगित करता है कि एक असुरक्षित HTTP parser का उपयोग करना है या नहीं, जो अमान्य HTTP हेडर्स को स्वीकार करता है।\n// यह गैर-अनुरूप HTTP कार्यान्वयनों के साथ इंटरऑपरेबिलिटी की अनुमति दे सकता है।\n// असुरक्षित parser का उपयोग करने से बचना चाहिए।\n// विकल्प देखें https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}