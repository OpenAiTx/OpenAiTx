{
  "id": 10,
  "origin": "  });\n```\n\n## Cancellation\n\n### AbortController\n\nStarting from `v0.22.0` Axios supports AbortController to cancel requests in fetch API way:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n### CancelToken `👎deprecated`\n\nYou can also cancel a request using a *CancelToken*.\n\n> The axios cancel token API is based on the withdrawn [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\n> This API is deprecated since v0.22.0 and shouldn't be used in new projects\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> **Note:** you can cancel several requests with the same cancel token/abort controller.\n> If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.\n\n> During the transition period, you can use both cancellation APIs, even for the same request:\n\n## Using `application/x-www-form-urlencoded` format\n\n### URLSearchParams\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the [`application/x-www-form-urlencoded` format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) instead, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API, which is [supported](http://www.caniuse.com/#feat=urlsearchparams) in the vast majority of browsers,and [ Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) starting with v10 (released in 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Older browsers)\n\nFor compatibility with very old browsers, there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n",
  "origin_sha": "VxjhD9ljiSwD1HApECbz1lsvUZyJrgZ3cDJoBGagQ8E=",
  "translate": "```markdown\n  });\n```\n\n## لغو کردن درخواست\n\n### AbortController\n\nاز نسخه `v0.22.0`، آکسیوس از AbortController برای لغو درخواست‌ها به سبک fetch API پشتیبانی می‌کند:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// لغو درخواست\ncontroller.abort()\n```\n\n### CancelToken `👎منسوخ شده`\n\nشما همچنین می‌توانید با استفاده از *CancelToken* یک درخواست را لغو کنید.\n\n> API توکن لغو آکسیوس بر اساس [پیشنهاد لغو وعده‌ها](https://github.com/tc39/proposal-cancelable-promises) که کنار گذاشته شده است، ساخته شده است.\n\n> این API از نسخه v0.22.0 منسوخ شده و نباید در پروژه‌های جدید استفاده شود.\n\nمی‌توانید یک توکن لغو با استفاده از تابع سازنده `CancelToken.source` به صورت زیر ایجاد کنید:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('درخواست لغو شد', thrown.message);\n  } else {\n    // مدیریت خطا\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// لغو درخواست (پارامتر پیام اختیاری است)\nsource.cancel('عملیات توسط کاربر لغو شد.');\n```\n\nهمچنین می‌توانید با ارسال یک تابع اجرایی به سازنده `CancelToken` یک توکن لغو ایجاد کنید:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // تابع اجرایی یک تابع لغو به عنوان پارامتر دریافت می‌کند\n    cancel = c;\n  })\n});\n\n// لغو درخواست\ncancel();\n```\n\n> **نکته:** شما می‌توانید چندین درخواست را با یک توکن لغو/AbortController یکسان لغو کنید.\n> اگر یک توکن لغو در لحظه شروع درخواست آکسیوس قبلاً لغو شده باشد، درخواست بلافاصله لغو می‌شود و هیچ تلاشی برای ارسال درخواست واقعی صورت نمی‌گیرد.\n\n> در دوره گذار، می‌توانید هر دو API لغو را حتی برای یک درخواست واحد استفاده کنید:\n\n## استفاده از فرمت `application/x-www-form-urlencoded`\n\n### URLSearchParams\n\nبه طور پیش‌فرض، آکسیوس اشیاء جاوااسکریپت را به `JSON` سریالایز می‌کند. برای ارسال داده‌ها در قالب [`application/x-www-form-urlencoded`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)، می‌توانید از API [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) استفاده کنید که در اکثر مرورگرها [پشتیبانی می‌شود](http://www.caniuse.com/#feat=urlsearchparams) و در [Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) از نسخه 10 به بعد (انتشار در 2018) نیز موجود است.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### رشته کوئری (مرورگرهای قدیمی‌تر)\n\nبرای سازگاری با مرورگرهای بسیار قدیمی، یک [polyfill](https://github.com/WebReflection/url-search-params) در دسترس است (حتماً محیط سراسری را polyfill کنید).\n\nهمچنین می‌توانید داده‌ها را با استفاده از کتابخانه [`qs`](https://github.com/ljharb/qs) رمزگذاری کنید:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n```",
  "status": "ok"
}