{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "    return data;\n  }],\n\n  // `transformResponse` cho phép thay đổi dữ liệu phản hồi trước khi\n  // nó được chuyển đến then/catch\n  transformResponse: [function (data) {\n    // Thực hiện bất kỳ thao tác nào bạn muốn để chuyển đổi dữ liệu\n\n    return data;\n  }],\n\n  // `headers` là các header tùy chỉnh sẽ được gửi đi\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` là các tham số URL sẽ được gửi kèm với yêu cầu\n  // Phải là một đối tượng thuần hoặc một đối tượng URLSearchParams\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` là cấu hình tùy chọn cho phép bạn tùy chỉnh việc chuyển đổi `params`.\n  paramsSerializer: {\n\n    // Hàm encoder tùy chỉnh gửi các cặp key/value theo cách lặp.\n    encode?: (param: string): string => { /* Thực hiện thao tác tùy chỉnh và trả về chuỗi đã chuyển đổi */ }, \n    \n    // Hàm serializer tùy chỉnh cho toàn bộ tham số. Cho phép người dùng giả lập hành vi trước phiên bản 1.x.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Cấu hình định dạng chỉ số mảng trong params.\n    indexes: false // Có ba lựa chọn: (1) indexes: null (không có dấu ngoặc), (2) (mặc định) indexes: false (dấu ngoặc rỗng), (3) indexes: true (dấu ngoặc có chỉ số).    \n  },\n\n  // `data` là dữ liệu sẽ được gửi làm body của yêu cầu\n  // Chỉ áp dụng cho các phương thức 'PUT', 'POST', 'DELETE', và 'PATCH'\n  // Khi không đặt `transformRequest`, phải là một trong các kiểu sau:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Chỉ trình duyệt: FormData, File, Blob\n  // - Chỉ Node: Stream, Buffer, FormData (gói form-data)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // cú pháp thay thế để gửi dữ liệu vào body\n  // phương thức post\n  // chỉ giá trị được gửi, không phải key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` xác định số mili giây trước khi yêu cầu bị timeout.\n  // Nếu yêu cầu mất nhiều thời gian hơn `timeout`, yêu cầu sẽ bị hủy.\n  timeout: 1000, // mặc định là `0` (không timeout)\n\n  // `withCredentials` xác định có nên thực hiện yêu cầu Access-Control\n  // cross-site bằng credentials hay không\n  withCredentials: false, // mặc định\n\n  // `adapter` cho phép xử lý tùy chỉnh các yêu cầu, giúp dễ dàng kiểm thử hơn.\n  // Trả về một promise và cung cấp một phản hồi hợp lệ (xem lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Ngoài ra, bạn có thể đặt tên adapter tích hợp sẵn, hoặc cung cấp một mảng tên\n  // để chọn adapter khả dụng đầu tiên trong môi trường\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` chỉ ra rằng nên sử dụng HTTP Basic auth, và cung cấp thông tin xác thực.\n  // Điều này sẽ thiết lập header `Authorization`, ghi đè bất kỳ header\n  // `Authorization` tùy chỉnh nào bạn đã đặt bằng `headers`.\n  // Lưu ý rằng chỉ HTTP Basic auth có thể cấu hình qua tham số này.\n  // Đối với Bearer token và các loại khác, hãy dùng header tùy chỉnh `Authorization`.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` xác định kiểu dữ liệu mà máy chủ sẽ trả về\n  // các lựa chọn: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   chỉ trình duyệt: 'blob'\n  responseType: 'json', // mặc định\n\n  // `responseEncoding` xác định mã hóa dùng để giải mã phản hồi (chỉ Node.js)\n  // Lưu ý: Bị bỏ qua nếu `responseType` là 'stream' hoặc các yêu cầu phía client\n  // các lựa chọn: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // mặc định\n\n  // `xsrfCookieName` là tên cookie sẽ được dùng làm giá trị cho xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // mặc định\n\n  // `xsrfHeaderName` là tên http header mang giá trị xsrf token\n  xsrfHeaderName: 'X-XSRF-TOKEN', // mặc định\n    \n  // `undefined` (mặc định) - chỉ đặt XSRF header cho các yêu cầu cùng nguồn gốc\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` cho phép xử lý sự kiện tiến trình khi upload\n  // trình duyệt & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "status": "ok"
}