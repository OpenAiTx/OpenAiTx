{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // 可以对 Axios 的进度事件执行任何操作\n  },\n\n  // `onDownloadProgress` 允许处理下载的进度事件\n  // 浏览器 & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // 可以对 Axios 的进度事件执行任何操作\n  },\n\n  // `maxContentLength` 定义在 node.js 中允许的 HTTP 响应内容最大字节数\n  maxContentLength: 2000,\n\n  // `maxBodyLength`（仅 Node 选项）定义在 node.js 中允许的 HTTP 请求内容最大字节数\n  maxBodyLength: 2000,\n\n  // `validateStatus` 定义是否针对给定的 HTTP 响应状态码 resolve 或 reject promise。\n  // 如果 `validateStatus` 返回 `true`（或设置为 `null` 或 `undefined`），promise 会被 resolve；\n  // 否则，promise 会被 reject。\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // 默认值\n  },\n\n  // `maxRedirects` 定义在 node.js 中允许跟随的最大重定向次数。\n  // 如果设置为 0，则不跟随重定向。\n  maxRedirects: 21, // 默认值\n\n  // `beforeRedirect` 定义一个在重定向前调用的函数。\n  // 可用于在重定向时调整请求选项，\n  // 检查最新的响应头，\n  // 或通过抛出错误来取消请求\n  // 如果 maxRedirects 设置为 0，则不会使用 `beforeRedirect`。\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` 定义 node.js 中要使用的 UNIX Socket。\n  // 例如：'/var/run/docker.sock' 用于向 docker 守护进程发送请求。\n  // 只能指定 `socketPath` 或 `proxy` 之一。\n  // 如果两者都指定，则使用 `socketPath`。\n  socketPath: null, // 默认值\n  \n  // `transport` 决定用于发起请求的传输方式。\n  // 如果定义了，则会被使用。否则，如果 `maxRedirects` 为 0，\n  // 则会根据 `protocol` 指定的协议，使用默认的 `http` 或 `https` 库。\n  // 否则，根据协议，会使用可以处理重定向的 `httpFollow` 或 `httpsFollow` 库。\n  transport: undefined, // 默认值\n\n  // `httpAgent` 和 `httpsAgent` 定义在 node.js 中执行 http 和 https 请求时使用的自定义 agent。\n  // 这允许添加如 `keepAlive` 等在 Node.js v19.0.0 之前默认未启用的选项。\n  // 在 Node.js v19.0.0 之后，不再需要自定义 agent 来启用 `keepAlive`，\n  // 因为 `http.globalAgent` 默认已启用 `keepAlive`。\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` 定义代理服务器的主机名、端口和协议。\n  // 你也可以使用常规的 `http_proxy` 和 `https_proxy` 环境变量来定义代理。\n  // 如果你使用环境变量进行代理配置，也可以定义 `no_proxy` 环境变量，\n  // 其值为不应使用代理的域名（用逗号分隔）。\n  // 使用 `false` 可以禁用代理，忽略环境变量。\n  // `auth` 表示应使用 HTTP Basic 认证连接到代理，并提供凭据。\n  // 这将设置 `Proxy-Authorization` 头，覆盖你通过 `headers` 设置的任何自定义\n  // `Proxy-Authorization` 头。\n  // 如果代理服务器使用 HTTPS，则必须将协议设置为 `https`。\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // 如果同时定义，则优先使用 'hostname'\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` 指定一个取消令牌，可用于取消请求\n  //（详见下文的取消部分）\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // 使用 AbortController 取消 Axios 请求的另一种方式\n  signal: new AbortController().signal,\n\n  // `decompress` 指示是否自动解压响应体。\n  // 如果设置为 `true`，还会从所有已解压响应的响应对象中移除 'content-encoding' 头\n  // - 仅 Node（XHR 无法关闭解压）\n  decompress: true, // 默认值\n\n  // `insecureHTTPParser` 布尔值。\n  // 指示是否使用接受无效 HTTP 头的非安全 HTTP 解析器。\n  // 这可能允许与不兼容的 HTTP 实现进行互操作。\n  // 应避免使用非安全解析器。\n  // 选项详见 https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}