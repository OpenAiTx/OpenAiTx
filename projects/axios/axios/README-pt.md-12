{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### üÜï Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "axios.post('https://example.com', form)\n```\n\n### üÜï Serializa√ß√£o autom√°tica para FormData\n\nA partir da vers√£o `v0.27.0`, o Axios oferece suporte √† serializa√ß√£o autom√°tica de objetos para um objeto FormData se o cabe√ßalho\n`Content-Type` da requisi√ß√£o estiver definido como `multipart/form-data`.\n\nA seguinte requisi√ß√£o ir√° enviar os dados no formato FormData (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nNa build do `node.js`, o polyfill ([`form-data`](https://github.com/form-data/form-data)) √© utilizado por padr√£o.\n\nVoc√™ pode sobrecarregar a classe FormData definindo a vari√°vel de configura√ß√£o `env.FormData`,\nmas provavelmente n√£o ser√° necess√°rio na maioria dos casos:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nO serializador FormData do Axios suporta alguns sufixos especiais para realizar as seguintes opera√ß√µes:\n\n- `{}` - serializa o valor com JSON.stringify\n- `[]` - descompacta o objeto tipo array como campos separados com a mesma chave\n\n> **Nota**: a opera√ß√£o de descompactar/expandir ser√° usada por padr√£o em arrays e objetos FileList\n\nO serializador FormData suporta op√ß√µes adicionais via a propriedade `config.formSerializer: object` para tratar casos raros:\n\n- `visitor: Function` - fun√ß√£o visitor definida pelo usu√°rio que ser√° chamada recursivamente para serializar o objeto de dados\npara um objeto `FormData` seguindo regras personalizadas.\n\n- `dots: boolean = false` - usa nota√ß√£o de ponto ao inv√©s de colchetes para serializar arrays e objetos;\n\n- `metaTokens: boolean = true` - adiciona o sufixo especial (por exemplo, `user{}: '{\"name\": \"John\"}'`) na chave do FormData.\nO body-parser do backend pode utilizar essa metainforma√ß√£o para analisar automaticamente o valor como JSON.\n\n- `indexes: null|false|true = false` - controla como os √≠ndices ser√£o adicionados √†s chaves descompactadas de objetos tipo array `flat`.\n\n    - `null` - n√£o adiciona colchetes (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(padr√£o) - adiciona colchetes vazios (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - adiciona colchetes com √≠ndices  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nVamos supor que temos um objeto como este:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nOs seguintes passos ser√£o executados internamente pelo serializador do Axios:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nO Axios suporta os seguintes m√©todos abreviados: `postForm`, `putForm`, `patchForm`\nque s√£o apenas os m√©todos http correspondentes com o cabe√ßalho `Content-Type` j√° definido como `multipart/form-data`.\n\n## Envio de Arquivos\n\nVoc√™ pode enviar facilmente um √∫nico arquivo:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "status": "ok"
}