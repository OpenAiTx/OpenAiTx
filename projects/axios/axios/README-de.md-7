{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // siehe auch https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // Standardwert\n\n  // Übergangsoptionen für die Rückwärtskompatibilität, die in neueren Versionen entfernt werden könnten\n  transitional: {\n    // Stiller JSON-Parsing-Modus\n    // `true`  - JSON-Parsing-Fehler ignorieren und response.data auf null setzen, wenn das Parsen fehlschlägt (altes Verhalten)\n    // `false` - SyntaxError werfen, wenn das JSON-Parsing fehlschlägt (Hinweis: responseType muss auf 'json' gesetzt sein)\n    silentJSONParsing: true, // Standardwert für die aktuelle Axios-Version\n\n    // Versuche, den Antwort-String als JSON zu parsen, auch wenn `responseType` nicht 'json' ist\n    forcedJSONParsing: true,\n\n    // Wirft einen ETIMEDOUT-Fehler anstelle eines allgemeinen ECONNABORTED bei Zeitüberschreitungen der Anfrage\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // Die zu verwendende FormData-Klasse, um die Nutzlast automatisch in ein FormData-Objekt zu serialisieren\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // Benutzerdefinierte Visitor-Funktion zur Serialisierung von Form-Werten\n      dots: boolean, // Punkte anstelle des Klammerformats verwenden\n      metaTokens: boolean, // Spezielle Endungen wie {} im Parameter-Schlüssel beibehalten\n      indexes: boolean, // Array-Index-Format: null - keine Klammern, false - leere Klammern, true - Klammern mit Indizes\n  },\n\n  // Nur HTTP-Adapter (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s Upload-Limit,\n    100 * 1024  // 100KB/s Download-Limit\n  ]\n}\n```\n\n## Antwortschema\n\nDie Antwort auf eine Anfrage enthält die folgenden Informationen.\n\n```js\n{\n  // `data` ist die Antwort, die vom Server bereitgestellt wurde\n  data: {},\n\n  // `status` ist der HTTP-Statuscode aus der Serverantwort\n  status: 200,\n\n  // `statusText` ist die HTTP-Statusmeldung aus der Serverantwort\n  statusText: 'OK',\n\n  // `headers` sind die HTTP-Header, mit denen der Server geantwortet hat\n  // Alle Header-Namen sind in Kleinbuchstaben und können mit der Klammer-Notation abgerufen werden.\n  // Beispiel: `response.headers['content-type']`\n  headers: {},\n\n  // `config` ist die Konfiguration, die für die Anfrage an `axios` übergeben wurde\n  config: {},\n\n  // `request` ist die Anfrage, die diese Antwort erzeugt hat\n  // Dies ist die letzte ClientRequest-Instanz in node.js (bei Weiterleitungen)\n  // und eine XMLHttpRequest-Instanz im Browser\n  request: {}\n}\n```\n\nBei der Verwendung von `then` erhalten Sie die Antwort wie folgt:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nBei der Verwendung von `catch` oder der Übergabe eines [Ablehnungs-Callbacks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) als zweiten Parameter von `then` ist die Antwort über das `error`-Objekt wie im Abschnitt [Fehlerbehandlung](#handling-errors) beschrieben verfügbar.\n\n## Standardkonfiguration\n\nSie können Standardkonfigurationen angeben, die auf jede Anfrage angewendet werden.\n\n### Globale Axios-Standardwerte\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Wichtig: Wenn Axios mit mehreren Domains verwendet wird, wird das AUTH_TOKEN an alle gesendet.\n// Siehe unten für ein Beispiel mit benutzerdefinierten Instanz-Standardeinstellungen.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Benutzerdefinierte Instanz-Standardeinstellungen\n```",
  "status": "ok"
}