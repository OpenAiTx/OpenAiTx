{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "```js\n     loaded: number;\n     total?: number;\n     progress?: number;\n     bytes: number; \n     estimated?: number;\n     rate?: number; // سرعة التنزيل بالبايت\n     download: true; // علامة التنزيل\n   }*/\n }\n});  \n```\n\nيمكنك أيضًا تتبع تقدم رفع/تنزيل البث في node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // تجنب تخزين البث بالكامل في الذاكرة المؤقتة\n});\n````\n\n> **ملاحظة:**\n> تتبع تقدم رفع FormData غير مدعوم حاليًا في بيئات node.js.\n\n> **⚠️ تحذير**\n> يوصى بتعطيل التحويلات التلقائية (redirects) عن طريق تعيين maxRedirects: 0 عند رفع البث في بيئة **node.js**،\n> حيث أن حزمة follow-redirects ستقوم بتخزين البث بالكامل في الذاكرة دون اتباع خوارزمية \"الضغط العكسي\" (backpressure).\n\n\n## 🆕 تحديد معدل النقل (Rate limiting)\n\nيمكن تعيين حدود سرعة التنزيل والرفع فقط مع محول http (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // حد 100KB/s\n});\n```\n\n## 🆕 AxiosHeaders\n\nلدى Axios فئة خاصة بها باسم `AxiosHeaders` للتحكم في الرؤوس (headers) باستخدام واجهة تشبه Map وتضمن العمل بدون حساسية لحالة الأحرف.\nعلى الرغم من أن HTTP لا يميز بين الأحرف الكبيرة والصغيرة في الرؤوس، إلا أن Axios سيحتفظ بحالة الحرف الأصلية للرأس لأسباب تنسيقية\nوأيضًا كحل مؤقت عند اعتبار بعض الخوادم أن حالة الأحرف للرأس مهمة.\nالطريقة القديمة للتعامل المباشر مع كائن الرؤوس لا تزال متوفرة، لكنها مهجورة وغير مستحسنة للاستخدام المستقبلي.\n\n### العمل مع الرؤوس (headers)\n\nيمكن أن يحتوي كائن AxiosHeaders على أنواع مختلفة من القيم الداخلية التي تتحكم في منطق التعيين والدمج.\nيتم الحصول على كائن الرؤوس النهائي بقيم نصية عن طريق Axios من خلال استدعاء دالة `toJSON`.\n\n> ملاحظة: نعني هنا بـ JSON كائنًا يتكون فقط من قيم نصية معدة للإرسال عبر الشبكة.\n\nقيمة الرأس يمكن أن تكون من الأنواع التالية:\n- `string` - قيمة نصية عادية سيتم إرسالها إلى الخادم\n- `null` - تجاهل الرأس عند التحويل إلى JSON\n- `false` - تجاهل الرأس عند التحويل إلى JSON، بالإضافة إلى أنه يشير إلى أن دالة `set` يجب أن تُستدعى مع خيار `rewrite` مع تعيينه إلى `true`\n  لاستبدال هذه القيمة (يستخدم Axios هذا داخليًا للسماح للمستخدمين بعدم تعيين رؤوس معينة مثل `User-Agent` أو `Content-Type`)\n- `undefined` - لم يتم تعيين قيمة\n\n> ملاحظة: تعتبر قيمة الرأس معينة إذا لم تكن undefined.\n\nيتم دائمًا تهيئة كائن الرؤوس داخل الاعتراضات (interceptors) والمحولات (transformers):\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // تعطيل تعيين هذا الرأس لاحقًا بواسطة Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // الوصول المباشر مهجور\n    \n      return request;\n    }\n  );\n````\n\nيمكنك تكرار كائن `AxiosHeaders` باستخدام جملة `for...of`:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',\n```",
  "status": "ok"
}