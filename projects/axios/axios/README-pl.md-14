{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "```js\n      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // prędkość pobierania w bajtach\n      download: true; // znacznik pobierania\n    }*/\n  }\n});  \n```\n\nMożesz także śledzić postęp przesyłania/pobierania strumienia w node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // unikanie buforowania całego strumienia\n});\n````\n\n> **Uwaga:**\n> Śledzenie postępu przesyłania FormData nie jest obecnie obsługiwane w środowiskach node.js.\n\n> **⚠️ Ostrzeżenie**\n> Zaleca się wyłączenie przekierowań przez ustawienie maxRedirects: 0 podczas przesyłania strumienia w środowisku **node.js**,\n> ponieważ pakiet follow-redirects zbuforuje cały strumień w pamięci RAM bez stosowania algorytmu \"backpressure\".\n\n\n## 🆕 Ograniczanie prędkości (Rate limiting)\n\nLimity prędkości pobierania i przesyłania mogą być ustawione tylko dla adaptera http (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // limit 100KB/s\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios posiada własną klasę `AxiosHeaders` do manipulowania nagłówkami przy użyciu API podobnego do Map, które gwarantuje bezproblemową obsługę wielkości liter.\nChociaż HTTP jest nieczułe na wielkość liter w nagłówkach, Axios zachowa oryginalną wielkość liter nagłówka ze względów stylistycznych\noraz jako obejście, gdy serwery błędnie rozróżniają wielkość liter w nagłówkach.\nStare podejście polegające na bezpośredniej manipulacji obiektem headers jest nadal dostępne, ale przestarzałe i niezalecane do przyszłego użycia.\n\n### Praca z nagłówkami\n\nInstancja obiektu AxiosHeaders może zawierać różne typy wartości wewnętrznych, które kontrolują logikę ustawiania i scalania.\nKońcowy obiekt nagłówków ze stringowymi wartościami uzyskiwany jest przez Axios poprzez wywołanie metody `toJSON`.\n\n> Uwaga: Przez JSON rozumiemy tutaj obiekt składający się wyłącznie z wartości typu string, przeznaczony do przesłania przez sieć.\n\nWartość nagłówka może być jednym z następujących typów:\n- `string` - zwykła wartość tekstowa, która zostanie wysłana do serwera\n- `null` - pomiń nagłówek podczas renderowania do JSON\n- `false` - pomiń nagłówek podczas renderowania do JSON, dodatkowo wskazuje, że metoda `set` musi być wywołana z opcją `rewrite` ustawioną na `true`,\n  aby nadpisać tę wartość (Axios używa tego wewnętrznie, aby umożliwić użytkownikom rezygnację z instalowania niektórych nagłówków, takich jak `User-Agent` czy `Content-Type`)\n- `undefined` - wartość nie jest ustawiona\n\n> Uwaga: Wartość nagłówka jest uznana za ustawioną, jeśli nie jest równa undefined.\n\nObiekt headers jest zawsze inicjalizowany wewnątrz interceptorów i transformerów:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // wyłączenie ustawiania nagłówka przez Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // bezpośredni dostęp jest przestarzały\n    \n      return request;\n    }\n  );\n````\n\nMożesz iterować po instancji `AxiosHeaders` używając instrukcji `for...of`:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "status": "ok"
}