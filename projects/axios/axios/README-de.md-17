{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## üî• Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can‚Äôt use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## üî• Fetch-Adapter\n\nDer Fetch-Adapter wurde in `v1.7.0` eingef√ºhrt. Standardm√§√üig wird er verwendet, wenn die Adapter `xhr` und `http` im Build nicht verf√ºgbar oder von der Umgebung nicht unterst√ºtzt werden.\nUm ihn standardm√§√üig zu verwenden, muss er explizit ausgew√§hlt werden:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // standardm√§√üig ['xhr', 'http', 'fetch']\n})\n```\n\nSie k√∂nnen daf√ºr eine separate Instanz erstellen:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nDer Adapter unterst√ºtzt die gleiche Funktionalit√§t wie der `xhr`-Adapter, **einschlie√ülich Upload- und Download-Fortschrittsanzeige**.\nAu√üerdem unterst√ºtzt er zus√§tzliche Antworttypen wie `stream` und `formdata` (sofern von der Umgebung unterst√ºtzt).\n\n## Semver\n\nBis axios eine `1.0`-Version erreicht, werden Breaking Changes mit einer neuen Minor-Version ver√∂ffentlicht. Zum Beispiel werden `0.5.1` und `0.5.4` die gleiche API haben, aber `0.6.0` wird Breaking Changes enthalten.\n\n## Promises\n\naxios ist auf eine native ES6-Promise-Implementierung angewiesen, um [unterst√ºtzt](https://caniuse.com/promises) zu werden.\nFalls Ihre Umgebung keine ES6-Promises unterst√ºtzt, k√∂nnen Sie ein [Polyfill](https://github.com/jakearchibald/es6-promise) verwenden.\n\n## TypeScript\n\naxios enth√§lt [TypeScript](https://typescriptlang.org)-Definitionen und einen Type Guard f√ºr axios-Fehler.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nDa axios sowohl mit einem ESM-Default-Export als auch einem CJS-`module.exports` ver√∂ffentlicht wird, gibt es einige Besonderheiten.\nDie empfohlene Einstellung ist die Verwendung von `\"moduleResolution\": \"node16\"` (dies ist impliziert durch `\"module\": \"node16\"`). Beachten Sie, dass dies TypeScript 4.7 oder h√∂her erfordert.\nWenn Sie ESM verwenden, sollten Ihre Einstellungen in Ordnung sein.\nWenn Sie TypeScript zu CJS kompilieren und `\"moduleResolution\": \"node16\"` nicht verwenden k√∂nnen, m√ºssen Sie `esModuleInterop` aktivieren.\nWenn Sie TypeScript zum Typpr√ºfen von CJS-JavaScript-Code verwenden, bleibt Ihnen nur die Option `\"moduleResolution\": \"node16\"`.\n\n## Online-Ein-Klick-Einrichtung\n\nSie k√∂nnen Gitpod, eine Online-IDE (die f√ºr Open Source kostenlos ist), f√ºr Beitr√§ge oder zum Ausf√ºhren der Beispiele online nutzen.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Ressourcen\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [√ñkosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Beitragsrichtlinien](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Verhaltenskodex](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Danksagungen\n\naxios ist stark inspiriert vom [$http-Dienst](https://docs.angularjs.org/api/ng/service/$http), der in [AngularJS](https://angularjs.org/) bereitgestellt wird. Letztlich ist axios der Versuch, einen eigenst√§ndigen `$http`-√§hnlichen Dienst zur Nutzung au√üerhalb von AngularJS bereitzustellen.\n\n## Lizenz\n\n[MIT](LICENSE)\n",
  "status": "ok"
}