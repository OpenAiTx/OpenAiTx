{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### ðŸ†• Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "axios.post('https://example.com', form)\n```\n\n### ðŸ†• Automatische serialisatie naar FormData\n\nVanaf `v0.27.0` ondersteunt Axios automatische objectserialisatie naar een FormData-object als de `Content-Type` header van het verzoek is ingesteld op `multipart/form-data`.\n\nHet volgende verzoek zal de data indienen in een FormData-formaat (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn de `node.js` build wordt standaard de ([`form-data`](https://github.com/form-data/form-data)) polyfill gebruikt.\n\nJe kunt de FormData-klasse overschrijven door de `env.FormData` configuratievariabele in te stellen,\nmaar in de meeste gevallen zal dit waarschijnlijk niet nodig zijn:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nDe Axios FormData-serializer ondersteunt enkele speciale achtervoegsels om de volgende bewerkingen uit te voeren:\n\n- `{}` - serialiseer de waarde met JSON.stringify\n- `[]` - vouw het array-achtige object uit als aparte velden met dezelfde sleutel\n\n> **Opmerking**: uitpakken/expand-operatie wordt standaard gebruikt op arrays en FileList-objecten\n\nDe FormData-serializer ondersteunt extra opties via de eigenschap `config.formSerializer: object` voor het afhandelen van zeldzame gevallen:\n\n- `visitor: Function` - door de gebruiker gedefinieerde visitorfunctie die recursief wordt aangeroepen om het data-object te serialiseren naar een `FormData` object volgens aangepaste regels.\n\n- `dots: boolean = false` - gebruik puntnotatie in plaats van haakjes om arrays en objecten te serialiseren;\n\n- `metaTokens: boolean = true` - voeg het speciale achtervoegsel toe (bijv. `user{}: '{\"name\": \"John\"}'`) in de FormData-sleutel.\nDe back-end body-parser kan mogelijk deze metainformatie gebruiken om de waarde automatisch als JSON te parsen.\n\n- `indexes: null|false|true = false` - bepaalt hoe indexen worden toegevoegd aan uitgepakte sleutels van `platte` array-achtige objecten.\n\n    - `null` - geen haakjes toevoegen (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(standaard) - lege haakjes toevoegen (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - haakjes met indexen toevoegen (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nStel dat we een object hebben als dit:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nDe volgende stappen worden intern uitgevoerd door de Axios-serializer:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios ondersteunt de volgende snelkoppelmethode: `postForm`, `putForm`, `patchForm`\ndie gewoon de overeenkomstige http-methodes zijn met de `Content-Type` header vooraf ingesteld op `multipart/form-data`.\n\n## Bestanden versturen\n\nJe kunt eenvoudig een enkel bestand versturen:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "status": "ok"
}