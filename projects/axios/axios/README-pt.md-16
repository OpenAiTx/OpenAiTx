{
  "id": 16,
  "origin": "### AxiosHeaders#delete(header, matcher?)\n\n```\ndelete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n```\n\nReturns `true` if at least one header has been removed.\n\n### AxiosHeaders#clear(matcher?)\n\n```\nclear(matcher?: AxiosHeaderMatcher): boolean;\n```\n\nRemoves all headers. \nUnlike the `delete` method matcher, this optional matcher will be used to match against the header name rather than the value.\n\n```ts\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\nReturns `true` if at least one header has been cleared.\n\n### AxiosHeaders#normalize(format);\n\nIf the headers object was changed directly, it can have duplicates with the same name but in different cases.\nThis method normalizes the headers object by combining duplicate keys into one.\nAxios uses this method internally after calling each interceptor.\nSet `format` to true for converting headers name to lowercase and capitalize the initial letters (`cOntEnt-type` => `Content-Type`)\n\n```js\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\nReturns `this`.\n\n### AxiosHeaders#concat(...targets)\n\n```\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n```\n\nMerges the instance with targets into a new `AxiosHeaders` instance. If the target is a string, it will be parsed as RAW HTTP headers.\n\nReturns a new `AxiosHeaders` instance.\n\n### AxiosHeaders#toJSON(asStrings?)\n\n````\ntoJSON(asStrings?: boolean): RawAxiosHeaders;\n````\n\nResolve all internal headers values into a new null prototype object. \nSet `asStrings` to true to resolve arrays as a string containing all elements, separated by commas.\n\n### AxiosHeaders.from(thing?)\n\n````\nfrom(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n````\n\nReturns a new `AxiosHeaders` instance created from the raw headers passed in,\nor simply returns the given headers object if it's an `AxiosHeaders` instance.\n\n### AxiosHeaders.concat(...targets)\n\n````\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n````\n\nReturns a new `AxiosHeaders` instance created by merging the target objects.\n\n### Shortcuts\n\nThe following shortcuts are available:\n\n- `setContentType`, `getContentType`, `hasContentType`\n\n- `setContentLength`, `getContentLength`, `hasContentLength`\n\n- `setAccept`, `getAccept`, `hasAccept`\n\n- `setUserAgent`, `getUserAgent`, `hasUserAgent`",
  "origin_sha": "4qmvmNfwyVCT9uHZjtTFtv2Zx71NrACZgX9WsiFZ/kg=",
  "translate": "### AxiosHeaders#delete(header, matcher?)\n\n```\ndelete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n```\n\nRetorna `true` se pelo menos um cabeçalho tiver sido removido.\n\n### AxiosHeaders#clear(matcher?)\n\n```\nclear(matcher?: AxiosHeaderMatcher): boolean;\n```\n\nRemove todos os cabeçalhos.  \nDiferente do matcher do método `delete`, este matcher opcional será usado para corresponder ao nome do cabeçalho em vez do valor.\n\n```ts\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\nRetorna `true` se pelo menos um cabeçalho tiver sido limpo.\n\n### AxiosHeaders#normalize(format);\n\nSe o objeto de cabeçalhos foi alterado diretamente, ele pode ter duplicatas com o mesmo nome, mas em diferentes casos.\nEste método normaliza o objeto de cabeçalhos combinando chaves duplicadas em uma só.\nO Axios usa este método internamente após chamar cada interceptor.\nDefina `format` como true para converter o nome dos cabeçalhos para minúsculas e capitalizar as letras iniciais (`cOntEnt-type` => `Content-Type`)\n\n```js\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\nRetorna `this`.\n\n### AxiosHeaders#concat(...targets)\n\n```\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n```\n\nMescla a instância com os alvos em uma nova instância `AxiosHeaders`. Se o alvo for uma string, ela será interpretada como cabeçalhos HTTP RAW.\n\nRetorna uma nova instância de `AxiosHeaders`.\n\n### AxiosHeaders#toJSON(asStrings?)\n\n````\ntoJSON(asStrings?: boolean): RawAxiosHeaders;\n````\n\nResolve todos os valores internos dos cabeçalhos em um novo objeto com protótipo nulo.  \nDefina `asStrings` como true para resolver arrays como uma string contendo todos os elementos, separados por vírgulas.\n\n### AxiosHeaders.from(thing?)\n\n````\nfrom(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n````\n\nRetorna uma nova instância de `AxiosHeaders` criada a partir dos cabeçalhos brutos passados,\nou simplesmente retorna o objeto de cabeçalhos fornecido se for uma instância de `AxiosHeaders`.\n\n### AxiosHeaders.concat(...targets)\n\n````\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n````\n\nRetorna uma nova instância de `AxiosHeaders` criada ao mesclar os objetos de destino.\n\n### Atalhos\n\nOs seguintes atalhos estão disponíveis:\n\n- `setContentType`, `getContentType`, `hasContentType`\n\n- `setContentLength`, `getContentLength`, `hasContentLength`\n\n- `setAccept`, `getAccept`, `hasAccept`\n\n- `setUserAgent`, `getUserAgent`, `hasUserAgent`",
  "status": "ok"
}