{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // Faites ce que vous voulez avec l'événement de progression Axios\n  },\n\n  // `onDownloadProgress` permet la gestion des événements de progression pour les téléchargements\n  // navigateur & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Faites ce que vous voulez avec l'événement de progression Axios\n  },\n\n  // `maxContentLength` définit la taille maximale du contenu de la réponse http en octets autorisée dans node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (option uniquement pour Node) définit la taille maximale du contenu de la requête http en octets autorisée\n  maxBodyLength: 2000,\n\n  // `validateStatus` définit s'il faut résoudre ou rejeter la promesse pour un\n  // code de statut de réponse HTTP donné. Si `validateStatus` retourne `true` (ou est défini sur `null`\n  // ou `undefined`), la promesse sera résolue ; sinon, la promesse sera\n  // rejetée.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // valeur par défaut\n  },\n\n  // `maxRedirects` définit le nombre maximum de redirections à suivre dans node.js.\n  // Si défini à 0, aucune redirection ne sera suivie.\n  maxRedirects: 21, // valeur par défaut\n\n  // `beforeRedirect` définit une fonction qui sera appelée avant la redirection.\n  // Utilisez ceci pour ajuster les options de la requête lors d'une redirection,\n  // pour inspecter les derniers en-têtes de réponse,\n  // ou pour annuler la requête en lançant une erreur\n  // Si maxRedirects est défini à 0, `beforeRedirect` n'est pas utilisé.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` définit un socket UNIX à utiliser dans node.js.\n  // par ex. '/var/run/docker.sock' pour envoyer des requêtes au démon docker.\n  // Seul `socketPath` ou `proxy` peut être spécifié.\n  // Si les deux sont spécifiés, `socketPath` est utilisé.\n  socketPath: null, // valeur par défaut\n  \n  // `transport` détermine la méthode de transport qui sera utilisée pour effectuer la requête.\n  // Si défini, il sera utilisé. Sinon, si `maxRedirects` est 0,\n  // la bibliothèque `http` ou `https` par défaut sera utilisée, selon le protocole spécifié dans `protocol`.\n  // Sinon, la bibliothèque `httpFollow` ou `httpsFollow` sera utilisée, encore une fois selon le protocole,\n  // qui peut gérer les redirections.\n  transport: undefined, // valeur par défaut\n\n  // `httpAgent` et `httpsAgent` définissent un agent personnalisé à utiliser lors des requêtes http\n  // et https, respectivement, dans node.js. Cela permet d'ajouter des options comme\n  // `keepAlive` qui ne sont pas activées par défaut avant Node.js v19.0.0. Après Node.js\n  // v19.0.0, il n'est plus nécessaire de personnaliser l'agent pour activer `keepAlive` car\n  // `http.globalAgent` a `keepAlive` activé par défaut.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` définit le nom d'hôte, le port et le protocole du serveur proxy.\n  // Vous pouvez également définir votre proxy en utilisant les variables d'environnement conventionnelles `http_proxy` et\n  // `https_proxy`. Si vous utilisez des variables d'environnement\n  // pour votre configuration proxy, vous pouvez également définir une variable d'environnement `no_proxy`\n  // comme une liste de domaines séparés par des virgules qui ne doivent pas être proxyfiés.\n  // Utilisez `false` pour désactiver les proxys, en ignorant les variables d'environnement.\n  // `auth` indique que l'authentification HTTP Basic doit être utilisée pour se connecter au proxy, et\n  // fournit les identifiants.\n  // Cela définira un en-tête `Proxy-Authorization`, écrasant tous les\n  // en-têtes personnalisés `Proxy-Authorization` que vous avez définis via `headers`.\n  // Si le serveur proxy utilise HTTPS, vous devez alors définir le protocole sur `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Prend le dessus sur 'host' si les deux sont définis\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` spécifie un jeton d'annulation qui peut être utilisé pour annuler la requête\n  // (voir la section Annulation ci-dessous pour plus de détails)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // une autre manière d'annuler les requêtes Axios en utilisant AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indique si le corps de la réponse doit être décompressé\n  // automatiquement. Si défini à `true`, supprimera également l'en-tête 'content-encoding'\n  // des objets réponses de toutes les réponses décompressées\n  // - Uniquement Node (XHR ne peut pas désactiver la décompression)\n  decompress: true, // valeur par défaut\n\n  // `insecureHTTPParser` booléen.\n  // Indique s'il faut utiliser un parseur HTTP non sécurisé qui accepte des en-têtes HTTP invalides.\n  // Cela peut permettre l'interopérabilité avec des implémentations HTTP non conformes.\n  // L'utilisation du parseur non sécurisé doit être évitée.\n  // voir les options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}