{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// GET-Anfrage für ein entferntes Bild in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Sende eine GET-Anfrage (Standardmethode)\naxios('/user/12345');\n```\n\n### Request-Methoden-Aliase\n\nZur Vereinfachung wurden Aliase für alle gängigen Anfragemethoden bereitgestellt.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### HINWEIS\nBeim Verwenden der Alias-Methoden müssen die Eigenschaften `url`, `method` und `data` nicht im Config-Objekt angegeben werden.\n\n### Nebenläufigkeit (Veraltet)\nBitte verwenden Sie `Promise.all`, um die untenstehenden Funktionen zu ersetzen.\n\nHilfsfunktionen zum Umgang mit gleichzeitigen Anfragen.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Erstellen einer Instanz\n\nSie können eine neue Instanz von axios mit einer benutzerdefinierten Konfiguration erstellen.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instanz-Methoden\n\nDie verfügbaren Instanz-Methoden sind unten aufgeführt. Die angegebene Konfiguration wird mit der Instanz-Konfiguration zusammengeführt.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nDies sind die verfügbaren Konfigurationsoptionen für Anfragen. Nur die `url` ist erforderlich. Anfragen werden standardmäßig als `GET` ausgeführt, wenn keine `method` angegeben ist.\n\n```js\n{\n  // `url` ist die Server-URL, die für die Anfrage verwendet wird\n  url: '/user',\n\n  // `method` ist die Anfragemethode, die bei der Anfrage verwendet wird\n  method: 'get', // Standard\n\n  // `baseURL` wird an `url` vorangestellt, es sei denn, `url` ist absolut und die Option `allowAbsoluteUrls` ist auf true gesetzt.\n  // Es kann praktisch sein, `baseURL` für eine Instanz von axios zu setzen, um relative URLs\n  // an Methoden dieser Instanz zu übergeben.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` bestimmt, ob absolute URLs eine konfigurierte `baseUrl` überschreiben.\n  // Wenn auf true gesetzt (Standard), überschreiben absolute Werte für `url` die `baseUrl`.\n  // Wenn auf false gesetzt, werden absolute Werte für `url` immer von `baseUrl` vorangestellt.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` erlaubt Änderungen an den Request-Daten, bevor sie an den Server gesendet werden\n  // Dies ist nur für die Anfragemethoden 'PUT', 'POST', 'PATCH' und 'DELETE' anwendbar\n  // Die letzte Funktion im Array muss einen String oder eine Instanz von Buffer, ArrayBuffer,\n  // FormData oder Stream zurückgeben\n  // Sie können das Header-Objekt modifizieren.\n  transformRequest: [function (data, headers) {\n    // Verarbeiten Sie die Daten nach Belieben\n```",
  "status": "ok"
}