{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // Machen Sie, was immer Sie mit dem Axios-Progress-Event möchten\n  },\n\n  // `onDownloadProgress` ermöglicht das Handling von Fortschrittsereignissen für Downloads\n  // Browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Machen Sie, was immer Sie mit dem Axios-Progress-Event möchten\n  },\n\n  // `maxContentLength` definiert die maximale Größe des HTTP-Response-Inhalts in Bytes, die in node.js erlaubt ist\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (nur Node-Option) definiert die maximale Größe des HTTP-Request-Inhalts in Bytes, die erlaubt ist\n  maxBodyLength: 2000,\n\n  // `validateStatus` definiert, ob das Promise für einen gegebenen HTTP-Statuscode aufgelöst oder abgelehnt wird.\n  // Wenn `validateStatus` `true` zurückgibt (oder auf `null` oder `undefined` gesetzt ist), wird das Promise aufgelöst;\n  // andernfalls wird das Promise abgelehnt.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // Standard\n  },\n\n  // `maxRedirects` definiert die maximale Anzahl von Weiterleitungen, denen in node.js gefolgt werden soll.\n  // Wenn auf 0 gesetzt, werden keine Weiterleitungen verfolgt.\n  maxRedirects: 21, // Standard\n\n  // `beforeRedirect` definiert eine Funktion, die vor einer Weiterleitung aufgerufen wird.\n  // Verwenden Sie dies, um die Request-Optionen beim Weiterleiten anzupassen,\n  // die letzten Response-Header zu inspizieren,\n  // oder die Anfrage durch Auslösen eines Fehlers abzubrechen.\n  // Wenn maxRedirects auf 0 gesetzt ist, wird `beforeRedirect` nicht verwendet.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` definiert einen UNIX-Socket, der in node.js verwendet wird.\n  // z.B. '/var/run/docker.sock', um Anfragen an den Docker-Daemon zu senden.\n  // Es kann nur entweder `socketPath` oder `proxy` angegeben werden.\n  // Wenn beides angegeben ist, wird `socketPath` verwendet.\n  socketPath: null, // Standard\n  \n  // `transport` bestimmt die Transportmethode, die für die Anfrage verwendet wird.\n  // Wenn definiert, wird diese verwendet. Andernfalls, wenn `maxRedirects` 0 ist,\n  // wird die Standard-`http`- oder `https`-Bibliothek verwendet, je nach im `protocol` angegebenem Protokoll.\n  // Andernfalls wird die `httpFollow`- oder `httpsFollow`-Bibliothek verwendet, wieder je nach Protokoll,\n  // welche Weiterleitungen handhaben kann.\n  transport: undefined, // Standard\n\n  // `httpAgent` und `httpsAgent` definieren einen benutzerdefinierten Agenten, der beim Ausführen von http-\n  // bzw. https-Anfragen in node.js verwendet wird. Damit können Optionen wie\n  // `keepAlive` hinzugefügt werden, die standardmäßig vor Node.js v19.0.0 nicht aktiviert sind.\n  // Ab Node.js v19.0.0 muss der Agent nicht mehr angepasst werden, um `keepAlive` zu aktivieren,\n  // da `http.globalAgent` standardmäßig `keepAlive` aktiviert hat.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` definiert den Hostnamen, Port und das Protokoll des Proxy-Servers.\n  // Sie können Ihren Proxy auch mit den üblichen Umgebungsvariablen `http_proxy` und\n  // `https_proxy` definieren. Wenn Sie Umgebungsvariablen für Ihre Proxy-Konfiguration verwenden,\n  // können Sie außerdem eine `no_proxy`-Umgebungsvariable als kommaseparierte Liste von Domains angeben,\n  // die nicht über den Proxy geleitet werden sollen.\n  // Verwenden Sie `false`, um Proxys zu deaktivieren und Umgebungsvariablen zu ignorieren.\n  // `auth` gibt an, dass HTTP-Basic-Auth zum Verbinden mit dem Proxy verwendet werden soll und\n  // stellt Zugangsdaten bereit.\n  // Dadurch wird ein `Proxy-Authorization`-Header gesetzt, der alle bestehenden\n  // benutzerdefinierten `Proxy-Authorization`-Header, die Sie mit `headers` gesetzt haben, überschreibt.\n  // Wenn der Proxy-Server HTTPS verwendet, muss das Protokoll auf `https` gesetzt werden.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Hat Vorrang vor 'host', wenn beide definiert sind\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` gibt ein Cancel-Token an, das verwendet werden kann, um die Anfrage abzubrechen\n  // (siehe Abschnitt \"Cancellation\" unten für Details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // eine alternative Möglichkeit, Axios-Anfragen mit AbortController abzubrechen\n  signal: new AbortController().signal,\n\n  // `decompress` gibt an, ob der Response-Body automatisch dekomprimiert werden soll.\n  // Wenn auf `true` gesetzt, wird auch der 'content-encoding'-Header\n  // aus den Response-Objekten aller dekomprimierten Antworten entfernt.\n  // - Nur Node (XHR kann keine Dekomprimierung deaktivieren)\n  decompress: true, // Standard\n\n  // `insecureHTTPParser` Boolean.\n  // Gibt an, ob ein unsicherer HTTP-Parser verwendet werden soll, der ungültige HTTP-Header akzeptiert.\n  // Dies kann die Interoperabilität mit nicht-konformen HTTP-Implementierungen ermöglichen.\n  // Die Verwendung des unsicheren Parsers sollte vermieden werden.\n  // siehe Optionen https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}