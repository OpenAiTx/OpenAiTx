{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // ver también https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // valor por defecto\n\n  // opciones transicionales para compatibilidad hacia atrás que pueden ser eliminadas en versiones futuras\n  transitional: {\n    // modo silencioso de análisis JSON\n    // `true`  - ignora los errores de análisis JSON y establece response.data en null si el análisis falla (comportamiento anterior)\n    // `false` - lanza SyntaxError si el análisis JSON falla (Nota: responseType debe ser 'json')\n    silentJSONParsing: true, // valor por defecto para la versión actual de Axios\n\n    // intenta analizar la cadena de respuesta como JSON incluso si `responseType` no es 'json'\n    forcedJSONParsing: true,\n\n    // lanza un error ETIMEDOUT en lugar de ECONNABORTED genérico en caso de tiempo de espera de la solicitud\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // La clase FormData que se utilizará para serializar automáticamente el payload en un objeto FormData\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // función visitor personalizada para serializar valores de formulario\n      dots: boolean, // usar puntos en vez del formato de corchetes\n      metaTokens: boolean, // mantener terminaciones especiales como {} en la clave del parámetro\n      indexes: boolean, // formato de índices de arrays: null - sin corchetes, false - corchetes vacíos, true - corchetes con índices\n  },\n\n  // solo para adaptador http (node.js)\n  maxRate: [\n    100 * 1024, // límite de subida de 100KB/s,\n    100 * 1024  // límite de descarga de 100KB/s\n  ]\n}\n```\n\n## Esquema de la Respuesta\n\nLa respuesta de una solicitud contiene la siguiente información.\n\n```js\n{\n  // `data` es la respuesta proporcionada por el servidor\n  data: {},\n\n  // `status` es el código de estado HTTP de la respuesta del servidor\n  status: 200,\n\n  // `statusText` es el mensaje de estado HTTP de la respuesta del servidor\n  statusText: 'OK',\n\n  // `headers` son los encabezados HTTP con los que respondió el servidor\n  // Todos los nombres de encabezado están en minúsculas y se pueden acceder usando la notación de corchetes.\n  // Ejemplo: `response.headers['content-type']`\n  headers: {},\n\n  // `config` es la configuración que se proporcionó a `axios` para la solicitud\n  config: {},\n\n  // `request` es la solicitud que generó esta respuesta\n  // Es la última instancia de ClientRequest en node.js (en redirecciones)\n  // y una instancia de XMLHttpRequest en el navegador\n  request: {}\n}\n```\n\nAl usar `then`, recibirás la respuesta de la siguiente manera:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nAl usar `catch`, o pasando un [callback de rechazo](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) como segundo parámetro de `then`, la respuesta estará disponible a través del objeto `error` como se explica en la sección [Manejo de Errores](#handling-errors).\n\n## Valores por Defecto de Configuración\n\nPuedes especificar valores por defecto de configuración que se aplicarán a cada solicitud.\n\n### Valores por defecto globales de axios\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Importante: Si axios se usa con múltiples dominios, el AUTH_TOKEN será enviado a todos ellos.\n// Ver más abajo un ejemplo usando valores por defecto de instancia personalizada.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Valores por defecto de instancia personalizada\n```",
  "status": "ok"
}