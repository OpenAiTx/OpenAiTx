{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "```markdown\n    return data;\n  }],\n\n  // `transformResponse` อนุญาตให้เปลี่ยนแปลงข้อมูลการตอบกลับก่อนที่จะถูกส่งต่อไปยัง then/catch\n  transformResponse: [function (data) {\n    // ทำอะไรก็ได้เพื่อเปลี่ยนแปลงข้อมูล\n\n    return data;\n  }],\n\n  // `headers` คือ custom headers ที่จะถูกส่งไป\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` คือ URL parameters ที่จะถูกส่งไปกับ request\n  // ต้องเป็น plain object หรือ URLSearchParams object เท่านั้น\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` คือ config เสริมที่ให้คุณปรับแต่งการ serialize `params` ได้\n  paramsSerializer: {\n\n    // ฟังก์ชัน encoder แบบกำหนดเองที่จะส่ง key/value เป็นลำดับ\n    encode?: (param: string): string => { /* ทำการปรับแต่งที่นี่และคืนค่า string ที่เปลี่ยนแปลงแล้ว */ }, \n    \n    // ฟังก์ชัน serializer แบบกำหนดเองสำหรับ parameter ทั้งหมด อนุญาตให้ผู้ใช้เลียนแบบพฤติกรรมก่อนเวอร์ชัน 1.x\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // การตั้งค่าสำหรับจัดรูปแบบ index ของ array ใน params\n    indexes: false // ตัวเลือกมี 3 แบบ: (1) indexes: null (ไม่มีวงเล็บ), (2) (ค่าดีฟอลต์) indexes: false (วงเล็บเปล่า), (3) indexes: true (มีวงเล็บและ index)\n  },\n\n  // `data` คือข้อมูลที่จะถูกส่งเป็น request body\n  // ใช้ได้เฉพาะกับเมธอด 'PUT', 'POST', 'DELETE', และ 'PATCH'\n  // หากไม่ได้ตั้งค่า `transformRequest` ต้องเป็นชนิดใดชนิดหนึ่งต่อไปนี้:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - เฉพาะเบราว์เซอร์: FormData, File, Blob\n  // - เฉพาะ Node: Stream, Buffer, FormData (จากแพ็กเกจ form-data)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // ไวยากรณ์ทางเลือกสำหรับส่งข้อมูลใน body\n  // เมธอด post\n  // จะส่งเฉพาะค่า ไม่ใช่ key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` กำหนดจำนวนมิลลิวินาทีก่อนที่ request จะหมดเวลา\n  // หาก request ใช้เวลานานกว่า `timeout` request จะถูกยกเลิก\n  timeout: 1000, // ค่าดีฟอลต์คือ `0` (ไม่หมดเวลา)\n\n  // `withCredentials` บ่งบอกว่าควรใช้ credentials กับ cross-site Access-Control requests หรือไม่\n  withCredentials: false, // ค่าดีฟอลต์\n\n  // `adapter` อนุญาตให้จัดการ request แบบกำหนดเอง ทำให้ทดสอบได้ง่ายขึ้น\n  // ส่งคืน promise และให้ response ที่ถูกต้อง (ดู lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // คุณยังสามารถตั้งชื่อ adapter ที่มีอยู่ หรือให้เป็น array ของชื่อเพื่อเลือกตัวแรกที่ใช้ได้ในสภาพแวดล้อมนั้น\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` บ่งบอกว่าควรใช้ HTTP Basic auth และให้ข้อมูลเข้าสู่ระบบ\n  // จะตั้งค่า `Authorization` header ทับ header ที่มีอยู่ที่คุณตั้งค่าเอง\n  // โปรดทราบว่า HTTP Basic auth เท่านั้นที่ตั้งค่าได้ด้วยพารามิเตอร์นี้\n  // สำหรับ Bearer token และอื่น ๆ ให้ใช้ `Authorization` header แบบ custom แทน\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` ระบุชนิดของข้อมูลที่เซิร์ฟเวอร์จะตอบกลับ\n  // ตัวเลือก: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   เฉพาะเบราว์เซอร์: 'blob'\n  responseType: 'json', // ค่าดีฟอลต์\n\n  // `responseEncoding` ระบุ encoding ที่จะใช้สำหรับถอดรหัส response (เฉพาะ Node.js)\n  // หมายเหตุ: จะไม่สนใจหาก `responseType` เป็น 'stream' หรือ request ฝั่ง client\n  // ตัวเลือก: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // ค่าดีฟอลต์\n\n  // `xsrfCookieName` คือชื่อของ cookie ที่จะใช้เป็นค่า xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // ค่าดีฟอลต์\n\n  // `xsrfHeaderName` คือชื่อของ http header ที่ใช้ส่งค่า xsrf token\n  xsrfHeaderName: 'X-XSRF-TOKEN', // ค่าดีฟอลต์\n    \n  // `undefined` (ค่าดีฟอลต์) - ตั้งค่า XSRF header เฉพาะกับ request ที่เป็นต้นทางเดียวกันเท่านั้น\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` อนุญาตให้จัดการ event ความคืบหน้าของการอัปโหลด\n  // ใช้ได้ทั้ง browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {\n```",
  "status": "ok"
}