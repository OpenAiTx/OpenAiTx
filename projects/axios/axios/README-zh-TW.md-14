{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // 下載速度（以位元組為單位）\n      download: true; // 下載標誌\n    }*/\n  }\n});  \n```\n\n你也可以在 node.js 中追蹤串流的上傳/下載進度：\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // 避免將整個串流緩衝到記憶體\n});\n````\n\n> **注意：**\n> 目前在 node.js 環境下尚不支援捕捉 FormData 上傳進度。\n\n> **⚠️ 警告**\n> 建議在 **node.js** 環境中將 maxRedirects 設為 0 來禁用重導向，\n> 因為 follow-redirects 套件會將整個串流緩衝到記憶體中，無法遵循「背壓」演算法。\n\n\n## 🆕 速率限制\n\n下載與上傳速率限制僅能於 http adapter（node.js）中設定：\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`上傳 [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s 限速\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios 有自己的 `AxiosHeaders` 類別，可以使用類似 Map 的 API 操作標頭，保證不分大小寫的運作。\n雖然 HTTP 標頭本身不區分大小寫，Axios 為了風格及因應某些伺服器錯誤地區分大小寫的情況，會保留原始標頭的大小寫。\n直接操作 headers 物件的舊方式仍然可用，但已被棄用，不建議未來繼續使用。\n\n### 操作 headers\n\nAxiosHeaders 物件實例可以包含不同類型的內部值，這些值控制設定與合併的邏輯。\n最終只含字串值的 headers 物件，會透過 Axios 調用 `toJSON` 方法取得。\n\n> 注意：這裡的 JSON 是指一個只包含字串值、用於網路傳輸的物件。\n\n標頭值可以是下列其中之一：\n- `string` - 正常的字串值，會傳送到伺服器\n- `null` - 渲染成 JSON 時略過此標頭\n- `false` - 渲染成 JSON 時略過此標頭，並且表示必須使用 `rewrite` 選項呼叫 `set` 方法覆寫此值（Axios 內部用於讓使用者選擇不安裝如 `User-Agent` 或 `Content-Type` 等特定標頭）\n- `undefined` - 尚未設定值\n\n> 注意：只要標頭值不等於 undefined，就被視為已設定。\n\nheaders 物件會在攔截器與轉換器內部初始化：\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // 禁止 Axios 後續設定此標頭\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // 直接存取已被棄用\n    \n      return request;\n    }\n  );\n````\n\n你可以用 `for...of` 迴圈遍歷 `AxiosHeaders` 實例：\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "status": "ok"
}