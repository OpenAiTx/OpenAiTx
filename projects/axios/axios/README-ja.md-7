{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // 参照: https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // デフォルト\n\n  // 後方互換性のための移行オプション。新しいバージョンで削除される可能性があります。\n  transitional: {\n    // サイレントJSONパースモード\n    // `true`  - JSONパースエラーを無視し、パースに失敗した場合はresponse.dataをnullに設定（旧動作）\n    // `false` - JSONパースに失敗した場合はSyntaxErrorを投げる（注意: responseTypeは'json'に設定する必要があります）\n    silentJSONParsing: true, // 現在のAxiosバージョンのデフォルト値\n\n    // `responseType`が'json'でなくてもレスポンス文字列をJSONとしてパースしようとする\n    forcedJSONParsing: true,\n\n    // リクエストタイムアウト時、汎用的なECONNABORTEDの代わりにETIMEDOUTエラーを投げる\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // ペイロードを自動的にFormDataオブジェクトへシリアライズするために使用するFormDataクラス\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // フォーム値をシリアライズするカスタムビジター関数\n      dots: boolean, // ブラケット形式の代わりにドット形式を使用\n      metaTokens: boolean, // パラメータキーの特殊な終端（例: {}）を保持\n      indexes: boolean, // 配列インデックス形式 null - ブラケットなし, false - 空のブラケット, true - インデックス付きブラケット\n  },\n\n  // httpアダプターのみ（node.js）\n  maxRate: [\n    100 * 1024, // 100KB/s アップロード制限\n    100 * 1024  // 100KB/s ダウンロード制限\n  ]\n}\n```\n\n## レスポンススキーマ\n\nリクエストのレスポンスには以下の情報が含まれます。\n\n```js\n{\n  // `data` はサーバーから提供されたレスポンス\n  data: {},\n\n  // `status` はサーバーレスポンスのHTTPステータスコード\n  status: 200,\n\n  // `statusText` はサーバーレスポンスのHTTPステータスメッセージ\n  statusText: 'OK',\n\n  // `headers` サーバーが返したHTTPヘッダー\n  // すべてのヘッダー名は小文字で、ブラケット記法でアクセスできます。\n  // 例: `response.headers['content-type']`\n  headers: {},\n\n  // `config` はそのリクエストのために`axios`に渡された設定\n  config: {},\n\n  // `request` はこのレスポンスを生成したリクエスト\n  // node.jsでは最後のClientRequestインスタンス（リダイレクト時）\n  // ブラウザではXMLHttpRequestインスタンス\n  request: {}\n}\n```\n\n`then`を使用する場合、レスポンスは以下のように受け取ります:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\n`catch`を使用する場合、または[拒否コールバック](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then)を`then`の2番目のパラメータとして渡す場合、レスポンスは[エラー処理](#handling-errors)セクションで説明されているように`error`オブジェクトを通じて利用できます。\n\n## 設定デフォルト\n\nすべてのリクエストに適用される設定のデフォルト値を指定できます。\n\n### グローバルaxiosデフォルト\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// 重要: axiosを複数のドメインで使用する場合、AUTH_TOKENはすべてのドメインに送信されます。\n// 下記のカスタムインスタンスデフォルトの例を参照してください。\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### カスタムインスタンスのデフォルト\n```",
  "status": "ok"
}