{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Nota:** o parâmetro options (com as propriedades `synchronous` e `runWhen`) é suportado apenas para interceptadores de requisição no momento.\n\n### Múltiplos Interceptadores\n\nDado que você adiciona múltiplos interceptadores de resposta\ne quando a resposta for cumprida\n- então cada interceptador é executado\n- então eles são executados na ordem em que foram adicionados\n- então apenas o resultado do último interceptador é retornado\n- então todo interceptador recebe o resultado de seu antecessor\n- e quando o interceptador de sucesso lança uma exceção\n    - então o próximo interceptador de sucesso não é chamado\n    - então o próximo interceptador de rejeição é chamado\n    - uma vez capturado, outro interceptador de sucesso seguinte é chamado novamente (assim como em uma cadeia de promises).\n\nLeia [os testes de interceptadores](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) para ver tudo isso em código.\n\n## Tipos de Erro\n\nExistem várias mensagens de erro do axios que podem aparecer e fornecer informações básicas sobre as especificidades do erro e onde podem estar as oportunidades de depuração.\n\nA estrutura geral dos erros do axios é a seguinte:\n| Propriedade  | Definição  |\n| -------- | ----------  |\n| message  | Um resumo rápido da mensagem de erro e o status com o qual falhou. |\n| name     | Define de onde o erro se originou. Para o axios, sempre será um 'AxiosError'. |\n| stack    | Fornece o rastreamento de pilha do erro. | \n| config   | Um objeto de configuração do axios com configurações específicas de instância definidas pelo usuário no momento em que a requisição foi feita |\n| code     | Representa um erro identificado pelo axios. A tabela abaixo lista as definições específicas para erros internos do axios.  |\n| status   | Código de status da resposta HTTP. Veja [aqui](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) para significados comuns de códigos de status HTTP. \n\nAbaixo está uma lista de erros identificados pelo axios:\n\n| Código                      | Definição                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Valor inválido fornecido na configuração do axios.                                                                                                                                                                                                                                                                                                                                             |\n| ERR_BAD_OPTION            | Opção inválida fornecida na configuração do axios.                                                                                                                                                                                                                                                                                                                                             |\n| ERR_NOT_SUPPORT           | Recurso ou método não suportado no ambiente axios atual.                                                                                                                                                                                                                                                                                                                                       |\n| ERR_DEPRECATED            | Recurso ou método obsoleto usado no axios.                                                                                                                                                                                                                                                                                                                                                     |\n| ERR_INVALID_URL           | URL inválida fornecida para a requisição do axios.                                                                                                                                                                                                                                                                                                                                             |\n| ECONNABORTED              | Normalmente indica que a requisição expirou (a menos que `transitional.clarifyTimeoutError` esteja definido) ou foi abortada pelo navegador ou seu plugin.                                                                                                                                                                                                                                      |\n| ERR_CANCELED              | Recurso ou método é cancelado explicitamente pelo usuário usando um AbortSignal (ou um CancelToken).                                                                                                                                                                                                                                                    |\n| ETIMEDOUT                 | Requisição expirada por exceder o tempo limite padrão do axios. `transitional.clarifyTimeoutError` deve ser definido como `true`, caso contrário, um erro genérico `ECONNABORTED` será lançado em vez disso.                                                                                                                                            |\n| ERR_NETWORK               | Problema relacionado à rede. No navegador, esse erro também pode ser causado por uma violação de política de [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) ou [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content). O navegador não permite que o código JS esclareça a real razão do erro causado por questões de segurança, então verifique o console. |\n| ERR_FR_TOO_MANY_REDIRECTS | A requisição foi redirecionada muitas vezes; excede o máximo de redirecionamentos especificado na configuração do axios.                                                                                                                                                                                                                                |\n| ERR_BAD_RESPONSE          | A resposta não pode ser analisada corretamente ou está em um formato inesperado. Normalmente relacionado a uma resposta com código de status `5xx`.                                                                                                                                                                                                      |\n| ERR_BAD_REQUEST           | A requisição está em um formato inesperado ou está faltando parâmetros obrigatórios. Normalmente relacionado a uma resposta com código de status `4xx`.                                                                                                                                                                                                  |\n\n## Tratando Erros\n\nO comportamento padrão é rejeitar toda resposta que retorna com um código de status fora do intervalo de 2xx e tratá-la como um erro.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // A requisição foi feita e o servidor respondeu com um código de status\n      // que está fora do intervalo de 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // A requisição foi feita, mas nenhuma resposta foi recebida\n      // `error.request` é uma instância de XMLHttpRequest no navegador e uma instância de\n      // http.ClientRequest no node.js\n      console.log(error.request);\n    } else {\n      // Algo aconteceu ao configurar a requisição que disparou um erro\n      console.log('Erro', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsando a opção de configuração `validateStatus`, você pode sobrescrever a condição padrão (status >= 200 && status < 300) e definir código(s) HTTP que devem lançar um erro.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve apenas se o código de status for menor que 500\n  }\n})\n```\n\nUsando `toJSON` você obtém um objeto com mais informações sobre o erro HTTP.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}