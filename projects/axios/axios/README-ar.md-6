{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // افعل ما تريد مع حدث تقدم Axios\n  },\n\n  // `onDownloadProgress` يسمح بمعالجة أحداث التقدم لعمليات التنزيل\n  // المتصفح و node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // افعل ما تريد مع حدث تقدم Axios\n  },\n\n  // `maxContentLength` يحدد الحد الأقصى لحجم محتوى استجابة http بالبايتات المسموح بها في node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (خيار Node فقط) يحدد الحد الأقصى لحجم محتوى طلب http بالبايتات المسموح بها\n  maxBodyLength: 2000,\n\n  // `validateStatus` يحدد ما إذا كان يجب حل أو رفض الوعد لحالة استجابة HTTP معينة.\n  // إذا أعاد `validateStatus` القيمة `true` (أو تم تعيينه إلى `null`\n  // أو `undefined`)، سيتم حل الوعد؛ وإلا، سيتم\n  // رفض الوعد.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // الافتراضي\n  },\n\n  // `maxRedirects` يحدد الحد الأقصى لعدد عمليات إعادة التوجيه التي يجب اتباعها في node.js.\n  // إذا تم تعيينه إلى 0، فلن يتم اتباع أي عمليات إعادة توجيه.\n  maxRedirects: 21, // الافتراضي\n\n  // `beforeRedirect` يحدد دالة سيتم استدعاؤها قبل إعادة التوجيه.\n  // استخدم ذلك لضبط خيارات الطلب عند إعادة التوجيه،\n  // أو لفحص آخر رؤوس الاستجابة،\n  // أو لإلغاء الطلب عن طريق إلقاء خطأ\n  // إذا تم تعيين maxRedirects إلى 0، لن يتم استخدام `beforeRedirect`.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` يحدد مسار مقبس UNIX لاستخدامه في node.js.\n  // مثلاً: '/var/run/docker.sock' لإرسال الطلبات إلى خدمة docker.\n  // يمكن تحديد إما `socketPath` أو `proxy` فقط.\n  // إذا تم تحديد كليهما، سيتم استخدام `socketPath`.\n  socketPath: null, // الافتراضي\n  \n  // `transport` يحدد طريقة النقل التي سيتم استخدامها لإجراء الطلب.\n  // إذا تم تحديدها، سيتم استخدامها. وإلا، إذا كان `maxRedirects` يساوي 0،\n  // سيتم استخدام مكتبة `http` أو `https` الافتراضية، حسب البروتوكول المحدد في `protocol`.\n  // خلاف ذلك، سيتم استخدام مكتبة `httpFollow` أو `httpsFollow`، حسب البروتوكول،\n  // والتي يمكنها معالجة عمليات إعادة التوجيه.\n  transport: undefined, // الافتراضي\n\n  // `httpAgent` و `httpsAgent` يحددان وكيل مخصص لاستخدامه عند إجراء طلبات http\n  // و https على التوالي في node.js. هذا يسمح بإضافة خيارات مثل\n  // `keepAlive` التي لا يتم تفعيلها افتراضياً قبل Node.js v19.0.0. بعد Node.js\n  // v19.0.0، لم تعد بحاجة لتخصيص الوكيل لتفعيل `keepAlive` لأن\n  // `http.globalAgent` أصبح يحتوي على `keepAlive` مفعل افتراضياً.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` يحدد اسم المضيف، المنفذ، وبروتوكول خادم البروكسي.\n  // يمكنك أيضاً تحديد البروكسي الخاص بك باستخدام متغيرات البيئة التقليدية `http_proxy` و\n  // `https_proxy`. إذا كنت تستخدم متغيرات البيئة\n  // لتكوين البروكسي الخاص بك، يمكنك أيضاً تحديد متغير بيئة `no_proxy`\n  // كقائمة مفصولة بفواصل من المجالات التي لا يجب تمريرها عبر البروكسي.\n  // استخدم `false` لتعطيل البروكسيات، متجاهلاً متغيرات البيئة.\n  // `auth` تشير إلى أنه يجب استخدام مصادقة HTTP Basic للاتصال بالبروكسي،\n  // وتوفر بيانات الاعتماد.\n  // سيؤدي ذلك إلى تعيين رأس `Proxy-Authorization`، واستبدال أي رؤوس\n  // `Proxy-Authorization` مخصصة قمت بتعيينها باستخدام `headers`.\n  // إذا كان خادم البروكسي يستخدم HTTPS، يجب عليك تعيين البروتوكول إلى `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // له أولوية على 'host' إذا تم تحديد كليهما\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` يحدد رمز إلغاء يمكن استخدامه لإلغاء الطلب\n  // (انظر قسم الإلغاء أدناه لمزيد من التفاصيل)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // طريقة بديلة لإلغاء طلبات Axios باستخدام AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` يشير إلى ما إذا كان يجب فك ضغط جسم الاستجابة\n  // تلقائياً أم لا. إذا تم تعيينه إلى `true` سيتم أيضاً إزالة رأس 'content-encoding'\n  // من كائنات الاستجابة لجميع الاستجابات التي تم فك ضغطها\n  // - Node فقط (لا يمكن لـ XHR إيقاف فك الضغط)\n  decompress: true, // الافتراضي\n\n  // `insecureHTTPParser` نوعه boolean.\n  // يشير إلى ما إذا كان سيتم استخدام محلل HTTP غير آمن يقبل رؤوس HTTP غير الصالحة.\n  // قد يسمح ذلك بالتوافق مع تطبيقات HTTP غير المتوافقة.\n  // يجب تجنب استخدام المحلل غير الآمن.\n  // راجع الخيارات https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}