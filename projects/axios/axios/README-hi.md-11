{
  "id": 11,
  "origin": "Or in another way (ES6),\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### Older Node.js versions\n\nFor older Node.js engines, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nconst querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\n\n> **Note**: The `qs` library is preferable if you need to stringify nested objects, as the `querystring` method has [known issues](https://github.com/nodejs/node-v0.x-archive/issues/1665) with that use case.\n\n### ЁЯЖХ Automatic serialization to URLSearchParams\n\nAxios will automatically serialize the data object to urlencoded format if the content-type header is set to \"application/x-www-form-urlencoded\".\n\n```js\nconst data = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n};\n\nawait axios.postForm('https://postman-echo.com/post', data,\n  {headers: {'content-type': 'application/x-www-form-urlencoded'}}\n);\n```\n\nThe server will handle it as:\n\n```js\n  {\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }\n````\n\nIf your backend body-parser (like `body-parser` of `express.js`) supports nested objects decoding, you will get the same object on the server-side automatically\n\n```js\n  var app = express();\n\n  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies\n\n  app.post('/', function (req, res, next) {\n     // echo body as JSON\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);\n```\n\n## Using `multipart/form-data` format\n\n### FormData\n\nTo send the data as a `multipart/formdata` you need to pass a formData instance as a payload.\nSetting the `Content-Type` header is not required as Axios guesses it based on the payload type.\n\n```js\nconst formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);\n```\n\nIn node.js, you can use the [`form-data`](https://github.com/form-data/form-data) library as follows:\n\n```js\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n",
  "origin_sha": "j3Dr86fSugO8ALJ3tr12GuI6rpfVda40nuO2oD88Ids=",
  "translate": "рдпрд╛ рдПрдХ рдЕрдиреНрдп рддрд░реАрдХреЗ рд╕реЗ (ES6),\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### рдкреБрд░рд╛рдиреЗ Node.js рд╕рдВрд╕реНрдХрд░рдг\n\nрдкреБрд░рд╛рдиреЗ Node.js рдЗрдВрдЬрди рдХреЗ рд▓рд┐рдП, рдЖрдк [`querystring`](https://nodejs.org/api/querystring.html) рдореЙрдбреНрдпреВрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдЗрд╕ рдкреНрд░рдХрд╛рд░ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:\n\n```js\nconst querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nрдЖрдк [`qs`](https://github.com/ljharb/qs) рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдХрд╛ рднреА рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред\n\n> **рдиреЛрдЯ**: рдпрджрд┐ рдЖрдкрдХреЛ рдиреЗрд╕реНрдЯреЗрдб рдСрдмреНрдЬреЗрдХреНрдЯреНрд╕ рдХреЛ рд╕реНрдЯреНрд░рд┐рдВрдЧрд┐рдлрд╛рдИ рдХрд░рдиреЗ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИ, рддреЛ `qs` рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдЙрдкрдпреБрдХреНрдд рд╣реИ, рдХреНрдпреЛрдВрдХрд┐ `querystring` рдореЗрдердб рдореЗрдВ рдЙрд╕ рдЙрдкрдпреЛрдЧ рдХреЗрд╕ рдХреЗ рд▓рд┐рдП [рдЬреНрдЮрд╛рдд рд╕рдорд╕реНрдпрд╛рдПрдВ](https://github.com/nodejs/node-v0.x-archive/issues/1665) рд╣реИрдВред\n\n### ЁЯЖХ URLSearchParams рдХреЗ рд▓рд┐рдП рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬреЗрд╢рди\n\nрдпрджрд┐ content-type рд╣реЗрдбрд░ \"application/x-www-form-urlencoded\" рдкрд░ рд╕реЗрдЯ рд╣реИ рддреЛ Axios рдбреЗрдЯрд╛ рдСрдмреНрдЬреЗрдХреНрдЯ рдХреЛ urlencoded рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬ рдХрд░ рджреЗрдЧрд╛ред\n\n```js\nconst data = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n};\n\nawait axios.postForm('https://postman-echo.com/post', data,\n  {headers: {'content-type': 'application/x-www-form-urlencoded'}}\n);\n```\n\nрд╕рд░реНрд╡рд░ рдЗрд╕реЗ рдЗрд╕ рдкреНрд░рдХрд╛рд░ рд╣реИрдВрдбрд▓ рдХрд░реЗрдЧрд╛:\n\n```js\n  {\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }\n```\n\nрдпрджрд┐ рдЖрдкрдХрд╛ рдмреИрдХрдПрдВрдб рдмреЙрдбреА-рдкрд╛рд░реНрд╕рд░ (рдЬреИрд╕реЗ `express.js` рдХрд╛ `body-parser`) рдиреЗрд╕реНрдЯреЗрдб рдСрдмреНрдЬреЗрдХреНрдЯреНрд╕ рдбрд┐рдХреЛрдбрд┐рдВрдЧ рдХреЛ рд╕рдкреЛрд░реНрдЯ рдХрд░рддрд╛ рд╣реИ, рддреЛ рдЖрдкрдХреЛ рд╕рд░реНрд╡рд░-рд╕рд╛рдЗрдб рдкрд░ рд╕реНрд╡рддрдГ рд╡рд╣реА рдСрдмреНрдЬреЗрдХреНрдЯ рдкреНрд░рд╛рдкреНрдд рд╣реЛрдЧрд╛\n\n```js\n  var app = express();\n\n  app.use(bodyParser.urlencoded({ extended: true })); // рдПрдиреНрдХреЛрдбреЗрдб рдмреЙрдбреА рд╕рдкреЛрд░реНрдЯ рдХрд░рддрд╛ рд╣реИ\n\n  app.post('/', function (req, res, next) {\n     // рдмреЙрдбреА рдХреЛ JSON рдХреЗ рд░реВрдк рдореЗрдВ рдЗрдХреЛ рдХрд░реЗрдВ\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);\n```\n\n## `multipart/form-data` рдлреЙрд░реНрдореЗрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛\n\n### FormData\n\nрдбреЗрдЯрд╛ рдХреЛ `multipart/formdata` рдХреЗ рд░реВрдк рдореЗрдВ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ formData рдЗрдВрд╕реНрдЯреЗрдВрд╕ рдХреЛ payload рдХреЗ рд░реВрдк рдореЗрдВ рдкрд╛рд╕ рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред\n`Content-Type` рд╣реЗрдбрд░ рд╕реЗрдЯ рдХрд░рдирд╛ рдЖрд╡рд╢реНрдпрдХ рдирд╣реАрдВ рд╣реИ рдХреНрдпреЛрдВрдХрд┐ Axios рдЗрд╕реЗ payload рдЯрд╛рдЗрдк рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдкрд╣рдЪрд╛рди рд▓реЗрддрд╛ рд╣реИред\n\n```js\nconst formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);\n```\n\nnode.js рдореЗрдВ, рдЖрдк [`form-data`](https://github.com/form-data/form-data) рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдЗрд╕ рдкреНрд░рдХрд╛рд░ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:\n\n```js\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n```",
  "status": "ok"
}