{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "```markdown\n    return data;\n  }],\n\n  // `transformResponse` は、then/catch に渡される前にレスポンスデータを変更することを可能にします\n  transformResponse: [function (data) {\n    // データを変換するために必要な処理を行ってください\n\n    return data;\n  }],\n\n  // `headers` は送信するカスタムヘッダーです\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` はリクエストと共に送信される URL パラメータです\n  // プレーンなオブジェクトまたは URLSearchParams オブジェクトである必要があります\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` は `params` のシリアライズをカスタマイズできるオプションの設定です。\n  paramsSerializer: {\n\n    // キー/値のペアを逐次的に送信するカスタムエンコーダ関数。\n    encode?: (param: string): string => { /* ここでカスタム処理を行い、変換後の文字列を返してください */ }, \n    \n    // パラメータ全体のカスタムシリアライザ関数。1.x以前の動作を模倣することができます。\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // 配列インデックスのフォーマット設定。\n    indexes: false // 利用可能なオプションは3つ：(1) indexes: null（ブラケットなし）、(2)（デフォルト）indexes: false（空ブラケット）、(3) indexes: true（インデックス付きブラケット）\n  },\n\n  // `data` はリクエストボディとして送信されるデータです\n  // 'PUT', 'POST', 'DELETE', 'PATCH' リクエストメソッドでのみ使用されます\n  // `transformRequest` が設定されていない場合、以下のいずれかの型である必要があります:\n  // - string, プレーンオブジェクト, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - ブラウザのみ: FormData, File, Blob\n  // - Nodeのみ: Stream, Buffer, FormData（form-dataパッケージ）\n  data: {\n    firstName: 'Fred'\n  },\n\n  // ボディにデータを送信するための構文の代替\n  // method post\n  // キーではなく値のみが送信されます\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` はリクエストがタイムアウトするまでのミリ秒数を指定します\n  // リクエストが `timeout` より長くかかった場合、リクエストは中止されます\n  timeout: 1000, // デフォルトは `0`（タイムアウトなし）\n\n  // `withCredentials` はクロスサイトの Access-Control リクエストが\n  // 資格情報付きで行われるべきかどうかを示します\n  withCredentials: false, // デフォルト\n\n  // `adapter` はリクエストのカスタム処理を可能にし、テストを容易にします。\n  // Promise を返し、有効なレスポンスを提供してください（lib/adapters/README.md を参照）\n  adapter: function (config) {\n    /* ... */\n  },\n  // また、組み込みアダプタの名前を設定したり、名前の配列を指定して\n  // 環境で最初に利用可能なものを選択できます\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` は HTTP Basic 認証を使用することを示し、資格情報を提供します。\n  // これにより `Authorization` ヘッダーが設定され、`headers` で設定した既存の\n  // `Authorization` カスタムヘッダーが上書きされます。\n  // このパラメータで設定可能なのは HTTP Basic 認証のみですのでご注意ください。\n  // Bearer トークン等は `Authorization` カスタムヘッダーを使用してください。\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` はサーバーが返すデータのタイプを指定します\n  // オプション: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   ブラウザのみ: 'blob'\n  responseType: 'json', // デフォルト\n\n  // `responseEncoding` はレスポンスのデコードに使用するエンコーディングを指定します（Node.jsのみ）\n  // 注意: `responseType` が 'stream' またはクライアント側リクエストの場合は無視されます\n  // オプション: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // デフォルト\n\n  // `xsrfCookieName` は xsrf トークン値として使用するクッキーの名前です\n  xsrfCookieName: 'XSRF-TOKEN', // デフォルト\n\n  // `xsrfHeaderName` は xsrf トークン値を運ぶ http ヘッダーの名前です\n  xsrfHeaderName: 'X-XSRF-TOKEN', // デフォルト\n    \n  // `undefined`（デフォルト） - 同一オリジンリクエストのみ XSRF ヘッダーを設定\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` はアップロードの進捗イベントを処理できます\n  // ブラウザ & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {\n```",
  "status": "ok"
}