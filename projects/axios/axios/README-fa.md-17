{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can’t use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`، `getContentEncoding`، `hasContentEncoding`\n\n## 🔥 آداپتور Fetch\n\nآداپتور Fetch در نسخه `v1.7.0` معرفی شد. به طور پیش‌فرض، اگر آداپتورهای `xhr` و `http` در ساخت موجود نباشند،\nیا محیط از آن‌ها پشتیبانی نکند، از آن استفاده خواهد شد.\nبرای استفاده پیش‌فرض، باید به طور صریح انتخاب شود:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // به طور پیش‌فرض ['xhr', 'http', 'fetch']\n})\n```\n\nمی‌توانید یک نمونه جداگانه برای این منظور بسازید:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nاین آداپتور همان قابلیت‌های آداپتور `xhr` را پشتیبانی می‌کند، **شامل ثبت پیشرفت بارگذاری و دانلود**.\nهمچنین، از انواع پاسخ اضافی مانند `stream` و `formdata` (در صورت پشتیبانی محیط) نیز پشتیبانی می‌کند.\n\n## Semver\n\nتا زمانی که axios به نسخه `1.0` نرسیده باشد، تغییرات ناسازگار با نسخه قبلی با یک نسخه فرعی جدید منتشر خواهد شد. برای مثال، نسخه‌های `0.5.1` و `0.5.4` رابط برنامه‌نویسی یکسانی خواهند داشت، اما نسخه `0.6.0` شامل تغییرات ناسازگار خواهد بود.\n\n## Promiseها\n\naxios به پیاده‌سازی بومی Promise در ES6 وابسته است تا [پشتیبانی شود](https://caniuse.com/promises).\nاگر محیط شما از Promiseهای ES6 پشتیبانی نمی‌کند، می‌توانید از [polyfill](https://github.com/jakearchibald/es6-promise) استفاده کنید.\n\n## TypeScript\n\naxios شامل تعاریف [TypeScript](https://typescriptlang.org) و یک نگهبان نوع برای خطاهای axios است.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nاز آنجایی که axios به صورت دوگانه با خروجی پیش‌فرض ESM و `module.exports` در CJS منتشر می‌شود، برخی ملاحظات وجود دارد.\nتنظیم پیشنهادی این است که از `\"moduleResolution\": \"node16\"` استفاده کنید (این تنظیم ضمنی با `\"module\": \"node16\"` فعال می‌شود). توجه داشته باشید که این کار به TypeScript 4.7 یا بالاتر نیاز دارد.\nاگر از ESM استفاده می‌کنید، تنظیمات شما مناسب خواهد بود.\nاگر TypeScript را به CJS کامپایل می‌کنید و نمی‌توانید از `\"moduleResolution\": \"node16\"` استفاده کنید، باید `esModuleInterop` را فعال کنید.\nاگر از TypeScript برای بررسی نوع کد جاوااسکریپت CJS استفاده می‌کنید، تنها گزینه شما استفاده از `\"moduleResolution\": \"node16\"` است.\n\n## راه‌اندازی آنلاین یک‌کلیکی\n\nمی‌توانید از Gitpod، یک محیط توسعه آنلاین (که برای پروژه‌های متن‌باز رایگان است) برای مشارکت یا اجرای مثال‌ها به صورت آنلاین استفاده کنید.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## منابع\n\n* [تغییرات](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [اکوسیستم](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [راهنمای مشارکت](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [آیین‌نامه رفتاری](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## اعتبارها\n\naxios به شدت از [$http service](https://docs.angularjs.org/api/ng/service/$http) ارائه شده در [AngularJS](https://angularjs.org/) الهام گرفته است. در نهایت، axios تلاشی است برای ارائه سرویسی مشابه `$http` برای استفاده خارج از AngularJS.\n\n## مجوز\n\n[MIT](LICENSE)\n",
  "status": "ok"
}