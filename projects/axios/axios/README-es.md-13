{
  "id": 13,
  "origin": "});\n```\n\nor multiple files as `multipart/form-data`:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'files[]': document.querySelector('#fileInput').files\n});\n```\n\n`FileList` object can be passed directly:\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)\n```\n\nAll files will be sent with the same field names: `files[]`.\n\n## ðŸ†• HTML Form Posting (browser)\n\nPass HTML Form element as a payload to submit it as `multipart/form-data` content.\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));\n```\n\n`FormData` and `HTMLForm` objects can also be posted as `JSON` by explicitly setting the `Content-Type` header to `application/json`:\n\n```js\nawait axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n```\n\nFor example, the Form\n\n```html\n<form id=\"form\">\n  <input type=\"text\" name=\"foo\" value=\"1\">\n  <input type=\"text\" name=\"deep.prop\" value=\"2\">\n  <input type=\"text\" name=\"deep prop spaced\" value=\"3\">\n  <input type=\"text\" name=\"baz\" value=\"4\">\n  <input type=\"text\" name=\"baz\" value=\"5\">\n\n  <select name=\"user.age\">\n    <option value=\"value1\">Value 1</option>\n    <option value=\"value2\" selected>Value 2</option>\n    <option value=\"value3\">Value 3</option>\n  </select>\n\n  <input type=\"submit\" value=\"Save\">\n</form>\n```\n\nwill be submitted as the following JSON object:\n\n```js\n{\n  \"foo\": \"1\",\n  \"deep\": {\n    \"prop\": {\n      \"spaced\": \"3\"\n    }\n  },\n  \"baz\": [\n    \"4\",\n    \"5\"\n  ],\n  \"user\": {\n    \"age\": \"value2\"\n  }\n}\n````\n\nSending `Blobs`/`Files` as JSON (`base64`) is not currently supported.\n\n## ðŸ†• Progress capturing\n\nAxios supports both browser and node environments to capture request upload/download progress.\nThe frequency of progress events is forced to be limited to `3` times per second.\n\n```js    \nawait axios.post(url, data, {\n  onUploadProgress: function (axiosProgressEvent) {\n    /*{\n      loaded: number;\n      total?: number;\n      progress?: number; // in range [0..1]\n      bytes: number; // how many bytes have been transferred since the last trigger (delta)\n      estimated?: number; // estimated time in seconds\n      rate?: number; // upload speed in bytes\n      upload: true; // upload sign\n    }*/\n  },\n\n  onDownloadProgress: function (axiosProgressEvent) {\n    /*{",
  "origin_sha": "pHLZ21gy3hXhOAeOHsMkCCM4OH1wGWHASYhQzNgbqb4=",
  "translate": "});\n```\n\no mÃºltiples archivos como `multipart/form-data`:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'files[]': document.querySelector('#fileInput').files\n});\n```\n\nEl objeto `FileList` se puede pasar directamente:\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)\n```\n\nTodos los archivos se enviarÃ¡n con los mismos nombres de campo: `files[]`.\n\n## ðŸ†• EnvÃ­o de formularios HTML (navegador)\n\nPasa un elemento de formulario HTML como carga Ãºtil para enviarlo como contenido `multipart/form-data`.\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));\n```\n\nLos objetos `FormData` y `HTMLForm` tambiÃ©n pueden enviarse como `JSON` configurando explÃ­citamente la cabecera `Content-Type` a `application/json`:\n\n```js\nawait axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n```\n\nPor ejemplo, el formulario\n\n```html\n<form id=\"form\">\n  <input type=\"text\" name=\"foo\" value=\"1\">\n  <input type=\"text\" name=\"deep.prop\" value=\"2\">\n  <input type=\"text\" name=\"deep prop spaced\" value=\"3\">\n  <input type=\"text\" name=\"baz\" value=\"4\">\n  <input type=\"text\" name=\"baz\" value=\"5\">\n\n  <select name=\"user.age\">\n    <option value=\"value1\">Value 1</option>\n    <option value=\"value2\" selected>Value 2</option>\n    <option value=\"value3\">Value 3</option>\n  </select>\n\n  <input type=\"submit\" value=\"Guardar\">\n</form>\n```\n\nse enviarÃ¡ como el siguiente objeto JSON:\n\n```js\n{\n  \"foo\": \"1\",\n  \"deep\": {\n    \"prop\": {\n      \"spaced\": \"3\"\n    }\n  },\n  \"baz\": [\n    \"4\",\n    \"5\"\n  ],\n  \"user\": {\n    \"age\": \"value2\"\n  }\n}\n````\n\nNo se admite actualmente el envÃ­o de `Blobs`/`Files` como JSON (`base64`).\n\n## ðŸ†• Captura de progreso\n\nAxios admite tanto entornos de navegador como de Node para capturar el progreso de carga/descarga de solicitudes.\nLa frecuencia de los eventos de progreso se limita forzosamente a `3` veces por segundo.\n\n```js    \nawait axios.post(url, data, {\n  onUploadProgress: function (axiosProgressEvent) {\n    /*{\n      loaded: number;\n      total?: number;\n      progress?: number; // en el rango [0..1]\n      bytes: number; // cuÃ¡ntos bytes se han transferido desde el Ãºltimo disparo (delta)\n      estimated?: number; // tiempo estimado en segundos\n      rate?: number; // velocidad de subida en bytes\n      upload: true; // indicador de subida\n    }*/\n  },\n\n  onDownloadProgress: function (axiosProgressEvent) {\n    /*{",
  "status": "ok"
}