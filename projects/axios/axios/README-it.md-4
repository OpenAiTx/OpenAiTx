{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// Richiesta GET per immagine remota in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Invia una richiesta GET (metodo predefinito)\naxios('/user/12345');\n```\n\n### Alias dei metodi di richiesta\n\nPer comodità, sono stati forniti alias per tutti i metodi di richiesta comuni.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTA\nQuando si utilizzano i metodi alias non è necessario specificare le proprietà `url`, `method` e `data` nella config.\n\n### Concorrenza (Deprecato)\nSi prega di utilizzare `Promise.all` per sostituire le funzioni seguenti.\n\nFunzioni di supporto per gestire richieste concorrenti.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creazione di un'istanza\n\nPuoi creare una nuova istanza di axios con una configurazione personalizzata.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Metodi dell'istanza\n\nI metodi disponibili dell'istanza sono elencati di seguito. La configurazione specificata verrà unita alla configurazione dell'istanza.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Configurazione della richiesta\n\nQueste sono le opzioni di configurazione disponibili per effettuare richieste. Solo l'`url` è obbligatorio. Le richieste useranno come predefinito `GET` se `method` non è specificato.\n\n```js\n{\n  // `url` è l'URL del server che verrà utilizzato per la richiesta\n  url: '/user',\n\n  // `method` è il metodo di richiesta da usare per la richiesta\n  method: 'get', // predefinito\n\n  // `baseURL` sarà anteposto a `url` a meno che `url` sia assoluto e l'opzione `allowAbsoluteUrls` sia impostata su true.\n  // Può essere conveniente impostare `baseURL` per un'istanza di axios per passare URL relativi\n  // ai metodi di quell'istanza.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determina se gli URL assoluti sovrascriveranno un `baseUrl` configurato.\n  // Se impostato su true (predefinito), valori assoluti per `url` sovrascriveranno `baseUrl`.\n  // Se impostato su false, valori assoluti per `url` saranno sempre preceduti da `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` consente di modificare i dati della richiesta prima che vengano inviati al server\n  // Questo è applicabile solo per i metodi di richiesta 'PUT', 'POST', 'PATCH' e 'DELETE'\n  // L'ultima funzione nell'array deve restituire una stringa o un'istanza di Buffer, ArrayBuffer,\n  // FormData o Stream\n  // Puoi modificare l'oggetto headers.\n  transformRequest: [function (data, headers) {\n    // Fai ciò che vuoi per trasformare i dati\n```",
  "status": "ok"
}