{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "```markdown\n    return data;\n  }],\n\n  // `transformResponse` permet de modifier les données de la réponse avant\n  // qu'elles ne soient transmises à then/catch\n  transformResponse: [function (data) {\n    // Faites ce que vous voulez pour transformer les données\n\n    return data;\n  }],\n\n  // `headers` sont des en-têtes personnalisés à envoyer\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` sont les paramètres d'URL à envoyer avec la requête\n  // Doit être un objet simple ou un objet URLSearchParams\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` est une configuration optionnelle qui permet de personnaliser la sérialisation des `params`. \n  paramsSerializer: {\n\n    // Fonction d'encodage personnalisée qui envoie les paires clé/valeur de manière itérative.\n    encode?: (param: string): string => { /* Effectuez des opérations personnalisées ici et retournez la chaîne transformée */ }, \n    \n    // Fonction de sérialisation personnalisée pour l'ensemble des paramètres. Permet à l'utilisateur d'imiter le comportement antérieur à la version 1.x.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration pour le formatage des index de tableau dans les params. \n    indexes: false // Trois options disponibles : (1) indexes: null (pas de crochets), (2) (par défaut) indexes: false (crochets vides), (3) indexes: true (crochets avec index).    \n  },\n\n  // `data` sont les données à envoyer en tant que corps de la requête\n  // Applicable uniquement pour les méthodes 'PUT', 'POST', 'DELETE' et 'PATCH'\n  // Lorsqu'aucun `transformRequest` n'est défini, doit être de l'un des types suivants :\n  // - string, objet simple, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Navigateur uniquement : FormData, File, Blob\n  // - Node uniquement : Stream, Buffer, FormData (paquet form-data)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntaxe alternative pour envoyer des données dans le corps\n  // méthode post\n  // seule la valeur est envoyée, pas la clé\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` spécifie le nombre de millisecondes avant l'expiration de la requête.\n  // Si la requête prend plus longtemps que `timeout`, elle sera abandonnée.\n  timeout: 1000, // la valeur par défaut est `0` (pas de délai d'expiration)\n\n  // `withCredentials` indique si les requêtes cross-site Access-Control\n  // doivent être effectuées avec des identifiants\n  withCredentials: false, // valeur par défaut\n\n  // `adapter` permet une gestion personnalisée des requêtes, ce qui facilite les tests.\n  // Retourne une promesse et fournit une réponse valide (voir lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Vous pouvez également définir le nom de l'adaptateur intégré, ou fournir un tableau avec leurs noms\n  // pour choisir le premier disponible dans l'environnement\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indique que l'authentification HTTP Basic doit être utilisée, et fournit les identifiants.\n  // Cela définira un en-tête `Authorization`, écrasant tout en-tête\n  // `Authorization` personnalisé que vous avez défini via `headers`.\n  // Veuillez noter que seule l'authentification HTTP Basic est configurable via ce paramètre.\n  // Pour les tokens Bearer, etc., utilisez plutôt les en-têtes personnalisés `Authorization`.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indique le type de données que le serveur renverra\n  // options : 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   navigateur uniquement : 'blob'\n  responseType: 'json', // valeur par défaut\n\n  // `responseEncoding` indique l'encodage à utiliser pour décoder les réponses (Node.js uniquement)\n  // Remarque : Ignoré pour `responseType` de 'stream' ou les requêtes côté client\n  // options : 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // valeur par défaut\n\n  // `xsrfCookieName` est le nom du cookie à utiliser comme valeur pour le token xsrf\n  xsrfCookieName: 'XSRF-TOKEN', // valeur par défaut\n\n  // `xsrfHeaderName` est le nom de l'en-tête http qui transporte la valeur du token xsrf\n  xsrfHeaderName: 'X-XSRF-TOKEN', // valeur par défaut\n    \n  // `undefined` (par défaut) - définit l'en-tête XSRF uniquement pour les requêtes de même origine\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` permet la gestion des événements de progression pour les téléchargements\n  // navigateur & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {\n```",
  "status": "ok"
}