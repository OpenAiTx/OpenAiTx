{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// 在 node.js 中對遠端圖片發送 GET 請求\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// 發送一個 GET 請求（預設方法）\naxios('/user/12345');\n```\n\n### 請求方法別名\n\n為了方便，所有常用的請求方法都提供了別名。\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### 注意\n使用別名方法時，`url`、`method` 和 `data` 屬性不需要在 config 中指定。\n\n### 併發（已棄用）\n請使用 `Promise.all` 取代以下函數。\n\n處理併發請求的輔助函數。\n\naxios.all(iterable)\naxios.spread(callback)\n\n### 建立實例\n\n你可以用自定義的 config 建立一個新的 axios 實例。\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### 實例方法\n\n可用的實例方法如下所列。指定的 config 會與實例的 config 合併。\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## 請求設定\n\n這些是可用於發送請求的設定選項。只有 `url` 是必要的。如果未指定 `method`，請求預設為 `GET`。\n\n```js\n{\n  // `url` 是本次請求將會使用的伺服器 URL\n  url: '/user',\n\n  // `method` 是請求時要使用的請求方法\n  method: 'get', // 預設值\n\n  // `baseURL` 會加在 `url` 前面，除非 `url` 是絕對路徑且選項 `allowAbsoluteUrls` 設為 true。\n  // 可以為 axios 實例設定 `baseURL`，以便傳遞相對 URL 給該實例的方法。\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` 決定絕對 URL 是否會覆蓋已設定的 `baseUrl`。\n  // 當設為 true（預設），`url` 的絕對值會覆蓋 `baseUrl`。\n  // 當設為 false，`url` 的絕對值會永遠由 `baseUrl` 加在前面。\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` 允許在資料發送到伺服器前修改請求資料\n  // 只適用於 'PUT', 'POST', 'PATCH' 和 'DELETE' 方法\n  // 陣列中的最後一個函式必須回傳字串或 Buffer、ArrayBuffer、\n  // FormData 或 Stream 的實例\n  // 你可以修改 headers 物件。\n  transformRequest: [function (data, headers) {\n    // 可根據需求轉換資料\n```",
  "status": "ok"
}