{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // Axios 진행 이벤트로 원하는 작업을 수행하세요\n  },\n\n  // `onDownloadProgress`는 다운로드에 대한 진행 이벤트를 처리할 수 있게 해줍니다\n  // 브라우저 & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Axios 진행 이벤트로 원하는 작업을 수행하세요\n  },\n\n  // `maxContentLength`는 node.js에서 허용되는 http 응답 콘텐츠의 최대 크기(바이트 단위)를 정의합니다\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node 전용 옵션)는 node.js에서 허용되는 http 요청 콘텐츠의 최대 크기(바이트 단위)를 정의합니다\n  maxBodyLength: 2000,\n\n  // `validateStatus`는 주어진 HTTP 응답 상태 코드에 대해 프라미스를 resolve할지 reject할지를 정의합니다.\n  // `validateStatus`가 `true`를 반환하거나 `null`, `undefined`로 설정되면 프라미스는 resolve됩니다.\n  // 그렇지 않으면 프라미스는 reject됩니다.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // 기본값\n  },\n\n  // `maxRedirects`는 node.js에서 따라갈 최대 리디렉션 횟수를 정의합니다.\n  // 0으로 설정하면 리디렉션을 따라가지 않습니다.\n  maxRedirects: 21, // 기본값\n\n  // `beforeRedirect`는 리디렉션 전에 호출되는 함수를 정의합니다.\n  // 리디렉션 시 요청 옵션을 조정하거나,\n  // 최신 응답 헤더를 검사하거나,\n  // 에러를 throw하여 요청을 취소할 수 있습니다.\n  // maxRedirects가 0으로 설정된 경우 `beforeRedirect`는 사용되지 않습니다.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath`는 node.js에서 사용할 UNIX 소켓을 정의합니다.\n  // 예: '/var/run/docker.sock'를 통해 도커 데몬에 요청을 보낼 수 있습니다.\n  // `socketPath`와 `proxy` 중 하나만 지정할 수 있습니다.\n  // 둘 다 지정된 경우, `socketPath`가 사용됩니다.\n  socketPath: null, // 기본값\n  \n  // `transport`는 요청을 수행할 때 사용할 전송 방식을 결정합니다.\n  // 정의되어 있으면 해당 방식을 사용합니다. 그렇지 않고 `maxRedirects`가 0이면,\n  // `protocol`에 지정된 프로토콜에 따라 기본 `http` 또는 `https` 라이브러리를 사용합니다.\n  // 그렇지 않으면, 다시 프로토콜에 따라 리디렉션을 처리할 수 있는\n  // `httpFollow` 또는 `httpsFollow` 라이브러리를 사용합니다.\n  transport: undefined, // 기본값\n\n  // `httpAgent`와 `httpsAgent`는 node.js에서 각각 http와 https 요청을 수행할 때 사용할 커스텀 에이전트를 정의합니다.\n  // 이를 통해 Node.js v19.0.0 이전에는 기본적으로 활성화되지 않은 `keepAlive` 같은 옵션을 추가할 수 있습니다.\n  // Node.js v19.0.0 이후에는 `http.globalAgent`가 기본적으로 `keepAlive`를 활성화하므로 별도 설정이 필요 없습니다.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy`는 프록시 서버의 호스트명, 포트, 프로토콜을 정의합니다.\n  // 일반적인 `http_proxy` 및 `https_proxy` 환경 변수를 사용해 프록시를 정의할 수도 있습니다.\n  // 환경 변수를 사용하는 경우, 프록시를 사용하지 않을 도메인을 쉼표로 구분해 나열한 `no_proxy` 환경 변수도 정의할 수 있습니다.\n  // 프록시를 비활성화하려면 `false`로 설정하면 환경 변수를 무시합니다.\n  // `auth`는 프록시 연결 시 HTTP Basic 인증을 사용해야 함을 나타내며,\n  // 인증 정보를 제공합니다.\n  // 이 옵션을 사용하면 `Proxy-Authorization` 헤더가 설정되며,\n  // `headers`를 통해 커스텀으로 설정한 기존 `Proxy-Authorization` 헤더를 덮어씁니다.\n  // 프록시 서버가 HTTPS를 사용하는 경우, 프로토콜을 반드시 `https`로 설정해야 합니다.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // 'host'와 둘 다 정의된 경우, 'hostname'이 우선 적용됩니다\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken`은 요청을 취소하는 데 사용할 수 있는 취소 토큰을 지정합니다\n  // (자세한 내용은 아래의 취소(Cancellation) 섹션 참고)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // AbortController를 사용한 Axios 요청 취소의 대체 방법\n  signal: new AbortController().signal,\n\n  // `decompress`는 응답 본문을 자동으로 압축 해제할지 여부를 나타냅니다.\n  // `true`로 설정하면 압축 해제된 모든 응답 객체에서 'content-encoding' 헤더도 제거됩니다.\n  // - Node 전용 (XHR에서는 압축 해제를 끌 수 없음)\n  decompress: true, // 기본값\n\n  // `insecureHTTPParser` 불리언.\n  // 유효하지 않은 HTTP 헤더를 허용하는 비보안 HTTP 파서를 사용할지 여부를 나타냅니다.\n  // 이는 표준을 준수하지 않는 HTTP 구현과의 상호 운용성을 허용할 수 있습니다.\n  // 비보안 파서 사용은 가급적 피해야 합니다.\n  // 옵션 참고: https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}