{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### üÜï Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "axios.post('https://example.com', form)\n```\n\n### üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ FormData\n\n–ù–∞—á–∏–Ω–∞—è —Å –≤–µ—Ä—Å–∏–∏ `v0.27.0`, Axios –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç FormData, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ `Content-Type`\n—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ `multipart/form-data`.\n\n–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ FormData (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\n–í —Å–±–æ—Ä–∫–µ –¥–ª—è `node.js` –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–∏—Ñ–∏–ª ([`form-data`](https://github.com/form-data/form-data)).\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å FormData, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ `env.FormData`,\n–Ω–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ —ç—Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\n–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä Axios FormData –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n- `{}` - —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é JSON.stringify\n- `[]` - —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∫–ª—é—á–æ–º\n\n> **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ**: –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤ FileList\n\n–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä FormData –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–æ `config.formSerializer: object` –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞–µ–≤:\n\n- `visitor: Function` ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ö–æ–¥—á–∏–∫, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –¥–∞–Ω–Ω—ã—Ö\n–≤ –æ–±—ä–µ–∫—Ç `FormData` –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.\n\n- `dots: boolean = false` ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–µ—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ —Å–∫–æ–±–æ–∫ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤;\n\n- `metaTokens: boolean = true` ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `user{}: '{\"name\": \"John\"}'`) –≤ –∫–ª—é—á FormData.\n–ü–∞—Ä—Å–µ—Ä —Ç–µ–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ JSON.\n\n- `indexes: null|false|true = false` ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º, –∫–∞–∫ –∏–Ω–¥–µ–∫—Å—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º –∫–ª—é—á–∞–º –º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.\n\n    - `null` ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫–æ–±–∫–∏ (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏ (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫–æ–±–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\n–î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–∫–æ–π –æ–±—ä–µ–∫—Ç:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º Axios –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã: `postForm`, `putForm`, `patchForm`,\n–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ http-–º–µ—Ç–æ–¥—ã —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º `Content-Type: multipart/form-data`.\n\n## –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤\n\n–í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "status": "ok"
}