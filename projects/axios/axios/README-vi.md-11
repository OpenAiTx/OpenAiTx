{
  "id": 11,
  "origin": "Or in another way (ES6),\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### Older Node.js versions\n\nFor older Node.js engines, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nconst querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\n\n> **Note**: The `qs` library is preferable if you need to stringify nested objects, as the `querystring` method has [known issues](https://github.com/nodejs/node-v0.x-archive/issues/1665) with that use case.\n\n### üÜï Automatic serialization to URLSearchParams\n\nAxios will automatically serialize the data object to urlencoded format if the content-type header is set to \"application/x-www-form-urlencoded\".\n\n```js\nconst data = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n};\n\nawait axios.postForm('https://postman-echo.com/post', data,\n  {headers: {'content-type': 'application/x-www-form-urlencoded'}}\n);\n```\n\nThe server will handle it as:\n\n```js\n  {\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }\n````\n\nIf your backend body-parser (like `body-parser` of `express.js`) supports nested objects decoding, you will get the same object on the server-side automatically\n\n```js\n  var app = express();\n\n  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies\n\n  app.post('/', function (req, res, next) {\n     // echo body as JSON\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);\n```\n\n## Using `multipart/form-data` format\n\n### FormData\n\nTo send the data as a `multipart/formdata` you need to pass a formData instance as a payload.\nSetting the `Content-Type` header is not required as Axios guesses it based on the payload type.\n\n```js\nconst formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);\n```\n\nIn node.js, you can use the [`form-data`](https://github.com/form-data/form-data) library as follows:\n\n```js\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n",
  "origin_sha": "j3Dr86fSugO8ALJ3tr12GuI6rpfVda40nuO2oD88Ids=",
  "translate": "Ho·∫∑c theo m·ªôt c√°ch kh√°c (ES6),\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### C√°c phi√™n b·∫£n Node.js c≈© h∆°n\n\nƒê·ªëi v·ªõi c√°c engine Node.js c≈© h∆°n, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng module [`querystring`](https://nodejs.org/api/querystring.html) nh∆∞ sau:\n\n```js\nconst querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nB·∫°n c≈©ng c√≥ th·ªÉ s·ª≠ d·ª•ng th∆∞ vi·ªán [`qs`](https://github.com/ljharb/qs).\n\n> **L∆∞u √Ω**: Th∆∞ vi·ªán `qs` ƒë∆∞·ª£c ∆∞u ti√™n s·ª≠ d·ª•ng n·∫øu b·∫°n c·∫ßn chuy·ªÉn ƒë·ªïi c√°c object l·ªìng nhau th√†nh chu·ªói, v√¨ ph∆∞∆°ng th·ª©c `querystring` c√≥ [v·∫•n ƒë·ªÅ ƒë√£ bi·∫øt](https://github.com/nodejs/node-v0.x-archive/issues/1665) v·ªõi tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng n√†y.\n\n### üÜï T·ª± ƒë·ªông tu·∫ßn t·ª± h√≥a sang URLSearchParams\n\nAxios s·∫Ω t·ª± ƒë·ªông tu·∫ßn t·ª± h√≥a ƒë·ªëi t∆∞·ª£ng data sang ƒë·ªãnh d·∫°ng urlencoded n·∫øu header content-type ƒë∆∞·ª£c ƒë·∫∑t th√†nh \"application/x-www-form-urlencoded\".\n\n```js\nconst data = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n};\n\nawait axios.postForm('https://postman-echo.com/post', data,\n  {headers: {'content-type': 'application/x-www-form-urlencoded'}}\n);\n```\n\nM√°y ch·ªß s·∫Ω x·ª≠ l√Ω n√≥ nh∆∞ sau:\n\n```js\n  {\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }\n```\n\nN·∫øu b·ªô ph√¢n t√≠ch body-parser ph√≠a backend c·ªßa b·∫°n (nh∆∞ `body-parser` c·ªßa `express.js`) h·ªó tr·ª£ gi·∫£i m√£ c√°c object l·ªìng nhau, b·∫°n s·∫Ω t·ª± ƒë·ªông nh·∫≠n ƒë∆∞·ª£c c√πng m·ªôt object ·ªü ph√≠a m√°y ch·ªß\n\n```js\n  var app = express();\n\n  app.use(bodyParser.urlencoded({ extended: true })); // h·ªó tr·ª£ c√°c body ƒë√£ ƒë∆∞·ª£c m√£ h√≥a\n\n  app.post('/', function (req, res, next) {\n     // ph·∫£n h·ªìi body d∆∞·ªõi d·∫°ng JSON\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);\n```\n\n## S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng `multipart/form-data`\n\n### FormData\n\nƒê·ªÉ g·ª≠i d·ªØ li·ªáu d∆∞·ªõi d·∫°ng `multipart/formdata` b·∫°n c·∫ßn truy·ªÅn v√†o m·ªôt instance c·ªßa formData nh∆∞ l√† payload.\nVi·ªác thi·∫øt l·∫≠p header `Content-Type` l√† kh√¥ng b·∫Øt bu·ªôc v√¨ Axios s·∫Ω t·ª± ƒë·ªông x√°c ƒë·ªãnh d·ª±a tr√™n ki·ªÉu payload.\n\n```js\nconst formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);\n```\n\nTrong node.js, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng th∆∞ vi·ªán [`form-data`](https://github.com/form-data/form-data) nh∆∞ sau:\n\n```js\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n```",
  "status": "ok"
}