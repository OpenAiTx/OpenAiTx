{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // Axios ilerleme olayı ile istediğiniz işlemi yapabilirsiniz\n  },\n\n  // `onDownloadProgress`, indirmeler için ilerleme olaylarının yönetilmesine olanak tanır\n  // tarayıcı & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Axios ilerleme olayı ile istediğiniz işlemi yapabilirsiniz\n  },\n\n  // `maxContentLength`, node.js'de izin verilen http yanıt içeriğinin bayt cinsinden maksimum boyutunu tanımlar\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Yalnızca Node seçeneği), node.js'de izin verilen http istek içeriğinin bayt cinsinden maksimum boyutunu tanımlar\n  maxBodyLength: 2000,\n\n  // `validateStatus`, belirli bir HTTP yanıt durum kodu için promisin çözümlenip çözümlenmeyeceğini veya reddedilip reddedilmeyeceğini tanımlar.\n  // Eğer `validateStatus` `true` dönerse (veya `null` ya da `undefined` olarak ayarlanmışsa), promis çözümlenir; aksi takdirde, promis reddedilir.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // varsayılan\n  },\n\n  // `maxRedirects`, node.js'de izlenecek maksimum yönlendirme sayısını tanımlar.\n  // 0 olarak ayarlanırsa, hiçbir yönlendirme izlenmez.\n  maxRedirects: 21, // varsayılan\n\n  // `beforeRedirect`, yönlendirmeden önce çağrılacak bir fonksiyonu tanımlar.\n  // Bunu, yönlendirme sırasında istek seçeneklerini ayarlamak,\n  // en son yanıt başlıklarını incelemek veya bir hata fırlatarak isteği iptal etmek için kullanın.\n  // Eğer maxRedirects 0 olarak ayarlanırsa, `beforeRedirect` kullanılmaz.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath`, node.js'de kullanılacak bir UNIX Soketini tanımlar.\n  // örn. '/var/run/docker.sock' docker daemon'a istek göndermek için.\n  // Yalnızca `socketPath` veya `proxy` belirtilebilir.\n  // İkisi de belirtilirse, `socketPath` kullanılır.\n  socketPath: null, // varsayılan\n  \n  // `transport`, isteği yapmak için kullanılacak aktarım yöntemini belirler.\n  // Tanımlanırsa, bu kullanılır. Aksi halde, eğer `maxRedirects` 0 ise,\n  // belirtilen protokole bağlı olarak varsayılan `http` veya `https` kütüphanesi kullanılır.\n  // Aksi takdirde, yine protokole bağlı olarak yönlendirmeleri işleyebilen\n  // `httpFollow` veya `httpsFollow` kütüphanesi kullanılır.\n  transport: undefined, // varsayılan\n\n  // `httpAgent` ve `httpsAgent`, sırasıyla http ve https istekleri yapılırken node.js'de kullanılacak özel bir ajanı tanımlar.\n  // Bu, Node.js v19.0.0'dan önce varsayılan olarak etkin olmayan `keepAlive` gibi seçeneklerin eklenmesine olanak tanır.\n  // Node.js v19.0.0'dan sonra, `keepAlive`'ı etkinleştirmek için ajanda özelleştirme yapmanız gerekmez;\n  // çünkü `http.globalAgent` artık varsayılan olarak `keepAlive` etkin şekilde gelir.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy`, proxy sunucusunun ana makinesini, portunu ve protokolünü tanımlar.\n  // Proxy'nizi ayrıca geleneksel `http_proxy` ve `https_proxy` ortam değişkenlerini kullanarak da tanımlayabilirsiniz.\n  // Proxy yapılandırmanız için ortam değişkenleri kullanıyorsanız,\n  // proxy kullanılmaması gereken alan adlarının virgülle ayrılmış bir listesini içeren `no_proxy` ortam değişkenini de tanımlayabilirsiniz.\n  // Proxy'leri devre dışı bırakmak ve ortam değişkenlerini yok saymak için `false` kullanın.\n  // `auth`, proxy'ye bağlanırken HTTP Basic kimlik doğrulamasının kullanılması gerektiğini belirtir ve kimlik bilgilerini sağlar.\n  // Bu, bir `Proxy-Authorization` başlığı ayarlar ve `headers` kullanarak ayarladığınız tüm mevcut\n  // `Proxy-Authorization` özel başlıklarını geçersiz kılar.\n  // Proxy sunucusu HTTPS kullanıyorsa, protokolün `https` olarak ayarlanması gerekir.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Hem 'host' hem de 'hostname' tanımlanırsa, 'hostname' önceliklidir\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken`, isteği iptal etmek için kullanılabilecek bir iptal belirteci belirtir\n  // (ayrıntılar için aşağıdaki İptal bölümüne bakınız)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // Axios isteklerini iptal etmek için alternatif bir yöntem olan AbortController kullanımı\n  signal: new AbortController().signal,\n\n  // `decompress`, yanıt gövdesinin otomatik olarak sıkıştırmasının açılıp açılmayacağını gösterir.\n  // `true` olarak ayarlanırsa, ayrıca tüm sıkıştırması açılmış yanıtların yanıt nesnelerinden 'content-encoding' başlığını kaldırır.\n  // - Yalnızca Node (XHR sıkıştırmayı kapatamaz)\n  decompress: true, // varsayılan\n\n  // `insecureHTTPParser` boolean değeri.\n  // Geçersiz HTTP başlıklarını kabul eden güvensiz bir HTTP ayrıştırıcı kullanılıp kullanılmayacağını belirtir.\n  // Bu, standartlara uymayan HTTP uygulamalarıyla birlikte çalışabilirliği sağlayabilir.\n  // Güvensiz ayrıştırıcı kullanmaktan kaçınılmalıdır.\n  // seçenekler için bakınız https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}