{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // xem thêm tại https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // mặc định\n\n  // các tùy chọn chuyển tiếp để tương thích ngược, có thể bị loại bỏ ở các phiên bản mới hơn\n  transitional: {\n    // chế độ phân tích cú pháp JSON im lặng\n    // `true`  - bỏ qua lỗi phân tích cú pháp JSON và gán response.data là null nếu phân tích thất bại (hành vi cũ)\n    // `false` - ném lỗi SyntaxError nếu phân tích cú pháp JSON thất bại (Lưu ý: responseType phải được đặt là 'json')\n    silentJSONParsing: true, // giá trị mặc định cho phiên bản hiện tại của Axios\n\n    // cố gắng phân tích chuỗi phản hồi thành JSON ngay cả khi `responseType` không phải là 'json'\n    forcedJSONParsing: true,\n\n    // ném lỗi ETIMEDOUT thay vì ECONNABORTED chung chung khi yêu cầu bị hết thời gian chờ\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // Lớp FormData được sử dụng để tự động tuần tự hóa payload thành đối tượng FormData\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // hàm visitor tùy chỉnh để tuần tự hóa giá trị form\n      dots: boolean; // sử dụng dấu chấm thay vì định dạng dấu ngoặc\n      metaTokens: boolean; // giữ các hậu tố đặc biệt như {} trong khóa tham số\n      indexes: boolean; // định dạng chỉ mục mảng null - không có ngoặc, false - ngoặc rỗng, true - ngoặc với chỉ mục\n  },\n\n  // chỉ adapter http (node.js)\n  maxRate: [\n    100 * 1024, // giới hạn tải lên 100KB/s,\n    100 * 1024  // giới hạn tải xuống 100KB/s\n  ]\n}\n```\n\n## Lược đồ Phản hồi\n\nPhản hồi cho một yêu cầu chứa các thông tin sau.\n\n```js\n{\n  // `data` là dữ liệu phản hồi được cung cấp bởi máy chủ\n  data: {},\n\n  // `status` là mã trạng thái HTTP từ phản hồi của máy chủ\n  status: 200,\n\n  // `statusText` là thông điệp trạng thái HTTP từ phản hồi của máy chủ\n  statusText: 'OK',\n\n  // `headers` là các header HTTP mà máy chủ phản hồi\n  // Tất cả tên header đều là chữ thường và có thể truy cập bằng ký hiệu ngoặc vuông.\n  // Ví dụ: `response.headers['content-type']`\n  headers: {},\n\n  // `config` là cấu hình được cung cấp cho `axios` khi gửi yêu cầu\n  config: {},\n\n  // `request` là yêu cầu đã sinh ra phản hồi này\n  // Đây là instance ClientRequest cuối cùng trong node.js (trong các lần chuyển hướng)\n  // và là một instance XMLHttpRequest trên trình duyệt\n  request: {}\n}\n```\n\nKhi sử dụng `then`, bạn sẽ nhận được phản hồi như sau:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nKhi sử dụng `catch`, hoặc truyền một [callback từ chối](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) làm tham số thứ hai cho `then`, phản hồi sẽ có sẵn thông qua đối tượng `error` như đã giải thích ở phần [Xử lý lỗi](#handling-errors).\n\n## Cấu hình Mặc định\n\nBạn có thể chỉ định các cấu hình mặc định sẽ được áp dụng cho mọi yêu cầu.\n\n### Mặc định toàn cục cho axios\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Quan trọng: Nếu axios được sử dụng với nhiều tên miền, AUTH_TOKEN sẽ được gửi đến tất cả các tên miền đó.\n// Xem ví dụ bên dưới về việc sử dụng mặc định cho instance tùy chỉnh thay thế.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Mặc định cho instance tùy chỉnh\n```",
  "status": "ok"
}