{
  "id": 13,
  "origin": "});\n```\n\nor multiple files as `multipart/form-data`:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'files[]': document.querySelector('#fileInput').files\n});\n```\n\n`FileList` object can be passed directly:\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)\n```\n\nAll files will be sent with the same field names: `files[]`.\n\n## 🆕 HTML Form Posting (browser)\n\nPass HTML Form element as a payload to submit it as `multipart/form-data` content.\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));\n```\n\n`FormData` and `HTMLForm` objects can also be posted as `JSON` by explicitly setting the `Content-Type` header to `application/json`:\n\n```js\nawait axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n```\n\nFor example, the Form\n\n```html\n<form id=\"form\">\n  <input type=\"text\" name=\"foo\" value=\"1\">\n  <input type=\"text\" name=\"deep.prop\" value=\"2\">\n  <input type=\"text\" name=\"deep prop spaced\" value=\"3\">\n  <input type=\"text\" name=\"baz\" value=\"4\">\n  <input type=\"text\" name=\"baz\" value=\"5\">\n\n  <select name=\"user.age\">\n    <option value=\"value1\">Value 1</option>\n    <option value=\"value2\" selected>Value 2</option>\n    <option value=\"value3\">Value 3</option>\n  </select>\n\n  <input type=\"submit\" value=\"Save\">\n</form>\n```\n\nwill be submitted as the following JSON object:\n\n```js\n{\n  \"foo\": \"1\",\n  \"deep\": {\n    \"prop\": {\n      \"spaced\": \"3\"\n    }\n  },\n  \"baz\": [\n    \"4\",\n    \"5\"\n  ],\n  \"user\": {\n    \"age\": \"value2\"\n  }\n}\n````\n\nSending `Blobs`/`Files` as JSON (`base64`) is not currently supported.\n\n## 🆕 Progress capturing\n\nAxios supports both browser and node environments to capture request upload/download progress.\nThe frequency of progress events is forced to be limited to `3` times per second.\n\n```js    \nawait axios.post(url, data, {\n  onUploadProgress: function (axiosProgressEvent) {\n    /*{\n      loaded: number;\n      total?: number;\n      progress?: number; // in range [0..1]\n      bytes: number; // how many bytes have been transferred since the last trigger (delta)\n      estimated?: number; // estimated time in seconds\n      rate?: number; // upload speed in bytes\n      upload: true; // upload sign\n    }*/\n  },\n\n  onDownloadProgress: function (axiosProgressEvent) {\n    /*{",
  "origin_sha": "pHLZ21gy3hXhOAeOHsMkCCM4OH1wGWHASYhQzNgbqb4=",
  "translate": "});\n```\n\n또는 여러 파일을 `multipart/form-data`로 전송할 수 있습니다:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'files[]': document.querySelector('#fileInput').files\n});\n```\n\n`FileList` 객체를 직접 전달할 수 있습니다:\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)\n```\n\n모든 파일은 동일한 필드 이름 `files[]`로 전송됩니다.\n\n## 🆕 HTML 폼 전송 (브라우저)\n\nHTML Form 요소를 payload로 전달하여 `multipart/form-data` 콘텐츠로 제출할 수 있습니다.\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));\n```\n\n`FormData` 및 `HTMLForm` 객체도 `Content-Type` 헤더를 `application/json`으로 명시적으로 설정하면 `JSON`으로 전송할 수 있습니다:\n\n```js\nawait axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n```\n\n예를 들어, 아래와 같은 Form이 있을 때\n\n```html\n<form id=\"form\">\n  <input type=\"text\" name=\"foo\" value=\"1\">\n  <input type=\"text\" name=\"deep.prop\" value=\"2\">\n  <input type=\"text\" name=\"deep prop spaced\" value=\"3\">\n  <input type=\"text\" name=\"baz\" value=\"4\">\n  <input type=\"text\" name=\"baz\" value=\"5\">\n\n  <select name=\"user.age\">\n    <option value=\"value1\">Value 1</option>\n    <option value=\"value2\" selected>Value 2</option>\n    <option value=\"value3\">Value 3</option>\n  </select>\n\n  <input type=\"submit\" value=\"Save\">\n</form>\n```\n\n다음과 같은 JSON 객체로 제출됩니다:\n\n```js\n{\n  \"foo\": \"1\",\n  \"deep\": {\n    \"prop\": {\n      \"spaced\": \"3\"\n    }\n  },\n  \"baz\": [\n    \"4\",\n    \"5\"\n  ],\n  \"user\": {\n    \"age\": \"value2\"\n  }\n}\n````\n\n`Blobs`/`Files`를 JSON(`base64`)으로 전송하는 것은 현재 지원되지 않습니다.\n\n## 🆕 진행 상황 캡처\n\nAxios는 브라우저와 Node 환경 모두에서 요청 업로드/다운로드 진행 상황을 캡처하는 기능을 지원합니다.\n진행 상황 이벤트의 빈도는 초당 최대 3회로 제한됩니다.\n\n```js    \nawait axios.post(url, data, {\n  onUploadProgress: function (axiosProgressEvent) {\n    /*{\n      loaded: number;\n      total?: number;\n      progress?: number; // 범위 [0..1]\n      bytes: number; // 마지막 트리거 이후 전송된 바이트 수(델타)\n      estimated?: number; // 예상 시간(초)\n      rate?: number; // 업로드 속도(바이트)\n      upload: true; // 업로드 여부 표시\n    }*/\n  },\n\n  onDownloadProgress: function (axiosProgressEvent) {\n    /*{",
  "status": "ok"
}