{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // bayt cinsinden indirme hızı\n      download: true; // indirme işareti\n    }*/\n  }\n});  \n```\n\nAyrıca node.js'te akış yükleme/indirme ilerlemesini de takip edebilirsiniz:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // tüm akışı tamponlamaktan kaçının\n});\n````\n\n> **Not:**\n> FormData yükleme ilerlemesinin yakalanması şu anda node.js ortamlarında desteklenmemektedir.\n\n> **⚠️ Uyarı**\n> Akışın **node.js** ortamında yüklenmesi için maxRedirects: 0 olarak ayarlanarak yönlendirmelerin devre dışı bırakılması önerilir,\n> çünkü follow-redirects paketi \"backpressure\" algoritmasını izlemeksizin tüm akışı RAM'de tamponlayacaktır.\n\n\n## 🆕 Hız sınırlama\n\nİndirme ve yükleme hız sınırları yalnızca http adaptörü (node.js) için ayarlanabilir:\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Yükleme [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s sınırı\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios, başlıkları Map-benzeri bir API ile işlemek için kendi `AxiosHeaders` sınıfına sahiptir ve büyük/küçük harf duyarsız çalışmayı garanti eder.\nHTTP başlıklarında büyük/küçük harf duyarsız olsa da, Axios orijinal başlığın harf durumunu stilistik nedenlerle\nve sunucular başlığın harf durumunu yanlışlıkla dikkate aldığında bir geçici çözüm olarak koruyacaktır.\nBaşlıklar nesnesini doğrudan manipüle etmenin eski yaklaşımı hala mevcuttur, ancak artık kullanımdan kaldırılmıştır ve gelecekte önerilmemektedir.\n\n### Başlıklarla çalışmak\n\nBir AxiosHeaders nesne örneği, ayarlama ve birleştirme mantığını kontrol eden farklı türde dahili değerlere sahip olabilir.\nSadece string değerlerden oluşan son başlıklar nesnesi Axios tarafından `toJSON` metodu çağrılarak elde edilir.\n\n> Not: Burada JSON ile kastedilen, yalnızca ağ üzerinden gönderilmek üzere tasarlanmış string değerlerden oluşan bir nesnedir.\n\nBaşlık değeri aşağıdaki türlerden biri olabilir:\n- `string` - sunucuya gönderilecek normal string değer\n- `null` - JSON'a işlenirken başlığı atla\n- `false` - JSON'a işlenirken başlığı atla, ayrıca `set` metodunun `rewrite` seçeneği true olarak çağrılması gerektiğini belirtir\n  bu değerin üzerine yazmak için (Axios bunu dahili olarak, kullanıcıların `User-Agent` veya `Content-Type` gibi belirli başlıkların eklenmesini devre dışı bırakmasına izin vermek için kullanır)\n- `undefined` - değer ayarlanmamış\n\n> Not: Bir başlık değeri, undefined'a eşit değilse ayarlanmış kabul edilir.\n\nBaşlıklar nesnesi her zaman interceptor ve dönüştürücüler içinde başlatılır:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // Axios tarafından başlığın daha sonra ayarlanmasını devre dışı bırak\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // doğrudan erişim kullanımdan kalktı\n    \n      return request;\n    }\n  );\n````\n\nBir `AxiosHeaders` örneği üzerinde `for...of` ifadesiyle döngü yapabilirsiniz:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "status": "ok"
}