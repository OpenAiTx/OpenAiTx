{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "    return data;\n  }],\n\n  // `transformResponse` staat toe om wijzigingen aan de response data te maken voordat\n  // deze wordt doorgegeven aan then/catch\n  transformResponse: [function (data) {\n    // Voer uit wat je wilt om de data te transformeren\n\n    return data;\n  }],\n\n  // `headers` zijn aangepaste headers die verzonden worden\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` zijn de URL-parameters die met het verzoek worden meegestuurd\n  // Moet een gewoon object of een URLSearchParams-object zijn\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is een optionele configuratie waarmee je het serialiseren van `params` kunt aanpassen.\n  paramsSerializer: {\n\n    // Aangepaste encoderfunctie die key/value-paren iteratief verstuurt.\n    encode?: (param: string): string => { /* Voer hier aangepaste bewerkingen uit en retourneer de getransformeerde string */ }, \n    \n    // Aangepaste serializerfunctie voor de gehele parameter. Hiermee kan de gebruiker het gedrag van pre 1.x nabootsen.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuratie voor het formatteren van array-indexen in de params.\n    indexes: false // Drie beschikbare opties: (1) indexes: null (leidt tot geen haakjes), (2) (standaard) indexes: false (leidt tot lege haakjes), (3) indexes: true (leidt tot haakjes met indexen).    \n  },\n\n  // `data` is de data die als body van het verzoek wordt verzonden\n  // Alleen van toepassing op request-methodes 'PUT', 'POST', 'DELETE', en 'PATCH'\n  // Wanneer er geen `transformRequest` is ingesteld, moet het een van de volgende types zijn:\n  // - string, gewoon object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Alleen browser: FormData, File, Blob\n  // - Alleen Node: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntaxisalternatief om data in de body te verzenden\n  // methode post\n  // alleen de waarde wordt verzonden, niet de sleutel\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specificeert het aantal milliseconden voordat het verzoek afloopt.\n  // Als het verzoek langer duurt dan `timeout`, wordt het verzoek afgebroken.\n  timeout: 1000, // standaard is `0` (geen timeout)\n\n  // `withCredentials` geeft aan of cross-site Access-Control verzoeken\n  // uitgevoerd moeten worden met credentials\n  withCredentials: false, // standaard\n\n  // `adapter` maakt aangepaste afhandeling van verzoeken mogelijk, wat testen eenvoudiger maakt.\n  // Retourneer een promise en lever een geldige response (zie lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Ook kun je de naam van de ingebouwde adapter instellen, of een array met hun namen opgeven\n  // om de eerste beschikbare in de omgeving te kiezen\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` geeft aan dat HTTP Basic-auth moet worden gebruikt, en levert inloggegevens.\n  // Dit stelt een `Authorization` header in, waarmee eventuele bestaande\n  // aangepaste `Authorization` headers die je via `headers` hebt ingesteld, worden overschreven.\n  // Let op: alleen HTTP Basic-auth is te configureren via deze parameter.\n  // Voor Bearer-tokens en dergelijke, gebruik in plaats daarvan aangepaste `Authorization` headers.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` geeft het type data aan dat de server zal retourneren\n  // opties zijn: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   alleen browser: 'blob'\n  responseType: 'json', // standaard\n\n  // `responseEncoding` geeft de codering aan die gebruikt wordt om responses te decoderen (alleen Node.js)\n  // Let op: wordt genegeerd bij `responseType` 'stream' of client-side verzoeken\n  // opties zijn: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // standaard\n\n  // `xsrfCookieName` is de naam van de cookie die gebruikt wordt als waarde voor het xsrf-token\n  xsrfCookieName: 'XSRF-TOKEN', // standaard\n\n  // `xsrfHeaderName` is de naam van de http-header die de xsrf-tokenwaarde bevat\n  xsrfHeaderName: 'X-XSRF-TOKEN', // standaard\n    \n  // `undefined` (standaard) - stel XSRF-header alleen in voor verzoeken naar dezelfde oorsprong\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` maakt de afhandeling van voortgangsgebeurtenissen bij uploads mogelijk\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "status": "ok"
}