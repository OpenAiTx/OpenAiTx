{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Lưu ý:** Tham số options (có thuộc tính `synchronous` và `runWhen`) hiện chỉ được hỗ trợ cho các interceptor của request.\n\n### Nhiều Interceptor\n\nGiả sử bạn thêm nhiều response interceptor\nvà khi response được hoàn thành\n- thì mỗi interceptor sẽ được thực thi\n- chúng được thực thi theo thứ tự chúng được thêm vào\n- chỉ kết quả của interceptor cuối cùng được trả về\n- mỗi interceptor nhận được kết quả từ interceptor trước đó\n- và khi fulfillment-interceptor ném ra lỗi\n    - fulfillment-interceptor tiếp theo sẽ không được gọi\n    - rejection-interceptor tiếp theo sẽ được gọi\n    - sau khi lỗi được bắt, fulfillment-interceptor tiếp theo sẽ lại được gọi (giống như trong chuỗi promise).\n\nĐọc [các bài test của interceptor](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) để xem tất cả điều này trong mã nguồn.\n\n## Các Loại Lỗi\n\nCó nhiều thông điệp lỗi khác nhau của axios có thể xuất hiện, cung cấp thông tin cơ bản về chi tiết của lỗi và cơ hội để gỡ lỗi.\n\nCấu trúc tổng quát của lỗi axios như sau:\n| Thuộc tính  | Định nghĩa  |\n| -------- | ----------  |\n| message  | Tóm tắt nhanh thông báo lỗi và trạng thái thất bại kèm theo. |\n| name     | Định nghĩa nguồn gốc của lỗi. Với axios, luôn là 'AxiosError'. |\n| stack    | Cung cấp trace stack của lỗi. | \n| config   | Một đối tượng config của axios với cấu hình instance cụ thể do người dùng định nghĩa khi thực hiện request |\n| code     | Đại diện cho lỗi được axios nhận diện. Bảng dưới liệt kê các định nghĩa cụ thể cho lỗi nội bộ của axios.  |\n| status   | Mã trạng thái phản hồi HTTP. Xem [ở đây](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) để biết ý nghĩa các mã trạng thái HTTP phổ biến. \n\nDưới đây là danh sách các lỗi có thể được axios nhận diện:\n\n| Mã                        | Định nghĩa                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Giá trị không hợp lệ được cung cấp trong cấu hình axios.                                                                                                                                                                                                                                                                                                                                      |\n| ERR_BAD_OPTION            | Tùy chọn không hợp lệ được cung cấp trong cấu hình axios.                                                                                                                                                                                                                                                                                                                                     |\n| ERR_NOT_SUPPORT           | Tính năng hoặc phương thức không được hỗ trợ trong môi trường axios hiện tại.                                                                                                                                                                                                                                                                                                                 |\n| ERR_DEPRECATED            | Đã sử dụng tính năng hoặc phương thức đã bị loại bỏ trong axios.                                                                                                                                                                                                                                                                                                                              |\n| ERR_INVALID_URL           | URL không hợp lệ được cung cấp cho request axios.                                                                                                                                                                                                                                                                                                                                             |\n| ECONNABORTED              | Thường chỉ ra rằng request đã bị timeout (trừ khi `transitional.clarifyTimeoutError` được thiết lập) hoặc bị trình duyệt hay plugin của nó hủy bỏ.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Tính năng hoặc phương thức bị hủy rõ ràng bởi người dùng bằng AbortSignal (hoặc CancelToken).                                                                                                                                                                                                                                                          |\n| ETIMEDOUT                 | Request bị timeout do vượt quá giới hạn thời gian mặc định của axios. `transitional.clarifyTimeoutError` phải được thiết lập là `true`, nếu không sẽ ném lỗi `ECONNABORTED` chung chung thay thế.                                                                                                                                                                                             |\n| ERR_NETWORK               | Sự cố liên quan đến mạng. Trong trình duyệt, lỗi này cũng có thể do [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) hoặc vi phạm chính sách [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content). Trình duyệt không cho phép mã JS làm rõ lý do thực sự của lỗi do vấn đề bảo mật, vui lòng kiểm tra console.   |\n| ERR_FR_TOO_MANY_REDIRECTS | Request bị chuyển hướng quá nhiều lần; vượt quá số lần chuyển hướng tối đa được chỉ định trong cấu hình axios.                                                                                                                                                                                                                                          |\n| ERR_BAD_RESPONSE          | Phản hồi không thể được phân tích đúng cách hoặc ở định dạng không mong đợi. Thường liên quan đến phản hồi có mã trạng thái `5xx`.                                                                                                                                                                                                                      |\n| ERR_BAD_REQUEST           | Yêu cầu có định dạng không mong đợi hoặc thiếu tham số bắt buộc. Thường liên quan đến phản hồi có mã trạng thái `4xx`.                                                                                                                                                                                                                                  |\n\n## Xử Lý Lỗi\n\nhành vi mặc định là từ chối mọi phản hồi trả về với mã trạng thái nằm ngoài khoảng 2xx và coi đó là một lỗi.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // Yêu cầu đã được gửi và máy chủ đã phản hồi với mã trạng thái\n      // nằm ngoài khoảng 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // Yêu cầu đã được gửi nhưng không nhận được phản hồi\n      // `error.request` là một instance của XMLHttpRequest trong trình duyệt và là một instance của\n      // http.ClientRequest trong node.js\n      console.log(error.request);\n    } else {\n      // Có điều gì đó xảy ra trong quá trình thiết lập request đã gây ra lỗi\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nSử dụng tùy chọn config `validateStatus`, bạn có thể ghi đè điều kiện mặc định (status >= 200 && status < 300) và xác định mã HTTP nào sẽ ném ra lỗi.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Chỉ resolve nếu mã trạng thái nhỏ hơn 500\n  }\n})\n```\n\nSử dụng `toJSON` bạn sẽ nhận được một đối tượng với nhiều thông tin hơn về lỗi HTTP.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}