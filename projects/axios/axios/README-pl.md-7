{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // zobacz także https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // domyślnie\n\n  // opcje przejściowe dla kompatybilności wstecznej, które mogą zostać usunięte w nowszych wersjach\n  transitional: {\n    // cichy tryb parsowania JSON\n    // `true`  - ignoruj błędy parsowania JSON i ustaw response.data na null, jeśli parsowanie się nie powiodło (stare zachowanie)\n    // `false` - rzuć SyntaxError, jeśli parsowanie JSON się nie powiodło (Uwaga: responseType musi być ustawiony na 'json')\n    silentJSONParsing: true, // domyślna wartość dla bieżącej wersji Axios\n\n    // próbuj sparsować odpowiedź jako JSON nawet jeśli `responseType` nie jest 'json'\n    forcedJSONParsing: true,\n\n    // rzuć błąd ETIMEDOUT zamiast ogólnego ECONNABORTED przy przekroczeniu limitu czasu żądania\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // Klasa FormData używana do automatycznej serializacji ładunku do obiektu FormData\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // niestandardowa funkcja odwiedzająca do serializacji wartości formularza\n      dots: boolean, // używaj kropek zamiast nawiasów\n      metaTokens: boolean, // zachowaj specjalne zakończenia jak {} w kluczu parametru\n      indexes: boolean, // format indeksów tablicy null - bez nawiasów, false - puste nawiasy, true - nawiasy z indeksami\n  },\n\n  // tylko adapter http (node.js)\n  maxRate: [\n    100 * 1024, // limit wysyłania 100KB/s,\n    100 * 1024  // limit pobierania 100KB/s\n  ]\n}\n```\n\n## Schemat Odpowiedzi\n\nOdpowiedź na żądanie zawiera następujące informacje.\n\n```js\n{\n  // `data` to odpowiedź dostarczona przez serwer\n  data: {},\n\n  // `status` to kod statusu HTTP odpowiedzi serwera\n  status: 200,\n\n  // `statusText` to komunikat statusu HTTP odpowiedzi serwera\n  statusText: 'OK',\n\n  // `headers` to nagłówki HTTP, które zwrócił serwer\n  // Wszystkie nazwy nagłówków są małymi literami i można uzyskać do nich dostęp przez notację nawiasową.\n  // Przykład: `response.headers['content-type']`\n  headers: {},\n\n  // `config` to konfiguracja przekazana do `axios` dla żądania\n  config: {},\n\n  // `request` to żądanie, które wygenerowało tę odpowiedź\n  // Jest to ostatnia instancja ClientRequest w node.js (przy przekierowaniach)\n  // oraz instancja XMLHttpRequest w przeglądarce\n  request: {}\n}\n```\n\nPodczas użycia `then`, otrzymasz odpowiedź w następujący sposób:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nPodczas użycia `catch` lub przekazania [funkcji obsługi odrzucenia](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) jako drugiego parametru `then`, odpowiedź będzie dostępna przez obiekt `error`, jak wyjaśniono w sekcji [Obsługa błędów](#handling-errors).\n\n## Domyślne Ustawienia Konfiguracji\n\nMożesz określić domyślne ustawienia konfiguracji, które będą stosowane do każdego żądania.\n\n### Globalne domyślne ustawienia axios\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Ważne: Jeśli axios jest używany z wieloma domenami, AUTH_TOKEN zostanie wysłany do wszystkich z nich.\n// Poniżej przykład z domyślnymi ustawieniami niestandardowej instancji.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Domyślne ustawienia niestandardowej instancji\n```",
  "status": "ok"
}