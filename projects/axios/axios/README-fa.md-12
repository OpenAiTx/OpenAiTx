{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### 🆕 Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "axios.post('https://example.com', form)\n```\n\n### 🆕 سریال‌سازی خودکار به FormData\n\nاز نسخه `v0.27.0`، Axios از سریال‌سازی خودکار شیء به یک شیء FormData پشتیبانی می‌کند اگر هدر درخواست `Content-Type`\nبر روی `multipart/form-data` تنظیم شده باشد.\n\nدرخواست زیر داده‌ها را در قالب FormData ارسال خواهد کرد (در مرورگر و Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nدر نسخه `node.js`، پلی‌فیل ([`form-data`](https://github.com/form-data/form-data)) به صورت پیش‌فرض استفاده می‌شود.\n\nشما می‌توانید کلاس FormData را با تنظیم متغیر کانفیگ `env.FormData` بازنویسی کنید،\nاما در اکثر مواقع به این کار نیازی نخواهید داشت:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nسریالایزر FormData در Axios از برخی پسوندهای خاص برای انجام عملیات‌های زیر پشتیبانی می‌کند:\n\n- `{}` - مقدار را با JSON.stringify سریالایز می‌کند\n- `[]` - شیء شبیه آرایه را به صورت فیلدهای جداگانه با کلید یکسان باز می‌کند\n\n> **نکته:** عملیات unwrap/expand به طور پیش‌فرض بر روی آرایه‌ها و اشیاء FileList انجام می‌شود\n\nسریالایزر FormData از گزینه‌های اضافی از طریق ویژگی `config.formSerializer: object` برای مدیریت حالت‌های خاص پشتیبانی می‌کند:\n\n- `visitor: Function` - تابع بازدیدکننده تعریف‌شده توسط کاربر که به صورت بازگشتی برای سریال‌سازی شیء داده\nبه یک شیء `FormData` طبق قواعد سفارشی فراخوانی می‌شود.\n\n- `dots: boolean = false` - استفاده از نشانه‌گذاری نقطه‌ای به جای براکت برای سریال‌سازی آرایه‌ها و اشیاء؛\n\n- `metaTokens: boolean = true` - افزودن پسوند خاص (مثلاً `user{}: '{\"name\": \"John\"}'`) به کلید FormData.\nتجزیه‌کننده سمت سرور می‌تواند از این متااطلاعات برای تجزیه خودکار مقدار به عنوان JSON استفاده کند.\n\n- `indexes: null|false|true = false` - نحوه افزودن ایندکس به کلیدهای باز شده آرایه‌های شبیه flat را کنترل می‌کند.\n\n    - `null` - بدون افزودن براکت (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false` (پیش‌فرض) - افزودن براکت خالی (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - افزودن براکت با ایندکس  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nفرض کنید شیء زیر را داریم:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nگام‌های زیر به صورت داخلی توسط سریالایزر Axios اجرا می‌شود:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios از متدهای میانبر زیر پشتیبانی می‌کند: `postForm`، `putForm`، `patchForm`\nکه همان متدهای http متناظر با هدر `Content-Type` از پیش تعیین شده به `multipart/form-data` هستند.\n\n## ارسال فایل‌ها\n\nشما می‌توانید به راحتی یک فایل تکی ارسال کنید:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "status": "ok"
}