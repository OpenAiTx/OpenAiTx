{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // lihat juga https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // opsi transisional untuk kompatibilitas ke belakang yang mungkin akan dihapus pada versi yang lebih baru\n  transitional: {\n    // mode parsing JSON diam\n    // `true`  - abaikan error parsing JSON dan setel response.data ke null jika parsing gagal (perilaku lama)\n    // `false` - lemparkan SyntaxError jika parsing JSON gagal (Catatan: responseType harus diatur ke 'json')\n    silentJSONParsing: true, // nilai default untuk versi Axios saat ini\n\n    // coba parse string response sebagai JSON meskipun `responseType` bukan 'json'\n    forcedJSONParsing: true,\n\n    // lempar error ETIMEDOUT alih-alih ECONNABORTED umum pada saat permintaan timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // Kelas FormData yang digunakan untuk secara otomatis melakukan serialisasi payload menjadi objek FormData\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // fungsi visitor kustom untuk serialisasi nilai form\n      dots: boolean, // gunakan format titik alih-alih tanda kurung\n      metaTokens: boolean, // pertahankan akhiran khusus seperti {} pada kunci parameter\n      indexes: boolean, // format indeks array null - tanpa tanda kurung, false - tanda kurung kosong, true - tanda kurung dengan indeks\n  },\n\n  // hanya untuk adaptor http (node.js)\n  maxRate: [\n    100 * 1024, // batas upload 100KB/s,\n    100 * 1024  // batas download 100KB/s\n  ]\n}\n```\n\n## Skema Respons\n\nRespons untuk sebuah permintaan berisi informasi berikut.\n\n```js\n{\n  // `data` adalah respons yang diberikan oleh server\n  data: {},\n\n  // `status` adalah kode status HTTP dari respons server\n  status: 200,\n\n  // `statusText` adalah pesan status HTTP dari respons server\n  statusText: 'OK',\n\n  // `headers` adalah header HTTP yang diberikan server sebagai respons\n  // Semua nama header dalam huruf kecil dan dapat diakses menggunakan notasi kurung siku.\n  // Contoh: `response.headers['content-type']`\n  headers: {},\n\n  // `config` adalah konfigurasi yang diberikan ke `axios` untuk permintaan ini\n  config: {},\n\n  // `request` adalah permintaan yang menghasilkan respons ini\n  // Ini adalah instance ClientRequest terakhir di node.js (dalam redirect)\n  // dan instance XMLHttpRequest di browser\n  request: {}\n}\n```\n\nSaat menggunakan `then`, Anda akan menerima respons sebagai berikut:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nSaat menggunakan `catch`, atau melewatkan [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) sebagai parameter kedua dari `then`, respons akan tersedia melalui objek `error` seperti dijelaskan di bagian [Menangani Error](#handling-errors).\n\n## Default Konfigurasi\n\nAnda dapat menentukan konfigurasi default yang akan diterapkan ke setiap permintaan.\n\n### Default axios global\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Penting: Jika axios digunakan dengan banyak domain, AUTH_TOKEN akan dikirim ke semua domain tersebut.\n// Lihat di bawah untuk contoh menggunakan default instance kustom sebagai gantinya.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Default instance kustom\n```",
  "status": "ok"
}