{
  "id": 10,
  "origin": "  });\n```\n\n## Cancellation\n\n### AbortController\n\nStarting from `v0.22.0` Axios supports AbortController to cancel requests in fetch API way:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n### CancelToken `👎deprecated`\n\nYou can also cancel a request using a *CancelToken*.\n\n> The axios cancel token API is based on the withdrawn [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\n> This API is deprecated since v0.22.0 and shouldn't be used in new projects\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> **Note:** you can cancel several requests with the same cancel token/abort controller.\n> If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.\n\n> During the transition period, you can use both cancellation APIs, even for the same request:\n\n## Using `application/x-www-form-urlencoded` format\n\n### URLSearchParams\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the [`application/x-www-form-urlencoded` format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) instead, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API, which is [supported](http://www.caniuse.com/#feat=urlsearchparams) in the vast majority of browsers,and [ Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) starting with v10 (released in 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Older browsers)\n\nFor compatibility with very old browsers, there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n",
  "origin_sha": "VxjhD9ljiSwD1HApECbz1lsvUZyJrgZ3cDJoBGagQ8E=",
  "translate": "```\n\n## 取消请求\n\n### AbortController\n\n从 `v0.22.0` 开始，Axios 支持使用 AbortController 以 fetch API 的方式取消请求：\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// 取消请求\ncontroller.abort()\n```\n\n### CancelToken `👎已弃用`\n\n你也可以使用 *CancelToken* 取消请求。\n\n> axios 的 cancel token API 基于已撤回的 [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises)。\n\n> 此 API 从 v0.22.0 起已弃用，不建议在新项目中使用\n\n你可以像下面这样使用 `CancelToken.source` 工厂方法创建一个取消令牌：\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('请求已取消', thrown.message);\n  } else {\n    // 处理错误\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// 取消请求（message 参数可选）\nsource.cancel('用户取消了操作。');\n```\n\n你也可以通过向 `CancelToken` 构造函数传递一个执行器函数来创建取消令牌：\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // 执行器函数接收一个取消函数作为参数\n    cancel = c;\n  })\n});\n\n// 取消请求\ncancel();\n```\n\n> **注意：** 你可以使用相同的取消令牌/abort controller 取消多个请求。\n> 如果在发起 Axios 请求时取消令牌已经处于已取消状态，则请求会立即被取消，不会尝试发起真正的请求。\n\n> 在过渡期间，你可以同时使用这两种取消 API，甚至用于同一个请求：\n\n## 使用 `application/x-www-form-urlencoded` 格式\n\n### URLSearchParams\n\n默认情况下，axios 会将 JavaScript 对象序列化为 `JSON`。如果你希望以 [`application/x-www-form-urlencoded` 格式](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) 发送数据，可以使用 [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API，该 API 被绝大多数浏览器和 [Node](https://nodejs.org/api/url.html#url_class_urlsearchparams)（从 v10，2018 年发布）[支持](http://www.caniuse.com/#feat=urlsearchparams)。\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### 查询字符串（老旧浏览器）\n\n为兼容非常老的浏览器，可以使用 [polyfill](https://github.com/WebReflection/url-search-params)（确保为全局环境引入 polyfill）。\n\n或者，你也可以使用 [`qs`](https://github.com/ljharb/qs) 库对数据进行编码：\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n```",
  "status": "ok"
}