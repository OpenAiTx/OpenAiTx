{
  "id": 10,
  "origin": "  });\n```\n\n## Cancellation\n\n### AbortController\n\nStarting from `v0.22.0` Axios supports AbortController to cancel requests in fetch API way:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n### CancelToken `üëédeprecated`\n\nYou can also cancel a request using a *CancelToken*.\n\n> The axios cancel token API is based on the withdrawn [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\n> This API is deprecated since v0.22.0 and shouldn't be used in new projects\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> **Note:** you can cancel several requests with the same cancel token/abort controller.\n> If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.\n\n> During the transition period, you can use both cancellation APIs, even for the same request:\n\n## Using `application/x-www-form-urlencoded` format\n\n### URLSearchParams\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the [`application/x-www-form-urlencoded` format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) instead, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API, which is [supported](http://www.caniuse.com/#feat=urlsearchparams) in the vast majority of browsers,and [ Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) starting with v10 (released in 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Older browsers)\n\nFor compatibility with very old browsers, there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n",
  "origin_sha": "VxjhD9ljiSwD1HApECbz1lsvUZyJrgZ3cDJoBGagQ8E=",
  "translate": "```markdown\n  });\n```\n\n## Abbrechen\n\n### AbortController\n\nAb `v0.22.0` unterst√ºtzt Axios den AbortController, um Anfragen auf die gleiche Weise wie mit der Fetch-API abzubrechen:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// Anfrage abbrechen\ncontroller.abort()\n```\n\n### CancelToken `üëéveraltet`\n\nSie k√∂nnen eine Anfrage auch mit einem *CancelToken* abbrechen.\n\n> Die CancelToken-API von axios basiert auf dem zur√ºckgezogenen [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\n> Diese API ist seit v0.22.0 veraltet und sollte in neuen Projekten nicht mehr verwendet werden.\n\nSie k√∂nnen ein CancelToken mit der Factory `CancelToken.source` wie unten gezeigt erstellen:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Anfrage abgebrochen', thrown.message);\n  } else {\n    // Fehler behandeln\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// Anfrage abbrechen (der Nachrichtenparameter ist optional)\nsource.cancel('Vorgang vom Benutzer abgebrochen.');\n```\n\nSie k√∂nnen auch ein CancelToken erstellen, indem Sie eine Executor-Funktion an den `CancelToken`-Konstruktor √ºbergeben:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // Eine Executor-Funktion erh√§lt eine Cancel-Funktion als Parameter\n    cancel = c;\n  })\n});\n\n// Anfrage abbrechen\ncancel();\n```\n\n> **Hinweis:** Sie k√∂nnen mehrere Anfragen mit demselben CancelToken/AbortController abbrechen.\n> Wenn ein Abbruch-Token zum Zeitpunkt des Starts einer Axios-Anfrage bereits abgebrochen ist, wird die Anfrage sofort abgebrochen, ohne dass ein echter Request versucht wird.\n\n> W√§hrend der √úbergangsphase k√∂nnen Sie beide Abbruch-APIs verwenden, sogar f√ºr dieselbe Anfrage:\n\n## Verwendung des `application/x-www-form-urlencoded` Formats\n\n### URLSearchParams\n\nStandardm√§√üig serialisiert axios JavaScript-Objekte zu `JSON`. Um Daten stattdessen im [`application/x-www-form-urlencoded` Format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) zu senden, k√∂nnen Sie die [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API verwenden, die in der √ºberwiegenden Mehrheit der Browser [unterst√ºtzt](http://www.caniuse.com/#feat=urlsearchparams) wird und [Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) ab Version 10 (ver√∂ffentlicht 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query-String (√Ñltere Browser)\n\nF√ºr die Kompatibilit√§t mit sehr alten Browsern gibt es ein [Polyfill](https://github.com/WebReflection/url-search-params) (stellen Sie sicher, dass Sie die globale Umgebung polyfillen).\n\nAlternativ k√∂nnen Sie Daten mit der [`qs`](https://github.com/ljharb/qs) Bibliothek kodieren:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n```",
  "status": "ok"
}