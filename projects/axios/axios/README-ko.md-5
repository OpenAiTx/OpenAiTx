{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "    return data;\n  }],\n\n  // `transformResponse`는 then/catch로 전달되기 전에 응답 데이터를 변경할 수 있도록 합니다.\n  transformResponse: [function (data) {\n    // 데이터를 원하는 대로 변환하세요.\n\n    return data;\n  }],\n\n  // `headers`는 전송할 커스텀 헤더입니다.\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params`는 요청과 함께 전송할 URL 파라미터입니다.\n  // 반드시 일반 객체 또는 URLSearchParams 객체여야 합니다.\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer`는 `params` 직렬화를 커스터마이즈할 수 있는 선택적 설정입니다.\n  paramsSerializer: {\n\n    // 키/값 쌍을 반복적으로 전송하는 커스텀 인코더 함수입니다.\n    encode?: (param: string): string => { /* 여기서 커스텀 작업을 수행하고 변환된 문자열을 반환하세요 */ }, \n    \n    // 전체 파라미터에 대한 커스텀 직렬화 함수입니다. 사용자가 1.x 이전 동작을 모방할 수 있습니다.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // params에서 배열 인덱스 포맷을 설정하는 옵션입니다.\n    indexes: false // 사용 가능한 세 가지 옵션: (1) indexes: null (대괄호 없음), (2) (기본값) indexes: false (빈 대괄호), (3) indexes: true (인덱스가 포함된 대괄호).\n  },\n\n  // `data`는 요청 본문으로 전송할 데이터입니다.\n  // 'PUT', 'POST', 'DELETE', 'PATCH' 요청 메서드에만 해당됩니다.\n  // `transformRequest`가 설정되지 않은 경우, 다음 타입 중 하나여야 합니다:\n  // - 문자열, 일반 객체, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - 브라우저 전용: FormData, File, Blob\n  // - Node 전용: Stream, Buffer, FormData (form-data 패키지)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // 데이터 본문 전송을 위한 대체 문법\n  // post 메서드\n  // 키가 아닌 값만 전송됨\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout`은 요청이 타임아웃되기 전까지의 밀리초를 지정합니다.\n  // 요청이 `timeout`보다 오래 걸리면, 요청이 중단됩니다.\n  timeout: 1000, // 기본값은 `0` (타임아웃 없음)\n\n  // `withCredentials`는 교차 사이트 Access-Control 요청에서\n  // 자격 증명을 사용할지 여부를 나타냅니다.\n  withCredentials: false, // 기본값\n\n  // `adapter`는 요청을 커스텀 핸들링할 수 있도록 하여 테스트가 더 쉬워집니다.\n  // Promise를 반환하고 유효한 응답을 제공합니다 (lib/adapters/README.md 참고).\n  adapter: function (config) {\n    /* ... */\n  },\n  // 내장 어댑터의 이름을 설정하거나, 이름 배열을 제공하여\n  // 환경에서 사용 가능한 첫 번째 것을 선택할 수 있습니다.\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth`는 HTTP Basic 인증 사용 여부와 자격 증명을 지정합니다.\n  // 이 옵션을 사용하면 `Authorization` 헤더가 설정되며,\n  // `headers`를 통해 설정한 기존 `Authorization` 커스텀 헤더를 덮어씁니다.\n  // 오직 HTTP Basic 인증만 이 파라미터로 설정할 수 있습니다.\n  // Bearer 토큰 등은 `Authorization` 커스텀 헤더를 사용하세요.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType`은 서버가 응답할 데이터 타입을 지정합니다.\n  // 옵션: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   브라우저 전용: 'blob'\n  responseType: 'json', // 기본값\n\n  // `responseEncoding`은 응답을 디코딩할 때 사용할 인코딩을 지정합니다 (Node.js 전용)\n  // 참고: 'stream' 타입이나 클라이언트 측 요청에서는 무시됩니다.\n  // 옵션: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // 기본값\n\n  // `xsrfCookieName`은 xsrf 토큰 값으로 사용할 쿠키 이름입니다.\n  xsrfCookieName: 'XSRF-TOKEN', // 기본값\n\n  // `xsrfHeaderName`은 xsrf 토큰 값을 담는 http 헤더 이름입니다.\n  xsrfHeaderName: 'X-XSRF-TOKEN', // 기본값\n    \n  // `undefined` (기본값) - 동일 출처 요청에만 XSRF 헤더를 설정\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress`는 업로드 진행 이벤트를 처리할 수 있게 해줍니다.\n  // 브라우저 & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "status": "ok"
}