{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "```markdown\n    return data;\n  }],\n\n  // `transformResponse` به شما اجازه می‌دهد تا تغییراتی روی داده‌های پاسخ قبل از\n  // ارسال به then/catch اعمال کنید\n  transformResponse: [function (data) {\n    // هر کاری که می‌خواهید برای تبدیل داده انجام دهید\n\n    return data;\n  }],\n\n  // `headers` هدرهای سفارشی هستند که باید ارسال شوند\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` پارامترهای URL هستند که باید با درخواست ارسال شوند\n  // باید یک شی ساده یا یک شی URLSearchParams باشد\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` یک تنظیم اختیاری است که به شما اجازه می‌دهد سریال‌سازی `params` را شخصی‌سازی کنید. \n  paramsSerializer: {\n\n    // تابع رمزگذار سفارشی که جفت کلید/مقدار را به صورت تکراری ارسال می‌کند.\n    encode?: (param: string): string => { /* عملیات سفارشی را اینجا انجام داده و رشته تبدیل شده را بازگردانید */ }, \n    \n    // تابع سریالایزر سفارشی برای کل پارامترها. به کاربر اجازه می‌دهد رفتار نسخه‌های قبل از 1.x را شبیه‌سازی کند.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // تنظیمات برای قالب‌بندی اندیس‌های آرایه در پارامترها.\n    indexes: false // سه گزینه موجود است: (1) indexes: null (بدون کروشه)، (2) (پیش‌فرض) indexes: false (کروشه خالی)، (3) indexes: true (کروشه با اندیس).    \n  },\n\n  // `data` داده‌هایی است که باید به عنوان بدنه درخواست ارسال شود\n  // فقط برای متدهای درخواست 'PUT'، 'POST'، 'DELETE' و 'PATCH' قابل استفاده است\n  // زمانی که `transformRequest` تعیین نشده باشد، باید یکی از انواع زیر باشد:\n  // - رشته، شی ساده، ArrayBuffer، ArrayBufferView، URLSearchParams\n  // - فقط مرورگر: FormData، File، Blob\n  // - فقط Node: Stream، Buffer، FormData (بسته form-data)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // نحوه نوشتار جایگزین برای ارسال داده در بدنه\n  // متد post\n  // فقط مقدار ارسال می‌شود، نه کلید\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` تعداد میلی‌ثانیه قبل از تایم‌اوت شدن درخواست را مشخص می‌کند.\n  // اگر درخواست بیشتر از `timeout` طول بکشد، قطع خواهد شد.\n  timeout: 1000, // پیش‌فرض `0` (بدون تایم‌اوت)\n\n  // `withCredentials` نشان می‌دهد که آیا درخواست‌های کنترل دسترسی بین سایت‌ها\n  // باید با احراز هویت ارسال شوند یا خیر\n  withCredentials: false, // پیش‌فرض\n\n  // `adapter` اجازه می‌دهد تا مدیریت سفارشی درخواست‌ها را انجام دهید که تست کردن را ساده‌تر می‌کند.\n  // یک Promise بازگردانید و یک پاسخ معتبر ارائه دهید (به lib/adapters/README.md مراجعه کنید)\n  adapter: function (config) {\n    /* ... */\n  },\n  // همچنین می‌توانید نام آداپتور داخلی را تعیین کنید یا آرایه‌ای از نام‌ها را ارائه دهید\n  // تا اولین مورد در محیط انتخاب شود\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` نشان می‌دهد که باید از احراز هویت پایه HTTP استفاده شود و اطلاعات ورود را فراهم می‌کند.\n  // این یک هدر `Authorization` تنظیم می‌کند و هر هدر سفارشی موجود با همین نام را بازنویسی می‌کند.\n  // توجه داشته باشید که فقط احراز هویت پایه HTTP از این طریق قابل تنظیم است.\n  // برای توکن‌های Bearer و موارد مشابه، از هدر سفارشی `Authorization` استفاده کنید.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` نوع داده‌ای که سرور پاسخ خواهد داد را مشخص می‌کند\n  // گزینه‌ها: 'arraybuffer'، 'document'، 'json'، 'text'، 'stream'\n  //   فقط مرورگر: 'blob'\n  responseType: 'json', // پیش‌فرض\n\n  // `responseEncoding` رمزگذاری مورد استفاده برای رمزگشایی پاسخ‌ها را مشخص می‌کند (فقط Node.js)\n  // توجه: برای `responseType` برابر با 'stream' یا درخواست‌های سمت کلاینت نادیده گرفته می‌شود\n  // گزینه‌ها: 'ascii'، 'ASCII'، 'ansi'، 'ANSI'، 'binary'، 'BINARY'، 'base64'، 'BASE64'، 'base64url',\n  // 'BASE64URL'، 'hex'، 'HEX'، 'latin1'، 'LATIN1'، 'ucs-2'، 'UCS-2'، 'ucs2'، 'UCS2'، 'utf-8'، 'UTF-8',\n  // 'utf8'، 'UTF8'، 'utf16le'، 'UTF16LE'\n  responseEncoding: 'utf8', // پیش‌فرض\n\n  // `xsrfCookieName` نام کوکی است که به عنوان مقدار توکن xsrf استفاده می‌شود\n  xsrfCookieName: 'XSRF-TOKEN', // پیش‌فرض\n\n  // `xsrfHeaderName` نام هدر http است که مقدار توکن xsrf را حمل می‌کند\n  xsrfHeaderName: 'X-XSRF-TOKEN', // پیش‌فرض\n    \n  // `undefined` (پیش‌فرض) - هدر XSRF فقط برای درخواست‌های هم‌مبدا تنظیم می‌شود\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` امکان مدیریت رویدادهای پیشرفت بارگذاری را فراهم می‌کند\n  // مرورگر و node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {\n```",
  "status": "ok"
}