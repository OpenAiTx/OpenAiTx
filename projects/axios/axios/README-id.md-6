{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "    // Lakukan apa pun yang Anda inginkan dengan event progres Axios\n  },\n\n  // `onDownloadProgress` memungkinkan penanganan event progres untuk unduhan\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Lakukan apa pun yang Anda inginkan dengan event progres Axios\n  },\n\n  // `maxContentLength` mendefinisikan ukuran maksimal konten respons http dalam satuan byte yang diizinkan di node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (hanya opsi Node) mendefinisikan ukuran maksimal konten permintaan http dalam satuan byte yang diizinkan\n  maxBodyLength: 2000,\n\n  // `validateStatus` mendefinisikan apakah promise akan di-resolve atau di-reject untuk kode status\n  // respons HTTP tertentu. Jika `validateStatus` mengembalikan `true` (atau diatur ke `null`\n  // atau `undefined`), promise akan di-resolve; jika tidak, promise akan\n  // di-reject.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` mendefinisikan jumlah maksimal redirect yang akan diikuti di node.js.\n  // Jika diatur ke 0, tidak ada redirect yang akan diikuti.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` mendefinisikan fungsi yang akan dipanggil sebelum redirect.\n  // Gunakan ini untuk menyesuaikan opsi permintaan saat melakukan redirect,\n  // untuk memeriksa header respons terakhir,\n  // atau untuk membatalkan permintaan dengan melempar error\n  // Jika maxRedirects diatur ke 0, `beforeRedirect` tidak digunakan.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` mendefinisikan UNIX Socket yang akan digunakan di node.js.\n  // misal '/var/run/docker.sock' untuk mengirim permintaan ke daemon docker.\n  // Hanya salah satu `socketPath` atau `proxy` yang dapat ditentukan.\n  // Jika keduanya ditentukan, `socketPath` yang digunakan.\n  socketPath: null, // default\n  \n  // `transport` menentukan metode transportasi yang akan digunakan untuk membuat permintaan.\n  // Jika ditentukan, itu yang akan digunakan. Jika tidak, jika `maxRedirects` adalah 0,\n  // library default `http` atau `https` akan digunakan, tergantung pada protokol yang ditentukan dalam `protocol`.\n  // Jika tidak, library `httpFollow` atau `httpsFollow` yang akan digunakan, tergantung juga pada protokol,\n  // yang dapat menangani redirect.\n  transport: undefined, // default\n\n  // `httpAgent` dan `httpsAgent` mendefinisikan agen khusus yang akan digunakan ketika melakukan permintaan http\n  // dan https, masing-masing, di node.js. Ini memungkinkan opsi seperti\n  // `keepAlive` yang tidak diaktifkan secara default sebelum Node.js v19.0.0. Setelah Node.js\n  // v19.0.0, Anda tidak perlu lagi menyesuaikan agen untuk mengaktifkan `keepAlive` karena\n  // `http.globalAgent` sudah mengaktifkan `keepAlive` secara default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` mendefinisikan hostname, port, dan protokol dari server proxy.\n  // Anda juga dapat mendefinisikan proxy menggunakan variabel lingkungan konvensional `http_proxy` dan\n  // `https_proxy`. Jika Anda menggunakan variabel lingkungan\n  // untuk konfigurasi proxy Anda, Anda juga dapat mendefinisikan variabel lingkungan `no_proxy`\n  // sebagai daftar domain yang dipisahkan koma yang tidak boleh diproksikan.\n  // Gunakan `false` untuk menonaktifkan proxy, mengabaikan variabel lingkungan.\n  // `auth` menunjukkan bahwa HTTP Basic auth harus digunakan untuk terhubung ke proxy, dan\n  // menyediakan kredensial.\n  // Ini akan mengatur header `Proxy-Authorization`, menimpa header\n  // `Proxy-Authorization` kustom yang sudah Anda atur menggunakan `headers`.\n  // Jika server proxy menggunakan HTTPS, maka Anda harus mengatur protokol ke `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Akan diutamakan dibanding 'host' jika keduanya ditentukan\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` menentukan token pembatalan yang dapat digunakan untuk membatalkan permintaan\n  // (lihat bagian Pembatalan di bawah untuk detail)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // cara alternatif untuk membatalkan permintaan Axios menggunakan AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` menunjukkan apakah body respons harus didekompres secara otomatis atau tidak.\n  // Jika diatur ke `true` juga akan menghapus header 'content-encoding'\n  // dari objek respons semua respons yang telah didekompres\n  // - Hanya Node (XHR tidak dapat mematikan dekompresi)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Menunjukkan apakah akan menggunakan HTTP parser yang tidak aman yang menerima header HTTP tidak valid.\n  // Ini dapat memungkinkan interoperabilitas dengan implementasi HTTP yang tidak sesuai standar.\n  // Penggunaan parser tidak aman sebaiknya dihindari.\n  // lihat opsi https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "status": "ok"
}