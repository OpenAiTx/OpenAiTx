{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// node.jsでリモート画像のGETリクエスト\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// GETリクエストを送信（デフォルトメソッド）\naxios('/user/12345');\n```\n\n### リクエストメソッドのエイリアス\n\n利便性のため、すべての一般的なリクエストメソッドにエイリアスが用意されています。\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### 注意\nエイリアスメソッドを使用する場合、`url`、`method`、`data`プロパティはconfigで指定する必要はありません。\n\n### 並列処理（非推奨）\n以下の関数の代わりに`Promise.all`を使用してください。\n\n同時リクエストを処理するためのヘルパー関数。\n\naxios.all(iterable)\naxios.spread(callback)\n\n### インスタンスの作成\n\nカスタムconfigで新しいaxiosインスタンスを作成できます。\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### インスタンスメソッド\n\n利用可能なインスタンスメソッドは以下の通りです。指定されたconfigはインスタンスのconfigとマージされます。\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## リクエスト設定\n\nリクエストを行う際に利用可能なconfigオプションは以下の通りです。`url`のみが必須です。`method`が指定されていない場合、リクエストはデフォルトで`GET`となります。\n\n```js\n{\n  // `url`はリクエストに使用されるサーバーのURLです\n  url: '/user',\n\n  // `method`はリクエスト時に使用するHTTPメソッドです\n  method: 'get', // デフォルト\n\n  // `baseURL`は`url`が絶対パスでなく、かつ`allowAbsoluteUrls`オプションがtrueに設定されていない限り、`url`の前に追加されます。\n  // インスタンスの`baseURL`を設定して、相対URLをメソッドに渡すのが便利です。\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls`は絶対URLが設定された`baseUrl`を上書きするかどうかを決定します。\n  // true（デフォルト）の場合、`url`の絶対値は`baseUrl`を上書きします。\n  // falseの場合、`url`の絶対値も必ず`baseUrl`が前に付きます。\n  allowAbsoluteUrls: true,\n\n  // `transformRequest`はサーバーに送信される前にリクエストデータを変更できます\n  // これはリクエストメソッドが'PUT'、'POST'、'PATCH'、'DELETE'の場合のみ適用されます\n  // 配列内の最後の関数は、文字列またはBuffer、ArrayBuffer、FormData、Streamのインスタンスを返さなければなりません\n  // headersオブジェクトを変更することもできます。\n  transformRequest: [function (data, headers) {\n    // データを変換するために任意の処理を実装\n```",
  "status": "ok"
}