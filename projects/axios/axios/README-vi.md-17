{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## üî• Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can‚Äôt use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## üî• B·ªô ƒëi·ªÅu h·ª£p Fetch\n\nB·ªô ƒëi·ªÅu h·ª£p Fetch ƒë∆∞·ª£c gi·ªõi thi·ªáu t·ª´ phi√™n b·∫£n `v1.7.0`. Theo m·∫∑c ƒë·ªãnh, n√≥ s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng n·∫øu c√°c b·ªô ƒëi·ªÅu h·ª£p `xhr` v√† `http` kh√¥ng c√≥ s·∫µn trong b·∫£n d·ª±ng,\nho·∫∑c kh√¥ng ƒë∆∞·ª£c m√¥i tr∆∞·ªùng h·ªó tr·ª£.\nƒê·ªÉ s·ª≠ d·ª•ng n√≥ m·∫∑c ƒë·ªãnh, b·∫°n ph·∫£i ch·ªçn r√µ r√†ng:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // m·∫∑c ƒë·ªãnh ['xhr', 'http', 'fetch']\n})\n```\n\nB·∫°n c√≥ th·ªÉ t·∫°o m·ªôt instance ri√™ng bi·ªát cho vi·ªác n√†y:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nB·ªô ƒëi·ªÅu h·ª£p n√†y h·ªó tr·ª£ c√πng c√°c ch·ª©c nƒÉng nh∆∞ b·ªô ƒëi·ªÅu h·ª£p `xhr`, **bao g·ªìm c·∫£ vi·ªác ghi nh·∫≠n ti·∫øn tr√¨nh t·∫£i l√™n v√† t·∫£i xu·ªëng**.\nNgo√†i ra, n√≥ c√≤n h·ªó tr·ª£ c√°c ki·ªÉu ph·∫£n h·ªìi b·ªï sung nh∆∞ `stream` v√† `formdata` (n·∫øu ƒë∆∞·ª£c m√¥i tr∆∞·ªùng h·ªó tr·ª£).\n\n## Semver\n\nCho ƒë·∫øn khi axios ƒë·∫°t b·∫£n ph√°t h√†nh `1.0`, c√°c thay ƒë·ªïi ph√° v·ª° s·∫Ω ƒë∆∞·ª£c ph√°t h√†nh v·ªõi m·ªôt phi√™n b·∫£n ph·ª• m·ªõi. V√≠ d·ª•, `0.5.1` v√† `0.5.4` s·∫Ω c√≥ c√πng API, nh∆∞ng `0.6.0` s·∫Ω c√≥ c√°c thay ƒë·ªïi ph√° v·ª°.\n\n## Promises\n\naxios ph·ª• thu·ªôc v√†o vi·ªác th·ª±c thi Promise ES6 g·ªëc ƒë·ªÉ ƒë∆∞·ª£c [h·ªó tr·ª£](https://caniuse.com/promises).\nN·∫øu m√¥i tr∆∞·ªùng c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ES6 Promises, b·∫°n c√≥ th·ªÉ [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios bao g·ªìm c√°c ƒë·ªãnh nghƒ©a [TypeScript](https://typescriptlang.org) v√† tr√¨nh b·∫£o v·ªá ki·ªÉu cho l·ªói axios.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nV√¨ axios ph√°t h√†nh k√©p v·ªõi xu·∫•t m·∫∑c ƒë·ªãnh ESM v√† CJS `module.exports`, n√™n c√≥ m·ªôt s·ªë l∆∞u √Ω.\nThi·∫øt l·∫≠p ƒë∆∞·ª£c khuy·∫øn ngh·ªã l√† s·ª≠ d·ª•ng `\"moduleResolution\": \"node16\"` (ƒëi·ªÅu n√†y ƒë∆∞·ª£c ng·ª• √Ω b·ªüi `\"module\": \"node16\"`). L∆∞u √Ω r·∫±ng ƒëi·ªÅu n√†y y√™u c·∫ßu TypeScript 4.7 tr·ªü l√™n.\nN·∫øu b·∫°n s·ª≠ d·ª•ng ESM, c√°c thi·∫øt l·∫≠p c·ªßa b·∫°n s·∫Ω ·ªïn.\nN·∫øu b·∫°n bi√™n d·ªãch TypeScript sang CJS v√† kh√¥ng th·ªÉ s·ª≠ d·ª•ng `\"moduleResolution\": \"node16\"`, b·∫°n ph·∫£i b·∫≠t `esModuleInterop`.\nN·∫øu b·∫°n d√πng TypeScript ƒë·ªÉ ki·ªÉm tra ki·ªÉu m√£ JavaScript CJS, l·ª±a ch·ªçn duy nh·∫•t l√† s·ª≠ d·ª•ng `\"moduleResolution\": \"node16\"`.\n\n## Thi·∫øt l·∫≠p tr·ª±c tuy·∫øn ch·ªâ v·ªõi m·ªôt c√∫ nh·∫•p\n\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng Gitpod, m·ªôt IDE tr·ª±c tuy·∫øn (mi·ªÖn ph√≠ cho m√£ ngu·ªìn m·ªü) ƒë·ªÉ ƒë√≥ng g√≥p ho·∫∑c ch·∫°y c√°c v√≠ d·ª• tr·ª±c tuy·∫øn.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## T√†i nguy√™n\n\n* [Nh·∫≠t k√Ω thay ƒë·ªïi](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [H·ªá sinh th√°i](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [H∆∞·ªõng d·∫´n ƒë√≥ng g√≥p](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Quy t·∫Øc ·ª©ng x·ª≠](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Ghi nh·∫≠n\n\naxios ƒë∆∞·ª£c l·∫•y c·∫£m h·ª©ng nhi·ªÅu t·ª´ [$http service](https://docs.angularjs.org/api/ng/service/$http) cung c·∫•p trong [AngularJS](https://angularjs.org/). Cu·ªëi c√πng, axios l√† n·ªó l·ª±c ƒë·ªÉ cung c·∫•p m·ªôt d·ªãch v·ª• ƒë·ªôc l·∫≠p gi·ªëng `$http` ƒë·ªÉ s·ª≠ d·ª•ng ngo√†i AngularJS.\n\n## Gi·∫•y ph√©p\n\n[MIT](LICENSE)\n",
  "status": "ok"
}