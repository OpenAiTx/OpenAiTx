{
  "id": 8,
  "origin": "```js\n// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### Config order of precedence\n\nConfig will be merged with an order of precedence. The order is library defaults found in [lib/defaults/index.js](https://github.com/axios/axios/blob/main/lib/defaults/index.js#L49), then `defaults` property of the instance, and finally `config` argument for the request. The latter will take precedence over the former. Here's an example.\n\n```js\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## Interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```js\n\nconst instance = axios.create();\n\n// Add a request interceptor\ninstance.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\ninstance.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nIf you need to remove an interceptor later you can.\n\n```js\nconst instance = axios.create();\nconst myInterceptor = instance.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\nYou can also clear all interceptors for requests or responses.\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses\n```\n\nYou can add interceptors to a custom instance of axios.\n\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\nWhen you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay\nin the execution of your axios request when the main thread is blocked (a promise is created under the hood for\nthe interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag\nto the options object that will tell axios to run the code synchronously and avoid any delays in request execution.\n\n```js\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'I am only a header!';\n  return config;\n}, null, { synchronous: true });\n```\n\nIf you want to execute a particular interceptor based on a runtime check,\nyou can add a `runWhen` function to the options object. The request interceptor will not be executed **if and only if** the return\nof `runWhen` is `false`. The function will be called with the config\nobject (don't forget that you can bind your own arguments to it as well.) This can be handy when you have an\nasynchronous request interceptor that only needs to run at certain times.\n",
  "origin_sha": "6kwzhk6CE1CRCOj5zCcnL7pc/83OgVLCi9g0Hk4TRYk=",
  "translate": "```js\n// इंस्टेंस बनाते समय कॉन्फ़िग डिफ़ॉल्ट सेट करें\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// इंस्टेंस बनने के बाद डिफ़ॉल्ट्स को बदलें\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### कॉन्फ़िग प्राथमिकता का क्रम\n\nकॉन्फ़िग को प्राथमिकता के क्रम के अनुसार मर्ज किया जाएगा। क्रम है: लाइब्रेरी डिफ़ॉल्ट्स, जो [lib/defaults/index.js](https://github.com/axios/axios/blob/main/lib/defaults/index.js#L49) में पाए जाते हैं, फिर इंस्टेंस की `defaults` प्रॉपर्टी, और अंत में रिक्वेस्ट के लिए दिया गया `config` आर्ग्युमेंट। बाद वाला, पहले वाले पर प्राथमिकता लेगा। यहाँ एक उदाहरण है।\n\n```js\n// लाइब्रेरी द्वारा दिए गए कॉन्फ़िग डिफ़ॉल्ट्स का उपयोग करके एक इंस्टेंस बनाएं\n// इस बिंदु पर, टाइमआउट कॉन्फ़िग वैल्यू `0` है, जैसा कि लाइब्रेरी का डिफ़ॉल्ट है\nconst instance = axios.create();\n\n// लाइब्रेरी के लिए टाइमआउट डिफ़ॉल्ट ओवरराइड करें\n// अब इस इंस्टेंस का उपयोग करने वाली सभी रिक्वेस्ट्स 2.5 सेकंड प्रतीक्षा करेंगी टाइमआउट होने से पहले\ninstance.defaults.timeout = 2500;\n\n// इस रिक्वेस्ट के लिए टाइमआउट ओवरराइड करें क्योंकि यह लंबा चलने के लिए जाना जाता है\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## इंटरसेप्टर्स\n\nआप `then` या `catch` द्वारा हैंडल किए जाने से पहले रिक्वेस्ट या रिस्पॉन्स को इंटरसेप्ट कर सकते हैं।\n\n```js\n\nconst instance = axios.create();\n\n// एक रिक्वेस्ट इंटरसेप्टर जोड़ें\ninstance.interceptors.request.use(function (config) {\n    // रिक्वेस्ट भेजे जाने से पहले कुछ करें\n    return config;\n  }, function (error) {\n    // रिक्वेस्ट एरर के साथ कुछ करें\n    return Promise.reject(error);\n  });\n\n// एक रिस्पॉन्स इंटरसेप्टर जोड़ें\ninstance.interceptors.response.use(function (response) {\n    // कोई भी स्टेटस कोड जो 2xx की रेंज में है, इस फंक्शन को ट्रिगर करेगा\n    // रिस्पॉन्स डेटा के साथ कुछ करें\n    return response;\n  }, function (error) {\n    // कोई भी स्टेटस कोड जो 2xx की रेंज के बाहर है, इस फंक्शन को ट्रिगर करेगा\n    // रिस्पॉन्स एरर के साथ कुछ करें\n    return Promise.reject(error);\n  });\n```\n\nअगर आपको बाद में किसी इंटरसेप्टर को हटाना है तो आप कर सकते हैं।\n\n```js\nconst instance = axios.create();\nconst myInterceptor = instance.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\nआप सभी रिक्वेस्ट या रिस्पॉन्स इंटरसेप्टर्स को भी क्लियर कर सकते हैं।\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // रिक्वेस्ट से इंटरसेप्टर्स हटाता है\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // रिस्पॉन्स से इंटरसेप्टर्स हटाता है\n```\n\nआप axios के कस्टम इंस्टेंस में भी इंटरसेप्टर्स जोड़ सकते हैं।\n\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\nजब आप रिक्वेस्ट इंटरसेप्टर्स जोड़ते हैं, तो डिफ़ॉल्ट रूप से उन्हें एसिंक्रोनस माना जाता है। इससे आपके axios रिक्वेस्ट के निष्पादन में देरी हो सकती है जब मुख्य थ्रेड ब्लॉक हो (इंटरसेप्टर के लिए अंदर ही अंदर एक प्रॉमिस बनाया जाता है और आपकी रिक्वेस्ट कॉल स्टैक के नीचे चली जाती है)। यदि आपके रिक्वेस्ट इंटरसेप्टर्स सिंक्रोनस हैं तो आप विकल्प ऑब्जेक्ट में एक फ्लैग जोड़ सकते हैं जो axios को कोड सिंक्रोनस रूप से चलाने और रिक्वेस्ट निष्पादन में देरी से बचने के लिए बताएगा।\n\n```js\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'I am only a header!';\n  return config;\n}, null, { synchronous: true });\n```\n\nअगर आप किसी विशेष इंटरसेप्टर को रनटाइम चेक के आधार पर निष्पादित करना चाहते हैं,\nतो आप विकल्प ऑब्जेक्ट में एक `runWhen` फंक्शन जोड़ सकते हैं। रिक्वेस्ट इंटरसेप्टर **तभी और केवल तभी** निष्पादित नहीं होगा जब `runWhen` का रिटर्न `false` होगा। यह फंक्शन कॉन्फ़िग ऑब्जेक्ट के साथ कॉल किया जाएगा (यह मत भूलिए कि आप इसमें अपने स्वयं के आर्ग्युमेंट भी बाइंड कर सकते हैं)। यह तब उपयोगी हो सकता है जब आपके पास कोई असिंक्रोनस रिक्वेस्ट इंटरसेप्टर हो जिसे केवल कुछ विशेष परिस्थितियों में ही चलने की आवश्यकता हो।\n```",
  "status": "ok"
}