{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // veja também https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // padrão\n\n  // opções transitórias para compatibilidade retroativa que podem ser removidas em versões futuras\n  transitional: {\n    // modo silencioso de parsing de JSON\n    // `true`  - ignora erros de parsing de JSON e define response.data como null se o parsing falhar (comportamento antigo)\n    // `false` - lança SyntaxError se o parsing de JSON falhar (Nota: responseType deve ser configurado como 'json')\n    silentJSONParsing: true, // valor padrão para a versão atual do Axios\n\n    // tenta fazer o parsing da resposta como JSON mesmo se `responseType` não for 'json'\n    forcedJSONParsing: true,\n\n    // lança erro ETIMEDOUT em vez de ECONNABORTED genérico em timeouts da requisição\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // A classe FormData a ser usada para serializar automaticamente o payload em um objeto FormData\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // função visitante personalizada para serializar valores do formulário\n      dots: boolean, // usa pontos em vez do formato de colchetes\n      metaTokens: boolean, // mantém finais especiais como {} na chave do parâmetro\n      indexes: boolean, // formato dos índices dos arrays: null - sem colchetes, false - colchetes vazios, true - colchetes com índices\n  },\n\n  // apenas para adaptador http (node.js)\n  maxRate: [\n    100 * 1024, // limite de upload de 100KB/s,\n    100 * 1024  // limite de download de 100KB/s\n  ]\n}\n```\n\n## Esquema de Resposta\n\nA resposta de uma requisição contém as seguintes informações.\n\n```js\n{\n  // `data` é a resposta fornecida pelo servidor\n  data: {},\n\n  // `status` é o código de status HTTP da resposta do servidor\n  status: 200,\n\n  // `statusText` é a mensagem de status HTTP da resposta do servidor\n  statusText: 'OK',\n\n  // `headers` são os cabeçalhos HTTP que o servidor respondeu\n  // Todos os nomes dos cabeçalhos estão em minúsculo e podem ser acessados usando a notação de colchetes.\n  // Exemplo: `response.headers['content-type']`\n  headers: {},\n\n  // `config` é a configuração que foi fornecida ao `axios` para a requisição\n  config: {},\n\n  // `request` é a requisição que gerou esta resposta\n  // É a última instância de ClientRequest no node.js (em redirecionamentos)\n  // e uma instância de XMLHttpRequest no navegador\n  request: {}\n}\n```\n\nAo usar `then`, você receberá a resposta da seguinte forma:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nAo usar `catch`, ou passando um [callback de rejeição](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) como segundo parâmetro do `then`, a resposta estará disponível através do objeto `error` conforme explicado na seção [Tratando Erros](#handling-errors).\n\n## Configurações Padrão\n\nVocê pode especificar configurações padrão que serão aplicadas a toda requisição.\n\n### Padrões globais do axios\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Importante: Se o axios for usado com múltiplos domínios, o AUTH_TOKEN será enviado para todos eles.\n// Veja abaixo um exemplo usando padrões de instância personalizada.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Padrões de instância personalizada\n```",
  "status": "ok"
}