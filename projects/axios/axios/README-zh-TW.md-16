{
  "id": 16,
  "origin": "### AxiosHeaders#delete(header, matcher?)\n\n```\ndelete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n```\n\nReturns `true` if at least one header has been removed.\n\n### AxiosHeaders#clear(matcher?)\n\n```\nclear(matcher?: AxiosHeaderMatcher): boolean;\n```\n\nRemoves all headers. \nUnlike the `delete` method matcher, this optional matcher will be used to match against the header name rather than the value.\n\n```ts\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\nReturns `true` if at least one header has been cleared.\n\n### AxiosHeaders#normalize(format);\n\nIf the headers object was changed directly, it can have duplicates with the same name but in different cases.\nThis method normalizes the headers object by combining duplicate keys into one.\nAxios uses this method internally after calling each interceptor.\nSet `format` to true for converting headers name to lowercase and capitalize the initial letters (`cOntEnt-type` => `Content-Type`)\n\n```js\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\nReturns `this`.\n\n### AxiosHeaders#concat(...targets)\n\n```\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n```\n\nMerges the instance with targets into a new `AxiosHeaders` instance. If the target is a string, it will be parsed as RAW HTTP headers.\n\nReturns a new `AxiosHeaders` instance.\n\n### AxiosHeaders#toJSON(asStrings?)\n\n````\ntoJSON(asStrings?: boolean): RawAxiosHeaders;\n````\n\nResolve all internal headers values into a new null prototype object. \nSet `asStrings` to true to resolve arrays as a string containing all elements, separated by commas.\n\n### AxiosHeaders.from(thing?)\n\n````\nfrom(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n````\n\nReturns a new `AxiosHeaders` instance created from the raw headers passed in,\nor simply returns the given headers object if it's an `AxiosHeaders` instance.\n\n### AxiosHeaders.concat(...targets)\n\n````\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n````\n\nReturns a new `AxiosHeaders` instance created by merging the target objects.\n\n### Shortcuts\n\nThe following shortcuts are available:\n\n- `setContentType`, `getContentType`, `hasContentType`\n\n- `setContentLength`, `getContentLength`, `hasContentLength`\n\n- `setAccept`, `getAccept`, `hasAccept`\n\n- `setUserAgent`, `getUserAgent`, `hasUserAgent`",
  "origin_sha": "4qmvmNfwyVCT9uHZjtTFtv2Zx71NrACZgX9WsiFZ/kg=",
  "translate": "### AxiosHeaders#delete(header, matcher?)\n\n```\ndelete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n```\n\n如果至少有一個標頭被移除，則回傳 `true`。\n\n### AxiosHeaders#clear(matcher?)\n\n```\nclear(matcher?: AxiosHeaderMatcher): boolean;\n```\n\n移除所有標頭。\n與 `delete` 方法的 matcher 不同，此可選的 matcher 會用來比對標頭名稱而非值。\n\n```ts\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\n如果至少有一個標頭被清除，則回傳 `true`。\n\n### AxiosHeaders#normalize(format);\n\n如果 headers 物件被直接修改，可能會有名稱相同但大小寫不同的重複項。\n此方法會將 headers 物件標準化，將重複的鍵合併為一個。\nAxios 在呼叫每個攔截器後會在內部使用此方法。\n將 `format` 設為 true 時，會將標頭名稱轉為小寫並將首字母大寫（如 `cOntEnt-type` => `Content-Type`）\n\n```js\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\n回傳 `this`。\n\n### AxiosHeaders#concat(...targets)\n\n```\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n```\n\n將當前實例與目標合併為新的 `AxiosHeaders` 實例。如果目標是字串，則會解析為 RAW HTTP 標頭。\n\n回傳新的 `AxiosHeaders` 實例。\n\n### AxiosHeaders#toJSON(asStrings?)\n\n````\ntoJSON(asStrings?: boolean): RawAxiosHeaders;\n````\n\n將所有內部標頭值解析為新的 null prototype 物件。\n將 `asStrings` 設為 true 時，陣列會轉為用逗號分隔的字串。\n\n### AxiosHeaders.from(thing?)\n\n````\nfrom(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n````\n\n回傳從傳入的原始標頭建立的新 `AxiosHeaders` 實例，\n或如果傳入的是 `AxiosHeaders` 實例則直接回傳該物件。\n\n### AxiosHeaders.concat(...targets)\n\n````\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n````\n\n回傳由合併目標物件所建立的新 `AxiosHeaders` 實例。\n\n### 快捷方法\n\n可用的快捷方法如下：\n\n- `setContentType`, `getContentType`, `hasContentType`\n\n- `setContentLength`, `getContentLength`, `hasContentLength`\n\n- `setAccept`, `getAccept`, `hasAccept`\n\n- `setUserAgent`, `getUserAgent`, `hasUserAgent`",
  "status": "ok"
}