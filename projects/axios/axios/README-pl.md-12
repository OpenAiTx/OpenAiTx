{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### 🆕 Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "axios.post('https://example.com', form)\n```\n\n### 🆕 Automatyczna serializacja do FormData\n\nPocząwszy od wersji `v0.27.0`, Axios obsługuje automatyczną serializację obiektów do obiektu FormData, jeśli nagłówek żądania `Content-Type`\njest ustawiony na `multipart/form-data`.\n\nPoniższe żądanie prześle dane w formacie FormData (przeglądarka i Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nW buildzie `node.js`, domyślnie używany jest polyfill ([`form-data`](https://github.com/form-data/form-data)).\n\nMożesz nadpisać klasę FormData, ustawiając zmienną konfiguracyjną `env.FormData`,\nale w większości przypadków nie będzie to potrzebne:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nSerializer FormData w Axios obsługuje kilka specjalnych zakończeń, aby wykonać następujące operacje:\n\n- `{}` - serializuje wartość za pomocą JSON.stringify\n- `[]` - rozwija obiekt podobny do tablicy jako osobne pola o tym samym kluczu\n\n> **Uwaga**: operacja rozwijania/ekspansji będzie domyślnie używana dla tablic i obiektów FileList\n\nSerializer FormData obsługuje dodatkowe opcje za pomocą właściwości `config.formSerializer: object`, aby obsłużyć rzadkie przypadki:\n\n- `visitor: Function` - zdefiniowana przez użytkownika funkcja visitor, która będzie wywoływana rekurencyjnie w celu serializacji obiektu danych\ndo obiektu `FormData` według własnych reguł.\n\n- `dots: boolean = false` - użyj notacji kropkowej zamiast nawiasów do serializacji tablic i obiektów;\n\n- `metaTokens: boolean = true` - dodaje specjalne zakończenie (np. `user{}: '{\"name\": \"John\"}'`) w kluczu FormData.\nParser backendowy może potencjalnie wykorzystać te metainformacje do automatycznego przetworzenia wartości jako JSON.\n\n- `indexes: null|false|true = false` - kontroluje sposób dodawania indeksów do rozwiniętych kluczy obiektów podobnych do tablicy typu `flat`.\n\n    - `null` - nie dodawaj nawiasów (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(domyślnie) - dodaj puste nawiasy (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - dodaj nawiasy z indeksami  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nZałóżmy, że mamy taki obiekt:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nNastępujące kroki zostaną wykonane wewnętrznie przez serializer Axios:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios obsługuje następujące skrócone metody: `postForm`, `putForm`, `patchForm`,\nktóre są odpowiednikami odpowiednich metod http z nagłówkiem `Content-Type` ustawionym na `multipart/form-data`.\n\n## Wysyłanie plików\n\nMożesz łatwo przesłać pojedynczy plik:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "status": "ok"
}