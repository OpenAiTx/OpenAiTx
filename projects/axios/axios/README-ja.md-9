{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **注:** optionsパラメータ（`synchronous` と `runWhen` プロパティを持つ）は、現時点ではリクエストインターセプターのみでサポートされています。\n\n### 複数のインターセプター\n\n複数のレスポンスインターセプターを追加した場合、\nレスポンスが正常に処理されたとき\n- 各インターセプターが実行される\n- 追加された順序で実行される\n- 最後のインターセプターの結果のみが返される\n- 各インターセプターは前のインターセプターの結果を受け取る\n- そして、もし正常終了用インターセプターが例外をスローした場合\n    - 次の正常終了用インターセプターは呼ばれない\n    - 次の失敗用インターセプターが呼ばれる\n    - 捕捉された場合、さらに次の正常終了用インターセプターが再び呼ばれる（プロミスチェーンと同じ動作）。\n\nこれらすべてをコードで確認するには[インターセプターテスト](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js)を参照してください。\n\n## エラータイプ\n\naxiosには多くの異なるエラーメッセージがあり、エラーの詳細やデバッグの機会を提供します。\n\naxiosエラーの一般的な構造は以下の通りです:\n| プロパティ  | 定義  |\n| -------- | ----------  |\n| message  | エラーメッセージの概要と失敗したステータス。 |\n| name     | エラーの発生元を定義します。axiosの場合は常に 'AxiosError' です。 |\n| stack    | エラーのスタックトレース。 | \n| config   | リクエスト時にユーザーが定義した特定のインスタンス設定を持つaxiosのconfigオブジェクト |\n| code     | axiosが識別したエラーを表します。下の表に内部axiosエラーの具体的な定義を記載しています。 |\n| status   | HTTPレスポンスのステータスコード。[こちら](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)で一般的なHTTPレスポンスステータスコードの意味を確認できます。 \n\n以下はaxiosで識別される可能性のあるエラーの一覧です:\n\n| コード                      | 定義                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | axiosの設定に無効な値が指定されました。                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | axiosの設定に無効なオプションが指定されました。                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | 現在のaxios環境でサポートされていない機能またはメソッド。                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | 非推奨の機能またはメソッドがaxiosで使用されました。                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | axiosリクエストに無効なURLが指定されました。                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | 通常はリクエストがタイムアウトした場合（`transitional.clarifyTimeoutError` が設定されていない場合）またはブラウザやプラグインによって中断されたことを示します。                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | AbortSignal（またはCancelToken）を使用してユーザーによって明示的にキャンセルされました。                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | デフォルトのaxiosタイムリミットを超過したためにリクエストがタイムアウトしました。`transitional.clarifyTimeoutError` を `true` に設定する必要があります。そうでない場合は一般的な `ECONNABORTED` エラーがスローされます。                                                                                                                                                                                                         |\n| ERR_NETWORK               | ネットワーク関連の問題。ブラウザではこのエラーは[CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS)や[Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content)ポリシー違反によっても発生します。セキュリティ上の理由でブラウザはエラーの実際の理由をJSコードに明示しないため、コンソールを確認してください。 |\n| ERR_FR_TOO_MANY_REDIRECTS | リクエストが多すぎる回数リダイレクトされ、axiosの設定で指定された最大リダイレクト数を超えました。                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | レスポンスが正しく解析できない、または予期しないフォーマットです。通常 `5xx` ステータスコードのレスポンスに関連しています。                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | リクエストのフォーマットが予期しない、または必須パラメータが不足しています。通常 `4xx` ステータスコードのレスポンスに関連しています。                                                                                                                                                                                                                                                                    |\n\n## エラーの処理\n\nデフォルトの動作では、2xxの範囲外のステータスコードで返されたすべてのレスポンスは拒否され、エラーとして扱われます。\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // リクエストが送信され、サーバーが2xxの範囲外のステータスコードで応答した場合\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // リクエストは送信されたが、レスポンスを受信しなかった場合\n      // `error.request` はブラウザではXMLHttpRequestのインスタンス、node.jsではhttp.ClientRequestのインスタンス\n      console.log(error.request);\n    } else {\n      // リクエストの設定中にエラーが発生した場合\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n`validateStatus` 設定オプションを使用すると、デフォルト条件（status >= 200 && status < 300）を上書きし、エラーをスローするHTTPコードを定義できます。\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // ステータスコードが500未満の場合のみresolve\n  }\n})\n```\n\n`toJSON` を使用すると、HTTPエラーに関するより多くの情報を持つオブジェクトを取得できます。\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}