{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can’t use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Fetch 어댑터\n\nFetch 어댑터는 `v1.7.0`에서 도입되었습니다. 기본적으로, 빌드에서 `xhr`와 `http` 어댑터를 사용할 수 없거나,\n환경에서 지원되지 않는 경우 사용됩니다.\n기본적으로 사용하려면, 명시적으로 선택해야 합니다:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // 기본값 ['xhr', 'http', 'fetch']\n})\n```\n\n이를 위해 별도의 인스턴스를 생성할 수 있습니다:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\n이 어댑터는 `xhr` 어댑터와 동일한 기능을 지원하며, **업로드 및 다운로드 진행 상황 캡처 포함**이 가능합니다. \n또한, 환경이 지원하는 경우 `stream` 및 `formdata`와 같은 추가 응답 유형도 지원합니다.\n\n## Semver\n\naxios가 `1.0` 릴리즈에 도달하기 전까지, 주요 변경 사항은 새로운 마이너 버전과 함께 릴리즈됩니다. 예를 들어 `0.5.1`과 `0.5.4`는 동일한 API를 가지지만, `0.6.0`에는 주요 변경 사항이 포함될 수 있습니다.\n\n## 프로미스(Promises)\n\naxios는 [지원되는](https://caniuse.com/promises) 네이티브 ES6 프로미스 구현에 의존합니다.\n만약 환경에서 ES6 프로미스를 지원하지 않는 경우, [polyfill](https://github.com/jakearchibald/es6-promise)을 사용할 수 있습니다.\n\n## 타입스크립트(TypeScript)\n\naxios는 [TypeScript](https://typescriptlang.org) 정의와 axios 오류에 대한 타입 가드를 포함합니다.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\naxios는 ESM 기본 내보내기와 CJS `module.exports`를 모두 지원하므로 몇 가지 주의 사항이 있습니다.\n권장 설정은 `\"moduleResolution\": \"node16\"`을 사용하는 것입니다(이는 `\"module\": \"node16\"`에 의해 암시됩니다). 이 설정은 TypeScript 4.7 이상이 필요합니다.\nESM을 사용하는 경우, 별도의 설정이 필요하지 않습니다.\nTypeScript를 CJS로 컴파일하고 `\"moduleResolution\": \"node16\"`을 사용할 수 없는 경우, `esModuleInterop`을 활성화해야 합니다.\nTypeScript로 CJS 자바스크립트 코드를 타입 체크하는 경우, `\"moduleResolution\": \"node16\"`만 사용할 수 있습니다.\n\n## 온라인 원클릭 설정\n\n온라인 IDE인 Gitpod(오픈 소스에는 무료)를 사용하여 기여하거나 예제를 온라인에서 실행할 수 있습니다.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## 리소스\n\n* [변경 로그](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [에코시스템](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [기여 가이드](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [행동 강령](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## 크레딧\n\naxios는 [AngularJS](https://angularjs.org/)에서 제공하는 [$http 서비스](https://docs.angularjs.org/api/ng/service/$http)에서 많은 영감을 받았습니다. 궁극적으로 axios는 AngularJS 외부에서 사용할 수 있는 독립적인 `$http`-유사 서비스를 제공하려는 노력의 산물입니다.\n\n## 라이선스\n\n[MIT](LICENSE)\n",
  "status": "ok"
}