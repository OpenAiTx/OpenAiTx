{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// ارسال درخواست GET برای تصویر راه دور در node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// ارسال یک درخواست GET (متد پیش‌فرض)\naxios('/user/12345');\n```\n\n### نام‌های مستعار روش‌های درخواست\n\nبرای راحتی، نام‌های مستعاری برای تمام روش‌های رایج درخواست فراهم شده است.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### توجه\nهنگام استفاده از متدهای نام مستعار، خواص `url`، `method` و `data` نیازی به تعیین در config ندارند.\n\n### همزمانی (منسوخ شده)\nلطفاً از `Promise.all` برای جایگزینی توابع زیر استفاده کنید.\n\nتوابع کمکی برای کار با درخواست‌های همزمان.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### ایجاد یک نمونه\n\nشما می‌توانید یک نمونه جدید از axios با پیکربندی سفارشی ایجاد کنید.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### متدهای نمونه\n\nمتدهای قابل استفاده برای نمونه در زیر فهرست شده‌اند. پیکربندی تعیین شده با پیکربندی نمونه ترکیب خواهد شد.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## پیکربندی درخواست\n\nاین‌ها گزینه‌های پیکربندی موجود برای ارسال درخواست هستند. فقط `url` الزامی است. اگر `method` مشخص نشده باشد، درخواست‌ها به طور پیش‌فرض `GET` خواهند بود.\n\n```js\n{\n  // `url` آدرسی از سرور است که برای درخواست استفاده خواهد شد\n  url: '/user',\n\n  // `method` روشی است که هنگام ارسال درخواست استفاده خواهد شد\n  method: 'get', // پیش‌فرض\n\n  // `baseURL` به `url` اضافه خواهد شد مگر این که `url` مطلق بوده و گزینه `allowAbsoluteUrls` روی true باشد.\n  // تنظیم `baseURL` برای یک نمونه از axios جهت ارسال آدرس‌های نسبی به متدهای آن نمونه می‌تواند مفید باشد.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` تعیین می‌کند که آیا آدرس‌های مطلق می‌توانند بر `baseUrl` پیکربندی شده غلبه کنند یا خیر.\n  // زمانی که روی true (پیش‌فرض) تنظیم شود، مقادیر مطلق برای `url` بر `baseUrl` غلبه می‌کنند.\n  // زمانی که روی false تنظیم شود، مقادیر مطلق برای `url` همیشه با `baseUrl` شروع می‌شوند.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` اجازه می‌دهد که داده‌های درخواست قبل از ارسال به سرور تغییر داده شوند\n  // این فقط برای روش‌های 'PUT'، 'POST'، 'PATCH' و 'DELETE' قابل اعمال است\n  // آخرین تابع در آرایه باید یک رشته یا نمونه‌ای از Buffer، ArrayBuffer،\n  // FormData یا Stream را بازگرداند\n  // شما می‌توانید شیء headers را تغییر دهید.\n  transformRequest: [function (data, headers) {\n    // هر کاری که می‌خواهید برای تغییر داده‌ها انجام دهید\n```",
  "status": "ok"
}