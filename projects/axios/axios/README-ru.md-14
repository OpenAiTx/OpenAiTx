{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **‚ö†Ô∏è Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## üÜï Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## üÜï AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–π—Ç–∞—Ö\n      download: true; // –ø—Ä–∏–∑–Ω–∞–∫ –∑–∞–≥—Ä—É–∑–∫–∏\n    }*/\n  }\n});  \n```\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏/–≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–æ–∫–∞ –≤ node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ–≥–æ –ø–æ—Ç–æ–∫–∞\n});\n````\n\n> **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:**\n> –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FormData –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–∞—Ö node.js.\n\n> **‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ**\n> –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ maxRedirects: 0 –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–æ–∫–∞ –≤ **node.js**,\n> —Ç–∞–∫ –∫–∞–∫ –ø–∞–∫–µ—Ç follow-redirects –±—É–¥–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞—Ç—å –≤–µ—Å—å –ø–æ—Ç–æ–∫ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –±–µ–∑ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ \"backpressure\".\n\n\n## üÜï –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è http-–∞–¥–∞–ø—Ç–µ—Ä–∞ (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // –ª–∏–º–∏—Ç 100KB/s\n});\n```\n\n## üÜï AxiosHeaders\n\nAxios –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å `AxiosHeaders` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Å –ø–æ–º–æ—â—å—é API, –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–∞ Map, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.\n–•–æ—Ç—è HTTP –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö, Axios —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ç–∏–ª—è\n–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–æ–∫, –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä—ã –æ—à–∏–±–æ—á–Ω–æ —É—á–∏—Ç—ã–≤–∞—é—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞.\n–°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –ø—Ä—è–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ headers –≤—Å—ë –µ—â—ë –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n### –†–∞–±–æ—Ç–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏\n\n–≠–∫–∑–µ–º–ø–ª—è—Ä –æ–±—ä–µ–∫—Ç–∞ AxiosHeaders –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–ø—Ä–∞–≤–ª—è—é—Ç –ª–æ–≥–∏–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å–ª–∏—è–Ω–∏—è.\n–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è Axios –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ `toJSON`.\n\n> –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü–æ–¥ JSON –∑–¥–µ—Å—å –ø–æ–Ω–∏–º–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ —Å–µ—Ç–∏.\n\n–ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–æ–≤:\n- `string` ‚Äî –æ–±—ã—á–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n- `null` ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤ JSON\n- `false` ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤ JSON, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ `set` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω —Å –æ–ø—Ü–∏–µ–π `rewrite: true`\n  –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (Axios –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ `User-Agent` –∏–ª–∏ `Content-Type`)\n- `undefined` ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n> –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Ä–∞–≤–Ω–æ undefined.\n\n–û–±—ä–µ–∫—Ç headers –≤—Å–µ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–æ–≤ (interceptors) –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–≤:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —ç—Ç–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø —É—Å—Ç–∞—Ä–µ–ª\n    \n      return request;\n    }\n  );\n````\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä `AxiosHeaders` —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ `for...of`:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "status": "ok"
}