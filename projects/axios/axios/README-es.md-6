{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // Haz lo que quieras con el evento de progreso de Axios\n  },\n\n  // `onDownloadProgress` permite manejar eventos de progreso para descargas\n  // navegador y node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Haz lo que quieras con el evento de progreso de Axios\n  },\n\n  // `maxContentLength` define el tamaño máximo permitido del contenido de la respuesta http en bytes en node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (opción solo para Node) define el tamaño máximo permitido del contenido de la solicitud http en bytes\n  maxBodyLength: 2000,\n\n  // `validateStatus` define si se debe resolver o rechazar la promesa para un\n  // código de estado HTTP dado. Si `validateStatus` retorna `true` (o se establece en `null`\n  // o `undefined`), la promesa se resolverá; de lo contrario, la promesa será\n  // rechazada.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // valor por defecto\n  },\n\n  // `maxRedirects` define el número máximo de redirecciones a seguir en node.js.\n  // Si se establece en 0, no se seguirán redirecciones.\n  maxRedirects: 21, // valor por defecto\n\n  // `beforeRedirect` define una función que se llamará antes de la redirección.\n  // Usa esto para ajustar las opciones de la solicitud al redirigir,\n  // para inspeccionar las cabeceras de la respuesta más reciente,\n  // o para cancelar la solicitud lanzando un error.\n  // Si maxRedirects se establece en 0, `beforeRedirect` no se utiliza.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` define un Socket UNIX que se usará en node.js.\n  // p. ej., '/var/run/docker.sock' para enviar solicitudes al daemon de docker.\n  // Solo se puede especificar `socketPath` o `proxy`.\n  // Si ambos se especifican, se usa `socketPath`.\n  socketPath: null, // valor por defecto\n  \n  // `transport` determina el método de transporte que se usará para realizar la solicitud.\n  // Si se define, se usará. De lo contrario, si `maxRedirects` es 0,\n  // se usará la biblioteca predeterminada `http` o `https`, dependiendo del protocolo especificado en `protocol`.\n  // De lo contrario, se usará la biblioteca `httpFollow` o `httpsFollow`, nuevamente dependiendo del protocolo,\n  // que puede manejar redirecciones.\n  transport: undefined, // valor por defecto\n\n  // `httpAgent` y `httpsAgent` definen un agente personalizado que se usará al realizar solicitudes http\n  // y https, respectivamente, en node.js. Esto permite agregar opciones como\n  // `keepAlive` que no están habilitadas por defecto antes de Node.js v19.0.0. Después de Node.js\n  // v19.0.0, ya no es necesario personalizar el agente para habilitar `keepAlive` porque\n  // `http.globalAgent` tiene `keepAlive` habilitado por defecto.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` define el nombre de host, el puerto y el protocolo del servidor proxy.\n  // También puedes definir tu proxy usando las variables de entorno convencionales `http_proxy` y\n  // `https_proxy`. Si usas variables de entorno\n  // para la configuración del proxy, también puedes definir una variable de entorno `no_proxy`\n  // como una lista de dominios separados por comas que no deben ser proxificados.\n  // Usa `false` para desactivar los proxies, ignorando las variables de entorno.\n  // `auth` indica que se debe usar autenticación HTTP Basic para conectarse al proxy y\n  // proporciona credenciales.\n  // Esto establecerá una cabecera `Proxy-Authorization`, sobrescribiendo cualquier\n  // cabecera personalizada `Proxy-Authorization` que hayas definido usando `headers`.\n  // Si el servidor proxy utiliza HTTPS, entonces debes establecer el protocolo a `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Tiene prioridad sobre 'host' si ambos se definen\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` especifica un token de cancelación que se puede usar para cancelar la solicitud\n  // (ver la sección de Cancelación más abajo para más detalles)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // una forma alternativa de cancelar solicitudes Axios usando AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indica si el cuerpo de la respuesta debe ser descomprimido\n  // automáticamente. Si se establece en `true` también eliminará la cabecera 'content-encoding'\n  // de los objetos de respuesta de todas las respuestas descomprimidas\n  // - Solo para Node (XHR no puede desactivar la descompresión)\n  decompress: true, // valor por defecto\n\n  // `insecureHTTPParser` booleano.\n  // Indica si se debe usar un analizador HTTP inseguro que acepte cabeceras HTTP inválidas.\n  // Esto puede permitir la interoperabilidad con implementaciones HTTP no conformes.\n  // El uso del analizador inseguro debe evitarse.\n  // ver opciones https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}