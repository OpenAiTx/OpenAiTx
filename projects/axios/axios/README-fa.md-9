{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **توجه:** پارامتر options (که شامل ویژگی‌های `synchronous` و `runWhen` است) در حال حاضر فقط برای اینترسپتورهای درخواست پشتیبانی می‌شود.\n\n### اینترسپتورهای چندگانه\n\nاگر چندین اینترسپتور پاسخ اضافه کنید\nو زمانی که پاسخ دریافت شد\n- هر اینترسپتور اجرا می‌شود\n- به ترتیبی که افزوده شده‌اند اجرا می‌شوند\n- فقط نتیجه آخرین اینترسپتور بازگردانده می‌شود\n- هر اینترسپتور نتیجه اینترسپتور قبلی را دریافت می‌کند\n- و اگر اینترسپتور برآورده‌کننده خطا دهد\n    - اینترسپتور برآورده‌کننده بعدی فراخوانی نمی‌شود\n    - اینترسپتور ردکننده بعدی فراخوانی می‌شود\n    - پس از گرفتن خطا، مجدداً اینترسپتور برآورده‌کننده بعدی فراخوانی می‌شود (مشابه زنجیره promise).\n\nبرای مشاهده کد مربوط به این موارد، [تست‌های اینترسپتور](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) را مطالعه کنید.\n\n## انواع خطا\n\nخطاهای مختلفی در axios وجود دارد که اطلاعات پایه‌ای درباره جزئیات خطا و فرصت‌های اشکال‌زدایی ارائه می‌کنند.\n\nساختار کلی خطاهای axios به صورت زیر است:\n| ویژگی    | تعریف  |\n| -------- | ----------  |\n| message  | خلاصه‌ای سریع از پیام خطا و وضعیت شکست. |\n| name     | منبع ایجاد خطا را تعریف می‌کند. برای axios همیشه 'AxiosError' خواهد بود. |\n| stack    | ردپای پشته (stack trace) خطا را فراهم می‌کند. | \n| config   | شیء پیکربندی axios با تنظیمات خاص نمونه که توسط کاربر هنگام ارسال درخواست تعیین شده است. |\n| code     | نمایانگر کد خطای شناسایی‌شده توسط axios است. جدول زیر تعاریف خاص برای خطاهای داخلی axios را فهرست کرده است. |\n| status   | کد وضعیت پاسخ HTTP. برای معانی رایج کدهای وضعیت HTTP [اینجا](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) را ببینید. \n\nدر زیر لیستی از خطاهای احتمالی شناسایی‌شده توسط axios آمده است:\n\n| کد                        | تعریف                                                                                                                                                                                                                                                                                                                                                 |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | مقدار نامعتبر در پیکربندی axios ارائه شده است.                                                                                                                                                                                                                                                                                                       |\n| ERR_BAD_OPTION            | گزینه نامعتبر در پیکربندی axios ارائه شده است.                                                                                                                                                                                                                                                                                                       |\n| ERR_NOT_SUPPORT           | ویژگی یا متد در محیط فعلی axios پشتیبانی نمی‌شود.                                                                                                                                                                                                                                                                                                    |\n| ERR_DEPRECATED            | ویژگی یا متد منسوخ‌شده در axios استفاده شده است.                                                                                                                                                                                                                                                              |\n| ERR_INVALID_URL           | URL نامعتبر برای درخواست axios ارائه شده است.                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | معمولاً نشان‌دهنده این است که درخواست به دلیل اتمام زمان (مگر اینکه `transitional.clarifyTimeoutError` تنظیم شده باشد) یا توسط مرورگر یا افزونه آن لغو شده است.                                                                                                                                                                                     |\n| ERR_CANCELED              | ویژگی یا متد به طور صریح توسط کاربر با استفاده از AbortSignal (یا CancelToken) لغو شده است.                                                                                                                                                                                                                                                           |\n| ETIMEDOUT                 | درخواست به دلیل عبور از محدودیت زمانی پیش‌فرض axios منقضی شده است. باید `transitional.clarifyTimeoutError` روی `true` تنظیم شود، در غیر این صورت یک خطای کلی `ECONNABORTED` پرتاب خواهد شد.                                                                                                                   |\n| ERR_NETWORK               | مشکل مرتبط با شبکه. در مرورگر، این خطا می‌تواند توسط خط‌مشی [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) یا [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) نیز ایجاد شود. مرورگر اجازه نمی‌دهد کد JS دلیل واقعی خطاهای امنیتی را مشخص کند، بنابراین کنسول را بررسی کنید. |\n| ERR_FR_TOO_MANY_REDIRECTS | درخواست بیش از حد مجاز تغییر مسیر داده شده است؛ از حداکثر تعداد تغییر مسیر تعیین‌شده در پیکربندی axios فراتر رفته است.                                                                                                                                                                                      |\n| ERR_BAD_RESPONSE          | پاسخ به درستی قابل تجزیه نیست یا قالب غیرمنتظره دارد. معمولاً مربوط به پاسخ با کد وضعیت `5xx` است.                                                                                                                                                                                                            |\n| ERR_BAD_REQUEST           | درخواست قالب غیرمنتظره دارد یا پارامترهای مورد نیاز را ندارد. معمولاً مربوط به پاسخ با کد وضعیت `4xx` است.                                                                                                                                                                                                    |\n\n## مدیریت خطاها\n\nرفتار پیش‌فرض این است که هر پاسخی که با کد وضعیت خارج از بازه 2xx بازمی‌گردد را رد کرده و به عنوان خطا در نظر بگیرد.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // درخواست ارسال شده و سرور با یک کد وضعیت که خارج از بازه 2xx است پاسخ داده است\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // درخواست ارسال شده اما پاسخی دریافت نشده است\n      // `error.request` در مرورگر نمونه‌ای از XMLHttpRequest و در node.js نمونه‌ای از http.ClientRequest است\n      console.log(error.request);\n    } else {\n      // در هنگام آماده‌سازی درخواست، خطایی رخ داده است\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nبا استفاده از گزینه پیکربندی `validateStatus`، می‌توانید شرط پیش‌فرض (status >= 200 && status < 300) را بازنویسی کنید و کد(های) HTTP که باید خطا پرتاب کند را تعریف نمایید.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // فقط اگر کد وضعیت کمتر از 500 باشد resolve می‌شود\n  }\n})\n```\n\nبا استفاده از `toJSON`، یک شیء با اطلاعات بیشتر درباره خطای HTTP دریافت می‌کنید.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}