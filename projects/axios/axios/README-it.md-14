{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // velocità di download in byte\n      download: true; // segno di download\n    }*/\n  }\n});  \n```\n\nPuoi anche tracciare il progresso di upload/download di uno stream in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // evita il buffering dell'intero stream\n});\n````\n\n> **Nota:**\n> Il tracciamento del progresso di upload di FormData non è attualmente supportato negli ambienti node.js.\n\n> **⚠️ Attenzione**\n> Si raccomanda di disabilitare i redirect impostando maxRedirects: 0 per caricare lo stream nell'ambiente **node.js**,\n> poiché il pacchetto follow-redirects bufferizzerà l'intero stream in RAM senza seguire l'algoritmo di \"backpressure\".\n\n\n## 🆕 Limitazione della velocità (Rate limiting)\n\nI limiti di velocità per download e upload possono essere impostati solo per l'adapter http (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // limite 100KB/s\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios ha la propria classe `AxiosHeaders` per manipolare le intestazioni utilizzando una API tipo Map che garantisce il funzionamento senza distinzione di maiuscole/minuscole.\nSebbene HTTP sia case-insensitive nelle intestazioni, Axios manterrà la maiuscolatura dell'intestazione originale per ragioni stilistiche\ne come soluzione a problemi quando i server considerano erroneamente il case dell'intestazione.\nIl vecchio approccio di manipolare direttamente l'oggetto headers è ancora disponibile, ma deprecato e non raccomandato per usi futuri.\n\n### Lavorare con le intestazioni\n\nUn'istanza dell'oggetto AxiosHeaders può contenere diversi tipi di valori interni che controllano la logica di impostazione e unione.\nL'oggetto finale delle intestazioni con valori stringa viene ottenuto da Axios chiamando il metodo `toJSON`.\n\n> Nota: Per JSON qui si intende un oggetto composto solo da valori stringa destinati a essere inviati in rete.\n\nIl valore dell'intestazione può essere uno dei seguenti tipi:\n- `string` - valore stringa normale che sarà inviato al server\n- `null` - salta l'intestazione durante il rendering in JSON\n- `false` - salta l'intestazione durante il rendering in JSON, inoltre indica che il metodo `set` deve essere chiamato con l'opzione `rewrite` impostata su `true`\n  per sovrascrivere questo valore (Axios lo usa internamente per permettere agli utenti di escludere l'impostazione di alcune intestazioni come `User-Agent` o `Content-Type`)\n- `undefined` - valore non impostato\n\n> Nota: Il valore dell'intestazione si considera impostato se è diverso da undefined.\n\nL'oggetto headers viene sempre inizializzato all'interno di interceptor e transformer:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disabilita la successiva impostazione dell'intestazione da parte di Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // l'accesso diretto è deprecato\n    \n      return request;\n    }\n  );\n````\n\nPuoi iterare su un'istanza di `AxiosHeaders` usando un ciclo `for...of`:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "status": "ok"
}