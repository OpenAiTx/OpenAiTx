{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### üÜï Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "axios.post('https://example.com', form)\n```\n\n### üÜï T·ª± ƒë·ªông tu·∫ßn t·ª± h√≥a sang FormData\n\nB·∫Øt ƒë·∫ßu t·ª´ `v0.27.0`, Axios h·ªó tr·ª£ t·ª± ƒë·ªông tu·∫ßn t·ª± h√≥a ƒë·ªëi t∆∞·ª£ng th√†nh m·ªôt ƒë·ªëi t∆∞·ª£ng FormData n·∫øu header `Content-Type`\nc·ªßa request ƒë∆∞·ª£c ƒë·∫∑t th√†nh `multipart/form-data`.\n\nY√™u c·∫ßu sau ƒë√¢y s·∫Ω g·ª≠i d·ªØ li·ªáu ·ªü ƒë·ªãnh d·∫°ng FormData (Tr√¨nh duy·ªát & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nTrong b·∫£n d·ª±ng `node.js`, polyfill ([`form-data`](https://github.com/form-data/form-data)) ƒë∆∞·ª£c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh.\n\nB·∫°n c√≥ th·ªÉ ghi ƒë√® l·ªõp FormData b·∫±ng c√°ch thi·∫øt l·∫≠p bi·∫øn c·∫•u h√¨nh `env.FormData`,\nnh∆∞ng trong h·∫ßu h·∫øt c√°c tr∆∞·ªùng h·ª£p, b·∫°n s·∫Ω kh√¥ng c·∫ßn l√†m ƒëi·ªÅu n√†y:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nB·ªô tu·∫ßn t·ª± FormData c·ªßa Axios h·ªó tr·ª£ m·ªôt s·ªë h·∫≠u t·ªë ƒë·∫∑c bi·ªát ƒë·ªÉ th·ª±c hi·ªán c√°c thao t√°c sau:\n\n- `{}` - tu·∫ßn t·ª± h√≥a gi√° tr·ªã b·∫±ng JSON.stringify\n- `[]` - m·ªü r·ªông ƒë·ªëi t∆∞·ª£ng d·∫°ng m·∫£ng th√†nh c√°c tr∆∞·ªùng ri√™ng bi·ªát v·ªõi c√πng m·ªôt kh√≥a\n\n> **L∆∞u √Ω**: thao t√°c m·ªü r·ªông s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh v·ªõi c√°c m·∫£ng v√† ƒë·ªëi t∆∞·ª£ng FileList\n\nB·ªô tu·∫ßn t·ª± FormData h·ªó tr·ª£ th√™m c√°c t√πy ch·ªçn th√¥ng qua thu·ªôc t√≠nh `config.formSerializer: object` ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p hi·∫øm g·∫∑p:\n\n- `visitor: Function` - h√†m visitor do ng∆∞·ªùi d√πng t·ª± ƒë·ªãnh nghƒ©a, s·∫Ω ƒë∆∞·ª£c g·ªçi ƒë·ªá quy ƒë·ªÉ tu·∫ßn t·ª± h√≥a ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu\nth√†nh ƒë·ªëi t∆∞·ª£ng `FormData` theo c√°c quy t·∫Øc t√πy ch·ªânh.\n\n- `dots: boolean = false` - s·ª≠ d·ª•ng k√Ω hi·ªáu d·∫•u ch·∫•m thay v√¨ d·∫•u ngo·∫∑c ƒë·ªÉ tu·∫ßn t·ª± h√≥a m·∫£ng v√† ƒë·ªëi t∆∞·ª£ng;\n\n- `metaTokens: boolean = true` - th√™m h·∫≠u t·ªë ƒë·∫∑c bi·ªát (v√≠ d·ª• `user{}: '{\"name\": \"John\"}'`) v√†o kh√≥a FormData.\nB·ªô ph√¢n t√≠ch body-parser ph√≠a backend c√≥ th·ªÉ s·ª≠ d·ª•ng meta-th√¥ng tin n√†y ƒë·ªÉ t·ª± ƒë·ªông ph√¢n t√≠ch gi√° tr·ªã d∆∞·ªõi d·∫°ng JSON.\n\n- `indexes: null|false|true = false` - ki·ªÉm so√°t c√°ch th√™m ch·ªâ m·ª•c v√†o c√°c kh√≥a m·ªü r·ªông c·ªßa c√°c ƒë·ªëi t∆∞·ª£ng d·∫°ng m·∫£ng `flat`.\n\n    - `null` - kh√¥ng th√™m d·∫•u ngo·∫∑c (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(m·∫∑c ƒë·ªãnh) - th√™m d·∫•u ngo·∫∑c r·ªóng (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - th√™m d·∫•u ngo·∫∑c v·ªõi ch·ªâ s·ªë  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nGi·∫£ s·ª≠ ch√∫ng ta c√≥ m·ªôt ƒë·ªëi t∆∞·ª£ng nh∆∞ sau:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nC√°c b∆∞·ªõc sau s·∫Ω ƒë∆∞·ª£c b·ªô tu·∫ßn t·ª± Axios th·ª±c thi n·ªôi b·ªô:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios h·ªó tr·ª£ c√°c ph∆∞∆°ng th·ª©c r√∫t g·ªçn sau: `postForm`, `putForm`, `patchForm`\nch·ªâ l√† c√°c ph∆∞∆°ng th·ª©c http t∆∞∆°ng ·ª©ng v·ªõi header `Content-Type` ƒë∆∞·ª£c thi·∫øt l·∫≠p s·∫µn l√† `multipart/form-data`.\n\n## G·ª≠i File\n\nB·∫°n c√≥ th·ªÉ d·ªÖ d√†ng g·ª≠i m·ªôt file ƒë∆°n l·∫ª:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "status": "ok"
}