{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **注意：** options 參數（包含 `synchronous` 和 `runWhen` 屬性）目前僅支援請求攔截器。\n\n### 多重攔截器\n\n假設你添加多個回應攔截器，\n當回應被 fulfill 時\n- 每個攔截器都會被執行\n- 它們按照被添加的順序執行\n- 只有最後一個攔截器的結果會被回傳\n- 每個攔截器都會收到其前一個攔截器的結果\n- 當 fulfillment-interceptor 拋出異常時\n    - 之後的 fulfillment-interceptor 不會被呼叫\n    - 之後的 rejection-interceptor 會被呼叫\n    - 一旦被捕獲，接下來的 fulfill-interceptor 會再次被呼叫（就像 promise 鏈那樣）。\n\n閱讀 [攔截器測試](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) 可查看所有相關程式碼。\n\n## 錯誤類型\n\nAxios 可能出現多種不同的錯誤訊息，這些訊息可提供關於錯誤細節的基本資訊，並指引除錯方向。\n\nAxios 錯誤的一般結構如下：\n| 屬性      | 定義  |\n| -------- | ----------  |\n| message  | 錯誤訊息的簡要摘要以及失敗時的狀態。 |\n| name     | 定義錯誤來源。對於 axios 來說，總是 'AxiosError'。 |\n| stack    | 提供錯誤的堆疊追蹤。 | \n| config   | 一個 axios config 物件，包含用戶在發出請求時設定的特定實例組態 |\n| code     | 表示由 axios 辨識的錯誤。下表列出了 axios 內部錯誤的具體定義。 |\n| status   | HTTP 回應狀態碼。常見 HTTP 回應狀態碼含義請參考[這裡](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)。\n\n以下是可能由 axios 識別的錯誤列表：\n\n| 代碼                      | 定義                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | 在 axios 配置中提供了無效的值。                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | 在 axios 配置中提供了無效的選項。                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | 目前 axios 環境不支援該功能或方法。                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | 使用了已棄用的功能或方法。                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | 為 axios 請求提供了無效的 URL。                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | 通常表示請求已逾時（除非設置了 `transitional.clarifyTimeoutError`）或被瀏覽器或其外掛中止。                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | 該功能或方法被用戶透過 AbortSignal（或 CancelToken）明確取消。                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | 請求因超出預設 axios 時間限制而逾時。必須將 `transitional.clarifyTimeoutError` 設為 `true`，否則會拋出一般的 `ECONNABORTED` 錯誤。                                                                                                                                                                                                         |\n| ERR_NETWORK               | 網路相關問題。在瀏覽器中，也可能因 [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) 或 [混合內容](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) 政策違規導致。由於瀏覽器不允許 JS 程式碼明確指出安全問題的實際原因，請檢查主控台。 |\n| ERR_FR_TOO_MANY_REDIRECTS | 請求被重導次數過多；超過 axios 配置中指定的最大重導次數。                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | 回應無法正確解析或格式異常。通常與 `5xx` 狀態碼的回應有關。                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | 請求格式異常或缺少必要參數。通常與 `4xx` 狀態碼的回應有關。                                                                                                                                                                                                                                                                    |\n\n## 處理錯誤\n\n預設行為是對所有狀態碼不在 2xx 範圍內的回應都視為錯誤並拒絕。\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // 請求已發出，且伺服器有回應狀態碼\n      // 且狀態碼不在 2xx 範圍內\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // 請求已發出但沒有收到回應\n      // `error.request` 在瀏覽器中是 XMLHttpRequest 實例，在 node.js 中是 http.ClientRequest 實例\n      console.log(error.request);\n    } else {\n      // 設定請求時發生異常\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n使用 `validateStatus` 配置選項，可以覆寫預設條件（status >= 200 && status < 300），自訂哪些 HTTP 狀態碼應拋出錯誤。\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // 只要狀態碼小於 500 就解決（resolve）\n  }\n})\n```\n\n使用 `toJSON` 可取得包含更多 HTTP 錯誤資訊的物件。\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}