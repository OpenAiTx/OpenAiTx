{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// node.js에서 원격 이미지를 GET 요청으로 받기\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// GET 요청 보내기 (기본 메서드)\naxios('/user/12345');\n```\n\n### 요청 메서드 별칭\n\n편의를 위해 모든 일반적인 요청 메서드에 대한 별칭이 제공됩니다.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### 참고\n별칭 메서드를 사용할 때는 config에 `url`, `method`, `data` 속성을 명시할 필요가 없습니다.\n\n### 동시성 (사용 중단됨)\n아래 함수들은 `Promise.all`을 사용하여 대체해 주세요.\n\n동시 요청을 처리하기 위한 헬퍼 함수입니다.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### 인스턴스 생성\n\n사용자 정의 config로 새로운 axios 인스턴스를 생성할 수 있습니다.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### 인스턴스 메서드\n\n사용 가능한 인스턴스 메서드는 아래와 같습니다. 지정한 config는 인스턴스 config와 병합됩니다.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## 요청 설정 (Request Config)\n\n다음은 요청을 보낼 때 사용할 수 있는 config 옵션입니다. `url`만 필수입니다. `method`를 지정하지 않으면 기본값은 `GET`입니다.\n\n```js\n{\n  // `url`은 요청에 사용할 서버 URL입니다.\n  url: '/user',\n\n  // `method`는 요청 시 사용할 HTTP 메서드입니다.\n  method: 'get', // 기본값\n\n  // `baseURL`은 `url` 앞에 붙으며, `url`이 절대경로이고 옵션 `allowAbsoluteUrls`가 true면 제외됩니다.\n  // axios 인스턴스에 `baseURL`을 설정하면 해당 인스턴스의 메서드에 상대경로를 넘길 수 있습니다.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls`는 절대 URL이 설정된 `baseUrl`을 무시할지 여부를 결정합니다.\n  // true(기본값)일 때 절대값 `url`이 `baseUrl`을 덮어씁니다.\n  // false일 때는 절대값 `url`도 항상 `baseUrl`이 앞에 붙습니다.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest`는 서버로 보내기 전에 요청 데이터를 변경할 수 있게 해줍니다.\n  // 이 옵션은 'PUT', 'POST', 'PATCH', 'DELETE' 메서드에서만 적용됩니다.\n  // 배열의 마지막 함수는 문자열, Buffer, ArrayBuffer, FormData, Stream 인스턴스 중 하나를 반환해야 합니다.\n  // headers 객체를 수정할 수도 있습니다.\n  transformRequest: [function (data, headers) {\n    // 데이터를 원하는 대로 변환하세요\n```",
  "status": "ok"
}