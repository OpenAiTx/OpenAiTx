{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### ЁЯЖХ Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "```markdown\naxios.post('https://example.com', form)\n```\n\n### ЁЯЖХ FormData рдХреЗ рд▓рд┐рдП рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬрд╝реЗрд╢рди\n\n`v0.27.0` рд╕реЗ рд╢реБрд░реВ рд╣реЛрдХрд░, Axios рдпрджрд┐ рдЕрдиреБрд░реЛрдз рдХреЗ `Content-Type`\nрд╣реЗрдбрд░ рдХреЛ `multipart/form-data` рдкрд░ рд╕реЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рддреЛ FormData рдСрдмреНрдЬреЗрдХреНрдЯ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рдСрдмреНрдЬреЗрдХреНрдЯ рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬрд╝реЗрд╢рди рдХреЛ рд╕рдкреЛрд░реНрдЯ рдХрд░рддрд╛ рд╣реИред\n\nрдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдЕрдиреБрд░реЛрдз рдбреЗрдЯрд╛ рдХреЛ FormData рдкреНрд░рд╛рд░реВрдк рдореЗрдВ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдЧрд╛ (рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдФрд░ Node.js рджреЛрдиреЛрдВ рдореЗрдВ):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\n`node.js` рдмрд┐рд▓реНрдб рдореЗрдВ, ([`form-data`](https://github.com/form-data/form-data)) рдкреЙрд▓реАрдлрд┐рд▓ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ рдЙрдкрдпреЛрдЧ рд╣реЛрддреА рд╣реИред\n\nрдЖрдк `env.FormData` рдХреЙрдиреНрдлрд╝рд┐рдЧ рд╡реЗрд░рд┐рдПрдмрд▓ рдХреЛ рд╕реЗрдЯ рдХрд░рдХреЗ FormData рдХреНрд▓рд╛рд╕ рдХреЛ рдУрд╡рд░рд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ,\nрд▓реЗрдХрд┐рди рдЕрдзрд┐рдХрд╛рдВрд╢ рдорд╛рдорд▓реЛрдВ рдореЗрдВ рдЗрд╕рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдирд╣реАрдВ рд╣реЛрдЧреА:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬрд╝рд░ рдХреБрдЫ рд╡рд┐рд╢реЗрд╖ рдПрдВрдбрд┐рдВрдЧреНрд╕ рдХреЛ рд╕рдкреЛрд░реНрдЯ рдХрд░рддрд╛ рд╣реИ рддрд╛рдХрд┐ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдСрдкрд░реЗрд╢рди рдХрд┐рдП рдЬрд╛ рд╕рдХреЗрдВ:\n\n- `{}` - рдорд╛рди рдХреЛ JSON.stringify рд╕реЗ рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ\n- `[]` - рдПрд░реЗ рдЬреИрд╕реЗ рдСрдмреНрдЬреЗрдХреНрдЯ рдХреЛ рдЙрд╕реА рдХреБрдВрдЬреА рдХреЗ рд╕рд╛рде рдЕрд▓рдЧ-рдЕрд▓рдЧ рдлрд╝реАрд▓реНрдбреНрд╕ рдХреЗ рд░реВрдк рдореЗрдВ рдЕрдирд░реИрдк рдХрд░реЗрдВ\n\n> **рдиреЛрдЯ**: рдПрд░реЗ рдФрд░ FileList рдСрдмреНрдЬреЗрдХреНрдЯреНрд╕ рдкрд░ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ рдЕрдирд░реИрдк/рдПрдХреНрд╕рдкреИрдВрдб рдСрдкрд░реЗрд╢рди рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛\n\nFormData рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬрд╝рд░ рджреБрд░реНрд▓рдн рдорд╛рдорд▓реЛрдВ рдХреЛ рд╕рдВрднрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП `config.formSerializer: object` рдкреНрд░реЙрдкрд░реНрдЯреА рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдЕрддрд┐рд░рд┐рдХреНрдд рд╡рд┐рдХрд▓реНрдк рд╕рдкреЛрд░реНрдЯ рдХрд░рддрд╛ рд╣реИ:\n\n- `visitor: Function` - рдпреВрдЬрд╝рд░-рдкрд░рд┐рднрд╛рд╖рд┐рдд рд╡рд┐рдЬрд╝рд┐рдЯрд░ рдлрд╝рдВрдХреНрд╢рди рдЬреЛ рдХрд╕реНрдЯрдо рдирд┐рдпрдореЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░рддреЗ рд╣реБрдП рдбреЗрдЯрд╛ рдСрдмреНрдЬреЗрдХреНрдЯ рдХреЛ\n  `FormData` рдСрдмреНрдЬреЗрдХреНрдЯ рдореЗрдВ рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкреБрдирд░рд╛рд╡рд░реНрддреА рд░реВрдк рд╕реЗ рдХреЙрд▓ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред\n\n- `dots: boolean = false` - рдПрд░реЗ рдФрд░ рдСрдмреНрдЬреЗрдХреНрдЯреНрд╕ рдХреЛ рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмреНрд░реИрдХреЗрдЯреНрд╕ рдХреА рдЬрдЧрд╣ рдбреЙрдЯ рдиреЛрдЯреЗрд╢рди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ;\n\n- `metaTokens: boolean = true` - FormData рдХреБрдВрдЬреА рдореЗрдВ рд╡рд┐рд╢реЗрд╖ рдПрдВрдбрд┐рдВрдЧ рдЬреЛрдбрд╝реЗрдВ (рдЬреИрд╕реЗ `user{}: '{\"name\": \"John\"}'`)ред\n  рдмреИрдХ-рдПрдВрдб рдмреЙрдбреА-рдкрд╛рд░реНрд╕рд░ рд╕рдВрднрд╡рддрдГ рдЗрд╕ рдореЗрдЯрд╛-рд╕реВрдЪрдирд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдорд╛рди рдХреЛ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ JSON рдХреЗ рд░реВрдк рдореЗрдВ рдкрд╛рд░реНрд╕ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд░ рд╕рдХрддрд╛ рд╣реИред\n\n- `indexes: null|false|true = false` - рдпрд╣ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ `flat` рдПрд░реЗ рдЬреИрд╕реЗ рдСрдмреНрдЬреЗрдХреНрдЯреНрд╕ рдХреА рдЕрдирд░реИрдк рдХреА рдЧрдИ рдХреБрдВрдЬрд┐рдпреЛрдВ рдореЗрдВ рдЗрдВрдбреЗрдХреНрд╕ рдХреИрд╕реЗ рдЬреЛрдбрд╝реЗ рдЬрд╛рдПрдВрдЧреЗред\n\n    - `null` - рдмреНрд░реИрдХреЗрдЯреНрд╕ рди рдЬреЛрдбрд╝реЗрдВ (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(рдбрд┐рдлрд╝реЙрд▓реНрдЯ) - рдЦрд╛рд▓реА рдмреНрд░реИрдХреЗрдЯреНрд╕ рдЬреЛрдбрд╝реЗрдВ (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - рдЗрдВрдбреЗрдХреНрд╕ рдХреЗ рд╕рд╛рде рдмреНрд░реИрдХреЗрдЯреНрд╕ рдЬреЛрдбрд╝реЗрдВ (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nрдорд╛рди рд▓реАрдЬрд┐рдП рд╣рдорд╛рд░реЗ рдкрд╛рд╕ рдЗрд╕ рддрд░рд╣ рдХрд╛ рдПрдХ рдСрдмреНрдЬреЗрдХреНрдЯ рд╣реИ:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nрдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдЪрд░рдг Axios рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬрд╝рд░ рджреНрд╡рд╛рд░рд╛ рдЖрдВрддрд░рд┐рдХ рд░реВрдк рд╕реЗ рдирд┐рд╖реНрдкрд╛рджрд┐рдд рдХрд┐рдП рдЬрд╛рдПрдВрдЧреЗ:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╢реЙрд░реНрдЯрдХрдЯ рд╡рд┐рдзрд┐рдпреЛрдВ рдХреЛ рд╕рдкреЛрд░реНрдЯ рдХрд░рддрд╛ рд╣реИ: `postForm`, `putForm`, `patchForm`\nрдЬреЛ рдмрд╕ рд╕рдВрдмрдВрдзрд┐рдд http рд╡рд┐рдзрд┐рдпрд╛рдБ рд╣реИрдВ рдЬрд┐рдирдореЗрдВ `Content-Type` рд╣реЗрдбрд░ рдкрд╣рд▓реЗ рд╕реЗ `multipart/form-data` рдкрд░ рд╕реЗрдЯ рд╣реЛрддрд╛ рд╣реИред\n\n## рдлрд╝рд╛рдЗрд▓ рд╕рдмрдорд┐рдЯ рдХрд░рдирд╛\n\nрдЖрдк рдЖрд╕рд╛рдиреА рд╕реЗ рдПрдХрд▓ рдлрд╝рд╛рдЗрд▓ рд╕рдмрдорд┐рдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]\n```",
  "status": "ok"
}