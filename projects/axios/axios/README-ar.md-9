{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **ملاحظة:** معلمة الخيارات (التي تحتوي على خصائص `synchronous` و `runWhen`) مدعومة فقط لمعترضات الطلب في الوقت الحالي.\n\n### معترضات متعددة\n\nعند إضافة عدة معترضات استجابة\nوعندما يتم تحقيق الاستجابة\n- يتم تنفيذ كل معترض\n- يتم تنفيذهم بالترتيب الذي تمت إضافتهم به\n- يتم إرجاع نتيجة آخر معترض فقط\n- كل معترض يستقبل نتيجة سلفه\n- وعندما يقوم معترض التحقيق بإلقاء خطأ\n    - لا يتم استدعاء معترض التحقيق التالي\n    - يتم استدعاء معترض الرفض التالي\n    - عند الإمساك بالخطأ، يتم استدعاء معترض تحقيق آخر مرة أخرى (تماماً كما في سلسلة الوعود).\n\nاقرأ [اختبارات المعترض](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) لرؤية كل ذلك في الشيفرة.\n\n## أنواع الأخطاء\n\nهناك العديد من رسائل أخطاء axios المختلفة التي قد تظهر والتي يمكن أن تقدم معلومات أساسية حول تفاصيل الخطأ وأماكن فرص تصحيحه.\n\nالهيكل العام لأخطاء axios هو كما يلي:\n| الخاصية      | التعريف  |\n| -------- | ----------  |\n| message  | ملخص سريع لرسالة الخطأ وحالة الاستجابة التي فشلت بها. |\n| name     | يحدد مصدر الخطأ. بالنسبة لـ axios، ستكون دائماً 'AxiosError'. |\n| stack    | يوفر تتبع مكدس الخطأ. | \n| config   | كائن تكوين axios مع إعدادات مثيل محددة من قبل المستخدم لحظة إرسال الطلب |\n| code     | يمثل خطأ معروف من axios. يوضح الجدول أدناه تعريفات محددة لأخطاء axios الداخلية.  |\n| status   | رمز حالة استجابة HTTP. راجع [هنا](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) لمعاني رموز استجابة HTTP الشائعة. \n\nفيما يلي قائمة بالأخطاء المحتملة التي يحددها axios:\n\n| الرمز                      | التعريف                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | تم تقديم قيمة غير صالحة في إعدادات axios.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | تم تقديم خيار غير صالح في إعدادات axios.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | الميزة أو الطريقة غير مدعومة في بيئة axios الحالية.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | تم استخدام ميزة أو طريقة مهجورة في axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | تم تقديم عنوان URL غير صالح لطلب axios.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | يشير عادة إلى أن الطلب قد انتهت صلاحيته (ما لم يتم تعيين `transitional.clarifyTimeoutError`) أو تم إيقافه بواسطة المتصفح أو أحد ملحقاته.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | تم إلغاء الميزة أو الطريقة صراحةً بواسطة المستخدم باستخدام AbortSignal (أو CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | انتهت مهلة الطلب بسبب تجاوز الحد الزمني الافتراضي لـ axios. يجب تعيين `transitional.clarifyTimeoutError` إلى `true`، وإلا سيتم إطلاق خطأ `ECONNABORTED` عام بدلاً من ذلك.                                                                                                                                                                                                         |\n| ERR_NETWORK               | مشكلة متعلقة بالشبكة. في المتصفح، يمكن أن يكون هذا الخطأ أيضاً ناتجاً عن انتهاك سياسة [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) أو [المحتوى المختلط](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content). لا يسمح المتصفح لشيفرة JavaScript بتوضيح السبب الحقيقي للخطأ الناتج عن مشكلات الأمان، لذا يرجى التحقق من وحدة التحكم. |\n| ERR_FR_TOO_MANY_REDIRECTS | تم إعادة توجيه الطلب مرات كثيرة؛ تجاوز الحد الأقصى لإعادة التوجيه المحدد في إعدادات axios.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | لا يمكن تحليل الاستجابة بشكل صحيح أو أنها في تنسيق غير متوقع. غالباً ما يرتبط باستجابة برمز حالة `5xx`.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | الطلب بتنسيق غير متوقع أو يفتقد معلمات مطلوبة. غالباً ما يرتبط باستجابة برمز حالة `4xx`.                                                                                                                                                                                                                                                                    |\n\n## معالجة الأخطاء\n\nالسلوك الافتراضي هو رفض كل استجابة تعود برمز حالة خارج نطاق 2xx واعتبارها خطأ.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // تم إرسال الطلب ورد الخادم برمز حالة\n      // يقع خارج نطاق 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // تم إرسال الطلب ولكن لم يتم استلام أي استجابة\n      // `error.request` هو كائن XMLHttpRequest في المتصفح وكائن\n      // http.ClientRequest في node.js\n      console.log(error.request);\n    } else {\n      // حدث شيء ما أثناء إعداد الطلب تسبب في ظهور خطأ\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nباستخدام خيار التكوين `validateStatus`، يمكنك تجاوز الشرط الافتراضي (status >= 200 && status < 300) وتحديد رموز HTTP التي يجب أن تُعتبر خطأ.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // يتم الاستيفاء فقط إذا كان رمز الحالة أقل من 500\n  }\n})\n```\n\nباستخدام `toJSON` ستحصل على كائن يحتوي على مزيد من المعلومات حول خطأ HTTP.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}