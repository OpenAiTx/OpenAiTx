{
  "id": 10,
  "origin": "  });\n```\n\n## Cancellation\n\n### AbortController\n\nStarting from `v0.22.0` Axios supports AbortController to cancel requests in fetch API way:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n### CancelToken `ЁЯСОdeprecated`\n\nYou can also cancel a request using a *CancelToken*.\n\n> The axios cancel token API is based on the withdrawn [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\n> This API is deprecated since v0.22.0 and shouldn't be used in new projects\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> **Note:** you can cancel several requests with the same cancel token/abort controller.\n> If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.\n\n> During the transition period, you can use both cancellation APIs, even for the same request:\n\n## Using `application/x-www-form-urlencoded` format\n\n### URLSearchParams\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the [`application/x-www-form-urlencoded` format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) instead, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API, which is [supported](http://www.caniuse.com/#feat=urlsearchparams) in the vast majority of browsers,and [ Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) starting with v10 (released in 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Older browsers)\n\nFor compatibility with very old browsers, there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n",
  "origin_sha": "VxjhD9ljiSwD1HApECbz1lsvUZyJrgZ3cDJoBGagQ8E=",
  "translate": "```\n\n## рд░рджреНрдж рдХрд░рдирд╛ (Cancellation)\n\n### AbortController\n\n`v0.22.0` рд╕реЗ рд╢реБрд░реВ рдХрд░рддреЗ рд╣реБрдП Axios, fetch API рдХреА рддрд░рд╣ рдЕрдиреБрд░реЛрдзреЛрдВ рдХреЛ рд░рджреНрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП AbortController рдХреЛ рд╕рдкреЛрд░реНрдЯ рдХрд░рддрд╛ рд╣реИ:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// рдЕрдиреБрд░реЛрдз рд░рджреНрдж рдХрд░реЗрдВ\ncontroller.abort()\n```\n\n### CancelToken `ЁЯСОdeprecated`\n\nрдЖрдк *CancelToken* рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рднреА рдЕрдиреБрд░реЛрдз рд░рджреНрдж рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред\n\n> axios cancel token API, рд╡рд╛рдкрд╕ рд▓реЗ рд▓рд┐рдП рдЧрдП [cancellable promises рдкреНрд░рд╕реНрддрд╛рд╡](https://github.com/tc39/proposal-cancelable-promises) рдкрд░ рдЖрдзрд╛рд░рд┐рдд рд╣реИред\n\n> рдпрд╣ API v0.22.0 рд╕реЗ deprecated рд╣реИ рдФрд░ рдЗрд╕реЗ рдирдП рдкреНрд░реЛрдЬреЗрдХреНрдЯреНрд╕ рдореЗрдВ рдЙрдкрдпреЛрдЧ рдирд╣реАрдВ рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдП\n\nрдЖрдк рдиреАрдЪреЗ рджрд┐рдЦрд╛рдП рдЧрдП рдЕрдиреБрд╕рд╛рд░ `CancelToken.source` рдлреИрдХреНрдЯреНрд░реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдПрдХ cancel token рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВ:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('рдЕрдиреБрд░реЛрдз рд░рджреНрдж рдХрд┐рдпрд╛ рдЧрдпрд╛', thrown.message);\n  } else {\n    // рддреНрд░реБрдЯрд┐ рд╕рдВрднрд╛рд▓реЗрдВ\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// рдЕрдиреБрд░реЛрдз рд░рджреНрдж рдХрд░реЗрдВ (message рдкреИрд░рд╛рдореАрдЯрд░ рд╡реИрдХрд▓реНрдкрд┐рдХ рд╣реИ)\nsource.cancel('рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рджреНрд╡рд╛рд░рд╛ рдСрдкрд░реЗрд╢рди рд░рджреНрдж рдХрд┐рдпрд╛ рдЧрдпрд╛ред');\n```\n\nрдЖрдк `CancelToken` рдХрдВрд╕реНрдЯреНрд░рдХреНрдЯрд░ рдХреЛ рдПрдХ executor рдлрд╝рдВрдХреНрд╢рди рдкрд╛рд╕ рдХрд░рдХреЗ рднреА cancel token рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВ:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // рдПрдХ executor рдлрд╝рдВрдХреНрд╢рди рдХреЛ рдПрдХ cancel рдлрд╝рдВрдХреНрд╢рди рдкреИрд░рд╛рдореАрдЯрд░ рдХреЗ рд░реВрдк рдореЗрдВ рдорд┐рд▓рддрд╛ рд╣реИ\n    cancel = c;\n  })\n});\n\n// рдЕрдиреБрд░реЛрдз рд░рджреНрдж рдХрд░реЗрдВ\ncancel();\n```\n\n> **рдиреЛрдЯ:** рдЖрдк рдПрдХ рд╣реА cancel token/abort controller рдХреЗ рд╕рд╛рде рдХрдИ рдЕрдиреБрд░реЛрдз рд░рджреНрдж рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред\n> рдЕрдЧрд░ рдХрд┐рд╕реА cancellation token рдХреЛ Axios рдЕрдиреБрд░реЛрдз рд╢реБрд░реВ рд╣реЛрдиреЗ рдХреЗ рд╕рдордп рдкрд╣рд▓реЗ рд╣реА рд░рджреНрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рддреЛ рдЕрдиреБрд░реЛрдз рддреБрд░рдВрдд рд░рджреНрдж рдХрд░ рджрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, рдмрд┐рдирд╛ рдХреЛрдИ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдЕрдиреБрд░реЛрдз рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд┐рдПред\n\n> рд╕рдВрдХреНрд░рдордг рдЕрд╡рдзрд┐ рдХреЗ рджреМрд░рд╛рди, рдЖрдк рджреЛрдиреЛрдВ cancellation APIs рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, рдпрд╣рд╛рдБ рддрдХ рдХрд┐ рдПрдХ рд╣реА рдЕрдиреБрд░реЛрдз рдХреЗ рд▓рд┐рдП рднреА:\n\n## `application/x-www-form-urlencoded` рдлреЙрд░реНрдореЗрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛\n\n### URLSearchParams\n\nрдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ, axios рдЬрд╛рд╡рд╛рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдСрдмреНрдЬреЗрдХреНрдЯреНрд╕ рдХреЛ `JSON` рдореЗрдВ рд╕реАрд░рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░рддрд╛ рд╣реИред рдЗрд╕рдХреЗ рдмрдЬрд╛рдп рдбреЗрдЯрд╛ [`application/x-www-form-urlencoded` рдлреЙрд░реНрдореЗрдЯ](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) рдореЗрдВ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП, рдЖрдк [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, рдЬреЛ рдХрд┐ рдЕрдзрд┐рдХрд╛рдВрд╢ рдмреНрд░рд╛рдЙрдЬрд╝рд░реЛрдВ рдореЗрдВ [рд╕рдорд░реНрдерд┐рдд](http://www.caniuse.com/#feat=urlsearchparams) рд╣реИ, рдФрд░ [Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) v10 (2018 рдореЗрдВ рдЬрд╛рд░реА) рд╕реЗ рд╢реБрд░реВ рд╣реЛрдХрд░ред\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### рдХреНрд╡реЗрд░реА рд╕реНрдЯреНрд░рд┐рдВрдЧ (рдкреБрд░рд╛рдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░)\n\nрдмрд╣реБрдд рдкреБрд░рд╛рдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░реЛрдВ рдХреЗ рд╕рд╛рде рд╕рдВрдЧрддрддрд╛ рдХреЗ рд▓рд┐рдП, рдПрдХ [polyfill](https://github.com/WebReflection/url-search-params) рдЙрдкрд▓рдмреНрдз рд╣реИ (рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдк рдЧреНрд▓реЛрдмрд▓ рдПрдирд╡рд╛рдпрд░рдореЗрдВрдЯ рдХреЛ polyfill рдХрд░реЗрдВ)ред\n\nрд╡реИрдХрд▓реНрдкрд┐рдХ рд░реВрдк рд╕реЗ, рдЖрдк [`qs`](https://github.com/ljharb/qs) рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдбреЗрдЯрд╛ рдХреЛ рдПрдиреНрдХреЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n```",
  "status": "ok"
}