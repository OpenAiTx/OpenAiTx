{
  "id": 3,
  "origin": "\n```js\nimport axios from 'axios';\n//const axios = require('axios'); // legacy way\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .finally(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .finally(function () {\n    // always executed\n  });\n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n> **Note**: `async/await` is part of ECMAScript 2017 and is not supported in Internet\n> Explorer and older browsers, so use with caution.\n\nPerforming a `POST` request\n\n```js\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming multiple concurrent requests\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n\n## axios API\n\nRequests can be made by passing the relevant config to `axios`.\n\n##### axios(config)\n\n```js\n// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n",
  "origin_sha": "xazcPcpp8L7EPzWgBLmAg+e/j6lKK+m0RJaYsLyqW7g=",
  "translate": "```js\nimport axios from 'axios';\n//const axios = require('axios'); // روش قدیمی\n\n// ارسال یک درخواست برای کاربری با شناسه مشخص\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // مدیریت موفقیت\n    console.log(response);\n  })\n  .catch(function (error) {\n    // مدیریت خطا\n    console.log(error);\n  })\n  .finally(function () {\n    // همواره اجرا می‌شود\n  });\n\n// به طور اختیاری، درخواست بالا می‌تواند به صورت زیر نیز انجام شود\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .finally(function () {\n    // همواره اجرا می‌شود\n  });\n\n// می‌خواهید از async/await استفاده کنید؟ کافیست کلیدواژه `async` را به تابع/متد بیرونی خود اضافه کنید.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n> **توجه**: `async/await` بخشی از ECMAScript 2017 است و در Internet\n> Explorer و مرورگرهای قدیمی‌تر پشتیبانی نمی‌شود، بنابراین با احتیاط استفاده کنید.\n\nانجام یک درخواست `POST`\n\n```js\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nانجام چندین درخواست همزمان\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n\n## رابط برنامه‌نویسی axios\n\nدرخواست‌ها می‌توانند با ارسال پیکربندی مربوطه به `axios` انجام شوند.\n\n##### axios(config)\n\n```js\n// ارسال یک درخواست POST\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n",
  "status": "ok"
}