{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can’t use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Fetch 适配器\n\nFetch 适配器在 `v1.7.0` 中引入。默认情况下，如果构建中没有 `xhr` 和 `http` 适配器，或者环境不支持，将会使用它。\n要默认使用它，必须显式选择：\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // 默认顺序 ['xhr', 'http', 'fetch']\n})\n```\n\n你可以为此创建一个单独的实例：\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\n该适配器支持与 `xhr` 适配器相同的功能，**包括上传和下载进度的捕捉**。\n此外，它还支持额外的响应类型，如 `stream` 和 `formdata`（如果环境支持）。\n\n## 语义化版本（Semver）\n\n在 axios 达到 `1.0` 正式版之前，任何破坏性变更都将通过新的次版本发布。例如，`0.5.1` 和 `0.5.4` 将拥有相同的 API，但 `0.6.0` 会有破坏性变更。\n\n## Promises\n\naxios 依赖原生的 ES6 Promise 实现以获得[支持](https://caniuse.com/promises)。\n如果你的环境不支持 ES6 Promise，你可以使用 [polyfill](https://github.com/jakearchibald/es6-promise)。\n\n## TypeScript\n\naxios 包含 [TypeScript](https://typescriptlang.org) 类型定义以及 axios 错误的类型保护。\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\n由于 axios 同时以 ESM 默认导出和 CJS 的 `module.exports` 方式发布，因此有一些注意事项。\n推荐的设置是使用 `\"moduleResolution\": \"node16\"`（这在 `\"module\": \"node16\"` 时已隐式设置）。注意，这需要 TypeScript 4.7 或更高版本。\n如果使用 ESM，你的设置应该没问题。\n如果你将 TypeScript 编译为 CJS 并且无法使用 `\"moduleResolution\": \"node16\"`，你必须启用 `esModuleInterop`。\n如果你使用 TypeScript 对 CJS JavaScript 代码进行类型检查，你唯一的选择是使用 `\"moduleResolution\": \"node16\"`。\n\n## 在线一键设置\n\n你可以使用 Gitpod，一个在线 IDE（对开源免费），用于贡献代码或在线运行示例。\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## 资源\n\n* [更新日志](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [生态系统](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [贡献指南](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [行为准则](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## 致谢\n\naxios 深受 [AngularJS](https://angularjs.org/) 提供的 [$http 服务](https://docs.angularjs.org/api/ng/service/$http) 启发。最终，axios 致力于提供一个可在 AngularJS 之外使用的独立 `$http` 类服务。\n\n## 许可证\n\n[MIT](LICENSE)\n",
  "status": "ok"
}