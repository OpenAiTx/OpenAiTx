{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // देखें https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // डिफ़ॉल्ट\n\n  // पिछली संगतता के लिए संक्रमणकालीन विकल्प, जिन्हें नए संस्करणों में हटाया जा सकता है\n  transitional: {\n    // साइलेंट JSON पार्सिंग मोड\n    // `true`  - JSON पार्सिंग त्रुटियों को अनदेखा करें और यदि पार्सिंग विफल हो जाए तो response.data को null पर सेट करें (पुराना व्यवहार)\n    // `false` - यदि JSON पार्सिंग विफल हो जाए तो SyntaxError फेंकें (नोट: responseType को 'json' पर सेट करना आवश्यक है)\n    silentJSONParsing: true, // वर्तमान Axios संस्करण के लिए डिफ़ॉल्ट मान\n\n    // यदि `responseType` 'json' नहीं है, तब भी प्रतिक्रिया स्ट्रिंग को JSON के रूप में पार्स करने का प्रयास करें\n    forcedJSONParsing: true,\n\n    // अनुरोध टाइमआउट होने पर सामान्य ECONNABORTED के बजाय ETIMEDOUT त्रुटि फेंकें\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // FormData क्लास जिसका उपयोग पेलोड को स्वचालित रूप से FormData ऑब्जेक्ट में सीरियलाइज़ करने के लिए किया जाएगा\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // फॉर्म मानों को सीरियलाइज़ करने के लिए कस्टम विज़िटर फ़ंक्शन\n      dots: boolean; // ब्रैकेट्स प्रारूप के बजाय डॉट्स का उपयोग करें\n      metaTokens: boolean; // पैरामीटर कुंजी में {} जैसे विशेष अंत को बनाए रखें\n      indexes: boolean; // एरे इंडेक्स प्रारूप null - कोई ब्रैकेट नहीं, false - खाली ब्रैकेट, true - इंडेक्स के साथ ब्रैकेट\n  },\n\n  // केवल http एडाप्टर (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s अपलोड सीमा,\n    100 * 1024  // 100KB/s डाउनलोड सीमा\n  ]\n}\n```\n\n## प्रतिक्रिया स्कीमा\n\nकिसी अनुरोध की प्रतिक्रिया में निम्न जानकारी शामिल होती है।\n\n```js\n{\n  // `data` वह प्रतिक्रिया है जो सर्वर द्वारा प्रदान की गई थी\n  data: {},\n\n  // `status` सर्वर प्रतिक्रिया से HTTP स्थिति कोड है\n  status: 200,\n\n  // `statusText` सर्वर प्रतिक्रिया से HTTP स्थिति संदेश है\n  statusText: 'OK',\n\n  // `headers` HTTP हेडर हैं जिनके साथ सर्वर ने प्रतिक्रिया दी\n  // सभी हेडर नाम लोअरकेस होते हैं और ब्रैकेट नोटेशन द्वारा एक्सेस किए जा सकते हैं।\n  // उदाहरण: `response.headers['content-type']`\n  headers: {},\n\n  // `config` वह कॉन्फ़िग है जो अनुरोध के लिए `axios` को प्रदान की गई थी\n  config: {},\n\n  // `request` वह अनुरोध है जिसने यह प्रतिक्रिया उत्पन्न की\n  // यह node.js में अंतिम ClientRequest इंस्टेंस होता है (रिडायरेक्ट में)\n  // और ब्राउज़र में XMLHttpRequest इंस्टेंस होता है\n  request: {}\n}\n```\n\nजब आप `then` का उपयोग करते हैं, तो आपको प्रतिक्रिया निम्नलिखित रूप में प्राप्त होगी:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nजब आप `catch` का उपयोग करते हैं, या [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) को `then` के दूसरे पैरामीटर के रूप में पास करते हैं, तो प्रतिक्रिया [त्रुटि प्रबंधन](#handling-errors) अनुभाग में बताए अनुसार `error` ऑब्जेक्ट के माध्यम से उपलब्ध होगी।\n\n## कॉन्फ़िग डिफ़ॉल्ट्स\n\nआप ऐसे कॉन्फ़िग डिफ़ॉल्ट्स निर्दिष्ट कर सकते हैं, जो हर अनुरोध पर लागू होंगे।\n\n### ग्लोबल axios डिफ़ॉल्ट्स\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// महत्वपूर्ण: यदि axios का उपयोग कई डोमेन के साथ किया जाता है, तो AUTH_TOKEN उन सभी को भेजा जाएगा।\n// कस्टम इंस्टेंस डिफ़ॉल्ट्स का उपयोग करने का उदाहरण नीचे देखें।\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### कस्टम इंस्टेंस डिफ़ॉल्ट्स\n```",
  "status": "ok"
}