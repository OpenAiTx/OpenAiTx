{
  "id": 10,
  "origin": "  });\n```\n\n## Cancellation\n\n### AbortController\n\nStarting from `v0.22.0` Axios supports AbortController to cancel requests in fetch API way:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n### CancelToken `👎deprecated`\n\nYou can also cancel a request using a *CancelToken*.\n\n> The axios cancel token API is based on the withdrawn [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\n> This API is deprecated since v0.22.0 and shouldn't be used in new projects\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> **Note:** you can cancel several requests with the same cancel token/abort controller.\n> If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.\n\n> During the transition period, you can use both cancellation APIs, even for the same request:\n\n## Using `application/x-www-form-urlencoded` format\n\n### URLSearchParams\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the [`application/x-www-form-urlencoded` format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) instead, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API, which is [supported](http://www.caniuse.com/#feat=urlsearchparams) in the vast majority of browsers,and [ Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) starting with v10 (released in 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Older browsers)\n\nFor compatibility with very old browsers, there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n",
  "origin_sha": "VxjhD9ljiSwD1HApECbz1lsvUZyJrgZ3cDJoBGagQ8E=",
  "translate": "```markdown\n  });\n```\n\n## Hủy yêu cầu (Cancellation)\n\n### AbortController\n\nBắt đầu từ `v0.22.0`, Axios hỗ trợ AbortController để hủy yêu cầu theo cách của fetch API:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// hủy yêu cầu\ncontroller.abort()\n```\n\n### CancelToken `👎đã lỗi thời`\n\nBạn cũng có thể hủy một yêu cầu bằng *CancelToken*.\n\n> API cancel token của axios dựa trên [đề xuất promise có thể hủy](https://github.com/tc39/proposal-cancelable-promises) đã bị rút lại.\n\n> API này đã lỗi thời kể từ v0.22.0 và không nên sử dụng trong các dự án mới\n\nBạn có thể tạo một cancel token bằng cách sử dụng factory `CancelToken.source` như dưới đây:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Yêu cầu đã bị hủy', thrown.message);\n  } else {\n    // xử lý lỗi\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// hủy yêu cầu (tham số message là không bắt buộc)\nsource.cancel('Tác vụ bị hủy bởi người dùng.');\n```\n\nBạn cũng có thể tạo một cancel token bằng cách truyền một hàm executor vào constructor của `CancelToken`:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // Hàm executor nhận một hàm cancel làm tham số\n    cancel = c;\n  })\n});\n\n// hủy yêu cầu\ncancel();\n```\n\n> **Lưu ý:** bạn có thể hủy nhiều yêu cầu với cùng một cancel token/abort controller.\n> Nếu một token hủy đã bị hủy tại thời điểm bắt đầu một yêu cầu Axios, thì yêu cầu đó sẽ bị hủy ngay lập tức mà không cố gắng thực hiện yêu cầu thực tế.\n\n> Trong giai đoạn chuyển đổi, bạn có thể sử dụng cả hai API hủy, thậm chí cho cùng một yêu cầu:\n\n## Sử dụng định dạng `application/x-www-form-urlencoded`\n\n### URLSearchParams\n\nTheo mặc định, axios sẽ tuần tự hóa các đối tượng JavaScript thành `JSON`. Để gửi dữ liệu bằng [định dạng `application/x-www-form-urlencoded`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST), bạn có thể sử dụng API [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams), được [hỗ trợ](http://www.caniuse.com/#feat=urlsearchparams) trên đa số trình duyệt, và [Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) bắt đầu từ v10 (ra mắt năm 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Trình duyệt cũ hơn)\n\nĐể tương thích với các trình duyệt rất cũ, có một [polyfill](https://github.com/WebReflection/url-search-params) có sẵn (hãy đảm bảo polyfill môi trường toàn cục).\n\nNgoài ra, bạn có thể mã hóa dữ liệu bằng thư viện [`qs`](https://github.com/ljharb/qs):\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n```",
  "status": "ok"
}