{
  "id": 10,
  "origin": "  });\n```\n\n## Cancellation\n\n### AbortController\n\nStarting from `v0.22.0` Axios supports AbortController to cancel requests in fetch API way:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n### CancelToken `👎deprecated`\n\nYou can also cancel a request using a *CancelToken*.\n\n> The axios cancel token API is based on the withdrawn [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\n> This API is deprecated since v0.22.0 and shouldn't be used in new projects\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> **Note:** you can cancel several requests with the same cancel token/abort controller.\n> If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.\n\n> During the transition period, you can use both cancellation APIs, even for the same request:\n\n## Using `application/x-www-form-urlencoded` format\n\n### URLSearchParams\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the [`application/x-www-form-urlencoded` format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) instead, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API, which is [supported](http://www.caniuse.com/#feat=urlsearchparams) in the vast majority of browsers,and [ Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) starting with v10 (released in 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Older browsers)\n\nFor compatibility with very old browsers, there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n",
  "origin_sha": "VxjhD9ljiSwD1HApECbz1lsvUZyJrgZ3cDJoBGagQ8E=",
  "translate": "```\n\n## キャンセル\n\n### AbortController\n\n`v0.22.0` 以降、Axios は fetch API と同様に AbortController を使ってリクエストをキャンセルすることをサポートしています:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// リクエストをキャンセル\ncontroller.abort()\n```\n\n### CancelToken `👎非推奨`\n\n*CancelToken* を使ってリクエストをキャンセルすることもできます。\n\n> axios の cancel token API は撤回された [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises) に基づいています。\n\n> このAPIは v0.22.0 以降非推奨となっており、新しいプロジェクトでは使用しないでください\n\n以下のように `CancelToken.source` ファクトリを使ってキャンセルトークンを作成できます:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // エラー処理\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// リクエストをキャンセル（message パラメータは省略可能）\nsource.cancel('Operation canceled by the user.');\n```\n\nまた、`CancelToken` コンストラクタに executor 関数を渡してキャンセルトークンを作成することもできます:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // executor 関数は cancel 関数をパラメータとして受け取ります\n    cancel = c;\n  })\n});\n\n// リクエストをキャンセル\ncancel();\n```\n\n> **注意:** 同じキャンセルトークン/アボートコントローラーで複数のリクエストをキャンセルできます。\n> Axios リクエスト開始時にキャンセルトークンがすでにキャンセルされている場合、実際のリクエストを試みることなく即座にリクエストがキャンセルされます。\n\n> 移行期間中は、同じリクエストに対して両方のキャンセルAPIを使用することもできます:\n\n## `application/x-www-form-urlencoded` 形式の使用\n\n### URLSearchParams\n\nデフォルトでは、axios は JavaScript オブジェクトを `JSON` にシリアライズします。代わりに [`application/x-www-form-urlencoded` 形式](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) でデータを送信する場合は、[ほとんどのブラウザ](http://www.caniuse.com/#feat=urlsearchparams)および v10 以降の [Node](https://nodejs.org/api/url.html#url_class_urlsearchparams)（2018年リリース）でサポートされている [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API を利用できます。\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### クエリ文字列（旧ブラウザ向け）\n\n非常に古いブラウザとの互換性のため、[polyfill](https://github.com/WebReflection/url-search-params) が用意されています（グローバル環境もポリフィルすることを忘れずに）。\n\nあるいは、[`qs`](https://github.com/ljharb/qs) ライブラリを使ってデータをエンコードすることもできます:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n```",
  "status": "ok"
}