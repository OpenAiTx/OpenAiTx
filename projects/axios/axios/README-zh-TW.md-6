{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // 你可以隨意處理 Axios 的進度事件\n  },\n\n  // `onDownloadProgress` 允許處理下載的進度事件\n  // 瀏覽器 & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // 你可以隨意處理 Axios 的進度事件\n  },\n\n  // `maxContentLength` 定義在 node.js 中允許的 HTTP 回應內容最大大小（位元組）\n  maxContentLength: 2000,\n\n  // `maxBodyLength`（僅限 Node 選項）定義在 node.js 中允許的 HTTP 請求內容最大大小（位元組）\n  maxBodyLength: 2000,\n\n  // `validateStatus` 定義是否針對給定的 HTTP 回應狀態碼解析或拒絕 promise。\n  // 如果 `validateStatus` 回傳 `true`（或設為 `null` 或 `undefined`），promise 會被解析；\n  // 否則 promise 會被拒絕。\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // 預設值\n  },\n\n  // `maxRedirects` 定義在 node.js 中允許跟隨的最大重導次數。\n  // 如果設為 0，則不跟隨任何重導。\n  maxRedirects: 21, // 預設值\n\n  // `beforeRedirect` 定義一個在重導前會被呼叫的函式。\n  // 使用此函式可在重導時調整請求選項，\n  // 檢查最新的回應標頭，\n  // 或透過拋出錯誤取消請求\n  // 如果 maxRedirects 設為 0，則不會使用 `beforeRedirect`。\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` 定義在 node.js 中要使用的 UNIX Socket。\n  // 例如 '/var/run/docker.sock' 可傳送請求到 docker daemon。\n  // 只能指定 `socketPath` 或 `proxy` 其中之一。\n  // 如果兩者都指定，則會使用 `socketPath`。\n  socketPath: null, // 預設值\n  \n  // `transport` 決定請求所使用的傳輸方式。\n  // 如果已定義，則會使用它。否則，如果 `maxRedirects` 為 0，\n  // 則會依據 `protocol` 指定的協議預設使用 `http` 或 `https` 函式庫。\n  // 否則，會依據協議使用 `httpFollow` 或 `httpsFollow` 函式庫，\n  // 這些函式庫可以處理重導。\n  transport: undefined, // 預設值\n\n  // `httpAgent` 和 `httpsAgent` 定義在 node.js 中進行 http 和 https 請求時要使用的自訂 agent。\n  // 這允許加入如 `keepAlive` 等選項，在 Node.js v19.0.0 之前預設未啟用。\n  // 在 Node.js v19.0.0 之後，不需自訂 agent 也能啟用 `keepAlive`，\n  // 因為 `http.globalAgent` 預設已啟用 `keepAlive`。\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` 定義代理伺服器的主機名稱、埠號與協議。\n  // 你也可以透過傳統的 `http_proxy` 和 `https_proxy` 環境變數定義代理。\n  // 如果使用環境變數進行代理設定，也可以定義 `no_proxy` 環境變數，\n  // 其值為不應代理的網域（以逗號分隔的清單）。\n  // 使用 `false` 可停用代理，並忽略環境變數。\n  // `auth` 表示應使用 HTTP Basic 認證連接代理，並提供認證資訊。\n  // 這會設定 `Proxy-Authorization` 標頭，覆蓋你透過 `headers` 設定的任何現有\n  // `Proxy-Authorization` 自訂標頭。\n  // 如果代理伺服器使用 HTTPS，必須將 protocol 設為 `https`。\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // 如果同時定義，優先使用 'hostname'\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` 指定可用於取消請求的取消權杖\n  //（詳見下方「取消」章節）\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // 另一種使用 AbortController 取消 Axios 請求的方法\n  signal: new AbortController().signal,\n\n  // `decompress` 指示是否要自動解壓回應主體。\n  // 如果設為 `true`，也會從所有已解壓回應的 response 物件中移除 'content-encoding' 標頭\n  // - 僅適用於 Node（XHR 無法關閉解壓縮）\n  decompress: true, // 預設值\n\n  // `insecureHTTPParser` 布林值。\n  // 指示是否使用可接受無效 HTTP 標頭的不安全 HTTP 解析器。\n  // 這可能允許與不符合標準的 HTTP 實作互通。\n  // 應避免使用不安全的解析器。\n  // 參見選項 https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}