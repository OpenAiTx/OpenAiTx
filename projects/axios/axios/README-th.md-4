{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// GET request สำหรับรูปภาพจากระยะไกลใน node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// ส่งคำขอ GET (วิธีการเริ่มต้น)\naxios('/user/12345');\n```\n\n### ชื่อย่อของวิธีการร้องขอ\n\nเพื่อความสะดวก มีชื่อย่อสำหรับทุกวิธีการร้องขอที่ใช้บ่อย\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### หมายเหตุ\nเมื่อใช้ชื่อย่อ `url`, `method`, และ `data` ไม่จำเป็นต้องระบุใน config\n\n### การทำงานพร้อมกัน (ยกเลิกการใช้แล้ว)\nกรุณาใช้ `Promise.all` แทนฟังก์ชันด้านล่างนี้\n\nฟังก์ชันช่วยเหลือสำหรับจัดการกับคำขอพร้อมกัน\n\naxios.all(iterable)\naxios.spread(callback)\n\n### การสร้างอินสแตนซ์\n\nคุณสามารถสร้างอินสแตนซ์ใหม่ของ axios ด้วย config แบบกำหนดเอง\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### เมธอดของอินสแตนซ์\n\nเมธอดของอินสแตนซ์ที่มีให้ใช้งานมีดังต่อไปนี้ โดย config ที่ระบุจะถูกรวมกับ config ของอินสแตนซ์\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nตัวเลือก config ที่มีให้ใช้งานสำหรับการร้องขอ มีดังนี้ โดยต้องระบุแค่ `url` เท่านั้น หากไม่ได้ระบุ `method` จะใช้ค่าเริ่มต้นเป็น `GET`\n\n```js\n{\n  // `url` คือ URL ของเซิร์ฟเวอร์ที่จะใช้สำหรับการร้องขอ\n  url: '/user',\n\n  // `method` คือวิธีการร้องขอที่จะใช้เมื่อทำการร้องขอ\n  method: 'get', // ค่าเริ่มต้น\n\n  // `baseURL` จะถูกเติมหน้ากับ `url` ยกเว้น `url` เป็นแบบ absolute และตั้งค่า `allowAbsoluteUrls` เป็น true\n  // สามารถตั้งค่า `baseURL` สำหรับอินสแตนซ์ของ axios เพื่อให้ส่ง URL แบบ relative\n  // ไปยังเมธอดของอินสแตนซ์นั้นได้อย่างสะดวก\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` กำหนดว่า URL แบบ absolute จะ override `baseUrl` ที่ตั้งไว้หรือไม่\n  // เมื่อกำหนดเป็น true (ค่าเริ่มต้น) ค่า absolute ของ `url` จะ override `baseUrl`\n  // เมื่อกำหนดเป็น false ค่า absolute ของ `url` จะถูกเติมหน้าด้วย `baseUrl` เสมอ\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` อนุญาตให้เปลี่ยนแปลงข้อมูลที่จะส่งไปยังเซิร์ฟเวอร์ได้\n  // ใช้ได้เฉพาะกับวิธี 'PUT', 'POST', 'PATCH' และ 'DELETE'\n  // ฟังก์ชันสุดท้ายใน array ต้อง return เป็น string หรือ instance ของ Buffer, ArrayBuffer,\n  // FormData หรือ Stream\n  // คุณสามารถแก้ไขอ็อบเจกต์ headers ได้\n  transformRequest: [function (data, headers) {\n    // ทำอะไรก็ได้กับข้อมูลที่จะเปลี่ยนแปลง\n```",
  "status": "ok"
}