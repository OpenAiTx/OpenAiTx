{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // zie ook https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // standaard\n\n  // overgangsopties voor achterwaartse compatibiliteit die mogelijk in nieuwere versies worden verwijderd\n  transitional: {\n    // stille JSON parseermodus\n    // `true`  - negeer JSON parseerfouten en stel response.data in op null als parsen is mislukt (oud gedrag)\n    // `false` - gooi SyntaxError als JSON parsen is mislukt (Let op: responseType moet ingesteld zijn op 'json')\n    silentJSONParsing: true, // standaardwaarde voor de huidige Axios-versie\n\n    // probeer de response-string als JSON te parsen, zelfs als `responseType` niet 'json' is\n    forcedJSONParsing: true,\n\n    // gooi ETIMEDOUT-fout in plaats van generieke ECONNABORTED bij time-outs van verzoeken\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // De FormData-klasse die gebruikt wordt om de payload automatisch te serialiseren naar een FormData-object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // aangepaste visitor-functie om formulierwaarden te serialiseren\n      dots: boolean, // gebruik punten in plaats van het haakjesformaat\n      metaTokens: boolean, // speciale eindes zoals {} behouden in parametersleutel\n      indexes: boolean, // array-indexformaat null - geen haakjes, false - lege haakjes, true - haakjes met indexen\n  },\n\n  // alleen http-adapter (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s uploadlimiet,\n    100 * 1024  // 100KB/s downloadlimiet\n  ]\n}\n```\n\n## Response Schema\n\nDe response voor een verzoek bevat de volgende informatie.\n\n```js\n{\n  // `data` is de response die door de server is geleverd\n  data: {},\n\n  // `status` is de HTTP-statuscode van de serverresponse\n  status: 200,\n\n  // `statusText` is het HTTP-statusbericht van de serverresponse\n  statusText: 'OK',\n\n  // `headers` de HTTP-headers waarmee de server heeft geantwoord\n  // Alle headernamen zijn kleine letters en zijn toegankelijk via bracketnotatie.\n  // Voorbeeld: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is de config die aan `axios` is meegegeven voor het verzoek\n  config: {},\n\n  // `request` is het verzoek dat deze response heeft gegenereerd\n  // Het is de laatste ClientRequest-instantie in node.js (bij redirects)\n  // en een XMLHttpRequest-instantie in de browser\n  request: {}\n}\n```\n\nBij gebruik van `then` ontvang je de response als volgt:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nBij gebruik van `catch`, of door een [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) als tweede parameter van `then` mee te geven, is de response beschikbaar via het `error` object zoals uitgelegd in de sectie [Fouten Afhandelen](#handling-errors).\n\n## Config Defaults\n\nJe kunt configuratiedefaults specificeren die op elk verzoek worden toegepast.\n\n### Globale axios-defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Belangrijk: Als axios wordt gebruikt met meerdere domeinen, wordt de AUTH_TOKEN naar allemaal verzonden.\n// Zie hieronder voor een voorbeeld van aangepaste instantie-defaults.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Aangepaste instantie-defaults\n```",
  "status": "ok"
}