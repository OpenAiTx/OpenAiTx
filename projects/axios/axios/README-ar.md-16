{
  "id": 16,
  "origin": "### AxiosHeaders#delete(header, matcher?)\n\n```\ndelete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n```\n\nReturns `true` if at least one header has been removed.\n\n### AxiosHeaders#clear(matcher?)\n\n```\nclear(matcher?: AxiosHeaderMatcher): boolean;\n```\n\nRemoves all headers. \nUnlike the `delete` method matcher, this optional matcher will be used to match against the header name rather than the value.\n\n```ts\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\nReturns `true` if at least one header has been cleared.\n\n### AxiosHeaders#normalize(format);\n\nIf the headers object was changed directly, it can have duplicates with the same name but in different cases.\nThis method normalizes the headers object by combining duplicate keys into one.\nAxios uses this method internally after calling each interceptor.\nSet `format` to true for converting headers name to lowercase and capitalize the initial letters (`cOntEnt-type` => `Content-Type`)\n\n```js\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\nReturns `this`.\n\n### AxiosHeaders#concat(...targets)\n\n```\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n```\n\nMerges the instance with targets into a new `AxiosHeaders` instance. If the target is a string, it will be parsed as RAW HTTP headers.\n\nReturns a new `AxiosHeaders` instance.\n\n### AxiosHeaders#toJSON(asStrings?)\n\n````\ntoJSON(asStrings?: boolean): RawAxiosHeaders;\n````\n\nResolve all internal headers values into a new null prototype object. \nSet `asStrings` to true to resolve arrays as a string containing all elements, separated by commas.\n\n### AxiosHeaders.from(thing?)\n\n````\nfrom(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n````\n\nReturns a new `AxiosHeaders` instance created from the raw headers passed in,\nor simply returns the given headers object if it's an `AxiosHeaders` instance.\n\n### AxiosHeaders.concat(...targets)\n\n````\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n````\n\nReturns a new `AxiosHeaders` instance created by merging the target objects.\n\n### Shortcuts\n\nThe following shortcuts are available:\n\n- `setContentType`, `getContentType`, `hasContentType`\n\n- `setContentLength`, `getContentLength`, `hasContentLength`\n\n- `setAccept`, `getAccept`, `hasAccept`\n\n- `setUserAgent`, `getUserAgent`, `hasUserAgent`",
  "origin_sha": "4qmvmNfwyVCT9uHZjtTFtv2Zx71NrACZgX9WsiFZ/kg=",
  "translate": "### AxiosHeaders#delete(header, matcher?)\n\n```\ndelete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n```\n\nيُرجع `true` إذا تم حذف رأس واحد على الأقل.\n\n### AxiosHeaders#clear(matcher?)\n\n```\nclear(matcher?: AxiosHeaderMatcher): boolean;\n```\n\nيزيل جميع الرؤوس.\nعلى عكس matcher في طريقة `delete`، سيتم استخدام هذا matcher الاختياري للمطابقة مع اسم الرأس بدلاً من القيمة.\n\n```ts\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\nيُرجع `true` إذا تم مسح رأس واحد على الأقل.\n\n### AxiosHeaders#normalize(format);\n\nإذا تم تغيير كائن الرؤوس مباشرة، فقد يحتوي على تكرارات بنفس الاسم ولكن بحالات أحرف مختلفة.\nتقوم هذه الطريقة بتوحيد كائن الرؤوس عن طريق دمج المفاتيح المكررة في مفتاح واحد.\nيستخدم Axios هذه الطريقة داخليًا بعد استدعاء كل معترض.\nعيّن `format` إلى true لتحويل اسم الرأس إلى أحرف صغيرة مع جعل الأحرف الأولية كبيرة (`cOntEnt-type` => `Content-Type`)\n\n```js\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\nيُرجع `this`.\n\n### AxiosHeaders#concat(...targets)\n\n```\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n```\n\nيتم دمج النسخة مع الأهداف في نسخة جديدة من `AxiosHeaders`. إذا كان الهدف سلسلة نصية، فسيتم تحليلها كرؤوس HTTP خام.\n\nيُرجع نسخة جديدة من `AxiosHeaders`.\n\n### AxiosHeaders#toJSON(asStrings?)\n\n````\ntoJSON(asStrings?: boolean): RawAxiosHeaders;\n````\n\nيقوم بتحليل جميع قيم الرؤوس الداخلية إلى كائن جديد بدون نموذج أولي.\nعيّن `asStrings` إلى true لتحليل المصفوفات كسلسلة تحتوي على جميع العناصر مفصولة بفواصل.\n\n### AxiosHeaders.from(thing?)\n\n````\nfrom(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n````\n\nيُرجع نسخة جديدة من `AxiosHeaders` تم إنشاؤها من الرؤوس الخام المقدمة،\nأو ببساطة يُرجع كائن الرؤوس المقدم إذا كان نسخة من `AxiosHeaders`.\n\n### AxiosHeaders.concat(...targets)\n\n````\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n````\n\nيُرجع نسخة جديدة من `AxiosHeaders` تم إنشاؤها من دمج كائنات الأهداف.\n\n### الاختصارات\n\nالاختصارات التالية متاحة:\n\n- `setContentType`، `getContentType`، `hasContentType`\n\n- `setContentLength`، `getContentLength`، `hasContentLength`\n\n- `setAccept`، `getAccept`، `hasAccept`\n\n- `setUserAgent`، `getUserAgent`، `hasUserAgent`",
  "status": "ok"
}