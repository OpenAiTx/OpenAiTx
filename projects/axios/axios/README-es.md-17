{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can’t use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Adaptador Fetch\n\nEl adaptador Fetch fue introducido en la versión `v1.7.0`. Por defecto, se utilizará si los adaptadores `xhr` y `http` no están disponibles en la compilación,\no no son compatibles con el entorno.\nPara usarlo por defecto, debe seleccionarse explícitamente:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // por defecto ['xhr', 'http', 'fetch']\n})\n```\n\nPuedes crear una instancia separada para esto:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nEl adaptador soporta la misma funcionalidad que el adaptador `xhr`, **incluyendo la captura de progreso de carga y descarga**.\nAdemás, soporta tipos de respuesta adicionales como `stream` y `formdata` (si el entorno los soporta).\n\n## Semver\n\nHasta que axios llegue a una versión `1.0`, los cambios incompatibles se publicarán con una nueva versión menor. Por ejemplo, `0.5.1` y `0.5.4` tendrán la misma API, pero `0.6.0` tendrá cambios incompatibles.\n\n## Promesas\n\naxios depende de una implementación nativa de Promesas ES6 para ser [soportado](https://caniuse.com/promises).\nSi tu entorno no soporta Promesas ES6, puedes usar un [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios incluye definiciones de [TypeScript](https://typescriptlang.org) y un guard de tipos para errores de axios.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nDebido a que axios publica de manera dual con una exportación por defecto ESM y un `module.exports` de CJS, existen algunas consideraciones.\nLa configuración recomendada es usar `\"moduleResolution\": \"node16\"` (esto está implícito por `\"module\": \"node16\"`). Ten en cuenta que esto requiere TypeScript 4.7 o superior.\nSi usas ESM, tu configuración debería estar bien.\nSi compilas TypeScript a CJS y no puedes usar `\"moduleResolution\": \"node16\"`, tienes que habilitar `esModuleInterop`.\nSi usas TypeScript para verificar tipos de código JavaScript CJS, tu única opción es usar `\"moduleResolution\": \"node16\"`.\n\n## Configuración online con un clic\n\nPuedes usar Gitpod, un IDE en línea (que es gratuito para Open Source) para contribuir o ejecutar los ejemplos en línea.\n\n[![Abrir en Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Recursos\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosistema](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Guía de contribución](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Código de conducta](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Créditos\n\naxios está fuertemente inspirado por el [$http service](https://docs.angularjs.org/api/ng/service/$http) proporcionado en [AngularJS](https://angularjs.org/). En última instancia, axios es un esfuerzo por proporcionar un servicio independiente similar a `$http` para su uso fuera de AngularJS.\n\n## Licencia\n\n[MIT](LICENSE)\n",
  "status": "ok"
}