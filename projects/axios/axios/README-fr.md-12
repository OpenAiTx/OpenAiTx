{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### ğŸ†• Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "axios.post('https://example.com', form)\n```\n\n### ğŸ†• SÃ©rialisation automatique vers FormData\n\nÃ€ partir de la version `v0.27.0`, Axios prend en charge la sÃ©rialisation automatique des objets en un objet FormData si lâ€™en-tÃªte\n`Content-Type` de la requÃªte est dÃ©fini sur `multipart/form-data`.\n\nLa requÃªte suivante soumettra les donnÃ©es au format FormData (Navigateur & Node.js)Â :\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nDans la version `node.js`, le polyfill ([`form-data`](https://github.com/form-data/form-data)) est utilisÃ© par dÃ©faut.\n\nVous pouvez surcharger la classe FormData en dÃ©finissant la variable de configuration `env.FormData`,\nmais dans la plupart des cas, vous nâ€™en aurez probablement pas besoinÂ :\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nLe sÃ©rialiseur FormData dâ€™Axios prend en charge certaines terminaisons spÃ©ciales pour effectuer les opÃ©rations suivantesÂ :\n\n- `{}` - sÃ©rialise la valeur avec JSON.stringify\n- `[]` - dÃ©plie lâ€™objet de type tableau en champs sÃ©parÃ©s avec la mÃªme clÃ©\n\n> **Remarque**Â : lâ€™opÃ©ration de dÃ©pliage/expansion sera utilisÃ©e par dÃ©faut sur les tableaux et objets FileList\n\nLe sÃ©rialiseur FormData prend en charge des options supplÃ©mentaires via la propriÃ©tÃ© `config.formSerializer: object` pour gÃ©rer les cas raresÂ :\n\n- `visitor: Function` - fonction visiteur dÃ©finie par lâ€™utilisateur qui sera appelÃ©e de maniÃ¨re rÃ©cursive pour sÃ©rialiser lâ€™objet de donnÃ©es\nen un objet `FormData` selon des rÃ¨gles personnalisÃ©es.\n\n- `dots: boolean = false` - utilise la notation par points au lieu des crochets pour sÃ©rialiser les tableaux et objetsÂ ;\n\n- `metaTokens: boolean = true` - ajoute la terminaison spÃ©ciale (par ex. `user{}: '{\"name\": \"John\"}'`) dans la clÃ© FormData.\nLe body-parser du back-end pourrait potentiellement utiliser cette mÃ©ta-information pour analyser automatiquement la valeur en tant que JSON.\n\n- `indexes: null|false|true = false` - contrÃ´le comment les index seront ajoutÃ©s aux clÃ©s dÃ©pliÃ©es des objets de type tableau Â«Â platsÂ Â».\n\n    - `null` - nâ€™ajoute pas de crochets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false` (par dÃ©faut) - ajoute des crochets vides (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - ajoute des crochets avec index (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nSupposons que nous ayons un objet comme celui-ciÂ :\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nLes Ã©tapes suivantes seront exÃ©cutÃ©es en interne par le sÃ©rialiseur AxiosÂ :\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios prend en charge les mÃ©thodes raccourcies suivantesÂ : `postForm`, `putForm`, `patchForm`\nqui sont simplement les mÃ©thodes http correspondantes avec lâ€™en-tÃªte `Content-Type` prÃ©dÃ©fini Ã  `multipart/form-data`.\n\n## Envoi de fichiers\n\nVous pouvez facilement soumettre un fichier uniqueÂ :\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "status": "ok"
}