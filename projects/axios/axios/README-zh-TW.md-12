{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### 🆕 Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "axios.post('https://example.com', form)\n```\n\n### 🆕 自動序列化為 FormData\n\n從 `v0.27.0` 開始，若請求的 `Content-Type` 標頭設為 `multipart/form-data`，Axios 支援自動將物件序列化為 FormData 物件。\n\n以下請求將以 FormData 格式提交資料（瀏覽器 & Node.js）：\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\n在 `node.js` 版本中，預設會使用 ([`form-data`](https://github.com/form-data/form-data)) polyfill。\n\n你可以透過設定 `env.FormData` 配置變數來覆寫 FormData 類別，\n但大多數情況下你可能不需要這麼做：\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData 序列化器支援一些特殊結尾以執行以下操作：\n\n- `{}` - 使用 JSON.stringify 將值序列化\n- `[]` - 將類陣列物件解包為具有相同鍵名的多個欄位\n\n> **注意**：對於陣列和 FileList 物件，預設會使用解包/展開操作\n\nFormData 序列化器支援通過 `config.formSerializer: object` 屬性提供額外選項以處理少見情境：\n\n- `visitor: Function` - 使用者自訂的 visitor 函式，將根據自訂規則遞迴將資料物件序列化為 `FormData` 物件。\n\n- `dots: boolean = false` - 使用點號表示法而非中括號來序列化陣列和物件；\n\n- `metaTokens: boolean = true` - 在 FormData 的鍵中添加特殊結尾（例如 `user{}: '{\"name\": \"John\"}'`）。\n後端 body-parser 可以利用這個中繼資訊自動將值解析為 JSON。\n\n- `indexes: null|false|true = false` - 控制對 `flat` 類陣列物件解包鍵時索引的添加方式。\n\n    - `null` - 不加中括號（`arr: 1`, `arr: 2`, `arr: 3`）\n    - `false`(預設) - 加空中括號（`arr[]: 1`, `arr[]: 2`, `arr[]: 3`）\n    - `true` - 加帶索引的中括號（`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`）\n\n假設我們有如下物件：\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\n以下步驟將由 Axios 的序列化器在內部執行：\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios 支援以下快捷方法：`postForm`、`putForm`、`patchForm`\n這些方法僅是對應的 http 方法，且預設已設置 `Content-Type` 標頭為 `multipart/form-data`。\n\n## 檔案上傳\n\n你可以輕鬆提交單一檔案：\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "status": "ok"
}