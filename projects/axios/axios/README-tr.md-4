{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// node.js'te uzaktaki bir görsel için GET isteği\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Bir GET isteği gönder (varsayılan yöntem)\naxios('/user/12345');\n```\n\n### İstek yöntemi takma adları\n\nKolaylık olması için, tüm yaygın istek yöntemleri için takma adlar sağlanmıştır.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOT\nTakma ad yöntemleri kullanılırken `url`, `method` ve `data` özelliklerinin config içinde belirtilmesine gerek yoktur.\n\n### Eşzamanlılık (Kullanımdan Kaldırıldı)\nLütfen aşağıdaki fonksiyonların yerine `Promise.all` kullanın.\n\nEşzamanlı isteklerle başa çıkmak için yardımcı fonksiyonlar.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Bir örnek oluşturmak\n\nÖzel bir yapılandırma ile yeni bir axios örneği oluşturabilirsiniz.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Örnek yöntemleri\n\nKullanılabilir örnek yöntemler aşağıda listelenmiştir. Belirtilen yapılandırma, örnek yapılandırması ile birleştirilecektir.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## İstek Yapılandırması\n\nİstek yapmak için mevcut olan yapılandırma seçenekleri şunlardır. Sadece `url` gereklidir. Eğer `method` belirtilmezse istekler varsayılan olarak `GET` olur.\n\n```js\n{\n  // `url` istekte kullanılacak sunucu URL'sidir\n  url: '/user',\n\n  // `method` istekte kullanılacak yöntemdir\n  method: 'get', // varsayılan\n\n  // `baseURL`, `url` mutlak değilse ve `allowAbsoluteUrls` seçeneği true olarak ayarlanmadıysa, `url`'e önek olarak eklenir.\n  // Örnek bir axios için `baseURL` ayarlamak, o örneğin yöntemlerine göreli URL'ler iletmek açısından kullanışlı olabilir.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls`, mutlak URL'lerin yapılandırılmış `baseUrl`'i geçersiz kılıp kılmayacağını belirler.\n  // true (varsayılan) olarak ayarlandığında, `url` için verilen mutlak değerler `baseUrl`'i geçersiz kılar.\n  // false olarak ayarlandığında, `url` için verilen mutlak değerler her zaman `baseUrl` ile öneklenir.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest`, istek verileri sunucuya gönderilmeden önce değişiklik yapılmasına olanak tanır\n  // Bu yalnızca 'PUT', 'POST', 'PATCH' ve 'DELETE' istek yöntemleri için geçerlidir\n  // Dizideki son fonksiyon bir string veya Buffer, ArrayBuffer,\n  // FormData veya Stream örneği döndürmelidir\n  // headers nesnesini değiştirebilirsiniz.\n  transformRequest: [function (data, headers) {\n    // Veriyi dönüştürmek için istediğiniz işlemi yapın\n```",
  "status": "ok"
}