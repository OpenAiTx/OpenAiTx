{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // voir aussi https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // valeur par défaut\n\n  // options transitoires pour la rétrocompatibilité qui pourraient être supprimées dans les futures versions\n  transitional: {\n    // mode silencieux d’analyse JSON\n    // `true`  - ignorer les erreurs d’analyse JSON et définir response.data à null si l’analyse échoue (ancien comportement)\n    // `false` - lancer une erreur SyntaxError si l’analyse JSON échoue (Remarque : responseType doit être défini sur 'json')\n    silentJSONParsing: true, // valeur par défaut pour la version actuelle d’Axios\n\n    // tenter d’analyser la chaîne de réponse comme JSON même si `responseType` n’est pas 'json'\n    forcedJSONParsing: true,\n\n    // lancer une erreur ETIMEDOUT au lieu de l’erreur générique ECONNABORTED lors des expirations de requête\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // La classe FormData à utiliser pour sérialiser automatiquement la charge utile dans un objet FormData\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // fonction visiteur personnalisée pour sérialiser les valeurs du formulaire\n      dots: boolean, // utiliser le format à points au lieu du format entre crochets\n      metaTokens: boolean, // conserver les terminaisons spéciales comme {} dans la clé du paramètre\n      indexes: boolean, // format des index de tableau : null - pas de crochets, false - crochets vides, true - crochets avec index\n  },\n\n  // adaptateur http uniquement (node.js)\n  maxRate: [\n    100 * 1024, // limite d’upload de 100KB/s,\n    100 * 1024  // limite de download de 100KB/s\n  ]\n}\n```\n\n## Schéma de la réponse\n\nLa réponse à une requête contient les informations suivantes.\n\n```js\n{\n  // `data` est la réponse fournie par le serveur\n  data: {},\n\n  // `status` est le code de statut HTTP de la réponse serveur\n  status: 200,\n\n  // `statusText` est le message de statut HTTP de la réponse serveur\n  statusText: 'OK',\n\n  // `headers` sont les en-têtes HTTP avec lesquels le serveur a répondu\n  // Tous les noms d’en-tête sont en minuscules et accessibles via la notation entre crochets.\n  // Exemple : `response.headers['content-type']`\n  headers: {},\n\n  // `config` est la configuration transmise à `axios` pour la requête\n  config: {},\n\n  // `request` est la requête qui a généré cette réponse\n  // Il s’agit de la dernière instance ClientRequest dans node.js (en cas de redirections)\n  // et d’une instance XMLHttpRequest dans le navigateur\n  request: {}\n}\n```\n\nLors de l’utilisation de `then`, vous recevrez la réponse comme suit :\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nLors de l’utilisation de `catch`, ou en passant un [callback de rejet](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) en second paramètre de `then`, la réponse sera disponible via l’objet `error` comme expliqué dans la section [Gestion des erreurs](#handling-errors).\n\n## Valeurs par défaut de la configuration\n\nVous pouvez spécifier des valeurs par défaut de configuration qui seront appliquées à chaque requête.\n\n### Valeurs par défaut globales d’axios\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important : Si axios est utilisé avec plusieurs domaines, le AUTH_TOKEN sera envoyé à tous.\n// Voir ci-dessous pour un exemple utilisant les valeurs par défaut d’une instance personnalisée.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Valeurs par défaut d’une instance personnalisée\n```",
  "status": "ok"
}