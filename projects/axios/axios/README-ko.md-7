{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // 참고: https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // 기본값\n\n  // 향후 버전에서 제거될 수 있는 하위 호환성 전이적 옵션\n  transitional: {\n    // 조용한 JSON 파싱 모드\n    // `true`  - JSON 파싱 오류를 무시하고 파싱에 실패하면 response.data를 null로 설정 (이전 동작)\n    // `false` - JSON 파싱에 실패하면 SyntaxError를 throw (참고: responseType이 'json'이어야 함)\n    silentJSONParsing: true, // 현재 Axios 버전의 기본값\n\n    // `responseType`이 'json'이 아니더라도 응답 문자열을 JSON으로 파싱 시도\n    forcedJSONParsing: true,\n\n    // 요청 타임아웃 시 일반 ECONNABORTED 대신 ETIMEDOUT 오류를 throw\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // 페이로드를 자동으로 FormData 객체로 직렬화하기 위해 사용할 FormData 클래스\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // 폼 값을 직렬화하는 커스텀 visitor 함수\n      dots: boolean, // brackets 대신 dot 포맷 사용\n      metaTokens: boolean, // 파라미터 키의 {}와 같은 특수 엔딩 유지\n      indexes: boolean, // 배열 인덱스 포맷 null - 괄호 없음, false - 빈 괄호, true - 인덱스가 있는 괄호\n  },\n\n  // http 어댑터 전용 (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s 업로드 제한,\n    100 * 1024  // 100KB/s 다운로드 제한\n  ]\n}\n```\n\n## 응답 스키마\n\n요청에 대한 응답에는 다음 정보가 포함됩니다.\n\n```js\n{\n  // `data`는 서버에서 제공한 응답 데이터입니다.\n  data: {},\n\n  // `status`는 서버 응답의 HTTP 상태 코드입니다.\n  status: 200,\n\n  // `statusText`는 서버 응답의 HTTP 상태 메시지입니다.\n  statusText: 'OK',\n\n  // `headers`는 서버가 응답한 HTTP 헤더입니다.\n  // 모든 헤더 이름은 소문자이며 bracket 표기법으로 접근할 수 있습니다.\n  // 예시: `response.headers['content-type']`\n  headers: {},\n\n  // `config`는 요청을 위해 `axios`에 제공된 설정입니다.\n  config: {},\n\n  // `request`는 이 응답을 생성한 요청 객체입니다.\n  // 리다이렉트 시 node.js에서는 마지막 ClientRequest 인스턴스,\n  // 브라우저에서는 XMLHttpRequest 인스턴스입니다.\n  request: {}\n}\n```\n\n`then`을 사용할 때, 다음과 같이 응답을 받을 수 있습니다:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\n`catch`를 사용하거나 [rejection 콜백](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then)을 `then`의 두 번째 매개변수로 전달하면, [오류 처리](#handling-errors) 섹션에 설명된 대로 `error` 객체를 통해 응답에 접근할 수 있습니다.\n\n## Config 기본값\n\n모든 요청에 적용될 config 기본값을 지정할 수 있습니다.\n\n### 전역 axios 기본값\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// 중요: axios가 여러 도메인에서 사용될 경우, AUTH_TOKEN이 모든 도메인에 전송됩니다.\n// 아래의 Custom instance defaults 예제를 참고하세요.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n```",
  "status": "ok"
}