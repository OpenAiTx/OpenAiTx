{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can’t use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`、`getContentEncoding`、`hasContentEncoding`\n\n## 🔥 Fetch 適配器\n\nFetch 適配器於 `v1.7.0` 中引入。預設情況下，若建構中未提供 `xhr` 和 `http` 適配器，或環境不支援，則將使用它。\n若要預設使用，必須明確選擇：\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // 預設為 ['xhr', 'http', 'fetch']\n})\n```\n\n你也可以為此建立一個獨立的實例：\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\n此適配器支援與 `xhr` 適配器相同的功能，**包括上傳及下載進度監控**。\n此外，還支援額外的回應類型，如 `stream` 和 `formdata`（若環境支援）。\n\n## Semver\n\n在 axios 發布 `1.0` 版本之前，所有重大變更都會以新次要版本發布。例如 `0.5.1` 和 `0.5.4` 會有相同的 API，但 `0.6.0` 則會有重大變更。\n\n## Promises\n\naxios 依賴於原生 ES6 Promise 實作來獲得[支援](https://caniuse.com/promises)。\n若你的環境不支援 ES6 Promises，你可以[使用 polyfill](https://github.com/jakearchibald/es6-promise)。\n\n## TypeScript\n\naxios 內建 [TypeScript](https://typescriptlang.org) 型別定義以及 axios 錯誤的型別守衛。\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\n由於 axios 同時以 ESM 預設匯出和 CJS 的 `module.exports` 發布，因此有些注意事項。\n建議設定 `\"moduleResolution\": \"node16\"`（這也由 `\"module\": \"node16\"` 隱含）。請注意，這需要 TypeScript 4.7 或以上版本。\n如果使用 ESM，你的設定應該沒問題。\n如果你將 TypeScript 編譯為 CJS 而不能使用 `\"moduleResolution\": \"node16\"`，則必須啟用 `esModuleInterop`。\n若你用 TypeScript 來型別檢查 CJS JavaScript 程式碼，你唯一選擇就是使用 `\"moduleResolution\": \"node16\"`。\n\n## 線上一鍵設置\n\n你可以使用 Gitpod，一個線上 IDE（對於開源專案免費），來貢獻或在線上運行範例。\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## 資源\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## 鳴謝\n\naxios 深受 [AngularJS](https://angularjs.org/) 所提供的 [$http 服務](https://docs.angularjs.org/api/ng/service/$http) 啟發。最終，axios 致力於提供一個獨立於 AngularJS 之外可用的 `$http` 類服務。\n\n## 授權\n\n[MIT](LICENSE)\n",
  "status": "ok"
}