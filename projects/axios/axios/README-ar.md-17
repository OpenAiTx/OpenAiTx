{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## 🔥 Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can’t use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`، `getContentEncoding`، `hasContentEncoding`\n\n## 🔥 محول Fetch\n\nتم تقديم محول Fetch في الإصدار `v1.7.0`. بشكل افتراضي، سيتم استخدامه إذا لم تكن محولات `xhr` و `http` متاحة في البنية،\nأو غير مدعومة من قبل البيئة.\nلاستخدامه افتراضيًا، يجب تحديده بشكل صريح:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // الافتراضي ['xhr', 'http', 'fetch']\n})\n```\n\nيمكنك إنشاء نسخة منفصلة لهذا الغرض:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nيدعم المحول نفس وظائف محول `xhr`، **بما في ذلك التقاط تقدم التحميل والتنزيل**.\nكما يدعم أنواع استجابة إضافية مثل `stream` و `formdata` (إذا كانت مدعومة من قبل البيئة).\n\n## Semver\n\nحتى تصل axios إلى إصدار `1.0`، سيتم إصدار التغييرات المكسرة مع كل إصدار ثانوي جديد. على سبيل المثال، سيكون لكل من `0.5.1` و `0.5.4` نفس واجهة برمجة التطبيقات (API)، لكن `0.6.0` سيحتوي على تغييرات مكسرة.\n\n## الوعود (Promises)\n\nتعتمد axios على تنفيذ أصلي لـ ES6 Promise ليكون [مدعومًا](https://caniuse.com/promises).\nإذا كانت بيئتك لا تدعم ES6 Promises، يمكنك [إضافة دعم لها (polyfill)](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\nتتضمن axios تعريفات [TypeScript](https://typescriptlang.org) وحارس نوع لأخطاء axios.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nنظرًا لأن axios تنشر بشكل مزدوج مع تصدير افتراضي ESM و `module.exports` لنظام CJS، هناك بعض الاعتبارات.\nالإعداد الموصى به هو استخدام `\"moduleResolution\": \"node16\"` (وهذا ضمنيًا عند استخدام `\"module\": \"node16\"`). لاحظ أن هذا يتطلب TypeScript 4.7 أو أعلى.\nإذا كنت تستخدم ESM، يجب أن تكون إعداداتك جيدة.\nإذا كنت تقوم بترجمة TypeScript إلى CJS ولا يمكنك استخدام `\"moduleResolution\": \"node16\"`، يجب عليك تفعيل `esModuleInterop`.\nإذا كنت تستخدم TypeScript لفحص نوع كود JavaScript بنظام CJS، فإن خيارك الوحيد هو استخدام `\"moduleResolution\": \"node16\"`.\n\n## إعداد بنقرة واحدة عبر الإنترنت\n\nيمكنك استخدام Gitpod، بيئة تطوير متكاملة عبر الإنترنت (ومجانية للمصادر المفتوحة) للمساهمة أو تشغيل الأمثلة عبر الإنترنت.\n\n[![افتح في Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## الموارد\n\n* [سجل التغييرات](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [النظام البيئي](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [دليل المساهمة](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [مدونة السلوك](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## الاعتمادات\n\nتم استلهام axios بشكل كبير من [خدمة $http](https://docs.angularjs.org/api/ng/service/$http) المقدمة في [AngularJS](https://angularjs.org/). في النهاية، يعد axios جهدًا لتوفير خدمة مستقلة شبيهة بـ `$http` للاستخدام خارج AngularJS.\n\n## الرخصة\n\n[MIT](LICENSE)\n",
  "status": "ok"
}