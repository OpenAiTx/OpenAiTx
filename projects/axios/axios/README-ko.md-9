{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **참고:** options 파라미터(`synchronous`와 `runWhen` 속성을 가짐)는 현재로서는 요청 인터셉터에만 지원됩니다.\n\n### 다중 인터셉터\n\n여러 개의 응답 인터셉터를 추가했을 때  \n그리고 응답이 성공적으로 완료되었을 때\n- 각 인터셉터가 실행됩니다.\n- 추가된 순서대로 실행됩니다.\n- 마지막 인터셉터의 결과만 반환됩니다.\n- 각 인터셉터는 바로 이전 인터셉터의 결과를 전달받습니다.\n- 그리고 만약 성공 인터셉터에서 예외가 발생하면\n    - 그 다음 성공 인터셉터는 호출되지 않습니다.\n    - 그 다음 실패(거부) 인터셉터가 호출됩니다.\n    - 한 번 예외가 처리되면, 그 다음 성공 인터셉터가 다시 호출됩니다(프로미스 체인과 동일).\n\n이 모든 내용을 코드로 확인하려면 [인터셉터 테스트](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js)를 참고하세요.\n\n## 에러 유형\n\naxios에서 발생할 수 있는 다양한 에러 메시지는 에러의 구체적인 정보와 디버깅 기회를 제공할 수 있습니다.\n\naxios 에러의 일반적인 구조는 다음과 같습니다:\n| 속성      | 정의  |\n| -------- | ----------  |\n| message  | 에러 메시지의 간략한 요약과 실패한 상태 코드. |\n| name     | 에러가 발생한 위치를 정의. axios의 경우 항상 'AxiosError'입니다. |\n| stack    | 에러의 스택 트레이스를 제공합니다. | \n| config   | 요청이 발생했을 때 사용자가 정의한 특정 인스턴스 구성이 담긴 axios config 객체 |\n| code     | axios에서 식별한 에러를 나타냅니다. 아래 표는 내부 axios 에러의 구체적 정의를 나열합니다. |\n| status   | HTTP 응답 상태 코드. 일반적인 HTTP 응답 상태 코드 의미는 [여기](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)에서 확인하세요.\n\n아래는 axios에서 식별할 수 있는 에러 목록입니다:\n\n| 코드                      | 정의                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | axios 설정에서 잘못된 값이 제공됨.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | axios 설정에서 잘못된 옵션이 제공됨.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | 현재 axios 환경에서 지원되지 않는 기능 또는 메서드입니다.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | axios에서 더 이상 사용되지 않는 기능 또는 메서드가 사용됨.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | axios 요청에 잘못된 URL이 제공됨.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | 보통 요청이 타임아웃되었을 때(단, `transitional.clarifyTimeoutError`가 설정되지 않은 경우) 또는 브라우저나 브라우저 플러그인에 의해 중단된 경우에 발생합니다.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | AbortSignal(또는 CancelToken)을 사용하여 사용자가 명시적으로 기능이나 메서드를 취소한 경우 발생합니다.                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | 기본 axios 시간 제한을 초과하여 요청이 타임아웃된 경우 발생합니다. `transitional.clarifyTimeoutError`가 `true`로 설정되어야 하며, 그렇지 않으면 일반적인 `ECONNABORTED` 에러가 대신 발생합니다.                                                                                                                                                                                                         |\n| ERR_NETWORK               | 네트워크 관련 문제입니다. 브라우저에서는 [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) 또는 [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) 정책 위반으로도 발생할 수 있습니다. 브라우저는 보안 문제로 인해 JS 코드가 실제 에러 원인을 확인할 수 없으니, 콘솔을 확인하세요. |\n| ERR_FR_TOO_MANY_REDIRECTS | 요청이 너무 많이 리디렉션되어, axios 설정에서 지정한 최대 리디렉션 수를 초과함.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | 응답을 올바르게 파싱할 수 없거나 예상치 못한 형식임. 보통 `5xx` 상태 코드와 관련됨.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | 요청이 예상치 못한 형식이거나 필수 파라미터가 누락됨. 보통 `4xx` 상태 코드와 관련됨.                                                                                                                                                                                                                                                                    |\n\n## 에러 처리\n\n기본 동작은 2xx 범위를 벗어나는 상태 코드로 반환된 모든 응답에 대해 거부하고, 이를 에러로 처리합니다.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // 요청이 이루어졌고 서버가 2xx 범위를 벗어나는 상태 코드로 응답함\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // 요청이 이루어졌으나 응답을 받지 못함\n      // `error.request`는 브라우저에서는 XMLHttpRequest의 인스턴스이고,\n      // node.js에서는 http.ClientRequest의 인스턴스입니다.\n      console.log(error.request);\n    } else {\n      // 요청을 설정하는 중에 에러가 발생함\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n`validateStatus` 설정 옵션을 사용하면 기본 조건(status >= 200 && status < 300)을 오버라이드하고, 에러를 발생시킬 HTTP 코드(들)를 직접 정의할 수 있습니다.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // 상태 코드가 500보다 작을 때만 resolve\n  }\n})\n```\n\n`toJSON`을 사용하면 HTTP 에러에 대한 더 많은 정보를 가진 객체를 얻을 수 있습니다.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}