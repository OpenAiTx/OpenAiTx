{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// 在 node.js 中对远程图片发起 GET 请求\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// 发送一个 GET 请求（默认方法）\naxios('/user/12345');\n```\n\n### 请求方法别名\n\n为了方便，所有常用请求方法都提供了别名。\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### 注意\n当使用别名方法时，`url`、`method` 和 `data` 属性无需在 config 中指定。\n\n### 并发请求（已弃用）\n请使用 `Promise.all` 替代以下功能函数。\n\n用于处理并发请求的辅助函数。\n\naxios.all(iterable)\naxios.spread(callback)\n\n### 创建实例\n\n你可以通过自定义配置创建一个新的 axios 实例。\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### 实例方法\n\n可用的实例方法如下所列。指定的 config 会与实例的 config 合并。\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## 请求配置\n\n以下是可用于发起请求的配置选项。只有 `url` 是必需的。如果未指定 `method`，请求默认使用 `GET`。\n\n```js\n{\n  // `url` 是用于请求的服务器 URL\n  url: '/user',\n\n  // `method` 是请求时使用的 HTTP 方法\n  method: 'get', // 默认\n\n  // `baseURL` 会被加在 `url` 前，除非 `url` 是绝对路径且选项 `allowAbsoluteUrls` 设置为 true。\n  // 为 axios 的实例设置 `baseURL`，可以方便地传递相对 URL 给该实例的方法。\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` 决定绝对 URL 是否会覆盖已配置的 `baseUrl`。\n  // 设置为 true（默认）时，`url` 的绝对值会覆盖 `baseUrl`。\n  // 设置为 false 时，`url` 的绝对值总会被 `baseUrl` 作为前缀。\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` 允许在请求发送到服务器之前修改请求数据\n  // 仅适用于 'PUT'、'POST'、'PATCH' 和 'DELETE' 方法\n  // 数组中的最后一个函数必须返回字符串或 Buffer、ArrayBuffer、\n  // FormData 或 Stream 的实例\n  // 你可以修改 headers 对象。\n  transformRequest: [function (data, headers) {\n    // 按需转换数据\n```",
  "status": "ok"
}