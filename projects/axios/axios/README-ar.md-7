{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // راجع أيضًا https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // القيمة الافتراضية\n\n  // خيارات انتقالية للتوافق مع الإصدارات السابقة والتي قد تتم إزالتها في الإصدارات الأحدث\n  transitional: {\n    // وضع تحليل JSON الصامت\n    // `true`  - تجاهل أخطاء تحليل JSON وتعيين response.data إلى null إذا فشل التحليل (السلوك القديم)\n    // `false` - رمي خطأ SyntaxError إذا فشل تحليل JSON (ملاحظة: يجب تعيين responseType إلى 'json')\n    silentJSONParsing: true, // القيمة الافتراضية للإصدار الحالي من Axios\n\n    // محاولة تحليل سلسلة الاستجابة كـ JSON حتى إذا لم يكن `responseType` هو 'json'\n    forcedJSONParsing: true,\n\n    // رمي خطأ ETIMEDOUT بدلاً من ECONNABORTED العام عند انتهاء مهلة الطلب\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // فئة FormData التي ستستخدم لتسلسل الحمولة تلقائيًا إلى كائن FormData\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // دالة زائر مخصصة لتسلسل قيم النماذج\n      dots: boolean; // استخدام النقاط بدلاً من تنسيق الأقواس\n      metaTokens: boolean; // الحفاظ على النهايات الخاصة مثل {} في مفتاح المعامل\n      indexes: boolean; // تنسيق مؤشرات المصفوفة null - بدون أقواس، false - أقواس فارغة، true - أقواس مع مؤشرات\n  },\n\n  // محول http فقط (node.js)\n  maxRate: [\n    100 * 1024, // حد رفع 100KB/s،\n    100 * 1024  // حد تنزيل 100KB/s\n  ]\n}\n```\n\n## مخطط الاستجابة (Response Schema)\n\nالاستجابة لطلب تحتوي على المعلومات التالية.\n\n```js\n{\n  // `data` هي الاستجابة التي قدمها الخادم\n  data: {},\n\n  // `status` هو رمز حالة HTTP من استجابة الخادم\n  status: 200,\n\n  // `statusText` هي رسالة حالة HTTP من استجابة الخادم\n  statusText: 'OK',\n\n  // `headers` هي رؤوس HTTP التي استجاب بها الخادم\n  // جميع أسماء الرؤوس بحروف صغيرة ويمكن الوصول إليها باستخدام تدوين الأقواس.\n  // مثال: `response.headers['content-type']`\n  headers: {},\n\n  // `config` هو التكوين الذي تم تقديمه إلى `axios` لهذا الطلب\n  config: {},\n\n  // `request` هو الطلب الذي أنشأ هذه الاستجابة\n  // إنه آخر كائن ClientRequest في node.js (في عمليات إعادة التوجيه)\n  // وكائن XMLHttpRequest في المتصفح\n  request: {}\n}\n```\n\nعند استخدام `then`، ستتلقى الاستجابة كما يلي:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nعند استخدام `catch`، أو تمرير [دالة رفض](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) كمعامل ثانٍ لـ `then`، ستكون الاستجابة متاحة من خلال كائن `error` كما هو موضح في قسم [معالجة الأخطاء](#handling-errors).\n\n## الإعدادات الافتراضية للتكوين (Config Defaults)\n\nيمكنك تحديد إعدادات افتراضية للتكوين سيتم تطبيقها على كل طلب.\n\n### الإعدادات الافتراضية العامة لـ axios\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// مهم: إذا تم استخدام axios مع عدة نطاقات، سيتم إرسال AUTH_TOKEN إلى جميعها.\n// راجع أدناه مثالًا باستخدام الإعدادات الافتراضية للمثيل المخصص بدلاً من ذلك.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### الإعدادات الافتراضية للمثيل المخصص\n```",
  "status": "ok"
}