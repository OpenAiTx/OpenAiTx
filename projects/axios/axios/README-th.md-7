{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // ดูเพิ่มเติมที่ https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // ค่าเริ่มต้น\n\n  // ตัวเลือกชั่วคราวสำหรับความเข้ากันได้กับเวอร์ชันเก่าซึ่งอาจถูกลบออกในเวอร์ชันใหม่\n  transitional: {\n    // โหมดแปลงค่า JSON แบบเงียบ\n    // `true`  - เพิกเฉยข้อผิดพลาดการแปลง JSON และตั้งค่า response.data เป็น null หากแปลงไม่สำเร็จ (พฤติกรรมเก่า)\n    // `false` - ขว้าง SyntaxError หากแปลง JSON ไม่สำเร็จ (หมายเหตุ: ต้องตั้งค่า responseType เป็น 'json')\n    silentJSONParsing: true, // ค่าตั้งต้นสำหรับ Axios เวอร์ชันปัจจุบัน\n\n    // พยายามแปลงสตริงตอบกลับเป็น JSON แม้ว่า `responseType` จะไม่ใช่ 'json'\n    forcedJSONParsing: true,\n\n    // ขว้างข้อผิดพลาด ETIMEDOUT แทนที่ ECONNABORTED ทั่วไปเมื่อเกิด timeout ในการร้องขอ\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // คลาส FormData ที่จะถูกใช้เพื่อแปลง payload เป็นวัตถุ FormData โดยอัตโนมัติ\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // ฟังก์ชัน visitor แบบกำหนดเองเพื่อ serialize ค่าของฟอร์ม\n      dots: boolean; // ใช้จุดแทนรูปแบบวงเล็บ\n      metaTokens: boolean; // คงท้ายพิเศษเช่น {} ในคีย์พารามิเตอร์\n      indexes: boolean; // รูปแบบดัชนีของอาเรย์ null - ไม่มีวงเล็บ, false - วงเล็บเปล่า, true - วงเล็บพร้อมดัชนี\n  },\n\n  // เฉพาะ http adapter (node.js)\n  maxRate: [\n    100 * 1024, // จำกัดอัปโหลด 100KB/s,\n    100 * 1024  // จำกัดดาวน์โหลด 100KB/s\n  ]\n}\n```\n\n## โครงสร้างการตอบกลับ (Response Schema)\n\nการตอบกลับสำหรับการร้องขอจะมีข้อมูลดังต่อไปนี้\n\n```js\n{\n  // `data` คือข้อมูลที่ถูกส่งกลับโดยเซิร์ฟเวอร์\n  data: {},\n\n  // `status` คือรหัสสถานะ HTTP ที่ได้รับจากการตอบกลับของเซิร์ฟเวอร์\n  status: 200,\n\n  // `statusText` คือข้อความสถานะ HTTP ที่ได้รับจากเซิร์ฟเวอร์\n  statusText: 'OK',\n\n  // `headers` คือ HTTP headers ที่เซิร์ฟเวอร์ตอบกลับมา\n  // ชื่อ header ทั้งหมดเป็นตัวพิมพ์เล็กและสามารถเข้าถึงได้โดยใช้ bracket notation\n  // ตัวอย่าง: `response.headers['content-type']`\n  headers: {},\n\n  // `config` คือ config ที่ถูกส่งไปกับ `axios` สำหรับการร้องขอ\n  config: {},\n\n  // `request` คือ request ที่สร้าง response นี้ขึ้นมา\n  // เป็น instance สุดท้ายของ ClientRequest ใน node.js (ในกรณี redirect)\n  // และเป็น instance ของ XMLHttpRequest ในเบราว์เซอร์\n  request: {}\n}\n```\n\nเมื่อใช้ `then` คุณจะได้รับ response ดังนี้:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nเมื่อใช้ `catch` หรือส่ง [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) เป็นพารามิเตอร์ที่สองของ `then` response จะถูกเข้าถึงผ่านวัตถุ `error` ตามที่อธิบายในส่วน [การจัดการข้อผิดพลาด](#handling-errors)\n\n## ค่าเริ่มต้นของ Config (Config Defaults)\n\nคุณสามารถกำหนด config ค่าเริ่มต้นที่จะถูกใช้กับทุกการร้องขอ\n\n### ค่าเริ่มต้นของ axios ทั่วไป (Global axios defaults)\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// สำคัญ: หาก axios ถูกใช้กับหลายโดเมน AUTH_TOKEN จะถูกส่งไปยังทุกโดเมน\n// ดูตัวอย่างด้านล่างนี้สำหรับการใช้ค่าเริ่มต้นแบบ Custom instance แทน\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### ค่าเริ่มต้นของ instance แบบกำหนดเอง (Custom instance defaults)\n```",
  "status": "ok"
}