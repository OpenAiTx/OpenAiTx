{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## ðŸ”¥ Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you canâ€™t use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## ðŸ”¥ Fetch-adapter\n\nFetch-adapter werd geÃ¯ntroduceerd in `v1.7.0`. Standaard zal deze worden gebruikt als de `xhr`- en `http`-adapters niet beschikbaar zijn in de build,\nof niet ondersteund worden door de omgeving.\nOm deze standaard te gebruiken, moet deze expliciet geselecteerd worden:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // standaard ['xhr', 'http', 'fetch']\n})\n```\n\nJe kunt hiervoor een aparte instantie aanmaken:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nDe adapter ondersteunt dezelfde functionaliteit als de `xhr`-adapter, **inclusief het vastleggen van upload- en downloadvoortgang**.\nOok ondersteunt deze extra responstypen zoals `stream` en `formdata` (indien ondersteund door de omgeving).\n\n## Semver\n\nTotdat axios een `1.0`-release bereikt, zullen breaking changes worden uitgebracht met een nieuw minor versie. Bijvoorbeeld, `0.5.1` en `0.5.4` zullen dezelfde API hebben, maar `0.6.0` zal breaking changes bevatten.\n\n## Promises\n\naxios is afhankelijk van een native ES6 Promise-implementatie om [ondersteund](https://caniuse.com/promises) te worden.\nAls jouw omgeving geen ES6 Promises ondersteunt, kun je een [polyfill](https://github.com/jakearchibald/es6-promise) gebruiken.\n\n## TypeScript\n\naxios bevat [TypeScript](https://typescriptlang.org)-definities en een type guard voor axios-fouten.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nOmdat axios zowel een ESM default export als een CJS `module.exports` publiceert, zijn er enkele aandachtspunten.\nDe aanbevolen instelling is om `\"moduleResolution\": \"node16\"` te gebruiken (dit is geÃ¯mpliceerd door `\"module\": \"node16\"`). Let op: hiervoor is TypeScript 4.7 of hoger vereist.\nAls je ESM gebruikt, zijn je instellingen in orde.\nAls je TypeScript compileert naar CJS en je kunt `\"moduleResolution\": \"node 16\"` niet gebruiken, moet je `esModuleInterop` inschakelen.\nAls je TypeScript gebruikt om CJS JavaScript-code te type-checken, is je enige optie om `\"moduleResolution\": \"node16\"` te gebruiken.\n\n## Online one-click setup\n\nJe kunt Gitpod gebruiken, een online IDE (die gratis is voor Open Source) om bij te dragen of de voorbeelden online uit te voeren.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Bronnen\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosysteem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributiegids](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Gedragscode](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is sterk geÃ¯nspireerd door de [$http service](https://docs.angularjs.org/api/ng/service/$http) die wordt aangeboden in [AngularJS](https://angularjs.org/). Uiteindelijk is axios een poging om een op zichzelf staande `$http`-achtige service te bieden voor gebruik buiten AngularJS.\n\n## Licentie\n\n[MIT](LICENSE)\n",
  "status": "ok"
}