{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n// همچنین مراجعه کنید به https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\ninsecureHTTPParser: undefined, // مقدار پیش‌فرض\n\n// گزینه‌های انتقالی برای سازگاری با نسخه‌های قدیمی که ممکن است در نسخه‌های جدیدتر حذف شوند\ntransitional: {\n  // حالت تجزیه بی‌صدای JSON\n  // `true`  - خطاهای تجزیه JSON را نادیده بگیر و در صورت شکست، response.data را برابر null قرار بده (رفتار قدیمی)\n  // `false` - اگر تجزیه JSON شکست بخورد، SyntaxError پرتاب کن (توجه: باید responseType روی 'json' تنظیم شده باشد)\n  silentJSONParsing: true, // مقدار پیش‌فرض برای نسخه فعلی Axios\n\n  // تلاش برای تجزیه رشته پاسخ به عنوان JSON حتی اگر `responseType` روی 'json' نباشد\n  forcedJSONParsing: true,\n\n  // به جای خطای عمومی ECONNABORTED، خطای ETIMEDOUT را هنگام پایان زمان درخواست پرتاب کن\n  clarifyTimeoutError: false,\n},\n\nenv: {\n  // کلاسی که برای سریال‌سازی خودکار payload به شی FormData استفاده می‌شود\n  FormData: window?.FormData || global?.FormData\n},\n\nformSerializer: {\n    visitor: (value, key, path, helpers) => {}, // تابع ویزیتور سفارشی برای سریال‌سازی مقادیر فرم\n    dots: boolean; // استفاده از نقطه به جای فرمت براکت\n    metaTokens: boolean; // نگه داشتن پایان‌های خاص مانند {} در کلید پارامتر\n    indexes: boolean; // فرمت اندیس آرایه null - بدون براکت، false - براکت خالی، true - براکت با اندیس‌ها\n},\n\n// فقط برای آداپتور http (node.js)\nmaxRate: [\n  100 * 1024, // محدودیت آپلود 100 کیلوبایت بر ثانیه،\n  100 * 1024  // محدودیت دانلود 100 کیلوبایت بر ثانیه\n]\n}\n```\n\n## ساختار پاسخ (Response Schema)\n\nپاسخ یک درخواست شامل اطلاعات زیر است.\n\n```js\n{\n  // `data` پاسخی است که توسط سرور ارائه شده است\n  data: {},\n\n  // `status` کد وضعیت HTTP از پاسخ سرور است\n  status: 200,\n\n  // `statusText` پیام وضعیت HTTP از پاسخ سرور است\n  statusText: 'OK',\n\n  // `headers` هدرهای HTTP هستند که سرور با آن‌ها پاسخ داده است\n  // همه نام‌های هدر با حروف کوچک هستند و می‌توان با نماد براکت به آن‌ها دسترسی داشت.\n  // مثال: `response.headers['content-type']`\n  headers: {},\n\n  // `config` پیکربندی است که به `axios` برای درخواست داده شده است\n  config: {},\n\n  // `request` درخواستی است که این پاسخ را تولید کرده است\n  // آخرین نمونه ClientRequest در node.js (در ریدایرکت‌ها)\n  // و یک نمونه XMLHttpRequest در مرورگر است\n  request: {}\n}\n```\n\nهنگام استفاده از `then`، پاسخ را به صورت زیر دریافت خواهید کرد:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nهنگام استفاده از `catch` یا ارسال یک [کال‌بک رد شدن](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) به عنوان پارامتر دوم `then`، پاسخ از طریق شیء `error` همانطور که در بخش [مدیریت خطاها](#handling-errors) توضیح داده شده، در دسترس خواهد بود.\n\n## مقادیر پیش‌فرض پیکربندی (Config Defaults)\n\nشما می‌توانید مقادیر پیش‌فرض پیکربندی را مشخص کنید که برای هر درخواست اعمال می‌شوند.\n\n### پیش‌فرض‌های سراسری axios\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// مهم: اگر axios با چندین دامنه استفاده شود، AUTH_TOKEN به همه آن‌ها ارسال خواهد شد.\n// برای مثال استفاده از پیش‌فرض‌های نمونه سفارشی به مثال زیر مراجعه کنید.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### پیش‌فرض‌های نمونه سفارشی\n```",
  "status": "ok"
}