{
  "id": 10,
  "origin": "  });\n```\n\n## Cancellation\n\n### AbortController\n\nStarting from `v0.22.0` Axios supports AbortController to cancel requests in fetch API way:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n### CancelToken `👎deprecated`\n\nYou can also cancel a request using a *CancelToken*.\n\n> The axios cancel token API is based on the withdrawn [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\n> This API is deprecated since v0.22.0 and shouldn't be used in new projects\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> **Note:** you can cancel several requests with the same cancel token/abort controller.\n> If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.\n\n> During the transition period, you can use both cancellation APIs, even for the same request:\n\n## Using `application/x-www-form-urlencoded` format\n\n### URLSearchParams\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the [`application/x-www-form-urlencoded` format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) instead, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API, which is [supported](http://www.caniuse.com/#feat=urlsearchparams) in the vast majority of browsers,and [ Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) starting with v10 (released in 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Older browsers)\n\nFor compatibility with very old browsers, there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n",
  "origin_sha": "VxjhD9ljiSwD1HApECbz1lsvUZyJrgZ3cDJoBGagQ8E=",
  "translate": "```markdown\n  });\n```\n\n## 요청 취소\n\n### AbortController\n\n`v0.22.0`부터 Axios는 fetch API 방식으로 요청을 취소할 수 있도록 AbortController를 지원합니다:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// 요청 취소\ncontroller.abort()\n```\n\n### CancelToken `👎deprecated`\n\n*CancelToken*을 사용하여 요청을 취소할 수도 있습니다.\n\n> axios cancel token API는 철회된 [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises)을 기반으로 합니다.\n\n> 이 API는 v0.22.0부터 deprecated 되었으며, 신규 프로젝트에서는 사용하지 않는 것이 좋습니다.\n\n다음과 같이 `CancelToken.source` 팩토리를 사용하여 cancel token을 생성할 수 있습니다:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // 에러 처리\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// 요청 취소 (message 파라미터는 선택 사항)\nsource.cancel('Operation canceled by the user.');\n```\n\n`CancelToken` 생성자에 executor 함수를 전달하여 cancel token을 만들 수도 있습니다:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // executor 함수는 cancel 함수를 파라미터로 받습니다\n    cancel = c;\n  })\n});\n\n// 요청 취소\ncancel();\n```\n\n> **참고:** 동일한 cancel token/abort controller로 여러 요청을 취소할 수 있습니다.\n> Axios 요청 시작 시점에 취소 토큰이 이미 취소된 상태라면, 실제 요청 시도 없이 즉시 취소됩니다.\n\n> 전환 기간 동안 두 가지 취소 API를 동시에, 심지어 동일한 요청에 대해서도 사용할 수 있습니다:\n\n## `application/x-www-form-urlencoded` 포맷 사용\n\n### URLSearchParams\n\n기본적으로 axios는 자바스크립트 객체를 `JSON`으로 직렬화합니다. [`application/x-www-form-urlencoded` 포맷](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)으로 데이터를 전송하려면, 대부분의 브라우저와 [Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) v10(2018년 출시) 이상에서 지원되는 [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API를 사용할 수 있습니다.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### 쿼리 문자열 (구형 브라우저)\n\n매우 구형 브라우저와의 호환성을 위해 [polyfill](https://github.com/WebReflection/url-search-params)이 제공됩니다(글로벌 환경에 polyfill을 적용해야 합니다).\n\n또는, [`qs`](https://github.com/ljharb/qs) 라이브러리를 사용하여 데이터를 인코딩할 수도 있습니다:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n```",
  "status": "ok"
}