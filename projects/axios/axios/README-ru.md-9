{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Примечание:** параметр options (содержащий свойства `synchronous` и `runWhen`) в данный момент поддерживается только для запросных перехватчиков.\n\n### Несколько перехватчиков\n\nЕсли вы добавляете несколько перехватчиков ответа\nи когда ответ был успешно получен\n- тогда каждый перехватчик выполняется\n- затем они выполняются в том порядке, в каком были добавлены\n- затем возвращается только результат последнего перехватчика\n- затем каждый перехватчик получает результат своего предшественника\n- и если перехватчик-обработчик успешного ответа выбрасывает исключение\n    - следующий обработчик успешного ответа не вызывается\n    - затем вызывается следующий обработчик ошибки\n    - после обработки исключения опять вызывается следующий обработчик успешного ответа (аналогично цепочке промисов).\n\nПосмотрите [тесты перехватчиков](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js), чтобы увидеть всё это в коде.\n\n## Типы ошибок\n\nСуществует множество различных сообщений об ошибках axios, которые могут предоставить основную информацию о деталях ошибки и потенциальных возможностях для отладки.\n\nОбщая структура ошибок axios выглядит следующим образом:\n| Свойство  | Описание  |\n| -------- | ----------  |\n| message  | Краткое описание сообщения об ошибке и статус, с которым произошёл сбой. |\n| name     | Определяет, откуда возникла ошибка. Для axios всегда будет 'AxiosError'. |\n| stack    | Содержит трассировку стека ошибки. | \n| config   | Объект конфигурации axios с конкретными настройками экземпляра, определёнными пользователем при выполнении запроса |\n| code     | Представляет идентифицированную axios ошибку. В таблице ниже приведены конкретные определения внутренних ошибок axios.  |\n| status   | Код состояния HTTP-ответа. См. [здесь](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) значения распространённых кодов состояния HTTP. \n\nНиже приведён список возможных ошибок, идентифицированных axios:\n\n| Код                      | Описание                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Указано недопустимое значение в конфигурации axios.                                                                                                                                                                                                                                                                                                                                         |\n| ERR_BAD_OPTION            | Указана недопустимая опция в конфигурации axios.                                                                                                                                                                                                                                                                                                                                            |\n| ERR_NOT_SUPPORT           | Функция или метод не поддерживаются в текущем окружении axios.                                                                                                                                                                                                                                                                                                                             |\n| ERR_DEPRECATED            | Использована устаревшая функция или метод в axios.                                                                                                                                                                                                                                                                                                                                          |\n| ERR_INVALID_URL           | Указан некорректный URL для запроса axios.                                                                                                                                                                                                                                                                                                                                                  |\n| ECONNABORTED              | Обычно указывает, что запрос был прерван по тайм-ауту (если не установлен `transitional.clarifyTimeoutError`), либо был прерван браузером или его плагином.                                                                                                                                                                                                                                |\n| ERR_CANCELED              | Функция или метод явно отменены пользователем с помощью AbortSignal (или CancelToken).                                                                                                                                                                                                                                                               |\n| ETIMEDOUT                 | Запрос прерван по тайм-ауту из-за превышения лимита времени по умолчанию в axios. Для этого должна быть установлена опция `transitional.clarifyTimeoutError` в значение `true`, иначе будет выброшена стандартная ошибка `ECONNABORTED`.                                                                                                            |\n| ERR_NETWORK               | Проблема, связанная с сетью. В браузере эта ошибка также может быть вызвана нарушением [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) или [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) политики. Браузер не позволяет JS-коду уточнить причину ошибки, связанной с проблемами безопасности, поэтому проверьте консоль. |\n| ERR_FR_TOO_MANY_REDIRECTS | Запрос был переадресован слишком много раз; превышено максимальное количество редиректов, указанное в конфигурации axios.                                                                                                                                                                                                                                                                   |\n| ERR_BAD_RESPONSE          | Ответ не может быть корректно разобран или находится в неожиданном формате. Обычно связано с ответом со статусом `5xx`.                                                                                                                                                                                                                                                                     |\n| ERR_BAD_REQUEST           | Запрос имеет неожиданную структуру или отсутствуют необходимые параметры. Обычно связано с ответом со статусом `4xx`.                                                                                                                                                                                                                                |\n\n## Обработка ошибок\n\nПо умолчанию каждый ответ с кодом состояния вне диапазона 2xx отклоняется и обрабатывается как ошибка.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // Запрос был выполнен, и сервер ответил с кодом состояния,\n      // который выходит за пределы диапазона 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // Запрос был отправлен, но ответа не получено\n      // `error.request` — это экземпляр XMLHttpRequest в браузере и экземпляр\n      // http.ClientRequest в node.js\n      console.log(error.request);\n    } else {\n      // Произошла ошибка при настройке запроса\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nИспользуя опцию конфигурации `validateStatus`, вы можете переопределить стандартное условие (status >= 200 && status < 300) и определить HTTP-коды, при которых будет выбрасываться ошибка.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Резолвить только если код состояния меньше 500\n  }\n})\n```\n\nИспользуя `toJSON`, вы получите объект с дополнительной информацией об HTTP-ошибке.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}