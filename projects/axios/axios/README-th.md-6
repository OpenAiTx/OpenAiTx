{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // ทำอะไรก็ได้กับเหตุการณ์ความคืบหน้า (progress event) ของ Axios\n  },\n\n  // `onDownloadProgress` อนุญาตให้จัดการเหตุการณ์ความคืบหน้าสำหรับการดาวน์โหลด\n  // ทั้งในเบราว์เซอร์และ node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // ทำอะไรก็ได้กับเหตุการณ์ความคืบหน้า (progress event) ของ Axios\n  },\n\n  // `maxContentLength` กำหนดขนาดสูงสุดของเนื้อหา response HTTP ที่อนุญาต (หน่วยเป็นไบต์) ใน node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (เฉพาะ Node) กำหนดขนาดสูงสุดของเนื้อหา request HTTP ที่อนุญาต (หน่วยเป็นไบต์)\n  maxBodyLength: 2000,\n\n  // `validateStatus` กำหนดว่าจะ resolve หรือ reject คำสัญญา (promise) สำหรับ\n  // HTTP response status code ที่กำหนด หาก `validateStatus` คืนค่า `true` (หรือถูกตั้งเป็น `null`\n  // หรือ `undefined`) คำสัญญาจะถูก resolve; หากไม่ใช่ คำสัญญาจะถูก reject\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // ค่าเริ่มต้น\n  },\n\n  // `maxRedirects` กำหนดจำนวนการ redirect สูงสุดที่จะตามไปใน node.js\n  // หากตั้งเป็น 0 จะไม่มีการตาม redirect ใดๆ\n  maxRedirects: 21, // ค่าเริ่มต้น\n\n  // `beforeRedirect` กำหนดฟังก์ชันที่จะถูกเรียกก่อน redirect\n  // ใช้ปรับแต่ง options ของ request ระหว่าง redirect,\n  // ตรวจสอบ header ล่าสุดของ response,\n  // หรือยกเลิก request โดยการ throw error\n  // หาก maxRedirects ตั้งเป็น 0 `beforeRedirect` จะไม่ถูกใช้\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` กำหนด UNIX Socket ที่จะใช้ใน node.js\n  // เช่น '/var/run/docker.sock' เพื่อส่ง request ไปยัง docker daemon\n  // จะสามารถกำหนดได้แค่ `socketPath` หรือ `proxy` อย่างใดอย่างหนึ่ง\n  // หากกำหนดทั้งสอง จะใช้ `socketPath`\n  socketPath: null, // ค่าเริ่มต้น\n  \n  // `transport` กำหนดวิธีการส่งข้อมูลที่ใช้ในการร้องขอ\n  // หากกำหนดไว้จะถูกใช้ ถ้าไม่กำหนดและ `maxRedirects` เป็น 0\n  // จะใช้ไลบรารี `http` หรือ `https` ตาม protocol ที่ระบุใน `protocol`\n  // หากไม่ใช่ จะใช้ไลบรารี `httpFollow` หรือ `httpsFollow` ตาม protocol,\n  // ซึ่งสามารถจัดการ redirect ได้\n  transport: undefined, // ค่าเริ่มต้น\n\n  // `httpAgent` และ `httpsAgent` กำหนด agent แบบกำหนดเองสำหรับ http\n  // และ https ตามลำดับใน node.js ช่วยให้สามารถเพิ่ม options เช่น\n  // `keepAlive` ที่ไม่ได้เปิดใช้งานโดยค่าเริ่มต้นก่อน Node.js v19.0.0 หลังจาก Node.js\n  // v19.0.0 ไม่จำเป็นต้องปรับแต่ง agent เพื่อเปิด `keepAlive` อีกต่อไปเพราะ\n  // `http.globalAgent` เปิด `keepAlive` โดยค่าเริ่มต้นแล้ว\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` กำหนดชื่อโฮสต์, พอร์ต, และ protocol ของ proxy server\n  // สามารถกำหนด proxy ด้วยตัวแปรแวดล้อมมาตรฐาน `http_proxy` และ\n  // `https_proxy` ได้ หากใช้ตัวแปรแวดล้อมกำหนด proxy,\n  // สามารถกำหนด `no_proxy` เป็นลิสต์โดเมนที่ไม่ต้องใช้ proxy (คั่นด้วย comma)\n  // ใช้ `false` เพื่อปิด proxy และไม่สนใจตัวแปรแวดล้อม\n  // `auth` บ่งบอกว่าควรใช้ HTTP Basic auth ในการเชื่อมต่อ proxy และ\n  // กำหนดข้อมูลเข้าสู่ระบบ\n  // จะตั้งค่า header `Proxy-Authorization` ซึ่งจะเขียนทับ header\n  // `Proxy-Authorization` แบบ custom ที่ตั้งไว้ใน `headers`\n  // หาก proxy server ใช้ HTTPS ต้องตั้ง protocol เป็น `https`\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // จะมีลำดับความสำคัญเหนือ 'host' หากกำหนดทั้งสอง\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` ระบุ cancel token ที่สามารถใช้ในการยกเลิก request\n  // (ดูรายละเอียดที่หัวข้อ Cancellation ด้านล่าง)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // อีกวิธีหนึ่งในการยกเลิก Axios requests โดยใช้ AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` ระบุว่าควรจะคลายบีบอัด response body อัตโนมัติหรือไม่\n  // ถ้าตั้งเป็น `true` จะลบ header 'content-encoding'\n  // ออกจาก response object ของทุก response ที่ถูกคลายบีบอัด\n  // - ใช้ได้เฉพาะ Node (XHR ไม่สามารถปิดการคลายบีบอัดได้)\n  decompress: true, // ค่าเริ่มต้น\n\n  // `insecureHTTPParser` เป็น boolean\n  // ระบุว่าจะใช้ HTTP parser แบบไม่ปลอดภัยที่ยอมรับ HTTP headers ที่ไม่ถูกต้องหรือไม่\n  // ซึ่งอาจช่วยให้สามารถทำงานร่วมกับ HTTP implementation ที่ไม่เป็นไปตามมาตรฐานได้\n  // ไม่ควรใช้ parser ที่ไม่ปลอดภัยนี้\n  // ดู options ได้ที่ https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}