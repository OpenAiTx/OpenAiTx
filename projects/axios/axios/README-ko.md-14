{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "```js\n      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // 다운로드 속도 (바이트 단위)\n      download: true; // 다운로드 표시\n    }*/\n  }\n});  \n```\n\nNode.js에서 스트림 업로드/다운로드 진행 상황도 추적할 수 있습니다:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // 전체 스트림 버퍼링 방지\n});\n````\n\n> **참고:**\n> FormData 업로드 진행 상황 캡처는 현재 node.js 환경에서는 지원되지 않습니다.\n\n> **⚠️ 경고**\n> **node.js** 환경에서 스트림 업로드 시 maxRedirects: 0으로 리다이렉트 비활성화를 권장합니다.\n> follow-redirects 패키지는 \"backpressure\" 알고리즘을 따르지 않고 전체 스트림을 RAM에 버퍼링하기 때문입니다.\n\n\n## 🆕 속도 제한 (Rate limiting)\n\n다운로드 및 업로드 속도 제한은 오직 http 어댑터(node.js)에서만 설정할 수 있습니다:\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`업로드 [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s 제한\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios는 Map과 유사한 API를 사용하여 헤더를 조작할 수 있는 자체 `AxiosHeaders` 클래스를 제공합니다. 이는 대소문자 구분 없이 동작함을 보장합니다.\nHTTP는 헤더에서 대소문자를 구분하지 않지만, Axios는 원본 헤더의 대소문자를 스타일상 이유와 서버가 헤더의 대소문자를 잘못 처리하는 경우에 대비하여 유지합니다.\n헤더 객체를 직접 조작하는 이전 방식도 여전히 사용할 수 있지만, 이는 더 이상 권장되지 않으며 앞으로는 사용이 중단될 예정입니다.\n\n### 헤더 다루기\n\nAxiosHeaders 객체 인스턴스는 설정 및 병합 로직을 제어하는 다양한 유형의 내부 값을 가질 수 있습니다.\n최종적으로 Axios가 `toJSON` 메서드를 호출하여 문자열 값만 포함하는 헤더 객체를 얻습니다.\n\n> 참고: 여기서 JSON이란 네트워크 전송을 위해 오직 문자열 값만을 가지는 객체를 의미합니다.\n\n헤더 값은 다음 중 하나일 수 있습니다:\n- `string` - 서버로 전송될 일반 문자열 값\n- `null` - JSON으로 렌더링 시 헤더 제외\n- `false` - JSON으로 렌더링 시 헤더 제외, 또한 `set` 메서드 호출 시 `rewrite` 옵션을 true로 지정해야만 이 값을 덮어쓸 수 있음을 의미\n  (Axios는 내부적으로 사용자가 `User-Agent`나 `Content-Type`과 같은 특정 헤더의 자동 설치를 선택 해제할 수 있도록 이 값을 사용)\n- `undefined` - 값이 설정되지 않음\n\n> 참고: 헤더 값이 undefined가 아니면 설정된 것으로 간주합니다.\n\n헤더 객체는 항상 인터셉터 및 트랜스포머 내부에서 초기화됩니다:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // 이후 Axios가 해당 헤더를 설정하지 않도록 비활성화\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // 직접 접근은 더 이상 권장되지 않음\n    \n      return request;\n    }\n  );\n````\n\n`for...of` 문을 사용하여 `AxiosHeaders` 인스턴스를 순회할 수 있습니다:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',\n```",
  "status": "ok"
}