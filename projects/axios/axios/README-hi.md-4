{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// node.js में रिमोट इमेज के लिए GET अनुरोध\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// एक GET अनुरोध भेजें (डिफ़ॉल्ट विधि)\naxios('/user/12345');\n```\n\n### अनुरोध विधि उपनाम\n\nसुविधा के लिए, सभी सामान्य अनुरोध विधियों के लिए उपनाम प्रदान किए गए हैं।\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### नोट\nजब उपनाम विधियों का उपयोग करते हैं, तो `url`, `method`, और `data` प्रॉपर्टीज़ को config में निर्दिष्ट करने की आवश्यकता नहीं है।\n\n### कंकरेंसी (अप्रचलित)\nकृपया नीचे दी गई फ़ंक्शनों को बदलने के लिए `Promise.all` का उपयोग करें।\n\nसमानांतर अनुरोधों से निपटने के लिए सहायक फ़ंक्शन्स।\n\naxios.all(iterable)\naxios.spread(callback)\n\n### एक इंस्टेंस बनाना\n\nआप कस्टम config के साथ axios का एक नया इंस्टेंस बना सकते हैं।\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### इंस्टेंस विधियाँ\n\nउपलब्ध इंस्टेंस विधियाँ नीचे सूचीबद्ध हैं। निर्दिष्ट config को इंस्टेंस config के साथ मर्ज किया जाएगा।\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## अनुरोध कॉन्फ़िग\n\nये अनुरोध भेजने के लिए उपलब्ध config विकल्प हैं। केवल `url` आवश्यक है। यदि `method` निर्दिष्ट नहीं है तो अनुरोध डिफ़ॉल्ट रूप से `GET` होगा।\n\n```js\n{\n  // `url` वह सर्वर URL है जिसका उपयोग अनुरोध के लिए किया जाएगा\n  url: '/user',\n\n  // `method` वह अनुरोध विधि है जिसका उपयोग अनुरोध भेजने के लिए किया जाएगा\n  method: 'get', // डिफ़ॉल्ट\n\n  // `baseURL` को `url` से पहले जोड़ा जाएगा जब तक कि `url` पूर्ण न हो और विकल्प `allowAbsoluteUrls` true पर सेट न हो।\n  // किसी axios इंस्टेंस के लिए `baseURL` सेट करना सुविधाजनक हो सकता है ताकि उस इंस्टेंस के तरीकों को सापेक्ष URL पास किए जा सकें।\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` निर्धारित करता है कि पूर्ण URL एक कॉन्फ़िगर किए गए `baseUrl` को ओवरराइड करेंगे या नहीं।\n  // जब true (डिफ़ॉल्ट) पर सेट किया जाता है, तो `url` के पूर्ण मान `baseUrl` को ओवरराइड कर देंगे।\n  // जब false पर सेट किया जाता है, तो `url` के पूर्ण मान हमेशा `baseUrl` के द्वारा जोड़े जाएंगे।\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` अनुरोध डेटा में परिवर्तन की अनुमति देता है, इससे पहले कि वह सर्वर को भेजा जाए\n  // यह केवल 'PUT', 'POST', 'PATCH' और 'DELETE' अनुरोध विधियों के लिए लागू है\n  // एरे में अंतिम फ़ंक्शन को एक string या Buffer, ArrayBuffer, FormData या Stream का इंस्टेंस लौटाना चाहिए\n  // आप headers ऑब्जेक्ट को संशोधित कर सकते हैं।\n  transformRequest: [function (data, headers) {\n    // डेटा को बदलने के लिए जो भी करना हो करें\n```",
  "status": "ok"
}