{
  "id": 17,
  "origin": "\n- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## üî• Fetch adapter\n\nFetch adapter was introduced in `v1.7.0`. By default, it will be used if `xhr` and `http` adapters are not available in the build,\nor not supported by the environment.\nTo use it by default, it must be selected explicitly:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n```\n\nYou can create a separate instance for this:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nThe adapter supports the same functionality as `xhr` adapter, **including upload and download progress capturing**. \nAlso, it supports additional response types such as `stream` and `formdata` (if supported by the environment).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can‚Äôt use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
  "origin_sha": "8FbNY1vCeM4hh6k64ciq5CmkW/Tv4xbnq5/eUDawacA=",
  "translate": "- `setContentEncoding`, `getContentEncoding`, `hasContentEncoding`\n\n## üî• Adapter Fetch\n\nL'adapter Fetch √® stato introdotto nella versione `v1.7.0`. Per impostazione predefinita, verr√† utilizzato se gli adapter `xhr` e `http` non sono disponibili nella build,\no non sono supportati dall'ambiente.\nPer usarlo come predefinito, deve essere selezionato esplicitamente:\n\n```js\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // di default ['xhr', 'http', 'fetch']\n})\n```\n\nPuoi creare un'istanza separata per questo:\n\n```js\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\nL'adapter supporta la stessa funzionalit√† dell'adapter `xhr`, **inclusa la cattura del progresso di upload e download**.\nInoltre, supporta tipi di risposta aggiuntivi come `stream` e `formdata` (se supportati dall'ambiente).\n\n## Semver\n\nFino a quando axios non raggiunger√† una release `1.0`, i cambiamenti che rompono la retrocompatibilit√† saranno rilasciati con una nuova versione minor. Ad esempio, `0.5.1` e `0.5.4` avranno la stessa API, ma `0.6.0` introdurr√† cambiamenti incompatibili.\n\n## Promesse\n\naxios dipende da un'implementazione nativa delle Promesse ES6 per essere [supportato](https://caniuse.com/promises).\nSe il tuo ambiente non supporta le Promesse ES6, puoi utilizzare un [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios include le definizioni [TypeScript](https://typescriptlang.org) e una type guard per gli errori axios.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nPoich√© axios pubblica sia con un export ESM di default che con un `module.exports` CJS, ci sono alcune particolarit√†.\nL'impostazione raccomandata √® usare `\"moduleResolution\": \"node16\"` (questo √® implicito con `\"module\": \"node16\"`). Nota che questo richiede TypeScript 4.7 o superiore.\nSe usi ESM, le tue impostazioni dovrebbero andare bene.\nSe compili TypeScript in CJS e non puoi usare `\"moduleResolution\": \"node16\"`, devi abilitare `esModuleInterop`.\nSe usi TypeScript per fare il type checking di codice JavaScript CJS, la tua unica opzione √® usare `\"moduleResolution\": \"node16\"`.\n\n## Configurazione online one-click\n\nPuoi usare Gitpod, un IDE online (che √® gratuito per l'Open Source) per contribuire o eseguire gli esempi online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Risorse\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosistema](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Guida per contribuire](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Codice di Condotta](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Crediti\n\naxios √® fortemente ispirato al [$http service](https://docs.angularjs.org/api/ng/service/$http) fornito in [AngularJS](https://angularjs.org/). In definitiva, axios √® uno sforzo per fornire un servizio `$http` indipendente da utilizzare al di fuori di AngularJS.\n\n## Licenza\n\n[MIT](LICENSE)\n",
  "status": "ok"
}