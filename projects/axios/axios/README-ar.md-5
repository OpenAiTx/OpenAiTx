{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "    return data;\n  }],\n\n  // يسمح `transformResponse` بإجراء تغييرات على بيانات الاستجابة قبل\n  // تمريرها إلى then/catch\n  transformResponse: [function (data) {\n    // يمكنك تنفيذ أي تحويل تريده للبيانات\n\n    return data;\n  }],\n\n  // `headers` هي رؤوس مخصصة ليتم إرسالها\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` هي معلمات عنوان URL التي سيتم إرسالها مع الطلب\n  // يجب أن تكون كائن عادي أو كائن URLSearchParams\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` هو إعداد اختياري يسمح لك بتخصيص تسلسل `params`.\n  paramsSerializer: {\n\n    // دالة تشفير مخصصة ترسل أزواج المفتاح/القيمة بشكل تكراري.\n    encode?: (param: string): string => { /* قم بالعمليات المخصصة هنا وأرجع السلسلة المحولة */ }, \n    \n    // دالة تسلسل مخصصة للمعامل بالكامل. تسمح للمستخدم بمحاكاة سلوك ما قبل الإصدار 1.x.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // إعداد لتنسيق فهارس المصفوفة في المعاملات.\n    indexes: false // هناك ثلاث خيارات متاحة: (1) indexes: null (يؤدي إلى عدم وجود أقواس)، (2) (الافتراضي) indexes: false (يؤدي إلى أقواس فارغة)، (3) indexes: true (يؤدي إلى أقواس مع الفهارس).    \n  },\n\n  // `data` هي البيانات التي سيتم إرسالها كجسم الطلب\n  // ينطبق فقط على طرق الطلب 'PUT' و 'POST' و 'DELETE' و 'PATCH'\n  // عند عدم تعيين `transformRequest` يجب أن تكون من أحد الأنواع التالية:\n  // - سلسلة نصية، كائن عادي، ArrayBuffer، ArrayBufferView، URLSearchParams\n  // - للمتصفح فقط: FormData، File، Blob\n  // - لـ Node فقط: Stream، Buffer، FormData (حزمة form-data)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // بديل تركيبي لإرسال البيانات في الجسم\n  // طريقة post\n  // يتم إرسال القيمة فقط، وليس المفتاح\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` يحدد عدد المللي ثانية قبل انتهاء مهلة الطلب.\n  // إذا استغرق الطلب وقتاً أطول من `timeout`، سيتم إلغاء الطلب.\n  timeout: 1000, // الافتراضي هو `0` (بدون مهلة)\n\n  // `withCredentials` يحدد ما إذا كان يجب إجراء طلبات التحكم بالوصول عبر المواقع\n  // باستخدام بيانات الاعتماد أم لا\n  withCredentials: false, // الافتراضي\n\n  // `adapter` يسمح بمعالجة مخصصة للطلبات مما يجعل الاختبار أسهل.\n  // أرجع وعدًا وقم بتزويد استجابة صالحة (انظر lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // أيضًا، يمكنك تعيين اسم المحول المدمج، أو توفير مصفوفة بأسمائهم\n  // لاختيار أول متاح في البيئة\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` يشير إلى أنه يجب استخدام مصادقة HTTP Basic، ويزود بيانات الاعتماد.\n  // سيؤدي ذلك إلى تعيين رأس `Authorization`، متجاوزًا أي رؤوس مخصصة\n  // `Authorization` قمت بتعيينها باستخدام `headers`.\n  // يرجى ملاحظة أن مصادقة HTTP Basic فقط يمكن تكوينها من خلال هذا المعامل.\n  // بالنسبة لرموز Bearer وما شابه، استخدم رؤوس `Authorization` المخصصة بدلاً من ذلك.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` يشير إلى نوع البيانات التي سيستجيب بها الخادم\n  // الخيارات هي: 'arraybuffer'، 'document'، 'json'، 'text'، 'stream'\n  //   للمتصفح فقط: 'blob'\n  responseType: 'json', // الافتراضي\n\n  // `responseEncoding` يحدد الترميز المستخدم لفك تشفير الاستجابات (Node.js فقط)\n  // ملاحظة: يتم تجاهله لنوع `responseType` بالقيمة 'stream' أو لطلبات جانب العميل\n  // الخيارات هي: 'ascii'، 'ASCII'، 'ansi'، 'ANSI'، 'binary'، 'BINARY'، 'base64'، 'BASE64'، 'base64url'،\n  // 'BASE64URL'، 'hex'، 'HEX'، 'latin1'، 'LATIN1'، 'ucs-2'، 'UCS-2'، 'ucs2'، 'UCS2'، 'utf-8'، 'UTF-8',\n  // 'utf8'، 'UTF8'، 'utf16le'، 'UTF16LE'\n  responseEncoding: 'utf8', // الافتراضي\n\n  // `xsrfCookieName` هو اسم الكوكي الذي سيتم استخدامه كقيمة لرمز xsrf\n  xsrfCookieName: 'XSRF-TOKEN', // الافتراضي\n\n  // `xsrfHeaderName` هو اسم رأس http الذي يحمل قيمة رمز xsrf\n  xsrfHeaderName: 'X-XSRF-TOKEN', // الافتراضي\n    \n  // `undefined` (الافتراضي) - تعيين رأس XSRF فقط لطلبات نفس الأصل\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` يسمح بمعالجة أحداث التقدم للتحميلات\n  // المتصفح و node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "status": "ok"
}