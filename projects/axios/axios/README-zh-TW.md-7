{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```\n// 另請參閱 https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // 預設值\n\n  // 舊版本向下相容的過渡選項，未來版本可能會移除\n  transitional: {\n    // 靜默 JSON 解析模式\n    // `true`  - 忽略 JSON 解析錯誤，解析失敗時將 response.data 設為 null（舊行為）\n    // `false` - 若 JSON 解析失敗則拋出 SyntaxError（注意：responseType 必須設為 'json'）\n    silentJSONParsing: true, // 目前 Axios 版本的預設值\n\n    // 即使 `responseType` 不是 'json'，也嘗試將回應字串解析為 JSON\n    forcedJSONParsing: true,\n\n    // 請求逾時時，拋出 ETIMEDOUT 錯誤而非一般 ECONNABORTED\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // 用於自動將有效負載序列化成 FormData 物件的 FormData 類別\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}, // 自定義 visitor 函式用於序列化表單數值\n      dots: boolean, // 使用點號格式而非中括號格式\n      metaTokens: boolean, // 保留參數 key 的特殊結尾如 {}\n      indexes: boolean, // 陣列索引格式 null - 無括號, false - 空括號, true - 有索引的括號\n  },\n\n  // 僅限 http adapter（node.js）\n  maxRate: [\n    100 * 1024, // 上傳限制 100KB/s,\n    100 * 1024  // 下載限制 100KB/s\n  ]\n}\n```\n\n## 回應結構（Response Schema）\n\n一個請求的回應包含以下資訊。\n\n```js\n{\n  // `data` 是伺服器提供的回應內容\n  data: {},\n\n  // `status` 是伺服器回應的 HTTP 狀態碼\n  status: 200,\n\n  // `statusText` 是伺服器回應的 HTTP 狀態訊息\n  statusText: 'OK',\n\n  // `headers` 是伺服器回應的 HTTP 標頭\n  // 所有標頭名稱皆為小寫，可用方括號語法存取。\n  // 範例：`response.headers['content-type']`\n  headers: {},\n\n  // `config` 是傳遞給 `axios` 的請求設定\n  config: {},\n\n  // `request` 是產生此回應的請求\n  // 在 node.js（重定向時）為最後一個 ClientRequest 實例\n  // 在瀏覽器中則為 XMLHttpRequest 實例\n  request: {}\n}\n```\n\n當使用 `then` 時，你會收到如下的回應：\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\n當使用 `catch`，或在 `then` 的第二個參數傳入 [拒絕回呼函式（rejection callback）](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) 時，回應將可透過 `error` 物件取得，詳見[錯誤處理](#handling-errors)章節。\n\n## 設定預設值（Config Defaults）\n\n你可以指定套用於每個請求的預設設定。\n\n### 全域 axios 預設值\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// 重要：如果 axios 用於多個網域，AUTH_TOKEN 會被發送到所有網域。\n// 如需僅對特定網域發送，請參考下方自訂實例預設值的範例。\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### 自訂實例預設值\n```",
  "status": "ok"
}