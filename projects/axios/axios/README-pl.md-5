{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "```markdown\n    return data;\n  }],\n\n  // `transformResponse` pozwala na dokonanie zmian w danych odpowiedzi przed\n  // przekazaniem ich do then/catch\n  transformResponse: [function (data) {\n    // Wykonaj dowolne operacje, aby przekształcić dane\n\n    return data;\n  }],\n\n  // `headers` to niestandardowe nagłówki, które mają zostać wysłane\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` to parametry URL, które mają zostać wysłane wraz z żądaniem\n  // Musi to być zwykły obiekt lub obiekt URLSearchParams\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` to opcjonalna konfiguracja pozwalająca na dostosowanie serializacji `params`.\n  paramsSerializer: {\n\n    // Własna funkcja kodująca, która wysyła pary klucz/wartość w sposób iteracyjny.\n    encode?: (param: string): string => { /* Wykonaj własne operacje i zwróć przekształcony ciąg znaków */ }, \n    \n    // Własna funkcja serializująca dla całego parametru. Pozwala użytkownikowi na odwzorowanie zachowania sprzed wersji 1.x.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Konfiguracja formatu indeksowania tablic w parametrach.\n    indexes: false // Dostępne trzy opcje: (1) indexes: null (brak nawiasów), (2) (domyślnie) indexes: false (puste nawiasy), (3) indexes: true (nawiasy z indeksami).    \n  },\n\n  // `data` to dane, które mają zostać wysłane jako ciało żądania\n  // Dotyczy tylko metod żądania 'PUT', 'POST', 'DELETE' i 'PATCH'\n  // Gdy nie ustawiono `transformRequest`, musi to być jeden z następujących typów:\n  // - string, zwykły obiekt, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Tylko przeglądarka: FormData, File, Blob\n  // - Tylko Node: Stream, Buffer, FormData (pakiet form-data)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // alternatywna składnia do przesyłania danych w ciele żądania\n  // metoda post\n  // wysyłana jest tylko wartość, nie klucz\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` określa liczbę milisekund przed przekroczeniem czasu oczekiwania na żądanie.\n  // Jeśli żądanie trwa dłużej niż `timeout`, zostanie ono przerwane.\n  timeout: 1000, // domyślnie `0` (brak limitu czasu)\n\n  // `withCredentials` wskazuje, czy żądania cross-site Access-Control\n  // powinny być wykonywane z użyciem poświadczeń\n  withCredentials: false, // domyślnie\n\n  // `adapter` umożliwia niestandardową obsługę żądań, co ułatwia testowanie.\n  // Zwróć promise i podaj prawidłową odpowiedź (zobacz lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Możesz także ustawić nazwę wbudowanego adaptera lub przekazać tablicę z ich nazwami,\n  // aby wybrać pierwszy dostępny w danym środowisku\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` wskazuje, że należy użyć HTTP Basic auth i podaje dane uwierzytelniające.\n  // Ustawi to nagłówek `Authorization`, nadpisując wszelkie istniejące\n  // niestandardowe nagłówki `Authorization`, które ustawiłeś przy użyciu `headers`.\n  // Należy pamiętać, że przez ten parametr można skonfigurować tylko HTTP Basic auth.\n  // W przypadku tokenów Bearer i podobnych, użyj niestandardowych nagłówków `Authorization`.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` wskazuje typ danych, które serwer zwróci\n  // dostępne opcje: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   tylko przeglądarka: 'blob'\n  responseType: 'json', // domyślnie\n\n  // `responseEncoding` określa kodowanie używane do dekodowania odpowiedzi (tylko Node.js)\n  // Uwaga: Ignorowane dla `responseType` ustawionego na 'stream' lub żądań po stronie klienta\n  // dostępne opcje: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // domyślnie\n\n  // `xsrfCookieName` to nazwa ciasteczka używanego jako wartość tokena xsrf\n  xsrfCookieName: 'XSRF-TOKEN', // domyślnie\n\n  // `xsrfHeaderName` to nazwa nagłówka http przenoszącego wartość tokena xsrf\n  xsrfHeaderName: 'X-XSRF-TOKEN', // domyślnie\n    \n  // `undefined` (domyślnie) - ustaw nagłówek XSRF tylko dla żądań do tego samego pochodzenia\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` umożliwia obsługę zdarzeń postępu dla przesyłanych danych\n  // przeglądarka i node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {\n```",
  "status": "ok"
}