{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // Делайте что угодно с событием прогресса Axios\n  },\n\n  // `onDownloadProgress` позволяет обрабатывать события прогресса для загрузок\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Делайте что угодно с событием прогресса Axios\n  },\n\n  // `maxContentLength` определяет максимальный размер содержимого http-ответа в байтах, разрешённый в node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (только для Node) определяет максимальный размер содержимого http-запроса в байтах, разрешённый\n  maxBodyLength: 2000,\n\n  // `validateStatus` определяет, разрешать или отклонять промис для данного\n  // кода статуса HTTP-ответа. Если `validateStatus` возвращает `true` (или установлен в `null`\n  // или `undefined`), промис будет разрешён; иначе промис будет\n  // отклонён.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // по умолчанию\n  },\n\n  // `maxRedirects` определяет максимальное количество перенаправлений для следования в node.js.\n  // Если установлено в 0, перенаправления не будут выполняться.\n  maxRedirects: 21, // по умолчанию\n\n  // `beforeRedirect` определяет функцию, которая будет вызвана перед перенаправлением.\n  // Используйте это для изменения опций запроса при перенаправлении,\n  // для просмотра последних заголовков ответа,\n  // или для отмены запроса путём генерации ошибки\n  // Если maxRedirects установлен в 0, `beforeRedirect` не используется.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` определяет UNIX Socket, который будет использоваться в node.js.\n  // например, '/var/run/docker.sock' для отправки запросов к демону docker.\n  // Можно указать либо `socketPath`, либо `proxy`.\n  // Если указаны оба, используется `socketPath`.\n  socketPath: null, // по умолчанию\n  \n  // `transport` определяет транспортный метод, который будет использоваться для выполнения запроса.\n  // Если определён, будет использоваться он. Иначе, если `maxRedirects` равен 0,\n  // будет использоваться стандартная библиотека `http` или `https` в зависимости от протокола, указанного в `protocol`.\n  // В противном случае будет использоваться библиотека `httpFollow` или `httpsFollow` в зависимости от протокола,\n  // которые могут обрабатывать перенаправления.\n  transport: undefined, // по умолчанию\n\n  // `httpAgent` и `httpsAgent` определяют пользовательский агент, который будет использоваться при выполнении http\n  // и https-запросов соответственно в node.js. Это позволяет добавлять такие опции, как\n  // `keepAlive`, которые по умолчанию не включены до Node.js v19.0.0. После Node.js\n  // v19.0.0 больше не нужно настраивать агент для включения `keepAlive`, потому что\n  // `http.globalAgent` имеет `keepAlive` включённым по умолчанию.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` определяет имя хоста, порт и протокол прокси-сервера.\n  // Вы также можете определить свой прокси с помощью стандартных переменных окружения `http_proxy` и\n  // `https_proxy`. Если вы используете переменные окружения\n  // для конфигурации прокси, вы также можете определить переменную окружения `no_proxy`\n  // как список доменов через запятую, которые не должны проксироваться.\n  // Используйте `false` для отключения прокси, игнорируя переменные окружения.\n  // `auth` указывает, что для подключения к прокси должен использоваться HTTP Basic auth, и\n  // предоставляет учётные данные.\n  // Это установит заголовок `Proxy-Authorization`, перезаписывая все существующие\n  // пользовательские заголовки `Proxy-Authorization`, которые вы установили с помощью `headers`.\n  // Если прокси-сервер использует HTTPS, то необходимо установить протокол в `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // имеет приоритет над 'host', если оба определены\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` указывает токен отмены, который может быть использован для отмены запроса\n  // (см. раздел Отмена ниже для подробностей)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // альтернативный способ отмены запросов Axios с помощью AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` указывает, должен ли ответ автоматически декомпрессироваться.\n  // Если установлено в `true`, также будет удалён заголовок 'content-encoding'\n  // из объектов всех декомпрессированных ответов\n  // - только для Node (XHR не может отключить декомпрессию)\n  decompress: true, // по умолчанию\n\n  // `insecureHTTPParser` булево значение.\n  // Указывает, использовать ли незащищённый HTTP-парсер, который принимает некорректные HTTP-заголовки.\n  // Это может позволить взаимодействие с нестандартными HTTP-реализациями.\n  // Использование незащищённого парсера следует избегать.\n  // см. опции https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n```",
  "status": "ok"
}