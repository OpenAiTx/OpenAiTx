{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "```markdown\n    return data;\n  }],\n\n  // `transformResponse` permite realizar cambios en los datos de respuesta antes\n  // de que se pasen a then/catch\n  transformResponse: [function (data) {\n    // Haz lo que quieras para transformar los datos\n\n    return data;\n  }],\n\n  // `headers` son encabezados personalizados que se enviarán\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` son los parámetros de URL que se enviarán con la solicitud\n  // Debe ser un objeto simple o un objeto URLSearchParams\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` es una configuración opcional que permite personalizar la serialización de `params`. \n  paramsSerializer: {\n\n    // Función codificadora personalizada que envía los pares clave/valor de forma iterativa.\n    encode?: (param: string): string => { /* Realiza operaciones personalizadas aquí y retorna la cadena transformada */ }, \n    \n    // Función de serialización personalizada para todo el parámetro. Permite al usuario imitar el comportamiento previo a la versión 1.x.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuración para el formato de los índices de los arreglos en los params. \n    indexes: false // Tres opciones disponibles: (1) indexes: null (no pone corchetes), (2) (predeterminado) indexes: false (corchetes vacíos), (3) indexes: true (corchetes con índices).    \n  },\n\n  // `data` son los datos que se enviarán como cuerpo de la solicitud\n  // Solo aplicable para los métodos de solicitud 'PUT', 'POST', 'DELETE' y 'PATCH'\n  // Cuando no se define `transformRequest`, debe ser de uno de los siguientes tipos:\n  // - string, objeto simple, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Solo navegador: FormData, File, Blob\n  // - Solo Node: Stream, Buffer, FormData (paquete form-data)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // sintaxis alternativa para enviar datos en el cuerpo\n  // método post\n  // solo se envía el valor, no la clave\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` especifica el número de milisegundos antes de que la solicitud agote el tiempo de espera.\n  // Si la solicitud tarda más que `timeout`, la solicitud será abortada.\n  timeout: 1000, // el valor predeterminado es `0` (sin límite de tiempo)\n\n  // `withCredentials` indica si las solicitudes cross-site Access-Control\n  // deben realizarse usando credenciales\n  withCredentials: false, // predeterminado\n\n  // `adapter` permite el manejo personalizado de las solicitudes, lo que facilita las pruebas.\n  // Retorna una promesa y proporciona una respuesta válida (ver lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Además, puedes establecer el nombre del adaptador incorporado, o proporcionar un arreglo con sus nombres\n  // para elegir el primero disponible en el entorno\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indica que se debe usar autenticación básica HTTP y proporciona credenciales.\n  // Esto establecerá un encabezado `Authorization`, sobrescribiendo cualquier encabezado\n  // `Authorization` personalizado que hayas establecido usando `headers`.\n  // Ten en cuenta que solo la autenticación básica HTTP es configurable a través de este parámetro.\n  // Para tokens Bearer y similares, utiliza encabezados personalizados `Authorization` en su lugar.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indica el tipo de datos que responderá el servidor\n  // las opciones son: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   solo navegador: 'blob'\n  responseType: 'json', // predeterminado\n\n  // `responseEncoding` indica la codificación a usar para decodificar respuestas (solo Node.js)\n  // Nota: Se ignora para `responseType` de 'stream' o solicitudes del lado del cliente\n  // las opciones son: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // predeterminado\n\n  // `xsrfCookieName` es el nombre de la cookie que se usará como valor para el token xsrf\n  xsrfCookieName: 'XSRF-TOKEN', // predeterminado\n\n  // `xsrfHeaderName` es el nombre del encabezado http que transporta el valor del token xsrf\n  xsrfHeaderName: 'X-XSRF-TOKEN', // predeterminado\n    \n  // `undefined` (predeterminado) - establece el encabezado XSRF solo para solicitudes del mismo origen\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` permite manejar eventos de progreso para cargas\n  // navegador y node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {\n```",
  "status": "ok"
}