{
  "id": 11,
  "origin": "Or in another way (ES6),\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### Older Node.js versions\n\nFor older Node.js engines, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nconst querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\n\n> **Note**: The `qs` library is preferable if you need to stringify nested objects, as the `querystring` method has [known issues](https://github.com/nodejs/node-v0.x-archive/issues/1665) with that use case.\n\n### ğŸ†• Automatic serialization to URLSearchParams\n\nAxios will automatically serialize the data object to urlencoded format if the content-type header is set to \"application/x-www-form-urlencoded\".\n\n```js\nconst data = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n};\n\nawait axios.postForm('https://postman-echo.com/post', data,\n  {headers: {'content-type': 'application/x-www-form-urlencoded'}}\n);\n```\n\nThe server will handle it as:\n\n```js\n  {\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }\n````\n\nIf your backend body-parser (like `body-parser` of `express.js`) supports nested objects decoding, you will get the same object on the server-side automatically\n\n```js\n  var app = express();\n\n  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies\n\n  app.post('/', function (req, res, next) {\n     // echo body as JSON\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);\n```\n\n## Using `multipart/form-data` format\n\n### FormData\n\nTo send the data as a `multipart/formdata` you need to pass a formData instance as a payload.\nSetting the `Content-Type` header is not required as Axios guesses it based on the payload type.\n\n```js\nconst formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);\n```\n\nIn node.js, you can use the [`form-data`](https://github.com/form-data/form-data) library as follows:\n\n```js\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n",
  "origin_sha": "j3Dr86fSugO8ALJ3tr12GuI6rpfVda40nuO2oD88Ids=",
  "translate": "Veya baÅŸka bir ÅŸekilde (ES6),\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### Eski Node.js sÃ¼rÃ¼mleri\n\nDaha eski Node.js motorlarÄ± iÃ§in, [`querystring`](https://nodejs.org/api/querystring.html) modÃ¼lÃ¼nÃ¼ ÅŸu ÅŸekilde kullanabilirsiniz:\n\n```js\nconst querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nAyrÄ±ca [`qs`](https://github.com/ljharb/qs) kÃ¼tÃ¼phanesini de kullanabilirsiniz.\n\n> **Not**: EÄŸer iÃ§ iÃ§e nesneleri dÃ¶nÃ¼ÅŸtÃ¼rmeniz gerekiyorsa, `qs` kÃ¼tÃ¼phanesi tercih edilmelidir, Ã§Ã¼nkÃ¼ `querystring` yÃ¶nteminin bu kullanÄ±mda [bilinen sorunlarÄ±](https://github.com/nodejs/node-v0.x-archive/issues/1665) vardÄ±r.\n\n### ğŸ†• URLSearchParams iÃ§in otomatik serileÅŸtirme\n\nAxios, eÄŸer content-type baÅŸlÄ±ÄŸÄ± \"application/x-www-form-urlencoded\" olarak ayarlanmÄ±ÅŸsa, data nesnesini otomatik olarak urlencoded formata serileÅŸtirir.\n\n```js\nconst data = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n};\n\nawait axios.postForm('https://postman-echo.com/post', data,\n  {headers: {'content-type': 'application/x-www-form-urlencoded'}}\n);\n```\n\nSunucu bunu ÅŸu ÅŸekilde ele alacaktÄ±r:\n\n```js\n  {\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }\n```\n\nEÄŸer arka uÃ§ta kullandÄ±ÄŸÄ±nÄ±z body-parser (Ã¶rneÄŸin `express.js`'in `body-parser`'Ä±) iÃ§ iÃ§e nesneleri Ã§Ã¶zebiliyorsa, sunucu tarafÄ±nda otomatik olarak aynÄ± nesneyi elde edersiniz\n\n```js\n  var app = express();\n\n  app.use(bodyParser.urlencoded({ extended: true })); // kodlanmÄ±ÅŸ gÃ¶vdeleri destekler\n\n  app.post('/', function (req, res, next) {\n     // gÃ¶vdeyi JSON olarak yansÄ±t\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);\n```\n\n## `multipart/form-data` formatÄ±nÄ± kullanma\n\n### FormData\n\nVeriyi `multipart/formdata` olarak gÃ¶ndermek iÃ§in payload olarak bir formData Ã¶rneÄŸi iletmeniz gerekir.\n`Content-Type` baÅŸlÄ±ÄŸÄ±nÄ± ayarlamanÄ±z gerekmez; Axios bunu payload tÃ¼rÃ¼ne gÃ¶re otomatik olarak belirler.\n\n```js\nconst formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);\n```\n\nNode.js'te [`form-data`](https://github.com/form-data/form-data) kÃ¼tÃ¼phanesini ÅŸu ÅŸekilde kullanabilirsiniz:\n\n```js\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n```",
  "status": "ok"
}