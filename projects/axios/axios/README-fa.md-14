{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "```js\n      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // سرعت دانلود بر حسب بایت\n      download: true; // علامت دانلود\n    }*/\n  }\n});  \n```\n\nهمچنین می‌توانید پیشرفت آپلود/دانلود جریان را در node.js پیگیری کنید:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // جلوگیری از بافر کردن کل جریان\n});\n````\n\n> **توجه:**\n> در حال حاضر گرفتن پیشرفت آپلود FormData در محیط‌های node.js پشتیبانی نمی‌شود.\n\n> **⚠️ هشدار**\n> توصیه می‌شود برای آپلود جریان در محیط **node.js**، با تنظیم maxRedirects: 0 ریدایرکت‌ها را غیرفعال کنید،\n> زیرا پکیج follow-redirects کل جریان را در RAM بافر می‌کند و الگوریتم \"backpressure\" را دنبال نمی‌کند.\n\n\n## 🆕 محدودیت نرخ (Rate limiting)\n\nمحدودیت‌های نرخ دانلود و آپلود فقط برای آداپتور http (node.js) قابل تنظیم است:\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`آپلود [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // محدودیت 100KB/s\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios کلاس اختصاصی `AxiosHeaders` را برای مدیریت هدرها با استفاده از API مشابه Map ارائه می‌دهد که کار بدون حساسیت به حروف را تضمین می‌کند.\nاگرچه HTTP در هدرها نسبت به حروف بزرگ و کوچک حساس نیست، اما Axios برای دلایل ظاهری و همچنین راهکاری برای مواقعی که سرور به اشتباه به حروف هدر حساسیت نشان می‌دهد، قالب اصلی هدر را حفظ می‌کند.\nروش قدیمی ویرایش مستقیم شیء headers همچنان در دسترس است اما منسوخ شده و توصیه نمی‌شود در آینده استفاده گردد.\n\n### کار با هدرها\n\nیک نمونه از شیء AxiosHeaders می‌تواند مقادیر داخلی مختلفی داشته باشد که منطق تنظیم و ادغام را کنترل می‌کند.\nشیء نهایی هدرها با مقادیر رشته‌ای توسط Axios با فراخوانی متد `toJSON` به دست می‌آید.\n\n> توجه: در اینجا منظور از JSON شیئی است که فقط شامل مقادیر رشته‌ای بوده و برای ارسال روی شبکه در نظر گرفته شده است.\n\nمقدار هدر می‌تواند یکی از انواع زیر باشد:\n- `string` - مقدار رشته‌ای معمولی که به سرور ارسال می‌شود\n- `null` - هنگام تبدیل به JSON از هدر صرف‌نظر می‌شود\n- `false` - هنگام تبدیل به JSON از هدر صرف‌نظر می‌شود، همچنین نشان می‌دهد که متد `set` باید با گزینه `rewrite` برابر با `true` فراخوانی شود\n  تا این مقدار بازنویسی گردد (Axios به طور داخلی از این مورد استفاده می‌کند تا به کاربران اجازه دهد برخی هدرها مانند `User-Agent` یا `Content-Type` را نصب نکنند)\n- `undefined` - مقدار تنظیم نشده است\n\n> توجه: اگر مقدار هدر برابر undefined نباشد، مقدار آن تنظیم شده در نظر گرفته می‌شود.\n\nشیء headers همیشه در داخل اینترسپتورها و ترنسفورمرها مقداردهی اولیه می‌شود:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // غیرفعال کردن تنظیم هدر توسط Axios در مراحل بعدی\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // دسترسی مستقیم منسوخ شده است\n    \n      return request;\n    }\n  );\n````\n\nمی‌توانید روی یک نمونه `AxiosHeaders` با استفاده از دستور `for...of` پیمایش کنید:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',\n```",
  "status": "ok"
}