{
  "id": 11,
  "origin": "Or in another way (ES6),\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### Older Node.js versions\n\nFor older Node.js engines, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nconst querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\n\n> **Note**: The `qs` library is preferable if you need to stringify nested objects, as the `querystring` method has [known issues](https://github.com/nodejs/node-v0.x-archive/issues/1665) with that use case.\n\n### 🆕 Automatic serialization to URLSearchParams\n\nAxios will automatically serialize the data object to urlencoded format if the content-type header is set to \"application/x-www-form-urlencoded\".\n\n```js\nconst data = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n};\n\nawait axios.postForm('https://postman-echo.com/post', data,\n  {headers: {'content-type': 'application/x-www-form-urlencoded'}}\n);\n```\n\nThe server will handle it as:\n\n```js\n  {\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }\n````\n\nIf your backend body-parser (like `body-parser` of `express.js`) supports nested objects decoding, you will get the same object on the server-side automatically\n\n```js\n  var app = express();\n\n  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies\n\n  app.post('/', function (req, res, next) {\n     // echo body as JSON\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);\n```\n\n## Using `multipart/form-data` format\n\n### FormData\n\nTo send the data as a `multipart/formdata` you need to pass a formData instance as a payload.\nSetting the `Content-Type` header is not required as Axios guesses it based on the payload type.\n\n```js\nconst formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);\n```\n\nIn node.js, you can use the [`form-data`](https://github.com/form-data/form-data) library as follows:\n\n```js\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n",
  "origin_sha": "j3Dr86fSugO8ALJ3tr12GuI6rpfVda40nuO2oD88Ids=",
  "translate": "または別の方法（ES6）で、\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### 古いNode.jsバージョンの場合\n\n古いNode.jsエンジンの場合は、以下のように[`querystring`](https://nodejs.org/api/querystring.html)モジュールを使用できます。\n\n```js\nconst querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\n[`qs`](https://github.com/ljharb/qs)ライブラリも使用できます。\n\n> **注記**: ネストされたオブジェクトを文字列化する必要がある場合は、`querystring`メソッドには[既知の問題](https://github.com/nodejs/node-v0.x-archive/issues/1665)があるため、`qs`ライブラリの使用を推奨します。\n\n### 🆕 URLSearchParamsへの自動シリアライズ\n\nAxiosは、content-typeヘッダーが\"application/x-www-form-urlencoded\"に設定されている場合、dataオブジェクトを自動的にurlencoded形式にシリアライズします。\n\n```js\nconst data = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n};\n\nawait axios.postForm('https://postman-echo.com/post', data,\n  {headers: {'content-type': 'application/x-www-form-urlencoded'}}\n);\n```\n\nサーバー側では以下のように処理されます:\n\n```js\n  {\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }\n```\n\nバックエンドのbody-parser（`express.js`の`body-parser`など）がネストされたオブジェクトのデコードをサポートしている場合、サーバー側でも同じオブジェクトが自動的に取得できます\n\n```js\n  var app = express();\n\n  app.use(bodyParser.urlencoded({ extended: true })); // エンコードされたボディのサポート\n\n  app.post('/', function (req, res, next) {\n     // ボディをJSONとしてエコー\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);\n```\n\n## `multipart/form-data`形式の使用\n\n### FormData\n\nデータを`multipart/formdata`として送信するには、formDataインスタンスをペイロードとして渡す必要があります。\n`Content-Type`ヘッダーの設定は不要です。Axiosがペイロードの型に基づき自動的に推測します。\n\n```js\nconst formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);\n```\n\nnode.jsでは、以下のように[`form-data`](https://github.com/form-data/form-data)ライブラリを使用できます。\n\n```js\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n```",
  "status": "ok"
}