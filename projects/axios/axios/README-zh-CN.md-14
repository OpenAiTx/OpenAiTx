{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "```js\n      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // 下载速度（字节数）\n      download: true; // 下载标志\n    }*/\n  }\n});  \n```\n\n你也可以在 node.js 中跟踪流上传/下载进度：\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // 避免缓冲整个流\n});\n````\n\n> **注意：**\n> 目前在 node.js 环境下不支持捕获 FormData 上传进度。\n\n> **⚠️ 警告**\n> 建议在 **node.js** 环境中通过设置 maxRedirects: 0 禁用重定向来上传流，\n> 因为 follow-redirects 包会在内存中缓冲整个流，而不会遵循“背压”算法。\n\n\n## 🆕 限速\n\n下载和上传速率限制只能为 http 适配器（node.js）设置：\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 限制为 100KB/s\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios 有自己的 `AxiosHeaders` 类，使用类似 Map 的 API 操作请求头，保证不区分大小写。\n虽然 HTTP 头部不区分大小写，但 Axios 会出于风格考虑保留原始头部的大小写，\n并作为某些服务器错误区分头部大小写时的解决方案。\n直接操作 headers 对象的旧方式仍然可用，但已弃用，不建议在将来使用。\n\n### 操作请求头\n\nAxiosHeaders 对象实例可以包含不同类型的内部值，用于控制设置和合并逻辑。\n最终带有字符串值的 headers 对象由 Axios 通过调用 `toJSON` 方法获得。\n\n> 注意：此处 JSON 指的是仅包含字符串值、准备用于网络传输的对象。\n\n头部值可以是以下类型之一：\n- `string` - 将会发送给服务器的普通字符串值\n- `null` - 渲染为 JSON 时跳过该头部\n- `false` - 渲染为 JSON 时跳过该头部，此外表示必须使用 `rewrite` 选项为 `true` 调用 `set` 方法才能覆盖此值\n  （Axios 内部使用此方式，允许用户选择不安装某些头部，如 `User-Agent` 或 `Content-Type`）\n- `undefined` - 未设置值\n\n> 注意：只有头部值不等于 undefined 时才视为已设置。\n\nheaders 对象总是在拦截器和转换器中初始化：\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // 禁止 Axios 后续设置该头部\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // 直接访问已弃用\n    \n      return request;\n    }\n  );\n````\n\n你可以使用 `for...of` 语句遍历 `AxiosHeaders` 实例：\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "status": "ok"
}