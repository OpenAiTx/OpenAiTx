{
  "id": 7,
  "origin": "  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n",
  "origin_sha": "ImwZFLBLZ1KXDvjY62o8HF8fcZQ9SsfViS4gCvAzKBY=",
  "translate": "```js\n  // 另请参见 https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // 默认值\n\n  // 兼容旧版本的过渡选项，可能会在新版本中移除\n  transitional: {\n    // 静默 JSON 解析模式\n    // `true`  - 忽略 JSON 解析错误，如果解析失败则将 response.data 设为 null（旧行为）\n    // `false` - 如果 JSON 解析失败则抛出 SyntaxError（注意：responseType 必须设置为 'json'）\n    silentJSONParsing: true, // 当前 Axios 版本的默认值\n\n    // 即使 `responseType` 不是 'json'，也尝试将响应字符串解析为 JSON\n    forcedJSONParsing: true,\n\n    // 在请求超时时抛出 ETIMEDOUT 错误，而不是通用的 ECONNABORTED\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // 用于自动将负载序列化为 FormData 对象的 FormData 类\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // 自定义访问器函数，用于序列化表单值\n      dots: boolean; // 使用点号而不是括号格式\n      metaTokens: boolean; // 保留参数键中的特殊结尾，如 {}\n      indexes: boolean; // 数组索引格式 null - 无括号，false - 空括号，true - 带索引的括号\n  },\n\n  // 仅限 http 适配器（node.js）\n  maxRate: [\n    100 * 1024, // 100KB/s 上传限速\n    100 * 1024  // 100KB/s 下载限速\n  ]\n}\n```\n\n## 响应结构\n\n请求的响应包含以下信息。\n\n```js\n{\n  // `data` 是服务器返回的响应内容\n  data: {},\n\n  // `status` 是服务器响应的 HTTP 状态码\n  status: 200,\n\n  // `statusText` 是服务器响应的 HTTP 状态消息\n  statusText: 'OK',\n\n  // `headers` 是服务器响应的 HTTP 头信息\n  // 所有头名称均为小写，可通过括号表示法访问。\n  // 示例：`response.headers['content-type']`\n  headers: {},\n\n  // `config` 是为该请求提供给 `axios` 的配置\n  config: {},\n\n  // `request` 是生成该响应的请求\n  // 在 node.js（重定向时）中是最后一个 ClientRequest 实例\n  // 在浏览器中是 XMLHttpRequest 实例\n  request: {}\n}\n```\n\n使用 `then` 时，你将以如下方式接收响应：\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\n使用 `catch`，或将 [拒绝回调](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) 作为 `then` 的第二个参数传递时，响应将通过 `error` 对象获取，详见 [错误处理](#handling-errors) 部分。\n\n## 配置默认值\n\n你可以指定将应用于每个请求的配置默认值。\n\n### 全局 axios 默认值\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// 重要提示：如果 axios 用于多个域名，AUTH_TOKEN 将会发送到所有域名。\n// 参见下方自定义实例默认值的示例。\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### 自定义实例默认值\n```",
  "status": "ok"
}