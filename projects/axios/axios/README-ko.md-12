{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### 🆕 Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "axios.post('https://example.com', form)\n```\n\n### 🆕 FormData로의 자동 직렬화\n\n`v0.27.0`부터 Axios는 요청의 `Content-Type` 헤더가 `multipart/form-data`로 설정된 경우 객체를 FormData 객체로 자동 직렬화하는 기능을 지원합니다.\n\n다음과 같은 요청은 데이터를 FormData 형식으로 전송합니다 (브라우저 & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\n`node.js` 빌드에서는 기본적으로 ([`form-data`](https://github.com/form-data/form-data)) 폴리필이 사용됩니다.\n\n`env.FormData` 구성 변수를 설정하여 FormData 클래스를 오버로드할 수 있지만,\n대부분의 경우에는 필요하지 않습니다:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData 직렬화기는 다음과 같은 특수 접미사를 지원합니다:\n\n- `{}` - 값을 JSON.stringify로 직렬화합니다.\n- `[]` - 배열 형태의 객체를 동일한 키를 가진 개별 필드로 풀어서 추가합니다.\n\n> **참고**: 배열 및 FileList 객체에는 기본적으로 풀어서/확장하는 동작이 사용됩니다.\n\nFormData 직렬화기는 드물게 발생하는 경우를 처리하기 위해 `config.formSerializer: object` 속성을 통한 추가 옵션을 지원합니다:\n\n- `visitor: Function` - 사용자가 정의한 방문자 함수로, 사용자 정의 규칙을 따라 데이터를 재귀적으로 FormData 객체로 직렬화할 때 호출됩니다.\n\n- `dots: boolean = false` - 배열 및 객체를 직렬화할 때 대괄호 대신 점 표기법(dot notation)을 사용합니다.\n\n- `metaTokens: boolean = true` - FormData 키에 특수 접미사(예: `user{}: '{\"name\": \"John\"}'`)를 추가합니다.\n백엔드 body-parser가 이 메타정보를 사용하여 값을 자동으로 JSON으로 파싱할 수 있습니다.\n\n- `indexes: null|false|true = false` - `flat` 배열 형태의 객체에서 풀어진 키에 인덱스를 어떻게 추가할지 제어합니다.\n\n    - `null` - 대괄호를 추가하지 않음 (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(기본값) - 빈 대괄호 추가 (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - 인덱스가 포함된 대괄호 추가  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\n예를 들어 아래와 같은 객체가 있다고 가정해 봅시다:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nAxios 직렬화기는 내부적으로 다음과 같은 단계를 수행합니다:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios는 다음과 같은 단축 메서드를 지원합니다: `postForm`, `putForm`, `patchForm`\n이들은 각각의 http 메서드와 동일하지만, `Content-Type` 헤더가 `multipart/form-data`로 미리 설정되어 있습니다.\n\n## 파일 전송\n\n단일 파일을 쉽게 전송할 수 있습니다:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "status": "ok"
}