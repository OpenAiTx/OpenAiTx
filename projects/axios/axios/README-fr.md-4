{
  "id": 4,
  "origin": "```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data",
  "origin_sha": "co1Hn4ZRh5nPxLnUTP5ObxsaoNqkZVrBAqvn+/2Td4Y=",
  "translate": "```js\n// Requête GET pour une image distante en node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Envoyer une requête GET (méthode par défaut)\naxios('/user/12345');\n```\n\n### Alias de méthode de requête\n\nPour plus de commodité, des alias ont été fournis pour toutes les méthodes de requête courantes.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### REMARQUE\nLorsque vous utilisez les méthodes alias, les propriétés `url`, `method` et `data` n'ont pas besoin d'être spécifiées dans la configuration.\n\n### Concurrence (Obsolète)\nVeuillez utiliser `Promise.all` pour remplacer les fonctions ci-dessous.\n\nFonctions utilitaires pour gérer les requêtes concurrentes.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Création d'une instance\n\nVous pouvez créer une nouvelle instance d'axios avec une configuration personnalisée.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Méthodes d'instance\n\nLes méthodes d'instance disponibles sont listées ci-dessous. La configuration spécifiée sera fusionnée avec la configuration de l'instance.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Configuration de la requête\n\nVoici les options de configuration disponibles pour effectuer des requêtes. Seule la propriété `url` est requise. Les requêtes utiliseront par défaut la méthode `GET` si `method` n'est pas spécifié.\n\n```js\n{\n  // `url` est l’URL du serveur qui sera utilisée pour la requête\n  url: '/user',\n\n  // `method` est la méthode de requête à utiliser lors de la requête\n  method: 'get', // par défaut\n\n  // `baseURL` sera préfixée à `url` à moins que `url` soit absolue et que l’option `allowAbsoluteUrls` soit définie à true.\n  // Il peut être pratique de définir `baseURL` pour une instance d’axios afin de passer des URL relatives\n  // aux méthodes de cette instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `allowAbsoluteUrls` détermine si les URLs absolues remplaceront un `baseUrl` configuré ou non.\n  // Lorsqu'il est défini à true (par défaut), les valeurs absolues pour `url` remplaceront `baseUrl`.\n  // Lorsqu'il est défini à false, les valeurs absolues pour `url` seront toujours précédées de `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` permet de modifier les données de la requête avant qu'elles ne soient envoyées au serveur\n  // Ceci n’est applicable que pour les méthodes de requête 'PUT', 'POST', 'PATCH' et 'DELETE'\n  // La dernière fonction du tableau doit retourner une chaîne ou une instance de Buffer, ArrayBuffer,\n  // FormData ou Stream\n  // Vous pouvez modifier l’objet headers.\n  transformRequest: [function (data, headers) {\n    // Faites ce que vous souhaitez pour transformer les données\n```",
  "status": "ok"
}