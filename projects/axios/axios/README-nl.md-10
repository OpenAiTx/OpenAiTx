{
  "id": 10,
  "origin": "  });\n```\n\n## Cancellation\n\n### AbortController\n\nStarting from `v0.22.0` Axios supports AbortController to cancel requests in fetch API way:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n### CancelToken `ðŸ‘Ždeprecated`\n\nYou can also cancel a request using a *CancelToken*.\n\n> The axios cancel token API is based on the withdrawn [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\n> This API is deprecated since v0.22.0 and shouldn't be used in new projects\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> **Note:** you can cancel several requests with the same cancel token/abort controller.\n> If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.\n\n> During the transition period, you can use both cancellation APIs, even for the same request:\n\n## Using `application/x-www-form-urlencoded` format\n\n### URLSearchParams\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the [`application/x-www-form-urlencoded` format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) instead, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API, which is [supported](http://www.caniuse.com/#feat=urlsearchparams) in the vast majority of browsers,and [ Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) starting with v10 (released in 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Older browsers)\n\nFor compatibility with very old browsers, there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n",
  "origin_sha": "VxjhD9ljiSwD1HApECbz1lsvUZyJrgZ3cDJoBGagQ8E=",
  "translate": "```markdown\n});\n```\n\n## Annulering\n\n### AbortController\n\nVanaf `v0.22.0` ondersteunt Axios AbortController om verzoeken te annuleren op de fetch API-manier:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// annuleer het verzoek\ncontroller.abort()\n```\n\n### CancelToken `ðŸ‘Žverouderd`\n\nJe kunt ook een verzoek annuleren met een *CancelToken*.\n\n> De cancel token API van axios is gebaseerd op het ingetrokken [voorstel voor annuleerbare promises](https://github.com/tc39/proposal-cancelable-promises).\n\n> Deze API is verouderd sinds v0.22.0 en moet niet meer gebruikt worden in nieuwe projecten\n\nJe kunt een cancel token aanmaken met de `CancelToken.source` fabriek als hieronder:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Verzoek geannuleerd', thrown.message);\n  } else {\n    // verwerk fout\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'nieuwe naam'\n}, {\n  cancelToken: source.token\n})\n\n// annuleer het verzoek (de message parameter is optioneel)\nsource.cancel('Operatie geannuleerd door de gebruiker.');\n```\n\nJe kunt ook een cancel token aanmaken door een executor functie door te geven aan de `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // Een executor functie ontvangt een cancel functie als parameter\n    cancel = c;\n  })\n});\n\n// annuleer het verzoek\ncancel();\n```\n\n> **Opmerking:** je kunt meerdere verzoeken annuleren met dezelfde cancel token/abort controller.\n> Als een cancel token al geannuleerd is op het moment dat een Axios verzoek wordt gestart, dan wordt het verzoek direct geannuleerd, zonder dat er een echt verzoek wordt gedaan.\n\n> Tijdens de overgangsperiode kun je beide annulerings-API's gebruiken, zelfs voor hetzelfde verzoek:\n\n## Gebruik van `application/x-www-form-urlencoded` formaat\n\n### URLSearchParams\n\nStandaard serialiseert axios JavaScript-objecten naar `JSON`. Om gegevens te verzenden in het [`application/x-www-form-urlencoded` formaat](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST), kun je de [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API gebruiken, die [wordt ondersteund](http://www.caniuse.com/#feat=urlsearchparams) in het overgrote deel van de browsers, en [Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) vanaf v10 (uitgebracht in 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Oudere browsers)\n\nVoor compatibiliteit met zeer oude browsers is er een [polyfill](https://github.com/WebReflection/url-search-params) beschikbaar (zorg ervoor dat je de globale omgeving polyfilled).\n\nAlternatief kun je data encoderen met de [`qs`](https://github.com/ljharb/qs) bibliotheek:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n```",
  "status": "ok"
}