{
  "id": 12,
  "origin": "axios.post('https://example.com', form)\n```\n\n### ๐ Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**: unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects.\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]",
  "origin_sha": "Q1V8Y3Dj6Gibx9h5bnskIMDClvCIJn6/7wEBcOf4c3k=",
  "translate": "```js\naxios.post('https://example.com', form)\n```\n\n### ๐ ุงูุชุณูุณู ุงูุชููุงุฆู ุฅูู FormData\n\nุจุฏุกูุง ูู ุงูุฅุตุฏุงุฑ `v0.27.0`ุ ูุฏุนู Axios ุงูุชุณูุณู ุงูุชููุงุฆู ูููุงุฆูุงุช ุฅูู ูุงุฆู FormData ุฅุฐุง ุชู ุชุนููู ุชุฑููุณุฉ ุงูุทูุจ\n`Content-Type` ุฅูู `multipart/form-data`.\n\nุณูููู ุงูุทูุจ ุงูุชุงูู ุจุฅุฑุณุงู ุงูุจูุงูุงุช ุจุชูุณูู FormData (ุนูู ุงููุชุตูุญ ูNode.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nูู ุจูุงุก `node.js`ุ ูุชู ุงุณุชุฎุฏุงู polyfill ([`form-data`](https://github.com/form-data/form-data)) ุจุดูู ุงูุชุฑุงุถู.\n\nููููู ุชุฌุงูุฒ ูุฆุฉ FormData ุนู ุทุฑูู ุชุนููู ูุชุบูุฑ ุงูุชูููู `env.FormData`ุ\nูููู ูู ูุนุธู ุงูุญุงูุงุช ูู ุชุญุชุงุฌ ุฅูู ุฐูู:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nูุฏุนู ูุณูุณู Axios FormData ุจุนุถ ุงูููุงูุงุช ุงูุฎุงุตุฉ ูุชูููุฐ ุงูุนูููุงุช ุงูุชุงููุฉ:\n\n- `{}` - ุชุณูุณู ุงููููุฉ ุจุงุณุชุฎุฏุงู JSON.stringify\n- `[]` - ูู ูุงุฆู ูุดุจู ุงููุตูููุฉ ูุญููู ูููุตูุฉ ุจููุณ ุงูููุชุงุญ\n\n> **ููุงุญุธุฉ**: ุณูุชู ุงุณุชุฎุฏุงู ุนูููุฉ ูู/ุชูุณูุน ุงููุตูููุงุช ููุงุฆูุงุช FileList ุจุดูู ุงูุชุฑุงุถู\n\nูุฏุนู ูุณูุณู FormData ุฎูุงุฑุงุช ุฅุถุงููุฉ ุนุจุฑ ุงูุฎุงุตูุฉ `config.formSerializer: object` ููุชุนุงูู ูุน ุงูุญุงูุงุช ุงููุงุฏุฑุฉ:\n\n- `visitor: Function` - ุฏุงูุฉ ุฒุงุฆุฑ ูุนุฑููุฉ ูู ูุจู ุงููุณุชุฎุฏู ุณูุชู ุงุณุชุฏุนุงุคูุง ุจุดูู ูุชูุฑุฑ ูุชุณูุณู ูุงุฆู ุงูุจูุงูุงุช\nุฅูู ูุงุฆู `FormData` ููููุง ูููุงุนุฏ ูุฎุตุตุฉ.\n\n- `dots: boolean = false` - ุงุณุชุฎุฏุงู ุชุฏููู ุงูููุงุท ุจุฏูุงู ูู ุงูุฃููุงุณ ูุชุณูุณู ุงููุตูููุงุช ูุงููุงุฆูุงุชุ\n\n- `metaTokens: boolean = true` - ุฅุถุงูุฉ ููุงูุฉ ุฎุงุตุฉ (ูุซููุง `user{}: '{\"name\": \"John\"}'`) ูู ููุชุงุญ FormData.\nูููู ููุญูู ุงูุฌุณู ุงูุฎููู ุงุณุชุฎุฏุงู ูุฐู ุงููุนูููุงุช ุงููุตููุฉ ูุชุญููู ุงููููุฉ ุชููุงุฆููุง ูู JSON.\n\n- `indexes: null|false|true = false` - ูุชุญูู ูู ููููุฉ ุฅุถุงูุฉ ุงูููุงุฑุณ ุฅูู ุงูููุงุชูุญ ุงููููููุฉ ูููุงุฆูุงุช ุงูุดุจููุฉ ุจุงููุตูููุฉ ูู ููุน `flat`.\n\n    - `null` - ูุง ุชุถู ุฃููุงุณ (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(ุงูุงูุชุฑุงุถู) - ุฃุถู ุฃููุงุณ ูุงุฑุบุฉ (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - ุฃุถู ุฃููุงุณ ูุน ุงูููุงุฑุณ (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nูููุชุฑุถ ุฃู ูุฏููุง ูุงุฆููุง ูุซู ุงูุชุงูู:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nุณูุชู ุชูููุฐ ุงูุฎุทูุงุช ุงูุชุงููุฉ ุฏุงุฎูููุง ุจูุงุณุทุฉ ูุณูุณู Axios:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nูุฏุนู Axios ุทุฑู ุงูุงุฎุชุตุงุฑ ุงูุชุงููุฉ: `postForm`ุ `putForm`ุ `patchForm`\nููู ูุฌุฑุฏ ุงูุทุฑู ุงูููุงุจูุฉ ูุจุฑูุชูููู http ูุน ุชุนููู ุชุฑููุณุฉ `Content-Type` ุงูุชุฑุงุถููุง ุฅูู `multipart/form-data`.\n\n## ุฅุฑุณุงู ุงููููุงุช\n\nููููู ุจุณูููุฉ ุฅุฑุณุงู ููู ูุงุญุฏ:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]\n```",
  "status": "ok"
}