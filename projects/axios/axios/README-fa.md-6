{
  "id": 6,
  "origin": "    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  \n  // `transport` determines the transport method that will be used to make the request.\n  // If defined, it will be used. Otherwise, if `maxRedirects` is 0,\n  // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`.\n  // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol,\n  // which can handle redirects.\n  transport: undefined, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js\n  // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because\n  // `http.globalAgent` has `keepAlive` enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",
  "origin_sha": "jBIZ4T758e4K+FYARj7IIwpOBG8JjLgUIkA5pGMvRsY=",
  "translate": "```markdown\n    // هر کاری که می‌خواهید با رویداد پیشرفت Axios انجام دهید\n  },\n\n  // `onDownloadProgress` اجازه می‌دهد تا رویدادهای پیشرفت برای دانلودها مدیریت شود\n  // مرورگر و node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // هر کاری که می‌خواهید با رویداد پیشرفت Axios انجام دهید\n  },\n\n  // `maxContentLength` حداکثر اندازه مجاز محتوای پاسخ http را به بایت در node.js تعریف می‌کند\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (فقط گزینه Node) حداکثر اندازه مجاز محتوای درخواست http را به بایت تعریف می‌کند\n  maxBodyLength: 2000,\n\n  // `validateStatus` تعیین می‌کند که آیا پرومیس برای یک کد وضعیت\n  // پاسخ HTTP مشخص حل یا رد شود. اگر `validateStatus` مقدار `true` را برگرداند\n  // (یا مقدار آن برابر با `null` یا `undefined` باشد)، پرومیس حل خواهد شد؛\n  // در غیر این صورت، پرومیس رد خواهد شد.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // پیش‌فرض\n  },\n\n  // `maxRedirects` حداکثر تعداد ریدایرکت‌هایی که باید در node.js دنبال شوند را تعریف می‌کند.\n  // اگر مقدار آن 0 باشد، هیچ ریدایرکتی دنبال نخواهد شد.\n  maxRedirects: 21, // پیش‌فرض\n\n  // `beforeRedirect` تابعی تعریف می‌کند که قبل از ریدایرکت فراخوانی می‌شود.\n  // از این تابع برای تنظیم گزینه‌های درخواست هنگام ریدایرکت،\n  // بررسی آخرین هدرهای پاسخ،\n  // یا لغو درخواست با پرتاب یک خطا استفاده کنید.\n  // اگر maxRedirects برابر با 0 باشد، `beforeRedirect` استفاده نمی‌شود.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` یک سوکت یونیکس را که باید در node.js استفاده شود تعریف می‌کند.\n  // به عنوان مثال '/var/run/docker.sock' برای ارسال درخواست به دیمون داکر.\n  // فقط یکی از `socketPath` یا `proxy` می‌تواند مشخص شود.\n  // اگر هر دو مشخص شوند، `socketPath` استفاده می‌شود.\n  socketPath: null, // پیش‌فرض\n  \n  // `transport` روش انتقالی را که برای انجام درخواست استفاده می‌شود تعیین می‌کند.\n  // اگر تعریف شود، استفاده خواهد شد. در غیر این صورت، اگر `maxRedirects` برابر با 0 باشد،\n  // کتابخانه پیش‌فرض `http` یا `https` استفاده خواهد شد، بسته به پروتکل مشخص‌شده در `protocol`.\n  // در غیر این صورت، کتابخانه `httpFollow` یا `httpsFollow` استفاده خواهد شد، باز هم بر اساس پروتکل،\n  // که می‌تواند ریدایرکت‌ها را مدیریت کند.\n  transport: undefined, // پیش‌فرض\n\n  // `httpAgent` و `httpsAgent` یک عامل سفارشی را برای درخواست‌های http\n  // و https به ترتیب در node.js تعریف می‌کنند. این اجازه می‌دهد گزینه‌هایی مانند\n  // `keepAlive` اضافه شود که به طور پیش‌فرض قبل از Node.js v19.0.0 فعال نیست. پس از Node.js\n  // v19.0.0، دیگر نیازی به سفارشی‌سازی عامل برای فعال‌سازی `keepAlive` ندارید زیرا\n  // `http.globalAgent` به طور پیش‌فرض `keepAlive` را فعال دارد.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` نام میزبان، پورت و پروتکل سرور پراکسی را تعریف می‌کند.\n  // همچنین می‌توانید پراکسی خود را با استفاده از متغیرهای محیطی معمول `http_proxy` و\n  // `https_proxy` تعریف کنید. اگر از متغیرهای محیطی برای پیکربندی پراکسی خود استفاده می‌کنید،\n  // می‌توانید یک متغیر محیطی `no_proxy` نیز به عنوان لیستی از دامنه‌هایی که نباید پراکسی شوند، تعریف کنید.\n  // برای غیرفعال کردن پراکسی و نادیده گرفتن متغیرهای محیطی از مقدار `false` استفاده کنید.\n  // `auth` نشان می‌دهد که احراز هویت پایه HTTP برای اتصال به پراکسی استفاده شود و\n  // اطلاعات ورود را فراهم می‌کند.\n  // این کار یک هدر `Proxy-Authorization` تنظیم می‌کند و هر هدر سفارشی\n  // `Proxy-Authorization` که با استفاده از `headers` تعیین کرده‌اید را بازنویسی می‌کند.\n  // اگر سرور پراکسی از HTTPS استفاده می‌کند، باید پروتکل را روی `https` تنظیم کنید.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // اگر هر دو تعریف شده باشند، بر 'host' اولویت دارد\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` یک توکن لغو را مشخص می‌کند که می‌تواند برای لغو درخواست استفاده شود\n  // (برای جزئیات به بخش لغو مراجعه کنید)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // یک روش جایگزین برای لغو درخواست‌های Axios با استفاده از AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` مشخص می‌کند که آیا بدنه پاسخ باید به طور خودکار از حالت فشرده خارج شود یا نه.\n  // اگر مقدار آن `true` باشد، هدر 'content-encoding' را نیز از اشیای پاسخ‌های خارج‌شده از حالت فشرده حذف خواهد کرد\n  // - فقط Node (XHR نمی‌تواند فشرده‌زدایی را خاموش کند)\n  decompress: true, // پیش‌فرض\n\n  // `insecureHTTPParser` بولین.\n  // مشخص می‌کند که آیا باید از یک تجزیه‌گر HTTP ناامن که هدرهای HTTP نامعتبر را می‌پذیرد استفاده شود یا نه.\n  // این کار ممکن است باعث همکاری با پیاده‌سازی‌های ناسازگار HTTP شود.\n  // استفاده از تجزیه‌گر ناامن باید اجتناب شود.\n  // گزینه‌ها را در https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback ببینید\n```",
  "status": "ok"
}