{
  "id": 16,
  "origin": "### AxiosHeaders#delete(header, matcher?)\n\n```\ndelete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n```\n\nReturns `true` if at least one header has been removed.\n\n### AxiosHeaders#clear(matcher?)\n\n```\nclear(matcher?: AxiosHeaderMatcher): boolean;\n```\n\nRemoves all headers. \nUnlike the `delete` method matcher, this optional matcher will be used to match against the header name rather than the value.\n\n```ts\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\nReturns `true` if at least one header has been cleared.\n\n### AxiosHeaders#normalize(format);\n\nIf the headers object was changed directly, it can have duplicates with the same name but in different cases.\nThis method normalizes the headers object by combining duplicate keys into one.\nAxios uses this method internally after calling each interceptor.\nSet `format` to true for converting headers name to lowercase and capitalize the initial letters (`cOntEnt-type` => `Content-Type`)\n\n```js\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\nReturns `this`.\n\n### AxiosHeaders#concat(...targets)\n\n```\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n```\n\nMerges the instance with targets into a new `AxiosHeaders` instance. If the target is a string, it will be parsed as RAW HTTP headers.\n\nReturns a new `AxiosHeaders` instance.\n\n### AxiosHeaders#toJSON(asStrings?)\n\n````\ntoJSON(asStrings?: boolean): RawAxiosHeaders;\n````\n\nResolve all internal headers values into a new null prototype object. \nSet `asStrings` to true to resolve arrays as a string containing all elements, separated by commas.\n\n### AxiosHeaders.from(thing?)\n\n````\nfrom(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n````\n\nReturns a new `AxiosHeaders` instance created from the raw headers passed in,\nor simply returns the given headers object if it's an `AxiosHeaders` instance.\n\n### AxiosHeaders.concat(...targets)\n\n````\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n````\n\nReturns a new `AxiosHeaders` instance created by merging the target objects.\n\n### Shortcuts\n\nThe following shortcuts are available:\n\n- `setContentType`, `getContentType`, `hasContentType`\n\n- `setContentLength`, `getContentLength`, `hasContentLength`\n\n- `setAccept`, `getAccept`, `hasAccept`\n\n- `setUserAgent`, `getUserAgent`, `hasUserAgent`",
  "origin_sha": "4qmvmNfwyVCT9uHZjtTFtv2Zx71NrACZgX9WsiFZ/kg=",
  "translate": "### AxiosHeaders#delete(header, matcher?)\n\n```\ndelete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n```\n\n如果至少有一个头被移除，则返回 `true`。\n\n### AxiosHeaders#clear(matcher?)\n\n```\nclear(matcher?: AxiosHeaderMatcher): boolean;\n```\n\n移除所有头信息。\n与 `delete` 方法的 matcher 不同，这里的可选 matcher 用于匹配头名称而不是值。\n\n```ts\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\n如果至少有一个头被清除，则返回 `true`。\n\n### AxiosHeaders#normalize(format);\n\n如果 headers 对象被直接更改，可能会出现同名但大小写不同的重复项。\n此方法通过将重复键合并为一个来规范化 headers 对象。\nAxios 在调用每个拦截器后会在内部使用此方法。\n将 `format` 设为 true 可将头名称转换为小写，并将首字母大写（如 `cOntEnt-type` => `Content-Type`）\n\n```js\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\n返回 `this`。\n\n### AxiosHeaders#concat(...targets)\n\n```\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n```\n\n将实例与目标合并为一个新的 `AxiosHeaders` 实例。如果目标是字符串，则会被解析为原始 HTTP 头。\n\n返回一个新的 `AxiosHeaders` 实例。\n\n### AxiosHeaders#toJSON(asStrings?)\n\n````\ntoJSON(asStrings?: boolean): RawAxiosHeaders;\n````\n\n将所有内部头信息值解析为一个新的 null 原型对象。\n将 `asStrings` 设为 true 可以将数组解析为用逗号分隔的字符串。\n\n### AxiosHeaders.from(thing?)\n\n````\nfrom(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n````\n\n返回由传入的原始 headers 创建的新 `AxiosHeaders` 实例，\n或者如果传入的是 `AxiosHeaders` 实例，则直接返回该对象。\n\n### AxiosHeaders.concat(...targets)\n\n````\nconcat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n````\n\n返回一个通过合并目标对象创建的新 `AxiosHeaders` 实例。\n\n### 快捷方式\n\n提供以下快捷方式：\n\n- `setContentType`，`getContentType`，`hasContentType`\n\n- `setContentLength`，`getContentLength`，`hasContentLength`\n\n- `setAccept`，`getAccept`，`hasAccept`\n\n- `setUserAgent`，`getUserAgent`，`hasUserAgent`\n",
  "status": "ok"
}