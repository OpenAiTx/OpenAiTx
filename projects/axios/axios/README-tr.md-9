{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Not:** options parametresi (`synchronous` ve `runWhen` özelliklerine sahip) şu anda yalnızca istek yakalayıcıları için desteklenmektedir.\n\n### Birden Fazla Yakalayıcı\n\nBirden fazla yanıt yakalayıcı eklerseniz\nve yanıt başarıyla dönerse\n- her yakalayıcı çalıştırılır\n- eklenme sıralarına göre çalıştırılırlar\n- yalnızca son yakalayıcının sonucu döndürülür\n- her yakalayıcı, kendinden öncekinin sonucunu alır\n- ve eğer başarılı-yanıt yakalayıcısı hata fırlatırsa\n    - sonraki başarılı-yanıt yakalayıcısı çağrılmaz\n    - sonraki reddedilme-yakalayıcısı çağrılır\n    - hata yakalandıktan sonra, başka bir sonraki başarılı-yanıt yakalayıcısı tekrar çağrılır (tıpkı bir promise zincirinde olduğu gibi).\n\nTüm bunları kodda görmek için [yakalayıcı testlerini](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) okuyun.\n\n## Hata Türleri\n\nAxios'ta ortaya çıkabilecek birçok farklı hata mesajı vardır. Bunlar, hatanın detayları ve hata ayıklamada fırsatların nerede olabileceği hakkında temel bilgiler sağlar.\n\nAxios hata mesajlarının genel yapısı aşağıdaki gibidir:\n| Özellik  | Tanım  |\n| -------- | ----------  |\n| message  | Hata mesajının ve başarısız olunan durumun kısa özeti. |\n| name     | Hatanın kaynağını tanımlar. Axios için her zaman 'AxiosError' olacaktır. |\n| stack    | Hatanın yığın izini sağlar. | \n| config   | İstek yapıldığında kullanıcı tarafından tanımlanan belirli örnek konfigürasyonlarına sahip bir axios config objesi |\n| code     | Axios tarafından tanımlanan bir hata kodunu temsil eder. Aşağıdaki tabloda dahili axios hatalarının özel tanımları listelenmiştir.  |\n| status   | HTTP yanıt durum kodu. Sık kullanılan HTTP yanıt durum kodlarının anlamları için [buraya](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) bakınız. \n\nAşağıda olası axios hata kodlarının bir listesi bulunmaktadır:\n\n| Kod                      | Tanım                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Axios konfigürasyonunda geçersiz değer sağlandı.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Axios konfigürasyonunda geçersiz seçenek sağlandı.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Özellik veya yöntem mevcut axios ortamında desteklenmiyor.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Axios'ta kullanılmış eski/deprecated özellik veya yöntem.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Axios isteği için sağlanan geçersiz URL.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Genellikle isteğin zaman aşımına uğradığını (eğer `transitional.clarifyTimeoutError` ayarlanmadıysa) veya tarayıcı ya da eklentisi tarafından iptal edildiğini belirtir.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Özellik veya yöntem, kullanıcı tarafından bir AbortSignal (veya CancelToken) kullanılarak açıkça iptal edildi.                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | İstek, varsayılan axios zaman aşımı süresini aştığı için zaman aşımına uğradı. `transitional.clarifyTimeoutError` `true` olarak ayarlanmalı, aksi takdirde genel bir `ECONNABORTED` hatası fırlatılır.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Ağ ile ilgili bir sorun. Tarayıcıda, bu hata ayrıca bir [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) veya [Karma İçerik](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) politika ihlali nedeniyle de oluşabilir. Tarayıcı, güvenlik sorunlarından kaynaklanan hatanın gerçek nedenini JS kodunun açıklamasına izin vermez, lütfen konsolu kontrol edin. |\n| ERR_FR_TOO_MANY_REDIRECTS | İstek çok fazla yönlendirildi; axios konfigürasyonunda belirtilen maksimum yönlendirme sayısını aştı.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Yanıt düzgün şekilde ayrıştırılamıyor veya beklenmeyen bir formatta. Genellikle `5xx` durum koduna sahip yanıtlarla ilgilidir.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | İstek beklenmeyen bir formata sahip veya gerekli parametreler eksik. Genellikle `4xx` durum koduna sahip yanıtlarla ilgilidir.                                                                                                                                                                                                                                                                    |\n\n## Hataların Yönetimi\n\nVarsayılan davranış, 2xx aralığı dışında bir durum kodu ile dönen her yanıtı reddetmek ve bunu bir hata olarak ele almaktır.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // İstek yapıldı ve sunucu 2xx aralığı dışında bir durum kodu ile yanıt verdi\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // İstek yapıldı fakat yanıt alınamadı\n      // `error.request` tarayıcıda bir XMLHttpRequest ve node.js'de bir http.ClientRequest örneğidir\n      console.log(error.request);\n    } else {\n      // İstek hazırlanırken hataya sebep olan bir şey oldu\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n`validateStatus` konfigürasyon seçeneğini kullanarak, varsayılan koşulu (status >= 200 && status < 300) geçersiz kılabilir ve hata fırlatacak HTTP kod(lar)ını tanımlayabilirsiniz.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Yalnızca durum kodu 500'den küçükse çöz\n  }\n})\n```\n\n`toJSON` kullanarak HTTP hatası ile ilgili daha fazla bilgi içeren bir nesne elde edebilirsiniz.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}