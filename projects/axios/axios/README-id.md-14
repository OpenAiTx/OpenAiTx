{
  "id": 14,
  "origin": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios has its own `AxiosHeaders` class to manipulate headers using a Map-like API that guarantees caseless work.\nAlthough HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons\nand for a workaround when servers mistakenly consider the header's case.\nThe old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.\n\n### Working with headers\n\nAn AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic.\nThe final headers object with string values is obtained by Axios by calling the `toJSON` method.\n\n> Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.\n\nThe header value can be one of the following types:\n- `string` - normal string value that will be sent to the server\n- `null` - skip header when rendering to JSON\n- `false` - skip header when rendering to JSON, additionally indicates that `set` method must be called with `rewrite` option set to `true`\n  to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like `User-Agent` or `Content-Type`)\n- `undefined` - value is not set\n\n> Note: The header value is considered set if it is not equal to undefined.\n\nThe headers object is always initialized inside interceptors and transformers:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // direct access is deprecated\n    \n      return request;\n    }\n  );\n````\n\nYou can iterate over an `AxiosHeaders` instance using a `for...of` statement:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "origin_sha": "FK9fblZzMaAq7pcNVVG17lyaNO+0Z7qRCDVMdJcNTFs=",
  "translate": "      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // kecepatan unduh dalam byte\n      download: true; // tanda unduhan\n    }*/\n  }\n});  \n```\n\nAnda juga dapat melacak progres upload/download stream di node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // hindari buffering seluruh stream\n});\n````\n\n> **Catatan:**\n> Pelacakan progres upload FormData saat ini belum didukung di lingkungan node.js.\n\n> **⚠️ Peringatan**\n> Disarankan untuk menonaktifkan redirect dengan mengatur maxRedirects: 0 saat mengunggah stream di lingkungan **node.js**,\n> karena paket follow-redirects akan melakukan buffer pada seluruh stream di RAM tanpa mengikuti algoritma \"backpressure\".\n\n\n## 🆕 Pembatasan Laju (Rate Limiting)\n\nBatas laju unduh dan unggah hanya dapat diatur untuk adaptor http (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // batas 100KB/s\n});\n```\n\n## 🆕 AxiosHeaders\n\nAxios memiliki kelas `AxiosHeaders` sendiri untuk memanipulasi header menggunakan API mirip Map yang menjamin proses tanpa peka huruf besar-kecil (caseless).\nMeskipun HTTP tidak peka terhadap huruf besar-kecil pada header, Axios akan mempertahankan format huruf pada header asli demi alasan gaya\ndan sebagai solusi ketika server secara keliru menganggap case pada header.\nPendekatan lama dengan memanipulasi objek headers secara langsung masih tersedia, namun sudah deprecated dan tidak disarankan untuk penggunaan mendatang.\n\n### Bekerja dengan header\n\nSebuah instance objek AxiosHeaders dapat berisi berbagai tipe nilai internal yang mengontrol logika pengaturan dan penggabungan.\nObjek headers akhir dengan nilai string diperoleh oleh Axios dengan memanggil metode `toJSON`.\n\n> Catatan: Dengan JSON di sini maksudnya adalah objek yang hanya terdiri dari nilai string yang akan dikirimkan melalui jaringan.\n\nNilai header dapat berupa salah satu tipe berikut:\n- `string` - nilai string normal yang akan dikirim ke server\n- `null` - lewati header saat dirender ke JSON\n- `false` - lewati header saat dirender ke JSON, juga menandakan bahwa metode `set` harus dipanggil dengan opsi `rewrite` diatur ke `true`\n  untuk menimpa nilai ini (Axios menggunakan ini secara internal agar pengguna dapat memilih untuk tidak memasang header tertentu seperti `User-Agent` atau `Content-Type`)\n- `undefined` - nilai belum diatur\n\n> Catatan: Nilai header dianggap sudah diatur jika nilainya tidak sama dengan undefined.\n\nObjek headers selalu diinisialisasi di dalam interceptor dan transformer:\n\n```ts\n  axios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n      request.headers.set('My-header', 'value');\n\n      request.headers.set({\n        \"My-set-header1\": \"my-set-value1\",\n        \"My-set-header2\": \"my-set-value2\"\n      });\n      \n      request.headers.set('User-Agent', false); // nonaktifkan pengaturan header selanjutnya oleh Axios\n\n      request.headers.setContentType('text/plain');\n    \n      request.headers['My-set-header2'] = 'newValue' // akses langsung sudah deprecated\n    \n      return request;\n    }\n  );\n````\n\nAnda dapat melakukan iterasi pada instance `AxiosHeaders` menggunakan pernyataan `for...of`:\n\n````js\nconst headers = new AxiosHeaders({\n  foo: '1',",
  "status": "ok"
}