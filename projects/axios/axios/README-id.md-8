{
  "id": 8,
  "origin": "```js\n// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### Config order of precedence\n\nConfig will be merged with an order of precedence. The order is library defaults found in [lib/defaults/index.js](https://github.com/axios/axios/blob/main/lib/defaults/index.js#L49), then `defaults` property of the instance, and finally `config` argument for the request. The latter will take precedence over the former. Here's an example.\n\n```js\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## Interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```js\n\nconst instance = axios.create();\n\n// Add a request interceptor\ninstance.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\ninstance.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nIf you need to remove an interceptor later you can.\n\n```js\nconst instance = axios.create();\nconst myInterceptor = instance.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\nYou can also clear all interceptors for requests or responses.\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses\n```\n\nYou can add interceptors to a custom instance of axios.\n\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\nWhen you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay\nin the execution of your axios request when the main thread is blocked (a promise is created under the hood for\nthe interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag\nto the options object that will tell axios to run the code synchronously and avoid any delays in request execution.\n\n```js\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'I am only a header!';\n  return config;\n}, null, { synchronous: true });\n```\n\nIf you want to execute a particular interceptor based on a runtime check,\nyou can add a `runWhen` function to the options object. The request interceptor will not be executed **if and only if** the return\nof `runWhen` is `false`. The function will be called with the config\nobject (don't forget that you can bind your own arguments to it as well.) This can be handy when you have an\nasynchronous request interceptor that only needs to run at certain times.\n",
  "origin_sha": "6kwzhk6CE1CRCOj5zCcnL7pc/83OgVLCi9g0Hk4TRYk=",
  "translate": "```js\n// Setel default konfigurasi saat membuat instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Ubah default setelah instance dibuat\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### Urutan prioritas konfigurasi\n\nKonfigurasi akan digabungkan dengan urutan prioritas. Urutannya adalah default pustaka yang ditemukan di [lib/defaults/index.js](https://github.com/axios/axios/blob/main/lib/defaults/index.js#L49), kemudian properti `defaults` dari instance, dan terakhir argumen `config` untuk permintaan. Yang terakhir akan memiliki prioritas lebih tinggi dari yang sebelumnya. Berikut adalah contohnya.\n\n```js\n// Membuat instance menggunakan default konfigurasi yang disediakan oleh pustaka\n// Pada titik ini nilai konfigurasi timeout adalah `0` sesuai default pustaka\nconst instance = axios.create();\n\n// Timpa default timeout untuk pustaka\n// Sekarang semua permintaan menggunakan instance ini akan menunggu 2,5 detik sebelum timeout\ninstance.defaults.timeout = 2500;\n\n// Timpa timeout untuk permintaan ini karena diketahui akan memakan waktu lama\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## Interceptor\n\nAnda dapat mencegat permintaan atau respons sebelum mereka ditangani oleh `then` atau `catch`.\n\n```js\n\nconst instance = axios.create();\n\n// Tambahkan request interceptor\ninstance.interceptors.request.use(function (config) {\n    // Lakukan sesuatu sebelum permintaan dikirim\n    return config;\n  }, function (error) {\n    // Lakukan sesuatu dengan error permintaan\n    return Promise.reject(error);\n  });\n\n// Tambahkan response interceptor\ninstance.interceptors.response.use(function (response) {\n    // Setiap status code yang berada di rentang 2xx akan memicu fungsi ini\n    // Lakukan sesuatu dengan data respons\n    return response;\n  }, function (error) {\n    // Setiap status code yang berada di luar rentang 2xx akan memicu fungsi ini\n    // Lakukan sesuatu dengan error respons\n    return Promise.reject(error);\n  });\n```\n\nJika Anda perlu menghapus interceptor di kemudian hari, Anda bisa.\n\n```js\nconst instance = axios.create();\nconst myInterceptor = instance.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\nAnda juga dapat menghapus semua interceptor untuk permintaan atau respons.\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Menghapus interceptor dari permintaan\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Menghapus interceptor dari respons\n```\n\nAnda dapat menambahkan interceptor ke instance kustom axios.\n\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\nSaat Anda menambahkan request interceptor, secara default dianggap sebagai asynchronous. Ini dapat menyebabkan penundaan\ndalam eksekusi permintaan axios Anda ketika thread utama terblokir (sebuah promise dibuat di balik layar untuk\ninterceptor dan permintaan Anda ditempatkan di bawah stack panggilan). Jika request interceptor Anda bersifat sinkron, Anda dapat menambahkan flag\nke objek opsi yang akan memberitahu axios untuk menjalankan kode secara sinkron dan menghindari penundaan eksekusi permintaan.\n\n```js\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'Saya hanya sebuah header!';\n  return config;\n}, null, { synchronous: true });\n```\n\nJika Anda ingin mengeksekusi interceptor tertentu berdasarkan pemeriksaan runtime,\nAnda dapat menambahkan fungsi `runWhen` ke objek opsi. Request interceptor tidak akan dieksekusi **jika dan hanya jika** return\ndari `runWhen` adalah `false`. Fungsi ini akan dipanggil dengan objek config\n(jangan lupa Anda juga bisa mengikat argumen Anda sendiri ke fungsi tersebut). Ini bisa berguna ketika Anda memiliki\nrequest interceptor asynchronous yang hanya perlu dijalankan pada waktu tertentu.\n```",
  "status": "ok"
}