{
  "id": 5,
  "origin": "\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. \n  paramsSerializer: {\n\n    // Custom encoder function which sends key/value pairs in an iterative fashion.\n    encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, \n    \n    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // Configuration for formatting array indexes in the params. \n    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    \n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // Also, you can set the name of the built-in adapter, or provide an array with their names\n  // to choose the first available in the environment\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n    \n  // `undefined` (default) - set XSRF header only for the same origin requests\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "origin_sha": "HkWY2YCLqAYKG77VQCmZQxspVjHoCo2CD5qIFiReeds=",
  "translate": "    return data;\n  }],\n\n  // `transformResponse` प्रतिक्रिया डेटा में परिवर्तन करने की अनुमति देता है\n  // इसे then/catch को पास करने से पहले\n  transformResponse: [function (data) {\n    // डेटा को बदलने के लिए जो भी चाहें करें\n\n    return data;\n  }],\n\n  // `headers` वे कस्टम हेडर हैं जो भेजे जाने हैं\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` वे URL पैरामीटर हैं जो अनुरोध के साथ भेजे जाते हैं\n  // यह एक सादा ऑब्जेक्ट या URLSearchParams ऑब्जेक्ट होना चाहिए\n  params: {\n    ID: 12345\n  },\n  \n  // `paramsSerializer` एक वैकल्पिक कॉन्फ़िग है जो आपको `params` को सीरियलाइज़ करने को कस्टमाइज़ करने की अनुमति देता है।\n  paramsSerializer: {\n\n    // कस्टम एन्कोडर फंक्शन जो key/value जोड़ियों को एक-एक करके भेजता है।\n    encode?: (param: string): string => { /* यहां कस्टम ऑपरेशन करें और ट्रांसफॉर्म की गई स्ट्रिंग लौटाएं */ }, \n    \n    // पूरे पैरामीटर के लिए कस्टम सीरियलाइज़र फंक्शन। उपयोगकर्ता को 1.x से पहले के व्यवहार की नकल करने की अनुमति देता है।\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), \n    \n    // params में array indexes को फॉर्मेट करने के लिए कॉन्फ़िगरेशन।\n    indexes: false // तीन उपलब्ध विकल्प: (1) indexes: null (कोई ब्रैकेट नहीं), (2) (डिफ़ॉल्ट) indexes: false (खाली ब्रैकेट), (3) indexes: true (इंडेक्स के साथ ब्रैकेट)।    \n  },\n\n  // `data` वह डेटा है जो अनुरोध बॉडी के रूप में भेजा जाता है\n  // केवल 'PUT', 'POST', 'DELETE', और 'PATCH' अनुरोध विधियों के लिए लागू\n  // जब कोई `transformRequest` सेट नहीं है, तब यह निम्न प्रकारों में से किसी एक का होना चाहिए:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - केवल ब्राउज़र: FormData, File, Blob\n  // - केवल Node: Stream, Buffer, FormData (form-data पैकेज)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // बॉडी में डेटा भेजने के लिए सिंटैक्स विकल्प\n  // विधि post\n  // केवल मान भेजा जाता है, कुंजी नहीं\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` निर्दिष्ट करता है कि अनुरोध के समय-समाप्त होने से पहले कितने मिलीसेकंड प्रतीक्षा करनी है।\n  // यदि अनुरोध `timeout` से अधिक समय लेता है, तो अनुरोध निरस्त कर दिया जाएगा।\n  timeout: 1000, // डिफ़ॉल्ट है `0` (कोई टाइमआउट नहीं)\n\n  // `withCredentials` इंगित करता है कि क्रॉस-साइट Access-Control अनुरोध\n  // क्रेडेंशियल्स के साथ किए जाने चाहिए या नहीं\n  withCredentials: false, // डिफ़ॉल्ट\n\n  // `adapter` कस्टम अनुरोध हैंडलिंग की अनुमति देता है जिससे परीक्षण आसान होता है।\n  // एक प्रॉमिस लौटाएं और एक वैध प्रतिक्रिया दें (देखें lib/adapters/README.md)\n  adapter: function (config) {\n    /* ... */\n  },\n  // इसके अलावा, आप बिल्ट-इन एडेप्टर का नाम सेट कर सकते हैं, या उनके नामों के साथ एक एरे दे सकते हैं\n  // ताकि वातावरण में पहला उपलब्ध चुना जा सके\n  adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch']\n\n  // `auth` इंगित करता है कि HTTP Basic auth का उपयोग किया जाना चाहिए, और क्रेडेंशियल्स प्रदान करता है।\n  // यह एक `Authorization` हेडर सेट करेगा, और आपके द्वारा सेट किए गए किसी भी मौजूदा\n  // `Authorization` कस्टम हेडर को ओवरराइट कर देगा।\n  // कृपया ध्यान दें कि केवल HTTP Basic auth ही इस पैरामीटर के माध्यम से कॉन्फ़िगर किया जा सकता है।\n  // Bearer टोकन आदि के लिए, इसके बजाय `Authorization` कस्टम हेडर का उपयोग करें।\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` इंगित करता है कि सर्वर किस प्रकार के डेटा के साथ प्रतिक्रिया देगा\n  // विकल्प हैं: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   केवल ब्राउज़र: 'blob'\n  responseType: 'json', // डिफ़ॉल्ट\n\n  // `responseEncoding` इंगित करता है कि उत्तरों को डिकोड करने के लिए कौन-सा एन्कोडिंग उपयोग करनी है (केवल Node.js)\n  // नोट: 'stream' के `responseType` या क्लाइंट-साइड अनुरोधों के लिए अनदेखा किया जाएगा\n  // विकल्प हैं: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url',\n  // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8',\n  // 'utf8', 'UTF8', 'utf16le', 'UTF16LE'\n  responseEncoding: 'utf8', // डिफ़ॉल्ट\n\n  // `xsrfCookieName` वह कुकी नाम है जिसका उपयोग xsrf टोकन के मान के लिए किया जाता है\n  xsrfCookieName: 'XSRF-TOKEN', // डिफ़ॉल्ट\n\n  // `xsrfHeaderName` वह HTTP हेडर नाम है जिसमें xsrf टोकन का मान ले जाया जाता है\n  xsrfHeaderName: 'X-XSRF-TOKEN', // डिफ़ॉल्ट\n    \n  // `undefined` (डिफ़ॉल्ट) - XSRF हेडर केवल समान मूल अनुरोधों के लिए सेट करें\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n\n  // `onUploadProgress` अपलोड के लिए प्रगति घटनाओं को हैंडल करने की अनुमति देता है\n  // ब्राउज़र एवं node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {",
  "status": "ok"
}