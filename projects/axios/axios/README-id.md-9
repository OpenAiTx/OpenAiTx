{
  "id": 9,
  "origin": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Note:** options parameter(having `synchronous` and `runWhen` properties) is only supported for request interceptors at the moment.\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Error Types\n\nThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.\n\nThe general structure of axios errors is as follows:\n| Property  | Definition  |\n| -------- | ----------  |\n| message  | A quick summary of the error message and the status it failed with. |\n| name     | This defines where the error originated from. For axios, it will always be an 'AxiosError'. |\n| stack    | Provides the stack trace of the error. | \n| config   | An axios config object with specific instance configurations defined by the user from when the request was made |\n| code     | Represents an axios identified error. The table below lists out specific definitions for internal axios error.  |\n| status   | HTTP response status code. See [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for common HTTP response status code meanings. \n\nBelow is a list of potential axios identified error:\n\n| Code                      | Definition                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Invalid value provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                 |\n| ERR_BAD_OPTION            | Invalid option provided in axios configuration.                                                                                                                                                                                                                                                                                                                                                |\n| ERR_NOT_SUPPORT           | Feature or method not supported in the current axios environment.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Deprecated feature or method used in axios.                                                                                                                                                                                                                                                                                                                                                    |\n| ERR_INVALID_URL           | Invalid URL provided for axios request.                                                                                                                                                                                                                                                                                                                                                        |\n| ECONNABORTED              | Typically indicates that the request has been timed out (unless `transitional.clarifyTimeoutError` is set) or aborted by the browser or its plugin.                                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken).                                                                                                                                                                                                                                                                                                  |\n| ETIMEDOUT                 | Request timed out due to exceeding default axios timelimit. `transitional.clarifyTimeoutError` must be set to `true`, otherwise a generic `ECONNABORTED` error will be thrown instead.                                                                                                                                                                                                         |\n| ERR_NETWORK               | Network-related issue. In the browser, this error can also be caused by a [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) or [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. |\n| ERR_FR_TOO_MANY_REDIRECTS | Request is redirected too many times; exceeds max redirects specified in axios configuration.                                                                                                                                                                                                                                                                                                  |\n| ERR_BAD_RESPONSE          | Response cannot be parsed properly or is in an unexpected format. Usually related to a response with `5xx` status code.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_REQUEST           | The request has an unexpected format or is missing required parameters. Usually related to a response with `4xx` status code.                                                                                                                                                                                                                                                                    |\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());",
  "origin_sha": "HN4V7wDS+stZ9h8QQq31MiF+abURDmW3MN9Cz07HUAw=",
  "translate": "```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n> **Catatan:** parameter options (memiliki properti `synchronous` dan `runWhen`) saat ini hanya didukung untuk interceptor permintaan.\n\n### Multiple Interceptors\n\nJika Anda menambahkan beberapa response interceptor\ndan ketika respons telah terpenuhi\n- maka setiap interceptor dieksekusi\n- maka mereka dieksekusi sesuai urutan saat ditambahkan\n- maka hanya hasil interceptor terakhir yang dikembalikan\n- maka setiap interceptor menerima hasil dari pendahulunya\n- dan ketika fulfillment-interceptor melempar error\n    - maka fulfillment-interceptor berikutnya tidak dipanggil\n    - maka rejection-interceptor berikutnya dipanggil\n    - setelah error ditangkap, fulfillment-interceptor berikutnya dipanggil lagi (seperti pada rantai promise).\n\nBaca [interceptor tests](https://raw.githubusercontent.com/axios/axios/v1.x/./test/specs/interceptors.spec.js) untuk melihat semua ini dalam kode.\n\n## Tipe Error\n\nAda banyak pesan error axios yang berbeda yang dapat muncul dan memberikan informasi dasar tentang detail error serta kemungkinan solusi saat debugging.\n\nStruktur umum error axios adalah sebagai berikut:\n| Properti  | Definisi  |\n| -------- | ----------  |\n| message  | Ringkasan singkat pesan error dan status yang menyebabkan kegagalan. |\n| name     | Menunjukkan dari mana error berasal. Untuk axios, selalu berupa 'AxiosError'. |\n| stack    | Menyediakan stack trace dari error. | \n| config   | Objek konfigurasi axios dengan konfigurasi spesifik instance yang didefinisikan oleh pengguna saat permintaan dibuat |\n| code     | Mewakili error yang diidentifikasi axios. Tabel di bawah ini mencantumkan definisi spesifik untuk error internal axios.  |\n| status   | Kode status respons HTTP. Lihat [di sini](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) untuk arti kode status respons HTTP yang umum.\n\nDi bawah ini adalah daftar kemungkinan error yang diidentifikasi axios:\n\n| Kode                      | Definisi                                                                                                                                                                                                                                                                                                                                                                                     |\n| --- | --- |\n| ERR_BAD_OPTION_VALUE      | Nilai yang tidak valid diberikan pada konfigurasi axios.                                                                                                                                                                                                                                                                                                                                     |\n| ERR_BAD_OPTION            | Opsi yang tidak valid diberikan pada konfigurasi axios.                                                                                                                                                                                                                                                                                                                                      |\n| ERR_NOT_SUPPORT           | Fitur atau metode tidak didukung di lingkungan axios saat ini.                                                                                                                                                                                                                                                                                                                              |\n| ERR_DEPRECATED            | Fitur atau metode usang digunakan di axios.                                                                                                                                                                                                                                                                                                                                                  |\n| ERR_INVALID_URL           | URL tidak valid diberikan untuk permintaan axios.                                                                                                                                                                                                                                                                                                                                            |\n| ECONNABORTED              | Biasanya menandakan bahwa permintaan telah melebihi batas waktu (kecuali `transitional.clarifyTimeoutError` diatur) atau dibatalkan oleh browser atau pluginnya.                                                                                                                                                                                                                            |\n| ERR_CANCELED              | Fitur atau metode dibatalkan secara eksplisit oleh pengguna menggunakan AbortSignal (atau CancelToken).                                                                                                                                                                                                                                                                                      |\n| ETIMEDOUT                 | Permintaan melebihi batas waktu karena melebihi batas waktu default axios. `transitional.clarifyTimeoutError` harus diatur ke `true`, jika tidak error generik `ECONNABORTED` akan dilemparkan.                                                                                                                                                                                             |\n| ERR_NETWORK               | Masalah terkait jaringan. Di browser, error ini juga dapat disebabkan oleh pelanggaran kebijakan [CORS](https://developer.mozilla.org/ru/docs/Web/HTTP/Guides/CORS) atau [Mixed Content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content). Browser tidak mengizinkan kode JS untuk menjelaskan alasan pasti error karena masalah keamanan, jadi silakan cek konsol. |\n| ERR_FR_TOO_MANY_REDIRECTS | Permintaan dialihkan terlalu banyak kali; melebihi jumlah maksimum redirect yang ditentukan pada konfigurasi axios.                                                                                                                                                                                                                                                                          |\n| ERR_BAD_RESPONSE          | Respons tidak dapat diurai dengan benar atau dalam format yang tidak diharapkan. Biasanya terkait dengan respons berstatus `5xx`.                                                                                                                                                                                                                                                            |\n| ERR_BAD_REQUEST           | Permintaan memiliki format yang tidak diharapkan atau parameter yang diperlukan hilang. Biasanya terkait dengan respons berstatus `4xx`.                                                                                                                                                                                                                                                     |\n\n## Penanganan Error\n\nPerilaku default adalah menolak setiap respons yang mengembalikan kode status di luar rentang 2xx dan memperlakukannya sebagai error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // Permintaan berhasil dilakukan dan server merespons dengan kode status\n      // di luar rentang 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // Permintaan berhasil dilakukan tetapi tidak ada respons diterima\n      // `error.request` adalah instance dari XMLHttpRequest di browser dan instance dari\n      // http.ClientRequest di node.js\n      console.log(error.request);\n    } else {\n      // Terjadi sesuatu saat menyiapkan permintaan yang memicu Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nDengan menggunakan opsi konfigurasi `validateStatus`, Anda dapat mengubah kondisi default (status >= 200 && status < 300) dan menentukan kode HTTP yang harus menimbulkan error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve hanya jika kode status kurang dari 500\n  }\n})\n```\n\nDengan menggunakan `toJSON` Anda akan mendapatkan objek dengan informasi lebih lanjut tentang error HTTP.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n```",
  "status": "ok"
}