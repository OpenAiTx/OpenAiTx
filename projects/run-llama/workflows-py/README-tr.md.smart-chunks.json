[
  {
    "Id": 1,
    "Content": "# LlamaIndex Workflows\n\n[![Unit Testing](https://github.com/run-llama/workflows/actions/workflows/test.yml/badge.svg)](https://github.com/run-llama/workflows/actions/workflows/test.yml)\n[![Coverage Status](https://coveralls.io/repos/github/run-llama/workflows/badge.svg?branch=main)](https://coveralls.io/github/run-llama/workflows?branch=main)\n[![GitHub contributors](https://img.shields.io/github/contributors/run-llama/workflows)](https://github.com/run-llama/llama-index-workflows/graphs/contributors)\n\n\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/llama-index-workflows)](https://pypi.org/project/llama-index-workflows/)\n[![Discord](https://img.shields.io/discord/1059199217496772688)](https://discord.gg/dGcwcsnxhU)\n[![Twitter](https://img.shields.io/twitter/follow/llama_index)](https://x.com/llama_index)\n[![Reddit](https://img.shields.io/reddit/subreddit-subscribers/LlamaIndex?style=plastic&logo=reddit&label=r%2FLlamaIndex&labelColor=white)](https://www.reddit.com/r/LlamaIndex/)\n\nLlamaIndex Workflows are a framework for orchestrating and chaining together complex systems of steps and events.\n\n## What can you build with Workflows?\n\nWorkflows shine when you need to orchestrate complex, multi-step processes that involve AI models, APIs, and decision-making. Here are some examples of what you can build:\n\n- **AI Agents** - Create intelligent systems that can reason, make decisions, and take actions across multiple steps\n- **Document Processing Pipelines** - Build systems that ingest, analyze, summarize, and route documents through various processing stages\n- **Multi-Model AI Applications** - Coordinate between different AI models (LLMs, vision models, etc.) to solve complex tasks\n- **Research Assistants** - Develop workflows that can search, analyze, synthesize information, and provide comprehensive answers\n- **Content Generation Systems** - Create pipelines that generate, review, edit, and publish content with human-in-the-loop approval\n- **Customer Support Automation** - Build intelligent routing systems that can understand, categorize, and respond to customer inquiries\n\nThe async-first, event-driven architecture makes it easy to build workflows that can route between different capabilities, implement parallel processing patterns, loop over complex sequences, and maintain state across multiple steps - all the features you need to make your AI applications production-ready.\n",
    "ContentSha": "PrOw0sXCtw/kMf6D4N5eKll4XAnD3LIP64BH4KmOS5g=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# LlamaIndex İş Akışları\n\n[![Birim Testi](https://github.com/run-llama/workflows/actions/workflows/test.yml/badge.svg)](https://github.com/run-llama/workflows/actions/workflows/test.yml)\n[![Kapsam Durumu](https://coveralls.io/repos/github/run-llama/workflows/badge.svg?branch=main)](https://coveralls.io/github/run-llama/workflows?branch=main)\n[![GitHub katkıda bulunanlar](https://img.shields.io/github/contributors/run-llama/workflows)](https://github.com/run-llama/llama-index-workflows/graphs/contributors)\n\n\n[![PyPI - İndirmeler](https://img.shields.io/pypi/dm/llama-index-workflows)](https://pypi.org/project/llama-index-workflows/)\n[![Discord](https://img.shields.io/discord/1059199217496772688)](https://discord.gg/dGcwcsnxhU)\n[![Twitter](https://img.shields.io/twitter/follow/llama_index)](https://x.com/llama_index)\n[![Reddit](https://img.shields.io/reddit/subreddit-subscribers/LlamaIndex?style=plastic&logo=reddit&label=r%2FLlamaIndex&labelColor=white)](https://www.reddit.com/r/LlamaIndex/)\n\nLlamaIndex İş Akışları, adım ve olaylardan oluşan karmaşık sistemleri orkestre etmek ve zincirlemek için bir çerçevedir.\n\n## İş Akışları ile Neler İnşa Edebilirsiniz?\n\nİş Akışları, yapay zeka modelleri, API'ler ve karar mekanizmalarını içeren karmaşık, çok adımlı süreçleri orkestre etmeniz gerektiğinde öne çıkar. İşte inşa edebileceğiniz bazı örnekler:\n\n- **Yapay Zeka Ajanları** - Birden fazla adımda mantık yürütebilen, karar verebilen ve eyleme geçebilen akıllı sistemler oluşturun\n- **Belge İşleme Hatları** - Belgeleri çeşitli işleme aşamalarından geçirerek içe aktaran, analiz eden, özetleyen ve yönlendiren sistemler kurun\n- **Çoklu Model Yapay Zeka Uygulamaları** - Farklı yapay zeka modelleri (LLM'ler, görsel modeller, vb.) arasında koordinasyon sağlayarak karmaşık görevleri çözün\n- **Araştırma Asistanları** - Bilgi arayabilen, analiz edebilen, sentezleyebilen ve kapsamlı yanıtlar sunabilen iş akışları geliştirin\n- **İçerik Üretim Sistemleri** - İnsan onaylı, üreten, gözden geçiren, düzenleyen ve yayımlayan içerik hatları oluşturun\n- **Müşteri Desteği Otomasyonu** - Müşteri taleplerini anlayabilen, kategorize edebilen ve yanıtlayabilen akıllı yönlendirme sistemleri inşa edin\n\nAsync-öncelikli, olay tabanlı mimarisi sayesinde farklı yetenekler arasında yönlendirme yapabilen, paralel işleme desenlerini uygulayabilen, karmaşık diziler üzerinde döngü kurabilen ve birden fazla adım boyunca durumu koruyabilen iş akışlarını kolayca inşa edebilirsiniz - yapay zeka uygulamalarınızı üretime hazır hale getirmek için ihtiyaç duyduğunuz tüm özellikler.",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "## Key Features\n\n- **async-first** - workflows are built around python's async functionality - steps are async functions that process incoming events from an asyncio queue and emit new events to other queues. This also means that workflows work best in your async apps like FastAPI, Jupyter Notebooks, etc.\n- **event-driven** - workflows consist of steps and events. Organizing your code around events and steps makes it easier to reason about and test.\n- **state management** - each run of a workflow is self-contained, meaning you can launch a workflow, save information within it, serialize the state of a workflow and resume it later.\n- **observability** - workflows are automatically instrumented for observability, meaning you can use tools like `Arize Phoenix` and `OpenTelemetry` right out of the box.\n\n## Quick Start\n\nInstall the package:\n\n```bash\npip install llama-index-workflows\n```\n\nAnd create your first workflow:\n\n```python\nimport asyncio\nfrom pydantic import BaseModel, Field\nfrom workflows import Context, Workflow, step\nfrom workflows.events import Event, StartEvent, StopEvent\n\nclass MyEvent(Event):\n    msg: list[str]\n\nclass RunState(BaseModel):\n    num_runs: int = Field(default=0)\n\nclass MyWorkflow(Workflow):\n    @step\n    async def start(self, ctx: Context[RunState], ev: StartEvent) -> MyEvent:\n        async with ctx.store.edit_state() as state:\n            state.num_runs += 1\n\n            return MyEvent(msg=[ev.input_msg] * state.num_runs)\n\n    @step\n    async def process(self, ctx: Context[RunState], ev: MyEvent) -> StopEvent:\n        data_length = len(\"\".join(ev.msg))\n        new_msg = f\"Processed {len(ev.msg)} times, data length: {data_length}\"\n        return StopEvent(result=new_msg)\n\nasync def main():\n    workflow = MyWorkflow()\n",
    "ContentSha": "2y3u8OCMQZxV5p9IHLSVu9zwJnNilh9ufQ0F3eUU8bo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## Temel Özellikler\n\n- **async-first** - iş akışları Python'un async fonksiyonalitesi etrafında inşa edilmiştir - adımlar, bir asyncio kuyruğundan gelen olayları işleyen ve diğer kuyruklara yeni olaylar gönderen async fonksiyonlardır. Bu aynı zamanda iş akışlarının FastAPI, Jupyter Notebooks gibi async uygulamalarınızda en iyi şekilde çalışacağı anlamına gelir.\n- **olay tabanlı** - iş akışları adımlar ve olaylardan oluşur. Kodunuzu olaylar ve adımlar etrafında organize etmek, onu anlamayı ve test etmeyi kolaylaştırır.\n- **durum yönetimi** - bir iş akışının her çalıştırılması kendi içinde bağımsızdır, yani bir iş akışı başlatabilir, içinde bilgi kaydedebilir, iş akışının durumunu serileştirip daha sonra devam ettirebilirsiniz.\n- **gözlemlenebilirlik** - iş akışları otomatik olarak gözlemlenebilirlik için enstrümante edilir, yani `Arize Phoenix` ve `OpenTelemetry` gibi araçları kutudan çıktığı gibi kullanabilirsiniz.\n\n## Hızlı Başlangıç\n\nPaketi yükleyin:\n\n```bash\npip install llama-index-workflows\n```\n\nVe ilk iş akışınızı oluşturun:\n\n```python\nimport asyncio\nfrom pydantic import BaseModel, Field\nfrom workflows import Context, Workflow, step\nfrom workflows.events import Event, StartEvent, StopEvent\n\nclass MyEvent(Event):\n    msg: list[str]\n\nclass RunState(BaseModel):\n    num_runs: int = Field(default=0)\n\nclass MyWorkflow(Workflow):\n    @step\n    async def start(self, ctx: Context[RunState], ev: StartEvent) -> MyEvent:\n        async with ctx.store.edit_state() as state:\n            state.num_runs += 1\n\n            return MyEvent(msg=[ev.input_msg] * state.num_runs)\n\n    @step\n    async def process(self, ctx: Context[RunState], ev: MyEvent) -> StopEvent:\n        data_length = len(\"\".join(ev.msg))\n        new_msg = f\"Processed {len(ev.msg)} times, data length: {data_length}\"\n        return StopEvent(result=new_msg)\n\nasync def main():\n    workflow = MyWorkflow()\n```",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "    # [optional] provide a context object to the workflow\n    ctx = Context(workflow)\n    result = await workflow.run(input_msg=\"Hello, world!\", ctx=ctx)\n    print(\"Workflow result:\", result)\n\n    # re-running with the same context will retain the state\n    result = await workflow.run(input_msg=\"Hello, world!\", ctx=ctx)\n    print(\"Workflow result:\", result)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nIn the example above\n- Steps that accept a `StartEvent` will be run first.\n- Steps that return a `StopEvent` will end the workflow.\n- Intermediate events are user defined and can be used to pass information between steps.\n- The `Context` object is also used to share information between steps.\n\nVisit the [complete documentation](https://docs.llamaindex.ai/en/stable/understanding/workflows/) for more examples using `llama-index`!\n",
    "ContentSha": "uyQUuCIsjVJreK2NjTBRYDljiKMj85DiFJfof3LjHfg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\n# [isteğe bağlı] iş akışına bir bağlam nesnesi sağlayın\nctx = Context(workflow)\nresult = await workflow.run(input_msg=\"Merhaba, dünya!\", ctx=ctx)\nprint(\"İş akışı sonucu:\", result)\n\n# Aynı bağlam ile tekrar çalıştırmak durumu koruyacaktır\nresult = await workflow.run(input_msg=\"Merhaba, dünya!\", ctx=ctx)\nprint(\"İş akışı sonucu:\", result)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nYukarıdaki örnekte\n- `StartEvent` kabul eden adımlar önce çalıştırılır.\n- `StopEvent` döndüren adımlar iş akışını sonlandırır.\n- Ara olaylar kullanıcı tarafından tanımlanır ve adımlar arasında bilgi aktarmak için kullanılabilir.\n- `Context` nesnesi de adımlar arasında bilgi paylaşmak için kullanılır.\n\n`llama-index` ile ilgili daha fazla örnek için [tam dokümantasyonu](https://docs.llamaindex.ai/en/stable/understanding/workflows/) ziyaret edin!\n",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "## More examples\n\n- [Basic Feature Run-Through](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/feature_walkthrough.ipynb)\n- [Building a Function Calling Agent with `llama-index`](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/agent.ipynb)\n- [Human-in-the-loop Iterative Document Extraction](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/document_processing.ipynb)\n- Observability\n  - [OpenTelemetry + Instrumentation Primer](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observability_pt1.ipynb)\n  - [OpenTelemetry + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observability_pt2.ipynb)\n  - [Arize Phoenix + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observablitiy_arize_phoenix.ipynb)\n  - [Langfuse + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observablitiy_langfuse.ipynb)\n\n## Related Packages\n\n- [Typescript Workflows](https://github.com/run-llama/workflows-ts)\n",
    "ContentSha": "DXwxZAa92R4ZF5bTYguiDm43cfYLGufWuZ5d/mzsQ24=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## Daha Fazla Örnek\n\n- [Temel Özelliklerin Tanıtımı](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/feature_walkthrough.ipynb)\n- [`llama-index` ile Fonksiyon Çağıran Bir Ajan Oluşturma](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/agent.ipynb)\n- İnsan-Döngüsünde Artımlı Doküman Çıkarma  \n  (Human-in-the-loop Iterative Document Extraction)\n  - [Açık Telemetri + Enstrümantasyon Giriş](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observability_pt1.ipynb)\n  - [Açık Telemetri + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observability_pt2.ipynb)\n  - [Arize Phoenix + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observablitiy_arize_phoenix.ipynb)\n  - [Langfuse + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observablitiy_langfuse.ipynb)\n\n## İlgili Paketler\n\n- [Typescript Workflows](https://github.com/run-llama/workflows-ts)\n",
    "Status": "ok"
  }
]