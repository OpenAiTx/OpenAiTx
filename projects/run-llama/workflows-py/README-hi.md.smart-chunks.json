[
  {
    "Id": 1,
    "Content": "# LlamaIndex Workflows\n\n[![Unit Testing](https://github.com/run-llama/workflows/actions/workflows/test.yml/badge.svg)](https://github.com/run-llama/workflows/actions/workflows/test.yml)\n[![Coverage Status](https://coveralls.io/repos/github/run-llama/workflows/badge.svg?branch=main)](https://coveralls.io/github/run-llama/workflows?branch=main)\n[![GitHub contributors](https://img.shields.io/github/contributors/run-llama/workflows)](https://github.com/run-llama/llama-index-workflows/graphs/contributors)\n\n\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/llama-index-workflows)](https://pypi.org/project/llama-index-workflows/)\n[![Discord](https://img.shields.io/discord/1059199217496772688)](https://discord.gg/dGcwcsnxhU)\n[![Twitter](https://img.shields.io/twitter/follow/llama_index)](https://x.com/llama_index)\n[![Reddit](https://img.shields.io/reddit/subreddit-subscribers/LlamaIndex?style=plastic&logo=reddit&label=r%2FLlamaIndex&labelColor=white)](https://www.reddit.com/r/LlamaIndex/)\n\nLlamaIndex Workflows are a framework for orchestrating and chaining together complex systems of steps and events.\n\n## What can you build with Workflows?\n\nWorkflows shine when you need to orchestrate complex, multi-step processes that involve AI models, APIs, and decision-making. Here are some examples of what you can build:\n\n- **AI Agents** - Create intelligent systems that can reason, make decisions, and take actions across multiple steps\n- **Document Processing Pipelines** - Build systems that ingest, analyze, summarize, and route documents through various processing stages\n- **Multi-Model AI Applications** - Coordinate between different AI models (LLMs, vision models, etc.) to solve complex tasks\n- **Research Assistants** - Develop workflows that can search, analyze, synthesize information, and provide comprehensive answers\n- **Content Generation Systems** - Create pipelines that generate, review, edit, and publish content with human-in-the-loop approval\n- **Customer Support Automation** - Build intelligent routing systems that can understand, categorize, and respond to customer inquiries\n\nThe async-first, event-driven architecture makes it easy to build workflows that can route between different capabilities, implement parallel processing patterns, loop over complex sequences, and maintain state across multiple steps - all the features you need to make your AI applications production-ready.\n",
    "ContentSha": "PrOw0sXCtw/kMf6D4N5eKll4XAnD3LIP64BH4KmOS5g=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# LlamaIndex वर्कफ़्लोज़\n\n[![यूनिट टेस्टिंग](https://github.com/run-llama/workflows/actions/workflows/test.yml/badge.svg)](https://github.com/run-llama/workflows/actions/workflows/test.yml)\n[![कवरेज स्थिति](https://coveralls.io/repos/github/run-llama/workflows/badge.svg?branch=main)](https://coveralls.io/github/run-llama/workflows?branch=main)\n[![GitHub योगदानकर्ता](https://img.shields.io/github/contributors/run-llama/workflows)](https://github.com/run-llama/llama-index-workflows/graphs/contributors)\n\n\n[![PyPI - डाउनलोड्स](https://img.shields.io/pypi/dm/llama-index-workflows)](https://pypi.org/project/llama-index-workflows/)\n[![Discord](https://img.shields.io/discord/1059199217496772688)](https://discord.gg/dGcwcsnxhU)\n[![Twitter](https://img.shields.io/twitter/follow/llama_index)](https://x.com/llama_index)\n[![Reddit](https://img.shields.io/reddit/subreddit-subscribers/LlamaIndex?style=plastic&logo=reddit&label=r%2FLlamaIndex&labelColor=white)](https://www.reddit.com/r/LlamaIndex/)\n\nLlamaIndex वर्कफ़्लोज़ एक ऐसा ढांचा है जो जटिल स्टेप्स और इवेंट्स की प्रणालियों को ऑर्केस्ट्रेट और चेन करने के लिए बनाया गया है।\n\n## वर्कफ़्लोज़ से आप क्या बना सकते हैं?\n\nवर्कफ़्लोज़ तब सबसे अधिक उपयोगी होते हैं जब आपको AI मॉडल्स, API और डिसीजन-मेकिंग को शामिल करने वाली जटिल, बहु-चरणीय प्रक्रियाओं का ऑर्केस्ट्रेशन करना होता है। यहाँ कुछ उदाहरण दिए गए हैं कि आप क्या बना सकते हैं:\n\n- **AI एजेंट्स** - ऐसे बुद्धिमान सिस्टम बनाएं जो तर्क कर सकें, निर्णय ले सकें, और कई चरणों में कार्य कर सकें\n- **डॉक्युमेंट प्रोसेसिंग पाइपलाइंस** - ऐसे सिस्टम बनाएं जो दस्तावेज़ों को इनजेस्ट, विश्लेषण, संक्षेप और विभिन्न प्रोसेसिंग चरणों के माध्यम से रूट कर सकें\n- **मल्टी-मॉडल AI एप्लिकेशन** - विभिन्न AI मॉडल्स (LLMs, विज़न मॉडल्स आदि) के बीच समन्वय कर जटिल कार्यों को हल करें\n- **रिसर्च असिस्टेंट्स** - ऐसे वर्कफ़्लोज़ विकसित करें जो खोज, विश्लेषण, सिंथेसाइज कर सकें और व्यापक उत्तर प्रदान करें\n- **सामग्री जनरेशन सिस्टम** - ऐसे पाइपलाइंस बनाएं जो सामग्री उत्पन्न, समीक्षा, संपादित और मानव-अनुमोदन के साथ प्रकाशित कर सकें\n- **कस्टमर सपोर्ट ऑटोमेशन** - ऐसे बुद्धिमान रूटिंग सिस्टम बनाएं जो ग्राहक की पूछताछ को समझ, वर्गीकृत और उत्तर दे सकें\n\nअसिंक्रोनस-फर्स्ट, इवेंट-ड्रिवन आर्किटेक्चर के कारण आप ऐसे वर्कफ़्लोज़ आसानी से बना सकते हैं जो विभिन्न क्षमताओं के बीच रूट कर सकते हैं, पैरेलल प्रोसेसिंग पैटर्न लागू कर सकते हैं, जटिल अनुक्रमों पर लूप कर सकते हैं, और कई चरणों में स्टेट को बनाए रख सकते हैं - ये सभी फीचर्स आपकी AI एप्लिकेशंस को प्रोडक्शन-रेडी बनाने के लिए आवश्यक हैं।",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "## Key Features\n\n- **async-first** - workflows are built around python's async functionality - steps are async functions that process incoming events from an asyncio queue and emit new events to other queues. This also means that workflows work best in your async apps like FastAPI, Jupyter Notebooks, etc.\n- **event-driven** - workflows consist of steps and events. Organizing your code around events and steps makes it easier to reason about and test.\n- **state management** - each run of a workflow is self-contained, meaning you can launch a workflow, save information within it, serialize the state of a workflow and resume it later.\n- **observability** - workflows are automatically instrumented for observability, meaning you can use tools like `Arize Phoenix` and `OpenTelemetry` right out of the box.\n\n## Quick Start\n\nInstall the package:\n\n```bash\npip install llama-index-workflows\n```\n\nAnd create your first workflow:\n\n```python\nimport asyncio\nfrom pydantic import BaseModel, Field\nfrom workflows import Context, Workflow, step\nfrom workflows.events import Event, StartEvent, StopEvent\n\nclass MyEvent(Event):\n    msg: list[str]\n\nclass RunState(BaseModel):\n    num_runs: int = Field(default=0)\n\nclass MyWorkflow(Workflow):\n    @step\n    async def start(self, ctx: Context[RunState], ev: StartEvent) -> MyEvent:\n        async with ctx.store.edit_state() as state:\n            state.num_runs += 1\n\n            return MyEvent(msg=[ev.input_msg] * state.num_runs)\n\n    @step\n    async def process(self, ctx: Context[RunState], ev: MyEvent) -> StopEvent:\n        data_length = len(\"\".join(ev.msg))\n        new_msg = f\"Processed {len(ev.msg)} times, data length: {data_length}\"\n        return StopEvent(result=new_msg)\n\nasync def main():\n    workflow = MyWorkflow()\n",
    "ContentSha": "2y3u8OCMQZxV5p9IHLSVu9zwJnNilh9ufQ0F3eUU8bo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## मुख्य विशेषताएँ\n\n- **async-first** - वर्कफ़्लो python की async कार्यक्षमता के इर्द-गिर्द बनाए गए हैं - स्टेप्स async फ़ंक्शन होते हैं जो asyncio queue से आने वाली events को प्रोसेस करते हैं और नई events को अन्य queues में भेजते हैं। इसका मतलब यह भी है कि वर्कफ़्लो आपके async ऐप्स जैसे FastAPI, Jupyter Notebooks आदि में सबसे अच्छा काम करते हैं।\n- **event-driven** - वर्कफ़्लो steps और events से मिलकर बने होते हैं। अपने कोड को events और steps के इर्द-गिर्द व्यवस्थित करने से उसे समझना और टेस्ट करना आसान हो जाता है।\n- **state management** - वर्कफ़्लो का प्रत्येक रन स्व-निहित होता है, यानी आप एक वर्कफ़्लो शुरू कर सकते हैं, उसमें जानकारी सहेज सकते हैं, वर्कफ़्लो की स्थिति को serialize कर सकते हैं और बाद में उसे फिर से शुरू कर सकते हैं।\n- **observability** - वर्कफ़्लो अपने आप observability के लिए instrumented होते हैं, यानी आप `Arize Phoenix` और `OpenTelemetry` जैसे टूल्स को तुरंत उपयोग कर सकते हैं।\n\n## त्वरित प्रारंभ\n\nपैकेज इंस्टॉल करें:\n\n```bash\npip install llama-index-workflows\n```\n\nऔर अपना पहला वर्कफ़्लो बनाएं:\n\n```python\nimport asyncio\nfrom pydantic import BaseModel, Field\nfrom workflows import Context, Workflow, step\nfrom workflows.events import Event, StartEvent, StopEvent\n\nclass MyEvent(Event):\n    msg: list[str]\n\nclass RunState(BaseModel):\n    num_runs: int = Field(default=0)\n\nclass MyWorkflow(Workflow):\n    @step\n    async def start(self, ctx: Context[RunState], ev: StartEvent) -> MyEvent:\n        async with ctx.store.edit_state() as state:\n            state.num_runs += 1\n\n            return MyEvent(msg=[ev.input_msg] * state.num_runs)\n\n    @step\n    async def process(self, ctx: Context[RunState], ev: MyEvent) -> StopEvent:\n        data_length = len(\"\".join(ev.msg))\n        new_msg = f\"Processed {len(ev.msg)} times, data length: {data_length}\"\n        return StopEvent(result=new_msg)\n\nasync def main():\n    workflow = MyWorkflow()\n```",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "    # [optional] provide a context object to the workflow\n    ctx = Context(workflow)\n    result = await workflow.run(input_msg=\"Hello, world!\", ctx=ctx)\n    print(\"Workflow result:\", result)\n\n    # re-running with the same context will retain the state\n    result = await workflow.run(input_msg=\"Hello, world!\", ctx=ctx)\n    print(\"Workflow result:\", result)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nIn the example above\n- Steps that accept a `StartEvent` will be run first.\n- Steps that return a `StopEvent` will end the workflow.\n- Intermediate events are user defined and can be used to pass information between steps.\n- The `Context` object is also used to share information between steps.\n\nVisit the [complete documentation](https://docs.llamaindex.ai/en/stable/understanding/workflows/) for more examples using `llama-index`!\n",
    "ContentSha": "uyQUuCIsjVJreK2NjTBRYDljiKMj85DiFJfof3LjHfg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```python\n# [वैकल्पिक] वर्कफ़्लो को एक संदर्भ ऑब्जेक्ट प्रदान करें\nctx = Context(workflow)\nresult = await workflow.run(input_msg=\"Hello, world!\", ctx=ctx)\nprint(\"Workflow result:\", result)\n\n# उसी संदर्भ के साथ फिर से चलाने पर स्थिति बनी रहेगी\nresult = await workflow.run(input_msg=\"Hello, world!\", ctx=ctx)\nprint(\"Workflow result:\", result)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nऊपर दिए गए उदाहरण में\n- वे स्टेप्स जो `StartEvent` स्वीकार करते हैं, सबसे पहले चलेंगे।\n- वे स्टेप्स जो `StopEvent` लौटाते हैं, वर्कफ़्लो को समाप्त कर देंगे।\n- मध्यवर्ती इवेंट्स उपयोगकर्ता द्वारा परिभाषित होते हैं और इन्हें स्टेप्स के बीच जानकारी पास करने के लिए उपयोग किया जा सकता है।\n- `Context` ऑब्जेक्ट का उपयोग भी स्टेप्स के बीच जानकारी साझा करने के लिए किया जाता है।\n\n`llama-index` का उपयोग करने वाले और अधिक उदाहरणों के लिए [पूर्ण प्रलेखन](https://docs.llamaindex.ai/en/stable/understanding/workflows/) देखें!",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "## More examples\n\n- [Basic Feature Run-Through](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/feature_walkthrough.ipynb)\n- [Building a Function Calling Agent with `llama-index`](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/agent.ipynb)\n- [Human-in-the-loop Iterative Document Extraction](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/document_processing.ipynb)\n- Observability\n  - [OpenTelemetry + Instrumentation Primer](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observability_pt1.ipynb)\n  - [OpenTelemetry + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observability_pt2.ipynb)\n  - [Arize Phoenix + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observablitiy_arize_phoenix.ipynb)\n  - [Langfuse + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observablitiy_langfuse.ipynb)\n\n## Related Packages\n\n- [Typescript Workflows](https://github.com/run-llama/workflows-ts)\n",
    "ContentSha": "DXwxZAa92R4ZF5bTYguiDm43cfYLGufWuZ5d/mzsQ24=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## और उदाहरण\n\n- [बेसिक फीचर रन-थ्रू](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/feature_walkthrough.ipynb)\n- [`llama-index` के साथ एक फंक्शन कॉलिंग एजेंट बनाना](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/agent.ipynb)\n- मानव-इन-द-लूप पुनरावृत्त दस्तावेज़ निष्कर्षण\n  - [OpenTelemetry + इंस्ट्रुमेंटेशन प्राइमर](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observability_pt1.ipynb)\n  - [OpenTelemetry + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observability_pt2.ipynb)\n  - [Arize Phoenix + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observablitiy_arize_phoenix.ipynb)\n  - [Langfuse + LlamaIndex](https://raw.githubusercontent.com/run-llama/workflows-py/main/./examples/observability/workflows_observablitiy_langfuse.ipynb)\n\n## संबंधित पैकेज\n\n- [Typescript Workflows](https://github.com/run-llama/workflows-ts)\n",
    "Status": "ok"
  }
]