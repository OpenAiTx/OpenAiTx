{
  "id": 1,
  "origin": "# 📖 prisma-paginate\n\n| [![npm version](https://badge.fury.io/js/prisma-paginate.svg)](https://badge.fury.io/js/prisma-paginate) | [![CI](https://github.com/sandrewTx08/prisma-paginate/actions/workflows/ci.yaml/badge.svg)](https://github.com/sandrewTx08/prisma-paginate/actions/workflows/ci.yaml) | [![pages-build-deployment](https://github.com/sandrewTx08/prisma-paginate/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/sandrewTx08/prisma-paginate/actions/workflows/pages/pages-build-deployment) |\n| -------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n# Install\n\n```shell\nnpm i prisma @prisma/client prisma-paginate@latest\nyarn add prisma @prisma/client prisma-paginate@latest\n```\n\n# Documentation and usage\n\nFor more details and type definitions see:\n\nhttp://sandrewtx08.github.io/prisma-paginate/\n\n## Importing\n\n```js\n// ESM\nimport { PrismaClient } from \"@prisma/client\";\nimport { extension } from \"prisma-paginate\";\n\n// Commonjs\nconst { PrismaClient } = require(\"@prisma/client\");\nconst { extension } = require(\"prisma-paginate\");\n```\n\n## Applying extension\n\n```js\nconst prisma = new PrismaClient();\nconst xprisma = prisma.$extends(extension);\n\nxprisma.model2\n\t.paginate({ limit: 10, page: 1, select: { id: true } })\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\nxprisma.table1\n\t.paginate({ where: { id: 5 } }, { limit: 10, page: 1 })\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n```\n\n## Paginating 100 rows\n\n```js\n// on database = [ { id: 1 }, { id: 2 }, {...}, { id: 100 } ]\nxprisma.model1\n\t.paginate(\n\t\t{\n\t\t\twhere: {\n\t\t\t\t// query stuff...\n\t\t\t},\n\t\t},\n\t\t{ page: 1, limit: 50 },\n\t)\n\t.then((result) => {\n\t\tconsole.log(result.result); // [ {...}, { id: 48 }, { id: 49 }, { id: 50 } ]\n\t});\n```\n\n## Paginating SQL queries\n\n```ts\nconst [{ count }] = await prisma.$queryRawUnsafe<[{ count: bigint }]>(\n\t'SELECT COUNT(*) FROM \"Model3\";',\n);\n\nconst pagination = new Pagination(limit, page, Number(count));\n```\n\n```ts\nconst data = await prisma.$queryRawUnsafe<unknown[]>(\n\t'SELECT name FROM \"Model3\" LIMIT $1 OFFSET $2;',\n\tlimit,\n\tPagination.offset(limit, page),\n);\n```\n\n## Parameters\n\n- `findManyArgs` {Object}\n- `paginationArgs` {Pagination&onCount?(pagination) => void}\n\n---\n\n- `findManyPaginationArgs` {Object&Pagination}\n\n## Return\n\n- `result` {Array}\n- `totalPages` {Number}\n- `hasNextPage` {Boolean}\n- `hasPrevPage` {Boolean}",
  "origin_sha": "Kzj2S0ize8dwh8a3+Uu/8EkyjfNidEUpjFclxoJBMzc=",
  "translate": "# 📖 prisma-paginate\n\n| [![npm version](https://badge.fury.io/js/prisma-paginate.svg)](https://badge.fury.io/js/prisma-paginate) | [![CI](https://github.com/sandrewTx08/prisma-paginate/actions/workflows/ci.yaml/badge.svg)](https://github.com/sandrewTx08/prisma-paginate/actions/workflows/ci.yaml) | [![pages-build-deployment](https://github.com/sandrewTx08/prisma-paginate/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/sandrewTx08/prisma-paginate/actions/workflows/pages/pages-build-deployment) |\n| -------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n# 설치\n\n```shell\nnpm i prisma @prisma/client prisma-paginate@latest\nyarn add prisma @prisma/client prisma-paginate@latest\n```\n\n# 문서 및 사용법\n\n더 많은 세부 정보와 타입 정의는 다음을 참고하세요:\n\nhttp://sandrewtx08.github.io/prisma-paginate/\n\n## 임포트\n\n```js\n// ESM\nimport { PrismaClient } from \"@prisma/client\";\nimport { extension } from \"prisma-paginate\";\n\n// Commonjs\nconst { PrismaClient } = require(\"@prisma/client\");\nconst { extension } = require(\"prisma-paginate\");\n```\n\n## 익스텐션 적용\n\n```js\nconst prisma = new PrismaClient();\nconst xprisma = prisma.$extends(extension);\n\nxprisma.model2\n\t.paginate({ limit: 10, page: 1, select: { id: true } })\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\nxprisma.table1\n\t.paginate({ where: { id: 5 } }, { limit: 10, page: 1 })\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n```\n\n## 100개 행 페이지네이션\n\n```js\n// 데이터베이스에 = [ { id: 1 }, { id: 2 }, {...}, { id: 100 } ]\nxprisma.model1\n\t.paginate(\n\t\t{\n\t\t\twhere: {\n\t\t\t\t// 쿼리 관련 내용...\n\t\t\t},\n\t\t},\n\t\t{ page: 1, limit: 50 },\n\t)\n\t.then((result) => {\n\t\tconsole.log(result.result); // [ {...}, { id: 48 }, { id: 49 }, { id: 50 } ]\n\t});\n```\n\n## SQL 쿼리 페이지네이션\n\n```ts\nconst [{ count }] = await prisma.$queryRawUnsafe<[{ count: bigint }]>(\n\t'SELECT COUNT(*) FROM \"Model3\";',\n);\n\nconst pagination = new Pagination(limit, page, Number(count));\n```\n\n```ts\nconst data = await prisma.$queryRawUnsafe<unknown[]>(\n\t'SELECT name FROM \"Model3\" LIMIT $1 OFFSET $2;',\n\tlimit,\n\tPagination.offset(limit, page),\n);\n```\n\n## 파라미터\n\n- `findManyArgs` {Object}\n- `paginationArgs` {Pagination&onCount?(pagination) => void}\n\n---\n\n- `findManyPaginationArgs` {Object&Pagination}\n\n## 반환값\n\n- `result` {Array}\n- `totalPages` {Number}\n- `hasNextPage` {Boolean}\n- `hasPrevPage` {Boolean}",
  "status": "ok"
}