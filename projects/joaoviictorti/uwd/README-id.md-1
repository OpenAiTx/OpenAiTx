{
  "id": 1,
  "origin": "# uwd ðŸ¦€\n\n![Rust](https://img.shields.io/badge/made%20with-Rust-red)\n![crate](https://img.shields.io/crates/v/uwd.svg)\n![docs](https://docs.rs/uwd/badge.svg)\n[![build](https://github.com/joaoviictorti/uwd/actions/workflows/ci.yml/badge.svg)](https://github.com/joaoviictorti/uwd/actions/workflows/ci.yml)\n![Forks](https://img.shields.io/github/forks/joaoviictorti/uwd)\n![Stars](https://img.shields.io/github/stars/joaoviictorti/uwd)\n![License](https://img.shields.io/github/license/joaoviictorti/uwd)\n\n`uwd` is a Rust library for call stack spoofing on Windows, allowing you to execute arbitrary functions with a forged call stack that evades analysis, logging, or detection during stack unwinding.\n\nInspired by [SilentMoonwalk](https://github.com/klezVirus/SilentMoonwalk), this crate brings low-level spoofing capabilities into a clean, idiomatic Rust interface with full support for `#[no_std]`, `MSVC` and `GNU` toolchains, and automated gadget resolution.\n\n## Features\n\n- âœ… Call stack spoofing via `Synthetic` and `Desync`.\n- âœ… Compatible with both `MSVC` and `GNU` toolchains (**x64**).\n- âœ… Inline macros: `spoof!`, `spoof_synthetic!`, `syscall!`, `syscall_synthetic!`.\n- âœ… Supports `#[no_std]` environments (with `alloc`).\n\n## Getting started\n\nAdd `uwd` to your project by updating your `Cargo.toml`:\n```bash\ncargo add uwd\n```\n\n## Usage\n\n`uwd` allows you to spoof the call stack in Rust when calling either standard Windows APIs or performing indirect syscalls. The library handles the full setup of fake frames, gadget chains, and register preparation to make execution appear as if it came from a legitimate source.\n\nYou can spoof:\n\n* Normal functions (like `VirtualAlloc`, `WinExec`, etc.)\n* Native syscalls with automatic SSN and stub resolution (like `NtAllocateVirtualMemory`)\n\nThe macros `spoof!` / `spoof_synthetic!` and `syscall!` / `syscall_synthetic!` abstract all the complexity.\n\n### Spoofing WinExec\n\nThis example shows how to spawn `calc.exe` using a spoofed call stack. We call `WinExec` twice once using the Desync technique, and again using the Synthetic one.\n\n```rs\nuse dinvk::{GetModuleHandle, GetProcAddress};\nuse uwd::{spoof, spoof_synthetic};\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Resolves addresses of the WinAPI functions to be used\n    let kernel32 = GetModuleHandle(\"kernel32.dll\", None);\n    let win_exec = GetProcAddress(kernel32, \"WinExec\", None);\n    \n    // Execute command with `WinExec`\n    // Call Stack Spoofing (Desync)\n    let cmd = c\"calc.exe\";\n    let mut result = spoof!(win_exec, cmd.as_ptr(), 1)?;\n    if result.is_null() {\n        eprintln!(\"WinExec Failed\");\n        return Ok(());\n    }\n\n    // Call Stack Spoofing (Synthetic)\n    result = spoof_synthetic!(win_exec, cmd.as_ptr(), 1)?;\n    if result.is_null() {\n        eprintln!(\"WinExec Failed [2]\");\n        return Ok(());\n    }\n\n    Ok(())\n}\n```\n\n### Spoofing an Indirect Syscall\n\nThis example performs a indirect system call to `NtAllocateVirtualMemory` with a spoofed call stack.\n\n```rs\nuse std::{ffi::c_void, ptr::null_mut};\nuse dinvk::NT_SUCCESS;\nuse uwd::{syscall, syscall_synthetic, AsUwd};\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Running indirect syscall with Call Stack Spoofing (Desync)\n    let mut addr = null_mut::<c_void>();\n    let mut size = (1 << 12) as usize;\n    let mut status = syscall!(\"NtAllocateVirtualMemory\", -1isize, addr.as_uwd_mut(), 0, size.as_uwd_mut(), 0x3000, 0x04)? as i32;\n    if !NT_SUCCESS(status) {\n        eprintln!(\"NtAllocateVirtualMemory Failed With Status: {status:#X}\");\n        return Ok(())\n    }\n\n    println!(\"[+] Address allocated: {:?}\", addr);\n\n    // Running indirect syscall with Call Stack Spoofing (Synthetic)\n    let mut addr = null_mut::<c_void>();\n    let mut size = (1 << 12) as usize;\n    status = syscall_synthetic!(\"NtAllocateVirtualMemory\", -1isize, addr.as_uwd_mut(), 0, size.as_uwd_mut(), 0x3000, 0x04)? as i32;\n    if !NT_SUCESS(status) {\n        eprintln!(\"NtAllocateVirtualMemory Failed With Status [2]: {status:#X}\");\n        return Ok(())",
  "origin_sha": "XMVG2C/OeHNg495vqFN1i34ScoExbukFmmu61cjgrA4=",
  "translate": "# uwd ðŸ¦€\n\n![Rust](https://img.shields.io/badge/made%20with-Rust-red)\n![crate](https://img.shields.io/crates/v/uwd.svg)\n![docs](https://docs.rs/uwd/badge.svg)\n[![build](https://github.com/joaoviictorti/uwd/actions/workflows/ci.yml/badge.svg)](https://github.com/joaoviictorti/uwd/actions/workflows/ci.yml)\n![Forks](https://img.shields.io/github/forks/joaoviictorti/uwd)\n![Stars](https://img.shields.io/github/stars/joaoviictorti/uwd)\n![License](https://img.shields.io/github/license/joaoviictorti/uwd)\n\n`uwd` adalah pustaka Rust untuk spoofing call stack pada Windows, memungkinkan Anda mengeksekusi fungsi arbitrer dengan call stack palsu yang dapat menghindari analisis, pencatatan, atau deteksi selama stack unwinding.\n\nTerinspirasi dari [SilentMoonwalk](https://github.com/klezVirus/SilentMoonwalk), crate ini menghadirkan kapabilitas spoofing tingkat rendah ke dalam antarmuka Rust yang bersih dan idiomatik dengan dukungan penuh untuk `#[no_std]`, toolchain `MSVC` dan `GNU`, serta resolusi gadget otomatis.\n\n## Fitur\n\n- âœ… Spoofing call stack melalui `Synthetic` dan `Desync`.\n- âœ… Kompatibel dengan toolchain `MSVC` dan `GNU` (**x64**).\n- âœ… Makro inline: `spoof!`, `spoof_synthetic!`, `syscall!`, `syscall_synthetic!`.\n- âœ… Mendukung lingkungan `#[no_std]` (dengan `alloc`).\n\n## Memulai\n\nTambahkan `uwd` ke proyek Anda dengan memperbarui `Cargo.toml`:\n```bash\ncargo add uwd\n```\n\n## Penggunaan\n\n`uwd` memungkinkan Anda melakukan spoofing call stack di Rust saat memanggil API Windows standar maupun menjalankan indirect syscall. Pustaka ini menangani seluruh pengaturan frame palsu, rantai gadget, dan persiapan register agar eksekusi tampak berasal dari sumber yang sah.\n\nAnda dapat melakukan spoof pada:\n\n* Fungsi normal (seperti `VirtualAlloc`, `WinExec`, dll.)\n* Native syscall dengan resolusi SSN dan stub otomatis (seperti `NtAllocateVirtualMemory`)\n\nMakro `spoof!` / `spoof_synthetic!` dan `syscall!` / `syscall_synthetic!` mengabstraksi semua kompleksitasnya.\n\n### Spoofing WinExec\n\nContoh ini menunjukkan cara menjalankan `calc.exe` menggunakan call stack yang telah di-spoof. Kita memanggil `WinExec` dua kali, pertama menggunakan teknik Desync, lalu menggunakan teknik Synthetic.\n\n```rs\nuse dinvk::{GetModuleHandle, GetProcAddress};\nuse uwd::{spoof, spoof_synthetic};\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Menyelesaikan alamat fungsi WinAPI yang akan digunakan\n    let kernel32 = GetModuleHandle(\"kernel32.dll\", None);\n    let win_exec = GetProcAddress(kernel32, \"WinExec\", None);\n    \n    // Eksekusi perintah dengan `WinExec`\n    // Spoofing Call Stack (Desync)\n    let cmd = c\"calc.exe\";\n    let mut result = spoof!(win_exec, cmd.as_ptr(), 1)?;\n    if result.is_null() {\n        eprintln!(\"WinExec Gagal\");\n        return Ok(());\n    }\n\n    // Spoofing Call Stack (Synthetic)\n    result = spoof_synthetic!(win_exec, cmd.as_ptr(), 1)?;\n    if result.is_null() {\n        eprintln!(\"WinExec Gagal [2]\");\n        return Ok(());\n    }\n\n    Ok(())\n}\n```\n\n### Spoofing Indirect Syscall\n\nContoh ini melakukan indirect system call ke `NtAllocateVirtualMemory` dengan call stack yang telah di-spoof.\n\n```rs\nuse std::{ffi::c_void, ptr::null_mut};\nuse dinvk::NT_SUCCESS;\nuse uwd::{syscall, syscall_synthetic, AsUwd};\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Menjalankan indirect syscall dengan Spoofing Call Stack (Desync)\n    let mut addr = null_mut::<c_void>();\n    let mut size = (1 << 12) as usize;\n    let mut status = syscall!(\"NtAllocateVirtualMemory\", -1isize, addr.as_uwd_mut(), 0, size.as_uwd_mut(), 0x3000, 0x04)? as i32;\n    if !NT_SUCCESS(status) {\n        eprintln!(\"NtAllocateVirtualMemory Gagal Dengan Status: {status:#X}\");\n        return Ok(())\n    }\n\n    println!(\"[+] Alamat dialokasikan: {:?}\", addr);\n\n    // Menjalankan indirect syscall dengan Spoofing Call Stack (Synthetic)\n    let mut addr = null_mut::<c_void>();\n    let mut size = (1 << 12) as usize;\n    status = syscall_synthetic!(\"NtAllocateVirtualMemory\", -1isize, addr.as_uwd_mut(), 0, size.as_uwd_mut(), 0x3000, 0x04)? as i32;\n    if !NT_SUCESS(status) {\n        eprintln!(\"NtAllocateVirtualMemory Gagal Dengan Status [2]: {status:#X}\");\n        return Ok(())",
  "status": "ok"
}