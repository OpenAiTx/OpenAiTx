{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nTen projekt przenosi [Generowanie Klatek Lossless Scaling](https://store.steampowered.com/app/993090/Lossless_Scaling/) na Linuksa!\n>[!NOTE]\n> To jest projekt w toku. Generowanie klatek działało w kilku grach, ale wciąż jest długa droga przed nami. Prosimy o sprawdzenie wiki w celu uzyskania wsparcia (wiki nie jest jeszcze napisana)\n\n## Budowanie, instalacja i uruchamianie\n\n>[!CAUTION]\n> Instrukcje dotyczące budowania niedawno się zmieniły. Prosimy o zapoznanie się z nimi.\n\nAby skompilować LSFG, upewnij się, że masz zainstalowane następujące komponenty w swoim systemie:\n- Tradycyjne narzędzia do budowania (+ sed, git)\n- Kompilator Clang (ten projekt NIE kompiluje się łatwo z GCC)\n- Pliki nagłówkowe Vulkan\n- System budowania CMake\n- System budowania Meson (dla DXVK)\n- System budowania Ninja (backend dla CMake)\n\nKompilacja lsfg-vk jest stosunkowo prosta, ponieważ wszystko jest schludnie zintegrowane z CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nTo zainstaluje lsfg-vk do ~/.local/lib oraz ~/.local/share/vulkan.\n\nNastępnie musisz pobrać Lossless Scaling ze Steam. Przełącz się na gałąź `legacy_2.13` lub pobierz odpowiedni depot.\nSkopiuj lub zapamiętaj ścieżkę do \"Lossless.dll\" z plików gry.\n\nNa koniec uruchom program z włączonym generowaniem klatek. W tym przykładzie użyję `vkcube`:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nUpewnij się, że dostosowałeś ścieżki. Przyjrzyjmy się każdej z nich:\n- `LVK_INSTANCE_LAYERS`: Podaj tutaj `VK_LAYER_LS_frame_generation`. To wymusza załadowanie warstwy lsfg-vk przez każdą aplikację Vulkan.\n- `LSFG_DLL_PATH`: Tutaj podajesz Lossless.dll pobrane ze Steam. lsfg-vk wyodrębni i przetłumaczy z niego shadery.\n- `LSFG_MULTIPLIER`: To mnożnik, który powinien być ci znany. Podaj `2`, aby podwoić liczbę klatek na sekundę itp.\n- `VK_LAYER_PATH`: Jeśli nie zainstalowałeś do `~/.local` lub `/usr`, musisz tutaj podać folder `explicit_layer.d`.\n\n>[!WARNING]\n> W przeciwieństwie do Windows, tutaj LSFG_MULTIPLIER jest mocno ograniczony (na ten moment!). Jeśli twój sprzęt może utworzyć 8 obrazów swapchain, ustawienie LSFG_MULTIPLIER na 4 zajmuje 4 z nich, zostawiając tylko 4 dla gry. Jeśli gra zażąda 5 lub więcej, ulegnie awarii.",
  "status": "ok"
}