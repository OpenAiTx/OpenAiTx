{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nDieses Projekt bringt [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) nach Linux!\n>[!NOTE]\n> Dies ist ein laufendes Projekt. Während die Frame-Generierung in einigen Spielen bereits funktioniert hat, gibt es noch viel zu tun. Bitte sieh dir das Wiki für Support an (das Wiki ist noch nicht geschrieben)\n\n## Bauen, Installieren und Ausführen\n\n>[!CAUTION]\n> Die Build-Anweisungen haben sich kürzlich geändert. Bitte prüfe sie.\n\nUm LSFG zu kompilieren, stelle sicher, dass du die folgenden Komponenten auf deinem System installiert hast:\n- Traditionelle Build-Tools (+ sed, git)\n- Clang-Compiler (dieses Projekt lässt sich NICHT einfach mit GCC kompilieren)\n- Vulkan-Header-Dateien\n- CMake-Buildsystem\n- Meson-Buildsystem (für DXVK)\n- Ninja-Buildsystem (Backend für CMake)\n\nDas Kompilieren von lsfg-vk ist relativ einfach, da alles sauber in CMake integriert ist:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nDies installiert lsfg-vk nach ~/.local/lib und ~/.local/share/vulkan.\n\nAls Nächstes musst du Lossless Scaling von Steam herunterladen. Wechsle zum Branch `legacy_2.13` oder lade das entsprechende Depot herunter.\nKopiere oder notiere den Pfad der \"Lossless.dll\" aus den Spieldateien.\n\nSchließlich wollen wir ein Programm mit aktivierter Frame-Generierung starten. In diesem Beispiel verwende ich `vkcube`:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nStelle sicher, dass du die Pfade anpasst. Schauen wir uns die einzelnen an:\n- `VK_INSTANCE_LAYERS`: Hier gibst du `VK_LAYER_LS_frame_generation` an. Dies zwingt jede Vulkan-App, das lsfg-vk-Layer zu laden.\n- `LSFG_DLL_PATH`: Hier gibst du die Lossless.dll an, die du von Steam heruntergeladen hast. lsfg-vk extrahiert und übersetzt die Shader von hier.\n- `LSFG_MULTIPLIER`: Dies ist der Multiplikator, den du bereits kennst. Gib `2` an, um die Framerate zu verdoppeln, usw.\n- `VK_LAYER_PATH`: Wenn du nicht nach `~/.local` oder `/usr` installiert hast, musst du hier den Ordner `explicit_layer.d` angeben.\n\n>[!WARNING]\n> Im Gegensatz zu Windows ist LSFG_MULTIPLIER hier (im Moment!) stark limitiert. Wenn deine Hardware 8 Swapchain-Images erstellen kann, dann belegt LSFG_MULTIPLIER=4 vier davon, sodass nur noch vier für das Spiel übrig bleiben. Wenn das Spiel fünf oder mehr anfordert, wird es abstürzen.",
  "status": "ok"
}