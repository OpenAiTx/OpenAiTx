{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nこのプロジェクトは [Lossless Scalingのフレーム生成](https://store.steampowered.com/app/993090/Lossless_Scaling/) をLinuxに導入します！\n>[!NOTE]\n> これは進行中の作業です。フレーム生成はいくつかのゲームで動作していますが、まだ長い道のりがあります。サポートについてはWikiを確認してください（Wikiはまだ作成されていません）\n\n## ビルド、インストール、実行\n\n>[!CAUTION]\n> ビルド手順が最近変更されました。必ず確認してください。\n\nLSFGをコンパイルするためには、以下のコンポーネントがシステムにインストールされていることを確認してください:\n- 従来のビルドツール（+ sed, git）\n- Clangコンパイラ（このプロジェクトはGCCでは簡単にコンパイルできません）\n- Vulkanヘッダーファイル\n- CMakeビルドシステム\n- Mesonビルドシステム（DXVK用）\n- Ninjaビルドシステム（CMakeのバックエンド）\n\nlsfg-vkのコンパイルは比較的簡単です。すべてがCMakeにきれいに統合されています:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nこれによりlsfg-vkが~/.local/libおよび~/.local/share/vulkanにインストールされます。\n\n次に、SteamからLossless Scalingをダウンロードする必要があります。`legacy_2.13`ブランチに切り替えるか、対応するデポをダウンロードしてください。\nゲームファイルから「Lossless.dll」のパスをコピーするか、メモしておいてください。\n\n最後に、実際にフレーム生成を有効にしてプログラムを起動してみましょう。この例では`vkcube`を使用します:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nパスを必ず調整してください。各パスについて説明します:\n- `VK_INSTANCE_LAYERS`: ここに `VK_LAYER_LS_frame_generation` を指定します。これにより任意のVulkanアプリがlsfg-vkレイヤーを読み込みます。\n- `LSFG_DLL_PATH`: ここでSteamからダウンロードしたLossless.dllを指定します。lsfg-vkはここからシェーダーを抽出・変換します。\n- `LSFG_MULTIPLIER`: お馴染みの倍率です。例えば2を指定するとフレームレートが2倍になります。\n- `VK_LAYER_PATH`: `~/.local` または `/usr` 以外にインストールした場合は、ここで `explicit_layer.d` フォルダを指定する必要があります。\n\n>[!WARNING]\n> Windowsとは異なり、LSFG_MULTIPLIERはここでは大きく制限されています（現時点では！）。ハードウェアが8枚のスワップチェーンイメージを作成できる場合、LSFG_MULTIPLIERを4に設定するとそのうち4枚が占有され、ゲームには残り4枚しか使えません。ゲームが5枚以上を要求するとクラッシュします。",
  "status": "ok"
}