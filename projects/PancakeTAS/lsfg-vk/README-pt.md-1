{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nEste projeto traz a [Geração de Quadros do Lossless Scaling](https://store.steampowered.com/app/993090/Lossless_Scaling/) para Linux!\n>[!NOTE]\n> Este é um trabalho em andamento. Embora a geração de quadros tenha funcionado em alguns jogos, ainda há um longo caminho a percorrer. Por favor, consulte o wiki para suporte (o wiki ainda não foi escrito)\n\n## Compilando, Instalando e Executando\n\n>[!CAUTION]\n> As instruções de compilação foram alteradas recentemente. Por favor, revise-as.\n\nPara compilar o LSFG, certifique-se de ter os seguintes componentes instalados no seu sistema:\n- Ferramentas de compilação tradicionais (+ sed, git)\n- Compilador Clang (este projeto NÃO compila facilmente com GCC)\n- Arquivos de cabeçalho do Vulkan\n- Sistema de build CMake\n- Sistema de build Meson (para DXVK)\n- Sistema de build Ninja (backend para o CMake)\n\nCompilar o lsfg-vk é relativamente simples, pois tudo está bem integrado ao CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nIsso instalará o lsfg-vk em ~/.local/lib e ~/.local/share/vulkan.\n\nEm seguida, você precisará baixar o Lossless Scaling da Steam. Troque para o branch `legacy_2.13` ou baixe o depot correspondente.\nCopie ou anote o caminho do arquivo \"Lossless.dll\" dos arquivos do jogo.\n\nPor fim, vamos realmente iniciar um programa com a geração de quadros ativada. Vou usar o `vkcube` neste exemplo:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nCertifique-se de ajustar os caminhos. Vamos analisar cada um:\n- `LVK_INSTANCE_LAYERS`: Especifique `VK_LAYER_LS_frame_generation` aqui. Isso força qualquer aplicativo Vulkan a carregar a camada lsfg-vk.\n- `LSFG_DLL_PATH`: Aqui você especifica o Lossless.dll que baixou da Steam. O lsfg-vk irá extrair e traduzir os shaders daqui.\n- `LSFG_MULTIPLIER`: Este é o multiplicador com o qual você já deve estar familiarizado. Especifique `2` para dobrar a taxa de quadros, etc.\n- `VK_LAYER_PATH`: Se você não instalou em `~/.local` ou `/usr`, será necessário especificar a pasta `explicit_layer.d` aqui.\n\n>[!WARNING]\n> Diferente do Windows, o LSFG_MULTIPLIER é fortemente limitado aqui (no momento!). Se seu hardware pode criar 8 imagens de swapchain, então definir o LSFG_MULTIPLIER para 4 ocupa 4 dessas, sobrando apenas 4 para o jogo. Se o jogo solicitar 5 ou mais, ele irá travar.",
  "status": "ok"
}