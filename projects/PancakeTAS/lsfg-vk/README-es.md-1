{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\n¡Este proyecto trae la [Generación de Fotogramas de Lossless Scaling](https://store.steampowered.com/app/993090/Lossless_Scaling/) a Linux!\n>[!NOTE]\n> Este es un trabajo en progreso. Aunque la generación de fotogramas ha funcionado en algunos juegos, aún queda mucho por hacer. Por favor revisa la wiki para soporte (la wiki aún no está escrita)\n\n## Compilación, Instalación y Ejecución\n\n>[!CAUTION]\n> Las instrucciones de compilación han cambiado recientemente. Por favor, revísalas.\n\nPara compilar LSFG, asegúrate de tener los siguientes componentes instalados en tu sistema:\n- Herramientas de compilación tradicionales (+ sed, git)\n- Compilador Clang (este proyecto NO se compila fácilmente con GCC)\n- Archivos de cabecera de Vulkan\n- Sistema de construcción CMake\n- Sistema de construcción Meson (para DXVK)\n- Sistema de construcción Ninja (backend para CMake)\n\nCompilar lsfg-vk es relativamente sencillo, ya que todo está perfectamente integrado en CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nEsto instalará lsfg-vk en ~/.local/lib y ~/.local/share/vulkan.\n\nA continuación, necesitarás descargar Lossless Scaling desde Steam. Cambia a la rama `legacy_2.13` o descarga el depot correspondiente.\nCopia o toma nota de la ruta de \"Lossless.dll\" de los archivos del juego.\n\nFinalmente, iniciemos un programa con la generación de fotogramas habilitada. Para este ejemplo, voy a usar `vkcube`:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nAsegúrate de ajustar las rutas. Examinemos cada una:\n- `LVK_INSTANCE_LAYERS`: Especifica aquí `VK_LAYER_LS_frame_generation`. Esto fuerza a cualquier aplicación Vulkan a cargar la capa lsfg-vk.\n- `LSFG_DLL_PATH`: Aquí especificas el Lossless.dll que descargaste de Steam. lsfg-vk extraerá y traducirá los sombreadores desde aquí.\n- `LSFG_MULTIPLIER`: Este es el multiplicador con el que deberías estar familiarizado. Especifica `2` para duplicar el framerate, etc.\n- `VK_LAYER_PATH`: Si no instalaste en `~/.local` o `/usr`, debes especificar aquí la carpeta `explicit_layer.d`.\n\n>[!WARNING]\n> A diferencia de Windows, LSFG_MULTIPLIER está fuertemente limitado aquí (¡por el momento!). Si tu hardware puede crear 8 imágenes de swapchain, entonces al establecer LSFG_MULTIPLIER en 4 se ocupan 4 de ellas, dejando solo 4 para el juego. Si el juego solicita 5 o más, se bloqueará.",
  "status": "ok"
}