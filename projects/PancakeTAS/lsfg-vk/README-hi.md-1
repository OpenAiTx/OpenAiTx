{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nयह प्रोजेक्ट [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) को Linux पर लाता है!\n>[!NOTE]\n> यह अभी निर्माणाधीन है। हालांकि कुछ गेम्स में फ़्रेम जेनरेशन काम कर चुकी है, लेकिन अभी लंबा रास्ता तय करना बाकी है। कृपया सहायता के लिए विकी देखें (विकी अभी नहीं लिखी गई है)\n\n## बिल्डिंग, इंस्टॉलिंग और रनिंग\n\n>[!CAUTION]\n> बिल्ड निर्देश हाल ही में बदले गए हैं। कृपया इन्हें ध्यान से पढ़ें।\n\nLSFG को संकलित (compile) करने के लिए, सुनिश्चित करें कि आपके सिस्टम पर निम्नलिखित कंपोनेंट्स इंस्टॉल हों:\n- पारंपरिक बिल्ड टूल्स (+ sed, git)\n- Clang कंपाइलर (यह प्रोजेक्ट GCC के साथ आसानी से कंपाइल नहीं होता)\n- Vulkan हेडर फाइल्स\n- CMake बिल्ड सिस्टम\n- Meson बिल्ड सिस्टम (DXVK के लिए)\n- Ninja बिल्ड सिस्टम (CMake के लिए backend)\n\nlsfg-vk को संकलित करना अपेक्षाकृत सीधा है, क्योंकि सब कुछ CMake में अच्छे से इंटीग्रेटेड है:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nयह lsfg-vk को ~/.local/lib और ~/.local/share/vulkan में इंस्टॉल करेगा।\n\nइसके बाद, आपको Steam से Lossless Scaling डाउनलोड करना होगा। `legacy_2.13` ब्रांच पर स्विच करें या संबंधित डिपो डाउनलोड करें।\nगेम फाइल्स से \"Lossless.dll\" का रास्ता कॉपी करें या नोट करें।\n\nअंत में, आइए किसी प्रोग्राम को फ्रेम जेनरेशन के साथ शुरू करें। इस उदाहरण के लिए मैं `vkcube` का उपयोग कर रहा हूँ:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nसुनिश्चित करें कि आप रास्तों (paths) को सही से एडजस्ट करें। आइए प्रत्येक को देखें:\n- `LVK_INSTANCE_LAYERS`: यहाँ `VK_LAYER_LS_frame_generation` निर्दिष्ट करें। यह किसी भी Vulkan ऐप को lsfg-vk लेयर लोड करने के लिए बाध्य करता है।\n- `LSFG_DLL_PATH`: यहाँ वह Lossless.dll निर्दिष्ट करें जो आपने Steam से डाउनलोड की थी। lsfg-vk यहाँ से शेडर्स एक्सट्रैक्ट और ट्रांसलेट करेगा।\n- `LSFG_MULTIPLIER`: यह वह मल्टीप्लायर है जिससे आप परिचित हैं। फ्रेमरेट डबल करने के लिए `2` निर्दिष्ट करें, आदि।\n- `VK_LAYER_PATH`: यदि आपने `~/.local` या `/usr` में इंस्टॉल नहीं किया है, तो यहाँ `explicit_layer.d` फोल्डर निर्दिष्ट करना होगा।\n\n>[!WARNING]\n> Windows के विपरीत, LSFG_MULTIPLIER यहाँ (इस समय!) काफी सीमित है। अगर आपका हार्डवेयर 8 swapchain इमेज बना सकता है, तो LSFG_MULTIPLIER को 4 पर सेट करने से उनमें से 4 उपयोग हो जाएंगी, और गेम के लिए केवल 4 बचेंगी। यदि गेम ने 5 या उससे अधिक की मांग की, तो यह क्रैश हो जाएगा।",
  "status": "ok"
}