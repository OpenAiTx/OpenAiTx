{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nDự án này mang [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) đến Linux!\n>[!NOTE]\n> Đây là một dự án đang phát triển. Dù frame generation đã hoạt động trên một số trò chơi, vẫn còn nhiều việc phải làm. Vui lòng xem lại wiki để được hỗ trợ (wiki hiện chưa được viết)\n\n## Biên dịch, Cài đặt và Chạy\n\n>[!CAUTION]\n> Hướng dẫn biên dịch đã thay đổi gần đây. Vui lòng xem lại chúng.\n\nĐể biên dịch LSFG, hãy đảm bảo bạn đã cài đặt các thành phần sau trên hệ thống của mình:\n- Công cụ biên dịch truyền thống (+ sed, git)\n- Trình biên dịch Clang (dự án này KHÔNG dễ dàng biên dịch với GCC)\n- Tệp tiêu đề Vulkan\n- Hệ thống xây dựng CMake\n- Hệ thống xây dựng Meson (cho DXVK)\n- Hệ thống xây dựng Ninja (backend cho CMake)\n\nBiên dịch lsfg-vk khá đơn giản, vì mọi thứ đã được tích hợp gọn gàng vào CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nLệnh này sẽ cài đặt lsfg-vk vào ~/.local/lib và ~/.local/share/vulkan.\n\nTiếp theo, bạn cần tải Lossless Scaling từ Steam. Chuyển sang nhánh `legacy_2.13` hoặc tải depot tương ứng.\nSao chép hoặc lưu lại đường dẫn của \"Lossless.dll\" từ thư mục trò chơi.\n\nCuối cùng, hãy khởi động một chương trình với frame generation được bật. Trong ví dụ này, tôi sẽ dùng `vkcube`:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nHãy chắc chắn rằng bạn đã điều chỉnh các đường dẫn. Chúng ta hãy xem xét từng biến:\n- `LVK_INSTANCE_LAYERS`: Chỉ định `VK_LAYER_LS_frame_generation` tại đây. Điều này buộc bất kỳ ứng dụng Vulkan nào cũng sẽ tải layer lsfg-vk.\n- `LSFG_DLL_PATH`: Tại đây bạn chỉ định tệp Lossless.dll đã tải về từ Steam. lsfg-vk sẽ giải nén và chuyển đổi các shader từ đây.\n- `LSFG_MULTIPLIER`: Đây là hệ số nhân mà bạn nên quen thuộc. Chỉ định `2` để tăng gấp đôi tốc độ khung hình, v.v.\n- `VK_LAYER_PATH`: Nếu bạn không cài đặt vào `~/.local` hoặc `/usr`, bạn phải chỉ định thư mục `explicit_layer.d` tại đây.\n\n>[!WARNING]\n> Không giống như trên Windows, LSFG_MULTIPLIER hiện bị giới hạn khá nhiều ở đây! Nếu phần cứng của bạn có thể tạo 8 hình ảnh swapchain, thì việc đặt LSFG_MULTIPLIER là 4 sẽ chiếm 4 hình ảnh, chỉ còn lại 4 cho trò chơi. Nếu trò chơi yêu cầu 5 hoặc nhiều hơn, nó sẽ bị crash.",
  "status": "ok"
}