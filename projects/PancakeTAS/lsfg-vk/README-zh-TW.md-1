{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\n這個專案將 [Lossless Scaling 的畫面生成技術](https://store.steampowered.com/app/993090/Lossless_Scaling/) 帶到了 Linux！\n>[!NOTE]\n> 此專案仍在開發中。雖然畫面生成已在部分遊戲中運作，但仍有許多工作尚未完成。請參閱 wiki 以獲得支援（wiki 尚未撰寫）\n\n## 建置、安裝與執行\n\n>[!CAUTION]\n> 建置說明最近有變更。請重新閱讀說明內容。\n\n為了編譯 LSFG，請確保你的系統已安裝下列元件：\n- 傳統的建置工具（及 sed、git）\n- Clang 編譯器（本專案不易用 GCC 編譯）\n- Vulkan 標頭檔\n- CMake 建置系統\n- Meson 建置系統（用於 DXVK）\n- Ninja 建置系統（CMake 的後端）\n\n編譯 lsfg-vk 相當直接，因為所有東西都整合在 CMake 中：\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\n這會將 lsfg-vk 安裝到 ~/.local/lib 和 ~/.local/share/vulkan。\n\n接下來，你需要從 Steam 下載 Lossless Scaling。切換到 `legacy_2.13` 分支或下載對應的 depot。\n複製或記下遊戲檔案中的 \"Lossless.dll\" 路徑。\n\n最後，讓我們實際啟動一個啟用畫面生成的程式。這裡以 `vkcube` 為例：\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\n請務必調整路徑。讓我們檢視每個環境變數：\n- `LVK_INSTANCE_LAYERS`：此處指定 `VK_LAYER_LS_frame_generation`。這會強制任何 Vulkan 應用程式載入 lsfg-vk layer。\n- `LSFG_DLL_PATH`：在此處指定你從 Steam 下載的 Lossless.dll。lsfg-vk 會從這裡提取並轉換著色器。\n- `LSFG_MULTIPLIER`：這就是你熟悉的倍數。指定 `2` 可將幀率加倍，等等。\n- `VK_LAYER_PATH`：如果你沒有安裝到 `~/.local` 或 `/usr`，則必須在這裡指定 `explicit_layer.d` 資料夾。\n\n>[!WARNING]\n> 與 Windows 不同，LSFG_MULTIPLIER 在這裡（目前）受到很大限制。如果你的硬體能建立 8 個 swapchain 影像，設定 LSFG_MULTIPLIER 為 4 就會佔用其中 4 個，只剩 4 個給遊戲。如果遊戲請求 5 個或更多，將會當機。",
  "status": "ok"
}