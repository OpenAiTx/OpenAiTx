{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nโปรเจกต์นี้นำ [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) มาสู่ Linux!\n>[!NOTE]\n> นี่คือโปรเจกต์ที่ยังอยู่ระหว่างการพัฒนา แม้ว่าฟีเจอร์ frame generation จะทำงานได้ในบางเกม แต่ก็ยังมีทางอีกยาวไกล กรุณาตรวจสอบ wiki สำหรับการสนับสนุน (ยังไม่ได้เขียน wiki)\n\n## การคอมไพล์ ติดตั้ง และรัน\n\n>[!CAUTION]\n> คำแนะนำในการ build ได้มีการเปลี่ยนแปลงเมื่อไม่นานนี้ กรุณาตรวจสอบอีกครั้ง\n\nเพื่อคอมไพล์ LSFG ให้แน่ใจว่าคุณได้ติดตั้งคอมโพเนนต์เหล่านี้ในระบบของคุณแล้ว:\n- เครื่องมือ build แบบดั้งเดิม (+ sed, git)\n- คอมไพเลอร์ Clang (โปรเจกต์นี้ไม่สามารถคอมไพล์ด้วย GCC ได้ง่ายๆ)\n- ไฟล์ header ของ Vulkan\n- ระบบ build CMake\n- ระบบ build Meson (สำหรับ DXVK)\n- ระบบ build Ninja (backend สำหรับ CMake)\n\nการคอมไพล์ lsfg-vk ค่อนข้างตรงไปตรงมา เนื่องจากทุกอย่างถูกรวมไว้ใน CMake อย่างเป็นระเบียบ:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nคำสั่งเหล่านี้จะติดตั้ง lsfg-vk ไปที่ ~/.local/lib และ ~/.local/share/vulkan\n\nถัดไป คุณจะต้องดาวน์โหลด Lossless Scaling จาก Steam เปลี่ยนไปที่ branch `legacy_2.13` หรือดาวน์โหลด depot ที่เกี่ยวข้อง\nคัดลอกหรือจดเส้นทางของ \"Lossless.dll\" จากไฟล์เกมไว้\n\nสุดท้าย มาลองเริ่มโปรแกรมโดยเปิดใช้ frame generation ตัวอย่างนี้ใช้ `vkcube`:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nตรวจสอบให้แน่ใจว่าคุณแก้ไข path ให้ตรงกับของคุณ มาดูแต่ละตัวแปรกัน:\n- `VK_INSTANCE_LAYERS`: ระบุ `VK_LAYER_LS_frame_generation` ที่นี่ จะบังคับให้แอป Vulkan ใดๆ โหลดเลเยอร์ lsfg-vk\n- `LSFG_DLL_PATH`: ตรงนี้ให้ระบุไฟล์ Lossless.dll ที่คุณดาวน์โหลดจาก Steam lsfg-vk จะดึงและแปลง shader จากที่นี่\n- `LSFG_MULTIPLIER`: ตัวคูณที่คุณควรคุ้นเคย ระบุ `2` เพื่อเพิ่มเฟรมเรตเป็นสองเท่า เป็นต้น\n- `VK_LAYER_PATH`: ถ้าคุณไม่ได้ติดตั้งที่ `~/.local` หรือ `/usr` ต้องระบุโฟลเดอร์ `explicit_layer.d` ตรงนี้\n\n>[!WARNING]\n> ไม่เหมือนบน Windows, LSFG_MULTIPLIER จะถูกจำกัดอย่างมากที่นี่ (ในขณะนี้!) หากฮาร์ดแวร์ของคุณสามารถสร้าง swapchain images ได้ 8 อัน การตั้งค่า LSFG_MULTIPLIER เป็น 4 จะใช้ไป 4 ช่อง เหลือให้เกมแค่ 4 ถ้าเกมต้องการมากกว่า 5 ขึ้นไป เกมจะ crash",
  "status": "ok"
}