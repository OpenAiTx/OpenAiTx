{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nBu proje [Lossless Scaling'in Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) özelliğini Linux'a getiriyor!\n>[!NOTE]\n> Bu bir devam eden çalışmadır. Frame generation birkaç oyunda çalışsa da, hala alınacak çok yol var. Destek için wikiyi inceleyin (wiki henüz yazılmadı)\n\n## Derleme, Kurulum ve Çalıştırma\n\n>[!CAUTION]\n> Derleme talimatları yakın zamanda değişti. Lütfen bunları gözden geçirin.\n\nLSFG derlemek için, sisteminizde aşağıdaki bileşenlerin yüklü olduğundan emin olun:\n- Geleneksel derleme araçları (+ sed, git)\n- Clang derleyicisi (bu proje GCC ile KOLAYCA derlenmez)\n- Vulkan başlık dosyaları\n- CMake derleme sistemi\n- Meson derleme sistemi (DXVK için)\n- Ninja derleme sistemi (CMake için arka uç)\n\nlsfg-vk derlemesi oldukça basittir, çünkü her şey CMake'e düzgün bir şekilde entegre edilmiştir:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nBu, lsfg-vk'yı ~/.local/lib ve ~/.local/share/vulkan konumuna kuracaktır.\n\nSonraki adımda, Lossless Scaling'i Steam'den indirmeniz gerekecek. `legacy_2.13` dalına geçin veya ilgili depoyu indirin.\nOyun dosyalarından \"Lossless.dll\" yolunu kopyalayın veya bir yere not edin.\n\nSon olarak, frame generation etkin şekilde bir program başlatalım. Bu örnek için `vkcube` kullanacağım:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nYolları kendinize göre ayarladığınızdan emin olun. Her birine bakalım:\n- `LVK_INSTANCE_LAYERS`: Burada `VK_LAYER_LS_frame_generation` belirtin. Bu, herhangi bir Vulkan uygulamasının lsfg-vk katmanını yüklemesini zorlar.\n- `LSFG_DLL_PATH`: Burada Steam'den indirdiğiniz Lossless.dll dosyasını belirtirsiniz. lsfg-vk shader'ları buradan çıkarıp çevirir.\n- `LSFG_MULTIPLIER`: Aşina olduğunuz çarpandır. Örneğin, kare hızını iki katına çıkarmak için `2` belirtin.\n- `VK_LAYER_PATH`: Eğer `~/.local` veya `/usr`'a kurmadıysanız, burada `explicit_layer.d` klasörünü belirtmelisiniz.\n\n>[!WARNING]\n> Windows'tan farklı olarak, burada LSFG_MULTIPLIER ciddi şekilde sınırlıdır (şu anda!). Eğer donanımınız 8 swapchain görüntüsü oluşturabiliyorsa, LSFG_MULTIPLIER'ı 4 olarak ayarlamak bunların 4'ünü kullanır, oyuna sadece 4 kalır. Oyun 5 veya daha fazlasını isterse, çökecektir.",
  "status": "ok"
}