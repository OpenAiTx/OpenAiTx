{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nاین پروژه [تولید فریم Lossless Scaling](https://store.steampowered.com/app/993090/Lossless_Scaling/) را به لینوکس می‌آورد!\n>[!NOTE]\n> این پروژه در حال توسعه است. در حالی که تولید فریم در چند بازی کار کرده است، هنوز راه زیادی تا تکمیل باقی مانده است. لطفاً برای پشتیبانی ویکی را مرور کنید (ویکی هنوز نوشته نشده است)\n\n## ساخت، نصب و اجرا\n\n>[!CAUTION]\n> دستورالعمل‌های ساخت اخیراً تغییر کرده‌اند. لطفاً آن‌ها را مرور کنید.\n\nبرای کامپایل LSFG، مطمئن شوید که اجزای زیر روی سیستم شما نصب شده باشند:\n- ابزارهای ساخت سنتی (+ sed, git)\n- کامپایلر Clang (این پروژه به راحتی با GCC کامپایل نمی‌شود)\n- فایل‌های هدر Vulkan\n- سیستم ساخت CMake\n- سیستم ساخت Meson (برای DXVK)\n- سیستم ساخت Ninja (backend برای CMake)\n\nکامپایل lsfg-vk نسبتاً ساده است، زیرا همه چیز به طور منظم در CMake یکپارچه شده است:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nاین دستور lsfg-vk را در مسیر ~/.local/lib و ~/.local/share/vulkan نصب می‌کند.\n\nدر مرحله بعد، باید Lossless Scaling را از استیم دانلود کنید. به شاخه `legacy_2.13` سوئیچ کنید یا دیپوی مربوطه را دانلود نمایید.\nمسیر \"Lossless.dll\" را از فایل‌های بازی کپی یا یادداشت کنید.\n\nدر نهایت، بیایید واقعاً یک برنامه را با تولید فریم فعال اجرا کنیم. برای این مثال من از `vkcube` استفاده می‌کنم:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nحتماً مسیرها را متناسب با سیستم خود تنظیم کنید. بیایید هر کدام را بررسی کنیم:\n- `VK_INSTANCE_LAYERS`: اینجا مقدار `VK_LAYER_LS_frame_generation` را مشخص کنید. این کار باعث می‌شود هر برنامه Vulkan لایه lsfg-vk را بارگذاری کند.\n- `LSFG_DLL_PATH`: در اینجا فایل Lossless.dll که از استیم دانلود کردید را مشخص می‌کنید. lsfg-vk شیدرها را از اینجا استخراج و ترجمه می‌کند.\n- `LSFG_MULTIPLIER`: این همان ضریبی است که باید با آن آشنا باشید. مقدار `2` را برای دو برابر کردن نرخ فریم و غیره تعیین کنید.\n- `VK_LAYER_PATH`: اگر در مسیر `~/.local` یا `/usr` نصب نکرده‌اید، باید پوشه `explicit_layer.d` را اینجا مشخص کنید.\n\n>[!WARNING]\n> برخلاف ویندوز، LSFG_MULTIPLIER در اینجا (در حال حاضر!) به شدت محدود است. اگر سخت‌افزار شما بتواند ۸ تصویر swapchain ایجاد کند، تنظیم LSFG_MULTIPLIER روی ۴ چهار تای آن‌ها را اشغال می‌کند و فقط ۴ تصویر برای بازی باقی می‌گذارد. اگر بازی ۵ یا بیشتر درخواست کند، کرش خواهد کرد.",
  "status": "ok"
}