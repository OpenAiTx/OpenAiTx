{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nProyek ini membawa [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) ke Linux!\n>[!NOTE]\n> Ini adalah proyek yang masih dalam pengembangan. Meskipun frame generation telah bekerja di beberapa game, masih ada jalan panjang yang harus ditempuh. Silakan tinjau wiki untuk dukungan (wiki belum ditulis)\n\n## Membangun, Menginstal, dan Menjalankan\n\n>[!CAUTION]\n> Instruksi build baru-baru ini berubah. Silakan tinjau kembali.\n\nUntuk mengkompilasi LSFG, pastikan Anda telah menginstal komponen berikut di sistem Anda:\n- Alat build tradisional (+ sed, git)\n- Kompiler Clang (proyek ini TIDAK mudah dikompilasi dengan GCC)\n- File header Vulkan\n- Sistem build CMake\n- Sistem build Meson (untuk DXVK)\n- Sistem build Ninja (backend untuk CMake)\n\nKompilasi lsfg-vk cukup mudah, karena semuanya telah terintegrasi rapi ke dalam CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nIni akan menginstal lsfg-vk ke ~/.local/lib dan ~/.local/share/vulkan.\n\nSelanjutnya, Anda perlu mengunduh Lossless Scaling dari Steam. Beralihlah ke branch `legacy_2.13` atau unduh depot yang sesuai.\nSalin atau catat path dari \"Lossless.dll\" dari file game.\n\nTerakhir, mari kita mulai sebuah program dengan frame generation diaktifkan. Saya akan menggunakan `vkcube` untuk contoh ini:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nPastikan Anda menyesuaikan path-nya. Mari kita periksa satu per satu:\n- `LVK_INSTANCE_LAYERS`: Tentukan `VK_LAYER_LS_frame_generation` di sini. Ini memaksa aplikasi Vulkan apa pun untuk memuat layer lsfg-vk.\n- `LSFG_DLL_PATH`: Di sini Anda menentukan Lossless.dll yang Anda unduh dari Steam. lsfg-vk akan mengekstrak dan menerjemahkan shader dari sini.\n- `LSFG_MULTIPLIER`: Ini adalah multiplier yang sudah Anda kenal. Tentukan `2` untuk menggandakan framerate, dll.\n- `VK_LAYER_PATH`: Jika Anda tidak menginstal ke `~/.local` atau `/usr`, Anda harus menentukan folder `explicit_layer.d` di sini.\n\n>[!WARNING]\n> Berbeda dengan di Windows, LSFG_MULTIPLIER sangat terbatas di sini (untuk saat ini!). Jika perangkat keras Anda dapat membuat 8 swapchain images, maka mengatur LSFG_MULTIPLIER ke 4 akan menggunakan 4 dari itu, menyisakan hanya 4 untuk game. Jika game meminta 5 atau lebih, maka akan crash.",
  "status": "ok"
}