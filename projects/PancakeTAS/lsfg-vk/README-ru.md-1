{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nЭтот проект переносит [Генерацию кадров Lossless Scaling](https://store.steampowered.com/app/993090/Lossless_Scaling/) на Linux!\n>[!NOTE]\n> Это проект в разработке. Хотя генерация кадров уже работает в некоторых играх, впереди ещё много работы. Пожалуйста, ознакомьтесь с вики для поддержки (вики ещё не написана)\n\n## Сборка, установка и запуск\n\n>[!CAUTION]\n> Инструкции по сборке недавно изменились. Пожалуйста, ознакомьтесь с ними.\n\nДля компиляции LSFG убедитесь, что у вас установлены следующие компоненты:\n- Традиционные инструменты сборки (+ sed, git)\n- Компилятор Clang (этот проект НЕ компилируется легко с GCC)\n- Заголовочные файлы Vulkan\n- Система сборки CMake\n- Система сборки Meson (для DXVK)\n- Система сборки Ninja (бэкенд для CMake)\n\nСборка lsfg-vk довольно проста, так как всё аккуратно интегрировано в CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nЭто установит lsfg-vk в ~/.local/lib и ~/.local/share/vulkan.\n\nДалее вам нужно скачать Lossless Scaling из Steam. Переключитесь на ветку `legacy_2.13` или скачайте соответствующий депо.\nСкопируйте или запомните путь к \"Lossless.dll\" из файлов игры.\n\nНаконец, давайте запустим программу с включённой генерацией кадров. В этом примере я буду использовать `vkcube`:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nУбедитесь, что вы скорректировали пути. Давайте рассмотрим каждый из них:\n- `LVK_INSTANCE_LAYERS`: Здесь укажите `VK_LAYER_LS_frame_generation`. Это заставляет любое Vulkan-приложение загружать слой lsfg-vk.\n- `LSFG_DLL_PATH`: Здесь вы указываете Lossless.dll, который скачали из Steam. lsfg-vk извлечёт и преобразует шейдеры отсюда.\n- `LSFG_MULTIPLIER`: Это множитель, с которым вы уже знакомы. Укажите `2` для удвоения частоты кадров и т.д.\n- `VK_LAYER_PATH`: Если вы не устанавливали в `~/.local` или `/usr`, здесь нужно указать папку `explicit_layer.d`.\n\n>[!WARNING]\n> В отличие от Windows, здесь LSFG_MULTIPLIER сильно ограничен (на данный момент!). Если ваше железо может создать 8 swapchain-изображений, установка LSFG_MULTIPLIER в 4 займёт 4 из них, оставив игре только 4. Если игра запросит 5 или больше, она вылетит.",
  "status": "ok"
}