{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\n该项目将[Lossless Scaling的帧生成](https://store.steampowered.com/app/993090/Lossless_Scaling/)带到Linux平台！\n>[!NOTE]\n> 这是一个正在开发中的项目。虽然帧生成已经在部分游戏中可用，但仍有很长的路要走。请查阅Wiki获取支持（Wiki尚未编写）\n\n## 构建、安装与运行\n\n>[!CAUTION]\n> 构建说明最近已更改。请仔细阅读。\n\n为了编译LSFG，请确保您的系统已安装以下组件：\n- 传统的构建工具（+ sed, git）\n- Clang编译器（本项目不易用GCC编译）\n- Vulkan头文件\n- CMake构建系统\n- Meson构建系统（用于DXVK）\n- Ninja构建系统（CMake后端）\n\n编译lsfg-vk相对简单，因为所有内容都已整合到CMake中：\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\n这会将lsfg-vk安装到~/.local/lib和~/.local/share/vulkan。\n\n接下来，您需要从Steam下载Lossless Scaling。切换到`legacy_2.13`分支或下载对应的depot。\n从游戏文件中复制或记录“Lossless.dll”的路径。\n\n最后，让我们实际启用帧生成启动一个程序。本示例将使用`vkcube`：\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\n请务必调整路径。让我们逐一解释这些环境变量：\n- `LVK_INSTANCE_LAYERS`：在此指定`VK_LAYER_LS_frame_generation`。这会强制任何Vulkan应用加载lsfg-vk层。\n- `LSFG_DLL_PATH`：这里填写您从Steam下载的Lossless.dll。lsfg-vk会从中提取并转换着色器。\n- `LSFG_MULTIPLIER`：这是您熟悉的倍增系数。指定`2`表示帧率翻倍，以此类推。\n- `VK_LAYER_PATH`：如果您没有安装到`~/.local`或`/usr`，则需要在此指定`explicit_layer.d`文件夹。\n\n>[!WARNING]\n> 与Windows不同，LSFG_MULTIPLIER在此处受到很大限制（目前如此！）。如果您的硬件可以创建8个swapchain图像，那么将LSFG_MULTIPLIER设置为4会占用其中4个，只剩4个给游戏。如果游戏请求5个或更多，将会崩溃。",
  "status": "ok"
}