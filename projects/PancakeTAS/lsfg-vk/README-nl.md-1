{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nDit project brengt [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) naar Linux!\n>[!NOTE]\n> Dit is een work-in-progress. Hoewel framegeneratie al in enkele games heeft gewerkt, is er nog een lange weg te gaan. Raadpleeg de wiki voor ondersteuning (de wiki is nog niet geschreven)\n\n## Bouwen, Installeren en Uitvoeren\n\n>[!CAUTION]\n> De bouwinstructies zijn recentelijk gewijzigd. Bekijk ze alstublieft.\n\nOm LSFG te compileren, zorg ervoor dat je de volgende componenten op je systeem hebt geïnstalleerd:\n- Traditionele buildtools (+ sed, git)\n- Clang-compiler (dit project compileert NIET eenvoudig met GCC)\n- Vulkan-headerbestanden\n- CMake-buildsysteem\n- Meson-buildsysteem (voor DXVK)\n- Ninja-buildsysteem (backend voor CMake)\n\nHet compileren van lsfg-vk is relatief eenvoudig, omdat alles netjes geïntegreerd is in CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nDit zal lsfg-vk installeren naar ~/.local/lib en ~/.local/share/vulkan.\n\nVervolgens moet je Lossless Scaling downloaden van Steam. Schakel over naar de `legacy_2.13` branch of download het bijbehorende depot.\nKopieer of noteer het pad van \"Lossless.dll\" uit de gamebestanden.\n\nTot slot gaan we daadwerkelijk een programma starten met framegeneratie ingeschakeld. Ik gebruik `vkcube` voor dit voorbeeld:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nZorg ervoor dat je de paden aanpast. Laten we elk ervan bekijken:\n- `LVK_INSTANCE_LAYERS`: Geef hier `VK_LAYER_LS_frame_generation` op. Dit dwingt elke Vulkan-app om de lsfg-vk-laag te laden.\n- `LSFG_DLL_PATH`: Hier geef je de Lossless.dll op die je van Steam hebt gedownload. lsfg-vk zal de shaders hieruit extraheren en vertalen.\n- `LSFG_MULTIPLIER`: Dit is de multiplier waarmee je bekend zou moeten zijn. Geef `2` op om de framerate te verdubbelen, enzovoorts.\n- `VK_LAYER_PATH`: Als je niet hebt geïnstalleerd naar `~/.local` of `/usr`, moet je hier de map `explicit_layer.d` opgeven.\n\n>[!WARNING]\n> In tegenstelling tot op Windows is LSFG_MULTIPLIER hier (op dit moment!) sterk beperkt. Als je hardware 8 swapchain-afbeeldingen kan maken, dan zal LSFG_MULTIPLIER op 4, vier daarvan bezetten, waardoor er nog maar 4 voor de game overblijven. Als de game er 5 of meer aanvraagt, zal deze crashen.",
  "status": "ok"
}