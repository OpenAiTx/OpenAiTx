{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\nCe projet apporte la [génération d'images de Lossless Scaling](https://store.steampowered.com/app/993090/Lossless_Scaling/) sur Linux !\n>[!NOTE]\n> Ceci est un travail en cours. Bien que la génération d'images fonctionne dans quelques jeux, il reste encore beaucoup à faire. Veuillez consulter le wiki pour le support (le wiki n'est pas encore rédigé)\n\n## Compilation, Installation et Exécution\n\n>[!CAUTION]\n> Les instructions de compilation ont récemment changé. Veuillez les consulter.\n\nPour compiler LSFG, assurez-vous d'avoir les composants suivants installés sur votre système :\n- Outils de compilation traditionnels (+ sed, git)\n- Compilateur Clang (ce projet NE se compile PAS facilement avec GCC)\n- Fichiers d'en-tête Vulkan\n- Système de build CMake\n- Système de build Meson (pour DXVK)\n- Système de build Ninja (backend pour CMake)\n\nLa compilation de lsfg-vk est relativement simple, car tout est soigneusement intégré dans CMake :\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nCela installera lsfg-vk dans ~/.local/lib et ~/.local/share/vulkan.\n\nEnsuite, vous devrez télécharger Lossless Scaling depuis Steam. Passez à la branche `legacy_2.13` ou téléchargez le dépôt correspondant.\nCopiez ou notez le chemin de \"Lossless.dll\" à partir des fichiers du jeu.\n\nEnfin, lançons un programme avec la génération d'images activée. J'utiliserai `vkcube` dans cet exemple :\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nAssurez-vous d'adapter les chemins. Examinons chacun d'eux :\n- `LVK_INSTANCE_LAYERS` : Indiquez ici `VK_LAYER_LS_frame_generation`. Cela force toute application Vulkan à charger la couche lsfg-vk.\n- `LSFG_DLL_PATH` : Ici, vous indiquez le Lossless.dll que vous avez téléchargé depuis Steam. lsfg-vk extraira et traduira les shaders à partir de ce fichier.\n- `LSFG_MULTIPLIER` : Il s'agit du multiplicateur avec lequel vous devriez être familier. Indiquez `2` pour doubler le nombre d'images par seconde, etc.\n- `VK_LAYER_PATH` : Si vous n'avez pas installé dans `~/.local` ou `/usr`, vous devez spécifier ici le dossier `explicit_layer.d`.\n\n>[!WARNING]\n> Contrairement à Windows, LSFG_MULTIPLIER est fortement limité ici (pour le moment !). Si votre matériel peut créer 8 images dans la swapchain, alors définir LSFG_MULTIPLIER à 4 en occupe 4, n'en laissant que 4 pour le jeu. Si le jeu en demande 5 ou plus, il plantera.",
  "status": "ok"
}