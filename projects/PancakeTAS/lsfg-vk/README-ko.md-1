{
  "id": 1,
  "origin": "# lsfg-vk\nThis project brings [Lossless Scaling's Frame Generation](https://store.steampowered.com/app/993090/Lossless_Scaling/) to Linux!\n>[!NOTE]\n> This is a work-in-progress. While frame generation has worked in a few games, there's still a long way to go. Please review the wiki for support (the wiki is not written yet)\n\n## Building, Installing and Running\n\n>[!CAUTION]\n> The build instructions have recently changed. Please review them.\n\nIn order to compile LSFG, make sure you have the following components installed on your system:\n- Traditional build tools (+ sed, git)\n- Clang compiler (this project does NOT compile easily with GCC)\n- Vulkan header files\n- CMake build system\n- Meson build system (for DXVK)\n- Ninja build system (backend for CMake)\n\nCompiling lsfg-vk is relatively straight forward, as everything is neatly integrated into CMake:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\nThis will install lsfg-vk to ~/.local/lib and ~/.local/share/vulkan.\n\nNext, you'll need to download Lossless Scaling from Steam. Switch to the `legacy_2.13` branch or download the corresponding depot.\nCopy or note down the path of \"Lossless.dll\" from the game files.\n\nFinally, let's actually start a program with frame generation enabled. I'm going to be using `vkcube` for this example:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\nMake sure you adjust the paths. Let's examine each one:\n- `LVK_INSTANCE_LAYERS`: Specify `VK_LAYER_LS_frame_generation` here. This forces any Vulkan app to load the lsfg-vk layer.\n- `LSFG_DLL_PATH`: Here you specify the Lossless.dll you downloaded from Steam. lsfg-vk will extract and translate the shaders from here.\n- `LSFG_MULTIPLIER`: This is the multiplier you should be familiar with. Specify `2` for doubling the framerate, etc.\n- `VK_LAYER_PATH`: If you did not install to `~/.local` or `/usr`, you have to specify the `explicit_layer.d` folder here.\n\n>[!WARNING]\n> Unlike on Windows, LSFG_MULTIPLIER is heavily limited here (at the moment!). If your hardware can create 8 swapchain images, then setting LSFG_MULTIPLIER to 4 occupies 4 of those, leaving only 4 to the game. If the game requested 5 or more, it will crash.\n",
  "origin_sha": "uxYiaVQ8HcbifhmKjFaWo6h0d3am2FT7mbjFZPpk5WI=",
  "translate": "# lsfg-vk\n이 프로젝트는 [Lossless Scaling의 프레임 생성](https://store.steampowered.com/app/993090/Lossless_Scaling/)을 리눅스에 도입합니다!\n>[!NOTE]\n> 이 프로젝트는 아직 진행 중입니다. 프레임 생성이 일부 게임에서 동작하긴 했으나, 아직 갈 길이 멉니다. 지원 관련 내용은 위키를 참고해주세요 (위키는 아직 작성되지 않았습니다)\n\n## 빌드, 설치 및 실행\n\n>[!CAUTION]\n> 빌드 방법이 최근에 변경되었습니다. 반드시 내용을 확인하세요.\n\nLSFG를 컴파일하려면, 시스템에 다음 구성 요소가 설치되어 있어야 합니다:\n- 전통적인 빌드 도구 (+ sed, git)\n- Clang 컴파일러 (이 프로젝트는 GCC로는 쉽게 컴파일되지 않습니다)\n- Vulkan 헤더 파일\n- CMake 빌드 시스템\n- Meson 빌드 시스템 (DXVK용)\n- Ninja 빌드 시스템 (CMake의 백엔드)\n\nlsfg-vk의 컴파일은 비교적 간단합니다. 모든 것이 CMake에 잘 통합되어 있습니다:\n```bash\n$ cmake -B build -G Ninja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/.local \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n    -DCMAKE_CXX_CLANG_TIDY=\"\"\n$ cmake --build build\n$ cmake --install build\n```\n이렇게 하면 lsfg-vk가 ~/.local/lib 및 ~/.local/share/vulkan에 설치됩니다.\n\n다음으로, Steam에서 Lossless Scaling을 다운로드해야 합니다. `legacy_2.13` 브랜치로 전환하거나 해당 depot을 다운로드하세요.\n게임 파일에서 \"Lossless.dll\"의 경로를 복사하거나 기억해 두세요.\n\n마지막으로, 프레임 생성이 활성화된 상태로 프로그램을 시작해 봅시다. 이 예시에서는 `vkcube`를 사용하겠습니다:\n```bash\nVK_INSTANCE_LAYERS=\"VK_LAYER_LS_frame_generation\" LSFG_DLL_PATH=\"/home/pancake/games/Lossless Scaling/Lossless.dll\" LSFG_MULTIPLIER=4 vkcube\n```\n경로를 적절히 수정해야 합니다. 각 항목을 살펴봅시다:\n- `LVK_INSTANCE_LAYERS`: 여기에는 `VK_LAYER_LS_frame_generation`을 지정합니다. 모든 Vulkan 앱이 lsfg-vk 레이어를 로드하도록 강제합니다.\n- `LSFG_DLL_PATH`: 여기에는 Steam에서 다운로드한 Lossless.dll의 경로를 지정합니다. lsfg-vk는 여기에서 셰이더를 추출하고 변환합니다.\n- `LSFG_MULTIPLIER`: 익숙할 만한 프레임 증가 배수입니다. 프레임레이트를 두 배로 늘리려면 `2`를 지정하세요.\n- `VK_LAYER_PATH`: `~/.local` 또는 `/usr`에 설치하지 않았다면, 여기에서 `explicit_layer.d` 폴더 경로를 지정해야 합니다.\n\n>[!WARNING]\n> Windows와 달리, 여기서는 LSFG_MULTIPLIER가 상당히 제한적입니다 (현재 기준!). 하드웨어가 8개의 스왑체인 이미지를 생성할 수 있다면, LSFG_MULTIPLIER를 4로 설정하면 그 중 4개가 점유되어 게임에는 4개만 남습니다. 만약 게임이 5개 이상의 이미지를 요청하면, 크래시가 발생할 수 있습니다.",
  "status": "ok"
}