[
  {
    "Id": 1,
    "Content": "*[English](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/README.md) ∙ [日本語](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/README-ja.md) ∙ [简体中文](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/README-zh-Hans.md) ∙ [繁體中文](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/README-zh-TW.md) | [العَرَبِيَّة‎](https://github.com/donnemartin/system-design-primer/issues/170) ∙ [বাংলা](https://github.com/donnemartin/system-design-primer/issues/220) ∙ [Português do Brasil](https://github.com/donnemartin/system-design-primer/issues/40) ∙ [Deutsch](https://github.com/donnemartin/system-design-primer/issues/186) ∙ [ελληνικά](https://github.com/donnemartin/system-design-primer/issues/130) ∙ [עברית](https://github.com/donnemartin/system-design-primer/issues/272) ∙ [Italiano](https://github.com/donnemartin/system-design-primer/issues/104) ∙ [한국어](https://github.com/donnemartin/system-design-primer/issues/102) ∙ [فارسی](https://github.com/donnemartin/system-design-primer/issues/110) ∙ [Polski](https://github.com/donnemartin/system-design-primer/issues/68) ∙ [русский язык](https://github.com/donnemartin/system-design-primer/issues/87) ∙ [Español](https://github.com/donnemartin/system-design-primer/issues/136) ∙ [ภาษาไทย](https://github.com/donnemartin/system-design-primer/issues/187) ∙ [Türkçe](https://github.com/donnemartin/system-design-primer/issues/39) ∙ [tiếng Việt](https://github.com/donnemartin/system-design-primer/issues/127) ∙ [Français](https://github.com/donnemartin/system-design-primer/issues/250) | [Add Translation](https://github.com/donnemartin/system-design-primer/issues/28)*",
    "ContentSha": "NV5If+n4caPL9367nN6NPHEHX2NVMyxh97QjgslLVk8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "*[English](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/README.md) ∙ [日本語](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/README-ja.md) ∙ [简体中文](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/README-zh-Hans.md) ∙ [繁體中文](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/README-zh-TW.md) | [العَرَبِيَّة‎](https://github.com/donnemartin/system-design-primer/issues/170) ∙ [বাংলা](https://github.com/donnemartin/system-design-primer/issues/220) ∙ [Português do Brasil](https://github.com/donnemartin/system-design-primer/issues/40) ∙ [Deutsch](https://github.com/donnemartin/system-design-primer/issues/186) ∙ [ελληνικά](https://github.com/donnemartin/system-design-primer/issues/130) ∙ [עברית](https://github.com/donnemartin/system-design-primer/issues/272) ∙ [Italiano](https://github.com/donnemartin/system-design-primer/issues/104) ∙ [한국어](https://github.com/donnemartin/system-design-primer/issues/102) ∙ [فارسی](https://github.com/donnemartin/system-design-primer/issues/110) ∙ [Polski](https://github.com/donnemartin/system-design-primer/issues/68) ∙ [русский язык](https://github.com/donnemartin/system-design-primer/issues/87) ∙ [Español](https://github.com/donnemartin/system-design-primer/issues/136) ∙ [ภาษาไทย](https://github.com/donnemartin/system-design-primer/issues/187) ∙ [Türkçe](https://github.com/donnemartin/system-design-primer/issues/39) ∙ [tiếng Việt](https://github.com/donnemartin/system-design-primer/issues/127) ∙ [Français](https://github.com/donnemartin/system-design-primer/issues/250) | [Add Translation](https://github.com/donnemartin/system-design-primer/issues/28)*",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "\n**Help [translate](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/TRANSLATIONS.md) this guide!**\n\n# The System Design Primer\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/jj3A5N8.png\">\n  <br/>\n</p>\n\n## Motivation\n\n> Learn how to design large-scale systems.\n>\n> Prep for the system design interview.\n\n### Learn how to design large-scale systems\n\nLearning how to design scalable systems will help you become a better engineer.\n\nSystem design is a broad topic.  There is a **vast amount of resources scattered throughout the web** on system design principles.\n\nThis repo is an **organized collection** of resources to help you learn how to build systems at scale.\n\n### Learn from the open source community\n\nThis is a continually updated, open source project.\n\n[Contributions](#contributing) are welcome!\n\n### Prep for the system design interview\n\nIn addition to coding interviews, system design is a **required component** of the **technical interview process** at many tech companies.\n\n**Practice common system design interview questions** and **compare** your results with **sample solutions**: discussions, code, and diagrams.\n\nAdditional topics for interview prep:\n\n* [Study guide](#study-guide)\n* [How to approach a system design interview question](#how-to-approach-a-system-design-interview-question)",
    "ContentSha": "AbJTT6alKgUjtCBRmG+Q5nAyd3D1OmTONWi5hXEC4sI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n**¡Ayuda a [traducir](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/TRANSLATIONS.md) esta guía!**\n\n# El Manual de Diseño de Sistemas\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/jj3A5N8.png\">\n  <br/>\n</p>\n\n## Motivación\n\n> Aprende cómo diseñar sistemas a gran escala.\n>\n> Prepárate para la entrevista de diseño de sistemas.\n\n### Aprende cómo diseñar sistemas a gran escala\n\nAprender a diseñar sistemas escalables te ayudará a convertirte en un mejor ingeniero.\n\nEl diseño de sistemas es un tema amplio. Hay una **gran cantidad de recursos dispersos por la web** sobre principios de diseño de sistemas.\n\nEste repositorio es una **colección organizada** de recursos para ayudarte a aprender cómo construir sistemas a escala.\n\n### Aprende de la comunidad de código abierto\n\nEste es un proyecto de código abierto, actualizado continuamente.\n\n¡[Contribuciones](#contributing) son bienvenidas!\n\n### Prepárate para la entrevista de diseño de sistemas\n\nAdemás de las entrevistas de programación, el diseño de sistemas es un **componente requerido** del **proceso técnico de entrevistas** en muchas empresas tecnológicas.\n\n**Practica preguntas comunes de entrevistas de diseño de sistemas** y **compara** tus resultados con **soluciones de ejemplo**: discusiones, código y diagramas.\n\nTemas adicionales para la preparación de entrevistas:\n\n* [Guía de estudio](#study-guide)\n* [Cómo abordar una pregunta de entrevista de diseño de sistemas](#how-to-approach-a-system-design-interview-question)",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 3,
    "Content": "* [System design interview questions, **with solutions**](#system-design-interview-questions-with-solutions)\n* [Object-oriented design interview questions, **with solutions**](#object-oriented-design-interview-questions-with-solutions)\n* [Additional system design interview questions](#additional-system-design-interview-questions)\n\n## Anki flashcards\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/zdCAkB3.png\">\n  <br/>\n</p>\n\nThe provided [Anki flashcard decks](https://apps.ankiweb.net/) use spaced repetition to help you retain key system design concepts.\n\n* [System design deck](https://github.com/donnemartin/system-design-primer/tree/master/resources/flash_cards/System%20Design.apkg)\n* [System design exercises deck](https://github.com/donnemartin/system-design-primer/tree/master/resources/flash_cards/System%20Design%20Exercises.apkg)\n* [Object oriented design exercises deck](https://github.com/donnemartin/system-design-primer/tree/master/resources/flash_cards/OO%20Design.apkg)\n\nGreat for use while on-the-go.\n\n### Coding Resource: Interactive Coding Challenges\n\nLooking for resources to help you prep for the [**Coding Interview**](https://github.com/donnemartin/interactive-coding-challenges)?\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/b4YtAEN.png\">\n  <br/>\n</p>\n\nCheck out the sister repo [**Interactive Coding Challenges**](https://github.com/donnemartin/interactive-coding-challenges), which contains an additional Anki deck:\n\n* [Coding deck](https://github.com/donnemartin/interactive-coding-challenges/tree/master/anki_cards/Coding.apkg)\n\n## Contributing\n\n> Learn from the community.\n\nFeel free to submit pull requests to help:\n\n* Fix errors\n* Improve sections",
    "ContentSha": "SXl/9sXgfkMzgSqqZA/bJ68vMrerBbNpRqT5TMAq1Hg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* [Preguntas de entrevista sobre diseño de sistemas, **con soluciones**](#system-design-interview-questions-with-solutions)\n* [Preguntas de entrevista sobre diseño orientado a objetos, **con soluciones**](#object-oriented-design-interview-questions-with-solutions)\n* [Preguntas adicionales de entrevista sobre diseño de sistemas](#additional-system-design-interview-questions)\n\n## Tarjetas Anki\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/zdCAkB3.png\">\n  <br/>\n</p>\n\nLos [mazos de tarjetas Anki](https://apps.ankiweb.net/) proporcionados usan repetición espaciada para ayudarte a retener conceptos clave de diseño de sistemas.\n\n* [Mazo de diseño de sistemas](https://github.com/donnemartin/system-design-primer/tree/master/resources/flash_cards/System%20Design.apkg)\n* [Mazo de ejercicios de diseño de sistemas](https://github.com/donnemartin/system-design-primer/tree/master/resources/flash_cards/System%20Design%20Exercises.apkg)\n* [Mazo de ejercicios de diseño orientado a objetos](https://github.com/donnemartin/system-design-primer/tree/master/resources/flash_cards/OO%20Design.apkg)\n\nIdeal para usar mientras estás en movimiento.\n\n### Recurso de codificación: Desafíos de codificación interactivos\n\n¿Buscas recursos para ayudarte a prepararte para la [**Entrevista de codificación**](https://github.com/donnemartin/interactive-coding-challenges)?\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/b4YtAEN.png\">\n  <br/>\n</p>\n\nConsulta el repositorio hermano [**Desafíos de codificación interactivos**](https://github.com/donnemartin/interactive-coding-challenges), que contiene un mazo adicional de Anki:\n\n* [Mazo de codificación](https://github.com/donnemartin/interactive-coding-challenges/tree/master/anki_cards/Coding.apkg)\n\n## Contribuciones\n\n> Aprende de la comunidad.\n\nNo dudes en enviar pull requests para ayudar a:\n\n* Corregir errores\n* Mejorar secciones",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 4,
    "Content": "* Add new sections\n* [Translate](https://github.com/donnemartin/system-design-primer/issues/28)\n\nContent that needs some polishing is placed [under development](#under-development).\n\nReview the [Contributing Guidelines](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/CONTRIBUTING.md).\n\n## Index of system design topics\n\n> Summaries of various system design topics, including pros and cons.  **Everything is a trade-off**.\n>\n> Each section contains links to more in-depth resources.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/jrUBAF7.png\">\n  <br/>\n</p>\n\n* [System design topics: start here](#system-design-topics-start-here)\n    * [Step 1: Review the scalability video lecture](#step-1-review-the-scalability-video-lecture)\n    * [Step 2: Review the scalability article](#step-2-review-the-scalability-article)\n    * [Next steps](#next-steps)\n* [Performance vs scalability](#performance-vs-scalability)\n* [Latency vs throughput](#latency-vs-throughput)\n* [Availability vs consistency](#availability-vs-consistency)\n    * [CAP theorem](#cap-theorem)\n        * [CP - consistency and partition tolerance](#cp---consistency-and-partition-tolerance)\n        * [AP - availability and partition tolerance](#ap---availability-and-partition-tolerance)\n* [Consistency patterns](#consistency-patterns)\n    * [Weak consistency](#weak-consistency)\n    * [Eventual consistency](#eventual-consistency)\n    * [Strong consistency](#strong-consistency)\n* [Availability patterns](#availability-patterns)\n    * [Fail-over](#fail-over)\n    * [Replication](#replication)\n    * [Availability in numbers](#availability-in-numbers)\n* [Domain name system](#domain-name-system)\n* [Content delivery network](#content-delivery-network)\n    * [Push CDNs](#push-cdns)\n    * [Pull CDNs](#pull-cdns)",
    "ContentSha": "55nlChjOgBlS9Rz8E9JfxCDdOyXcovuwIdqXYGb4sqo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* Añadir nuevas secciones  \n* [Traducir](https://github.com/donnemartin/system-design-primer/issues/28)  \n\nEl contenido que necesita pulirse está colocado [en desarrollo](#under-development).  \n\nRevise las [Pautas para contribuir](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/CONTRIBUTING.md).  \n\n## Índice de temas de diseño de sistemas  \n\n> Resúmenes de varios temas de diseño de sistemas, incluyendo pros y contras.  **Todo es un compromiso**.  \n>  \n> Cada sección contiene enlaces a recursos más profundos.  \n\n<p align=\"center\">  \n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/jrUBAF7.png\">  \n  <br/>  \n</p>  \n\n* [Temas de diseño de sistemas: empezar aquí](#system-design-topics-start-here)  \n    * [Paso 1: Revisar la conferencia en video sobre escalabilidad](#step-1-review-the-scalability-video-lecture)  \n    * [Paso 2: Revisar el artículo sobre escalabilidad](#step-2-review-the-scalability-article)  \n    * [Próximos pasos](#next-steps)  \n* [Rendimiento vs escalabilidad](#performance-vs-scalability)  \n* [Latencia vs rendimiento](#latency-vs-throughput)  \n* [Disponibilidad vs consistencia](#availability-vs-consistency)  \n    * [Teorema CAP](#cap-theorem)  \n        * [CP - consistencia y tolerancia a particiones](#cp---consistency-and-partition-tolerance)  \n        * [AP - disponibilidad y tolerancia a particiones](#ap---availability-and-partition-tolerance)  \n* [Patrones de consistencia](#consistency-patterns)  \n    * [Consistencia débil](#weak-consistency)  \n    * [Consistencia eventual](#eventual-consistency)  \n    * [Consistencia fuerte](#strong-consistency)  \n* [Patrones de disponibilidad](#availability-patterns)  \n    * [Conmutación por error](#fail-over)  \n    * [Replicación](#replication)  \n    * [Disponibilidad en números](#availability-in-numbers)  \n* [Sistema de nombres de dominio](#domain-name-system)  \n* [Red de entrega de contenido](#content-delivery-network)  \n    * [CDNs push](#push-cdns)  \n    * [CDNs pull](#pull-cdns)",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 5,
    "Content": "* [Load balancer](#load-balancer)\n    * [Active-passive](#active-passive)\n    * [Active-active](#active-active)\n    * [Layer 4 load balancing](#layer-4-load-balancing)\n    * [Layer 7 load balancing](#layer-7-load-balancing)\n    * [Horizontal scaling](#horizontal-scaling)\n* [Reverse proxy (web server)](#reverse-proxy-web-server)\n    * [Load balancer vs reverse proxy](#load-balancer-vs-reverse-proxy)\n* [Application layer](#application-layer)\n    * [Microservices](#microservices)\n    * [Service discovery](#service-discovery)\n* [Database](#database)\n    * [Relational database management system (RDBMS)](#relational-database-management-system-rdbms)\n        * [Master-slave replication](#master-slave-replication)\n        * [Master-master replication](#master-master-replication)\n        * [Federation](#federation)\n        * [Sharding](#sharding)\n        * [Denormalization](#denormalization)\n        * [SQL tuning](#sql-tuning)\n    * [NoSQL](#nosql)\n        * [Key-value store](#key-value-store)\n        * [Document store](#document-store)\n        * [Wide column store](#wide-column-store)\n        * [Graph Database](#graph-database)\n    * [SQL or NoSQL](#sql-or-nosql)\n* [Cache](#cache)\n    * [Client caching](#client-caching)\n    * [CDN caching](#cdn-caching)\n    * [Web server caching](#web-server-caching)\n    * [Database caching](#database-caching)\n    * [Application caching](#application-caching)\n    * [Caching at the database query level](#caching-at-the-database-query-level)\n    * [Caching at the object level](#caching-at-the-object-level)\n    * [When to update the cache](#when-to-update-the-cache)\n        * [Cache-aside](#cache-aside)\n        * [Write-through](#write-through)\n        * [Write-behind (write-back)](#write-behind-write-back)\n        * [Refresh-ahead](#refresh-ahead)\n* [Asynchronism](#asynchronism)\n    * [Message queues](#message-queues)",
    "ContentSha": "asKFjZ3AfCGQPD58skhfkEeJZEI9zP/H+h/3PnvCFDY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* [Balanceador de carga](#load-balancer)\n    * [Activo-pasivo](#active-passive)\n    * [Activo-activo](#active-active)\n    * [Balanceo de carga en capa 4](#layer-4-load-balancing)\n    * [Balanceo de carga en capa 7](#layer-7-load-balancing)\n    * [Escalado horizontal](#horizontal-scaling)\n* [Proxy inverso (servidor web)](#reverse-proxy-web-server)\n    * [Balanceador de carga vs proxy inverso](#load-balancer-vs-reverse-proxy)\n* [Capa de aplicación](#application-layer)\n    * [Microservicios](#microservices)\n    * [Descubrimiento de servicios](#service-discovery)\n* [Base de datos](#database)\n    * [Sistema de gestión de bases de datos relacionales (RDBMS)](#relational-database-management-system-rdbms)\n        * [Replicación maestro-esclavo](#master-slave-replication)\n        * [Replicación maestro-maestro](#master-master-replication)\n        * [Federación](#federation)\n        * [Fragmentación (Sharding)](#sharding)\n        * [Desnormalización](#denormalization)\n        * [Optimización de SQL](#sql-tuning)\n    * [NoSQL](#nosql)\n        * [Almacén clave-valor](#key-value-store)\n        * [Almacén de documentos](#document-store)\n        * [Almacén de columnas anchas](#wide-column-store)\n        * [Base de datos de grafos](#graph-database)\n    * [SQL o NoSQL](#sql-or-nosql)\n* [Caché](#cache)\n    * [Caché del cliente](#client-caching)\n    * [Caché de CDN](#cdn-caching)\n    * [Caché del servidor web](#web-server-caching)\n    * [Caché de la base de datos](#database-caching)\n    * [Caché de la aplicación](#application-caching)\n    * [Caché a nivel de consulta de base de datos](#caching-at-the-database-query-level)\n    * [Caché a nivel de objeto](#caching-at-the-object-level)\n    * [Cuándo actualizar la caché](#when-to-update-the-cache)\n        * [Cache-aside](#cache-aside)\n        * [Write-through](#write-through)\n        * [Write-behind (escritura diferida)](#write-behind-write-back)\n        * [Refresh-ahead](#refresh-ahead)\n* [Asincronismo](#asynchronism)\n    * [Colas de mensajes](#message-queues)",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 6,
    "Content": "    * [Task queues](#task-queues)\n    * [Back pressure](#back-pressure)\n* [Communication](#communication)\n    * [Transmission control protocol (TCP)](#transmission-control-protocol-tcp)\n    * [User datagram protocol (UDP)](#user-datagram-protocol-udp)\n    * [Remote procedure call (RPC)](#remote-procedure-call-rpc)\n    * [Representational state transfer (REST)](#representational-state-transfer-rest)\n* [Security](#security)\n* [Appendix](#appendix)\n    * [Powers of two table](#powers-of-two-table)\n    * [Latency numbers every programmer should know](#latency-numbers-every-programmer-should-know)\n    * [Additional system design interview questions](#additional-system-design-interview-questions)\n    * [Real world architectures](#real-world-architectures)\n    * [Company architectures](#company-architectures)\n    * [Company engineering blogs](#company-engineering-blogs)\n* [Under development](#under-development)\n* [Credits](#credits)\n* [Contact info](#contact-info)\n* [License](#license)\n\n## Study guide\n\n> Suggested topics to review based on your interview timeline (short, medium, long).\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/OfVllex.png)\n\n**Q: For interviews, do I need to know everything here?**\n\n**A: No, you don't need to know everything here to prepare for the interview**.\n\nWhat you are asked in an interview depends on variables such as:\n\n* How much experience you have\n* What your technical background is\n* What positions you are interviewing for\n* Which companies you are interviewing with\n* Luck\n\nMore experienced candidates are generally expected to know more about system design.  Architects or team leads might be expected to know more than individual contributors.  Top tech companies are likely to have one or more design interview rounds.\n",
    "ContentSha": "ATTNyUBhYGX23A6dK9YO6hNcpGiZGZByeStHZczOceg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "    * [Colas de tareas](#task-queues)\n    * [Presión de retorno](#back-pressure)\n* [Comunicación](#communication)\n    * [Protocolo de control de transmisión (TCP)](#transmission-control-protocol-tcp)\n    * [Protocolo de datagramas de usuario (UDP)](#user-datagram-protocol-udp)\n    * [Llamada a procedimiento remoto (RPC)](#remote-procedure-call-rpc)\n    * [Transferencia de estado representacional (REST)](#representational-state-transfer-rest)\n* [Seguridad](#security)\n* [Apéndice](#appendix)\n    * [Tabla de potencias de dos](#powers-of-two-table)\n    * [Números de latencia que todo programador debería conocer](#latency-numbers-every-programmer-should-know)\n    * [Preguntas adicionales para entrevistas de diseño de sistemas](#additional-system-design-interview-questions)\n    * [Arquitecturas del mundo real](#real-world-architectures)\n    * [Arquitecturas de empresas](#company-architectures)\n    * [Blogs de ingeniería de empresas](#company-engineering-blogs)\n* [En desarrollo](#under-development)\n* [Créditos](#credits)\n* [Información de contacto](#contact-info)\n* [Licencia](#license)\n\n## Guía de estudio\n\n> Temas sugeridos para revisar según tu cronograma de entrevistas (corto, medio, largo).\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/OfVllex.png)\n\n**P: Para las entrevistas, ¿necesito saber todo lo que está aquí?**\n\n**R: No, no necesitas saber todo esto para prepararte para la entrevista**.\n\nLo que te pregunten en una entrevista depende de variables como:\n\n* Cuánta experiencia tienes\n* Cuál es tu formación técnica\n* Para qué puestos estás entrevistando\n* Con qué empresas estás entrevistando\n* Suerte\n\nGeneralmente se espera que los candidatos con más experiencia sepan más sobre diseño de sistemas. Los arquitectos o líderes de equipo podrían esperarse que sepan más que los colaboradores individuales. Las principales empresas tecnológicas probablemente tengan una o más rondas de entrevistas de diseño.\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 7,
    "Content": "Start broad and go deeper in a few areas.  It helps to know a little about various key system design topics.  Adjust the following guide based on your timeline, experience, what positions you are interviewing for, and which companies you are interviewing with.\n\n* **Short timeline** - Aim for **breadth** with system design topics.  Practice by solving **some** interview questions.\n* **Medium timeline** - Aim for **breadth** and **some depth** with system design topics.  Practice by solving **many** interview questions.\n* **Long timeline** - Aim for **breadth** and **more depth** with system design topics.  Practice by solving **most** interview questions.\n\n| | Short | Medium | Long |\n|---|---|---|---|\n| Read through the [System design topics](#index-of-system-design-topics) to get a broad understanding of how systems work | :+1: | :+1: | :+1: |\n| Read through a few articles in the [Company engineering blogs](#company-engineering-blogs) for the companies you are interviewing with | :+1: | :+1: | :+1: |\n| Read through a few [Real world architectures](#real-world-architectures) | :+1: | :+1: | :+1: |\n| Review [How to approach a system design interview question](#how-to-approach-a-system-design-interview-question) | :+1: | :+1: | :+1: |\n| Work through [System design interview questions with solutions](#system-design-interview-questions-with-solutions) | Some | Many | Most |\n| Work through [Object-oriented design interview questions with solutions](#object-oriented-design-interview-questions-with-solutions) | Some | Many | Most |\n| Review [Additional system design interview questions](#additional-system-design-interview-questions) | Some | Many | Most |\n\n## How to approach a system design interview question\n\n> How to tackle a system design interview question.\n\nThe system design interview is an **open-ended conversation**.  You are expected to lead it.\n\nYou can use the following steps to guide the discussion.  To help solidify this process, work through the [System design interview questions with solutions](#system-design-interview-questions-with-solutions) section using the following steps.\n\n### Step 1: Outline use cases, constraints, and assumptions\n\nGather requirements and scope the problem.  Ask questions to clarify use cases and constraints.  Discuss assumptions.\n\n* Who is going to use it?\n* How are they going to use it?\n* How many users are there?\n* What does the system do?\n* What are the inputs and outputs of the system?\n* How much data do we expect to handle?\n* How many requests per second do we expect?\n* What is the expected read to write ratio?\n\n### Step 2: Create a high level design\n\nOutline a high level design with all important components.",
    "ContentSha": "0rdWLVZbH/nPM3xkHGejRJHpsR4f8urb5LkuDcPAbZM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Comienza de forma amplia y profundiza en algunas áreas. Ayuda conocer un poco sobre varios temas clave de diseño de sistemas. Ajusta la siguiente guía según tu cronograma, experiencia, los puestos para los que estás entrevistando y las empresas con las que estás en proceso de selección.\n\n* **Cronograma corto** - Apunta a la **amplitud** en temas de diseño de sistemas. Practica resolviendo **algunas** preguntas de entrevista.\n* **Cronograma medio** - Apunta a la **amplitud** y **algo de profundidad** en temas de diseño de sistemas. Practica resolviendo **muchas** preguntas de entrevista.\n* **Cronograma largo** - Apunta a la **amplitud** y **más profundidad** en temas de diseño de sistemas. Practica resolviendo **la mayoría** de preguntas de entrevista.\n\n| | Corto | Medio | Largo |\n|---|---|---|---|\n| Lee los [Temas de diseño de sistemas](#index-of-system-design-topics) para obtener una comprensión amplia de cómo funcionan los sistemas | :+1: | :+1: | :+1: |\n| Lee algunos artículos en los [Blogs de ingeniería de empresas](#company-engineering-blogs) para las empresas con las que estás entrevistando | :+1: | :+1: | :+1: |\n| Lee algunas [Arquitecturas del mundo real](#real-world-architectures) | :+1: | :+1: | :+1: |\n| Revisa [Cómo abordar una pregunta de entrevista de diseño de sistemas](#how-to-approach-a-system-design-interview-question) | :+1: | :+1: | :+1: |\n| Trabaja con [Preguntas de entrevistas de diseño de sistemas con soluciones](#system-design-interview-questions-with-solutions) | Algunas | Muchas | La mayoría |\n| Trabaja con [Preguntas de entrevistas de diseño orientado a objetos con soluciones](#object-oriented-design-interview-questions-with-solutions) | Algunas | Muchas | La mayoría |\n| Revisa [Preguntas adicionales de entrevistas de diseño de sistemas](#additional-system-design-interview-questions) | Algunas | Muchas | La mayoría |\n\n## Cómo abordar una pregunta de entrevista de diseño de sistemas\n\n> Cómo enfrentar una pregunta de entrevista de diseño de sistemas.\n\nLa entrevista de diseño de sistemas es una **conversación abierta**. Se espera que tú la lideres.\n\nPuedes usar los siguientes pasos para guiar la discusión. Para ayudar a consolidar este proceso, trabaja la sección de [Preguntas de entrevistas de diseño de sistemas con soluciones](#system-design-interview-questions-with-solutions) usando los siguientes pasos.\n\n### Paso 1: Delimitar casos de uso, restricciones y suposiciones\n\nReúne los requisitos y define el alcance del problema. Haz preguntas para clarificar casos de uso y restricciones. Discute las suposiciones.\n\n* ¿Quién lo va a usar?\n* ¿Cómo lo van a usar?\n* ¿Cuántos usuarios hay?\n* ¿Qué hace el sistema?\n* ¿Cuáles son las entradas y salidas del sistema?\n* ¿Cuánta información esperamos manejar?\n* ¿Cuántas solicitudes por segundo esperamos?\n* ¿Cuál es la proporción esperada de lectura a escritura?\n\n### Paso 2: Crear un diseño a alto nivel\n\nEsboza un diseño a alto nivel con todos los componentes importantes.",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 8,
    "Content": "\n* Sketch the main components and connections\n* Justify your ideas\n\n### Step 3: Design core components\n\nDive into details for each core component.  For example, if you were asked to [design a url shortening service](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/README.md), discuss:\n\n* Generating and storing a hash of the full url\n    * [MD5](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/README.md) and [Base62](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/README.md)\n    * Hash collisions\n    * SQL or NoSQL\n    * Database schema\n* Translating a hashed url to the full url\n    * Database lookup\n* API and object-oriented design\n\n### Step 4: Scale the design\n\nIdentify and address bottlenecks, given the constraints.  For example, do you need the following to address scalability issues?\n\n* Load balancer\n* Horizontal scaling\n* Caching\n* Database sharding\n\nDiscuss potential solutions and trade-offs.  Everything is a trade-off.  Address bottlenecks using [principles of scalable system design](#index-of-system-design-topics).\n\n### Back-of-the-envelope calculations\n\nYou might be asked to do some estimates by hand.  Refer to the [Appendix](#appendix) for the following resources:\n\n* [Use back of the envelope calculations](http://highscalability.com/blog/2011/1/26/google-pro-tip-use-back-of-the-envelope-calculations-to-choo.html)\n* [Powers of two table](#powers-of-two-table)\n* [Latency numbers every programmer should know](#latency-numbers-every-programmer-should-know)\n\n### Source(s) and further reading\n\nCheck out the following links to get a better idea of what to expect:\n",
    "ContentSha": "3x8iTXwR6ek+uAlSMupV1OgJsT8IwtVYxDBvXMFsB/g=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* Esboza los componentes principales y las conexiones  \n* Justifica tus ideas  \n\n### Paso 3: Diseñar los componentes centrales  \n\nProfundiza en los detalles de cada componente central. Por ejemplo, si te piden [diseñar un servicio de acortamiento de URLs](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/README.md), discute:  \n\n* Generar y almacenar un hash de la URL completa  \n    * [MD5](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/README.md) y [Base62](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/README.md)  \n    * Colisiones de hash  \n    * SQL o NoSQL  \n    * Esquema de base de datos  \n* Traducir una URL hasheada a la URL completa  \n    * Consulta en base de datos  \n* Diseño de API y orientado a objetos  \n\n### Paso 4: Escalar el diseño  \n\nIdentifica y soluciona los cuellos de botella, dadas las restricciones. Por ejemplo, ¿necesitas lo siguiente para abordar problemas de escalabilidad?  \n\n* Balanceador de carga  \n* Escalado horizontal  \n* Caché  \n* Fragmentación de base de datos  \n\nDiscute posibles soluciones y compensaciones. Todo es una compensación. Resuelve los cuellos de botella usando [principios de diseño de sistemas escalables](#index-of-system-design-topics).  \n\n### Cálculos aproximados  \n\nPodrías necesitar hacer algunas estimaciones a mano. Consulta el [Apéndice](#appendix) para los siguientes recursos:  \n\n* [Usar cálculos aproximados](http://highscalability.com/blog/2011/1/26/google-pro-tip-use-back-of-the-envelope-calculations-to-choo.html)  \n* [Tabla de potencias de dos](#powers-of-two-table)  \n* [Números de latencia que todo programador debería conocer](#latency-numbers-every-programmer-should-know)  \n\n### Fuente(s) y lectura adicional  \n\nConsulta los siguientes enlaces para tener una mejor idea de qué esperar:\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 9,
    "Content": "* [How to ace a systems design interview](https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/)\n* [The system design interview](http://www.hiredintech.com/system-design)\n* [Intro to Architecture and Systems Design Interviews](https://www.youtube.com/watch?v=ZgdS0EUmn70)\n* [System design template](https://leetcode.com/discuss/career/229177/My-System-Design-Template)\n\n## System design interview questions with solutions\n\n> Common system design interview questions with sample discussions, code, and diagrams.\n>\n> Solutions linked to content in the `solutions/` folder.\n\n| Question | |\n|---|---|\n| Design Pastebin.com (or Bit.ly) | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/README.md) |\n| Design the Twitter timeline and search (or Facebook feed and search) | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/twitter/README.md) |\n| Design a web crawler | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/web_crawler/README.md) |\n| Design Mint.com | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/mint/README.md) |\n| Design the data structures for a social network | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/social_graph/README.md) |\n| Design a key-value store for a search engine | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/query_cache/README.md) |\n| Design Amazon's sales ranking by category feature | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/sales_rank/README.md) |\n| Design a system that scales to millions of users on AWS | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/scaling_aws/README.md) |\n| Add a system design question | [Contribute](#contributing) |\n\n### Design Pastebin.com (or Bit.ly)\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/4edXG0T.png)\n\n### Design the Twitter timeline and search (or Facebook feed and search)\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/twitter/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/jrUBAF7.png)\n\n### Design a web crawler\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/web_crawler/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/bWxPtQA.png)",
    "ContentSha": "AHgKOfvgyoP47Euk86jhd2olVjkmP2nZB6tXbpOIqic=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* [Cómo triunfar en una entrevista de diseño de sistemas](https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/)\n* [La entrevista de diseño de sistemas](http://www.hiredintech.com/system-design)\n* [Introducción a la arquitectura y entrevistas de diseño de sistemas](https://www.youtube.com/watch?v=ZgdS0EUmn70)\n* [Plantilla de diseño de sistemas](https://leetcode.com/discuss/career/229177/My-System-Design-Template)\n\n## Preguntas de entrevistas de diseño de sistemas con soluciones\n\n> Preguntas comunes de entrevistas de diseño de sistemas con discusiones de ejemplo, código y diagramas.\n>\n> Soluciones enlazadas al contenido en la carpeta `solutions/`.\n\n| Pregunta | |\n|---|---|\n| Diseñar Pastebin.com (o Bit.ly) | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/README.md) |\n| Diseñar la línea de tiempo y búsqueda de Twitter (o el feed y búsqueda de Facebook) | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/twitter/README.md) |\n| Diseñar un rastreador web | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/web_crawler/README.md) |\n| Diseñar Mint.com | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/mint/README.md) |\n| Diseñar las estructuras de datos para una red social | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/social_graph/README.md) |\n| Diseñar un almacén clave-valor para un motor de búsqueda | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/query_cache/README.md) |\n| Diseñar la función de clasificación de ventas por categoría de Amazon | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/sales_rank/README.md) |\n| Diseñar un sistema que escale a millones de usuarios en AWS | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/scaling_aws/README.md) |\n| Añadir una pregunta de diseño de sistemas | [Contribuir](#contributing) |\n\n### Diseñar Pastebin.com (o Bit.ly)\n\n[Ver ejercicio y solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/4edXG0T.png)\n\n### Diseñar la línea de tiempo y búsqueda de Twitter (o el feed y búsqueda de Facebook)\n\n[Ver ejercicio y solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/twitter/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/jrUBAF7.png)\n\n### Diseñar un rastreador web\n\n[Ver ejercicio y solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/web_crawler/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/bWxPtQA.png)",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 10,
    "Content": "\n### Design Mint.com\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/mint/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/V5q57vU.png)\n\n### Design the data structures for a social network\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/social_graph/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/cdCv5g7.png)\n\n### Design a key-value store for a search engine\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/query_cache/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/4j99mhe.png)\n\n### Design Amazon's sales ranking by category feature\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/sales_rank/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/MzExP06.png)\n\n### Design a system that scales to millions of users on AWS\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/scaling_aws/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/jj3A5N8.png)\n\n## Object-oriented design interview questions with solutions\n\n> Common object-oriented design interview questions with sample discussions, code, and diagrams.\n>\n> Solutions linked to content in the `solutions/` folder.\n\n>**Note: This section is under development**\n\n| Question | |",
    "ContentSha": "o3sbdfQZN6cWPJee4lAmThiTo/ED2IUg9UbWh2T8Jr8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n### Design Mint.com\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/mint/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/V5q57vU.png)\n\n### Design the data structures for a social network\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/social_graph/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/cdCv5g7.png)\n\n### Design a key-value store for a search engine\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/query_cache/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/4j99mhe.png)\n\n### Design Amazon's sales ranking by category feature\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/sales_rank/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/MzExP06.png)\n\n### Design a system that scales to millions of users on AWS\n\n[View exercise and solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/scaling_aws/README.md)\n\n![Imgur](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/jj3A5N8.png)\n\n## Object-oriented design interview questions with solutions\n\n> Common object-oriented design interview questions with sample discussions, code, and diagrams.\n>\n> Solutions linked to content in the `solutions/` folder.\n\n>**Note: This section is under development**\n\n| Question | |",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 11,
    "Content": "|---|---|\n| Design a hash map | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/hash_table/hash_map.ipynb)  |\n| Design a least recently used cache | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/lru_cache/lru_cache.ipynb)  |\n| Design a call center | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/call_center/call_center.ipynb)  |\n| Design a deck of cards | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/deck_of_cards/deck_of_cards.ipynb)  |\n| Design a parking lot | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/parking_lot/parking_lot.ipynb)  |\n| Design a chat server | [Solution](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/online_chat/online_chat.ipynb)  |\n| Design a circular array | [Contribute](#contributing)  |\n| Add an object-oriented design question | [Contribute](#contributing) |\n\n## System design topics: start here\n\nNew to system design?\n\nFirst, you'll need a basic understanding of common principles, learning about what they are, how they are used, and their pros and cons.\n\n### Step 1: Review the scalability video lecture\n\n[Scalability Lecture at Harvard](https://www.youtube.com/watch?v=-W9F__D3oY4)\n\n* Topics covered:\n    * Vertical scaling\n    * Horizontal scaling\n    * Caching\n    * Load balancing\n    * Database replication\n    * Database partitioning\n\n### Step 2: Review the scalability article\n\n[Scalability](https://web.archive.org/web/20221030091841/http://www.lecloud.net/tagged/scalability/chrono)\n\n* Topics covered:\n    * [Clones](https://web.archive.org/web/20220530193911/https://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones)\n    * [Databases](https://web.archive.org/web/20220602114024/https://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database)\n    * [Caches](https://web.archive.org/web/20230126233752/https://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache)\n    * [Asynchronism](https://web.archive.org/web/20220926171507/https://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism)\n\n### Next steps\n",
    "ContentSha": "x8nrhrohPoZjm2NWw4mmB3mvJSUCp+CF0oOOqij1Y4E=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "|---|---|\n| Diseñar un mapa hash | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/hash_table/hash_map.ipynb)  |\n| Diseñar una caché LRU (menos recientemente usada) | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/lru_cache/lru_cache.ipynb)  |\n| Diseñar un centro de llamadas | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/call_center/call_center.ipynb)  |\n| Diseñar una baraja de cartas | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/deck_of_cards/deck_of_cards.ipynb)  |\n| Diseñar un estacionamiento | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/parking_lot/parking_lot.ipynb)  |\n| Diseñar un servidor de chat | [Solución](https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/online_chat/online_chat.ipynb)  |\n| Diseñar un arreglo circular | [Contribuir](#contributing)  |\n| Añadir una pregunta de diseño orientado a objetos | [Contribuir](#contributing) |\n\n## Temas de diseño de sistemas: comienza aquí\n\n¿Nuevo en diseño de sistemas?\n\nPrimero, necesitarás una comprensión básica de principios comunes, aprendiendo qué son, cómo se usan y sus pros y contras.\n\n### Paso 1: Revisar la clase magistral sobre escalabilidad\n\n[Clase sobre escalabilidad en Harvard](https://www.youtube.com/watch?v=-W9F__D3oY4)\n\n* Temas cubiertos:\n    * Escalado vertical\n    * Escalado horizontal\n    * Caché\n    * Balanceo de carga\n    * Replicación de bases de datos\n    * Particionamiento de bases de datos\n\n### Paso 2: Revisar el artículo sobre escalabilidad\n\n[Escalabilidad](https://web.archive.org/web/20221030091841/http://www.lecloud.net/tagged/scalability/chrono)\n\n* Temas cubiertos:\n    * [Clones](https://web.archive.org/web/20220530193911/https://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones)\n    * [Bases de datos](https://web.archive.org/web/20220602114024/https://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database)\n    * [Cachés](https://web.archive.org/web/20230126233752/https://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache)\n    * [Asincronismo](https://web.archive.org/web/20220926171507/https://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism)\n\n### Próximos pasos\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 12,
    "Content": "Next, we'll look at high-level trade-offs:\n\n* **Performance** vs **scalability**\n* **Latency** vs **throughput**\n* **Availability** vs **consistency**\n\nKeep in mind that **everything is a trade-off**.\n\nThen we'll dive into more specific topics such as DNS, CDNs, and load balancers.\n\n## Performance vs scalability\n\nA service is **scalable** if it results in increased **performance** in a manner proportional to resources added. Generally, increasing performance means serving more units of work, but it can also be to handle larger units of work, such as when datasets grow.<sup><a href=http://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html>1</a></sup>\n\nAnother way to look at performance vs scalability:\n\n* If you have a **performance** problem, your system is slow for a single user.\n* If you have a **scalability** problem, your system is fast for a single user but slow under heavy load.\n\n### Source(s) and further reading\n\n* [A word on scalability](http://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html)\n* [Scalability, availability, stability, patterns](http://www.slideshare.net/jboner/scalability-availability-stability-patterns/)\n\n## Latency vs throughput\n\n**Latency** is the time to perform some action or to produce some result.\n\n**Throughput** is the number of such actions or results per unit of time.\n\nGenerally, you should aim for **maximal throughput** with **acceptable latency**.\n\n### Source(s) and further reading\n\n* [Understanding latency vs throughput](https://community.cadence.com/cadence_blogs_8/b/fv/posts/understanding-latency-vs-throughput)\n\n## Availability vs consistency\n\n### CAP theorem\n",
    "ContentSha": "3J96fMtAPtZfNniAS7/6wzXl1ty5ntM4Q00EOxpO0Ww=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "A continuación, analizaremos las compensaciones a alto nivel:\n\n* **Rendimiento** vs **escalabilidad**\n* **Latencia** vs **rendimiento**\n* **Disponibilidad** vs **consistencia**\n\nTen en cuenta que **todo es una compensación**.\n\nLuego profundizaremos en temas más específicos como DNS, CDN y balanceadores de carga.\n\n## Rendimiento vs escalabilidad\n\nUn servicio es **escalable** si resulta en un aumento del **rendimiento** de manera proporcional a los recursos añadidos. Generalmente, aumentar el rendimiento significa servir más unidades de trabajo, pero también puede ser para manejar unidades de trabajo más grandes, como cuando los conjuntos de datos crecen.<sup><a href=http://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html>1</a></sup>\n\nOtra forma de ver rendimiento vs escalabilidad:\n\n* Si tienes un problema de **rendimiento**, tu sistema es lento para un solo usuario.\n* Si tienes un problema de **escalabilidad**, tu sistema es rápido para un solo usuario pero lento bajo una carga pesada.\n\n### Fuente(s) y lectura adicional\n\n* [Una palabra sobre escalabilidad](http://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html)\n* [Escalabilidad, disponibilidad, estabilidad, patrones](http://www.slideshare.net/jboner/scalability-availability-stability-patterns/)\n\n## Latencia vs rendimiento\n\n**Latencia** es el tiempo para realizar alguna acción o producir algún resultado.\n\n**Rendimiento** es el número de tales acciones o resultados por unidad de tiempo.\n\nGeneralmente, debes apuntar a un **rendimiento máximo** con una **latencia aceptable**.\n\n### Fuente(s) y lectura adicional\n\n* [Entendiendo latencia vs rendimiento](https://community.cadence.com/cadence_blogs_8/b/fv/posts/understanding-latency-vs-throughput)\n\n## Disponibilidad vs consistencia\n\n### Teorema CAP\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 13,
    "Content": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/bgLMI2u.png\">\n  <br/>\n  <i><a href=http://robertgreiner.com/2014/08/cap-theorem-revisited>Source: CAP theorem revisited</a></i>\n</p>\n\nIn a distributed computer system, you can only support two of the following guarantees:\n\n* **Consistency** - Every read receives the most recent write or an error\n* **Availability** - Every request receives a response, without guarantee that it contains the most recent version of the information\n* **Partition Tolerance** - The system continues to operate despite arbitrary partitioning due to network failures\n\n*Networks aren't reliable, so you'll need to support partition tolerance.  You'll need to make a software tradeoff between consistency and availability.*\n\n#### CP - consistency and partition tolerance\n\nWaiting for a response from the partitioned node might result in a timeout error.  CP is a good choice if your business needs require atomic reads and writes.\n\n#### AP - availability and partition tolerance\n\nResponses return the most readily available version of the data available on any node, which might not be the latest.  Writes might take some time to propagate when the partition is resolved.\n\nAP is a good choice if the business needs to allow for [eventual consistency](#eventual-consistency) or when the system needs to continue working despite external errors.\n\n### Source(s) and further reading\n\n* [CAP theorem revisited](http://robertgreiner.com/2014/08/cap-theorem-revisited/)\n* [A plain english introduction to CAP theorem](http://ksat.me/a-plain-english-introduction-to-cap-theorem)\n* [CAP FAQ](https://github.com/henryr/cap-faq)\n* [The CAP theorem](https://www.youtube.com/watch?v=k-Yaq8AHlFA)\n\n## Consistency patterns\n\nWith multiple copies of the same data, we are faced with options on how to synchronize them so clients have a consistent view of the data.  Recall the definition of consistency from the [CAP theorem](#cap-theorem) - Every read receives the most recent write or an error.\n\n### Weak consistency\n\nAfter a write, reads may or may not see it.  A best effort approach is taken.\n\nThis approach is seen in systems such as memcached.  Weak consistency works well in real time use cases such as VoIP, video chat, and realtime multiplayer games.  For example, if you are on a phone call and lose reception for a few seconds, when you regain connection you do not hear what was spoken during connection loss.",
    "ContentSha": "nlNKM8AB14RiMLs0dLLz8tVwgOHTXV/u3ObIx3G8az4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/bgLMI2u.png\">\n  <br/>\n  <i><a href=http://robertgreiner.com/2014/08/cap-theorem-revisited>Fuente: Teorema CAP revisitado</a></i>\n</p>\n\nEn un sistema informático distribuido, solo puedes soportar dos de las siguientes garantías:\n\n* **Consistencia** - Cada lectura recibe la escritura más reciente o un error\n* **Disponibilidad** - Cada solicitud recibe una respuesta, sin garantía de que contenga la versión más reciente de la información\n* **Tolerancia a particiones** - El sistema continúa operando a pesar de particionamientos arbitrarios debido a fallos en la red\n\n*Las redes no son confiables, por lo que necesitarás soportar tolerancia a particiones. Tendrás que hacer un compromiso en el software entre consistencia y disponibilidad.*\n\n#### CP - consistencia y tolerancia a particiones\n\nEsperar una respuesta del nodo particionado podría resultar en un error de tiempo de espera. CP es una buena opción si las necesidades de tu negocio requieren lecturas y escrituras atómicas.\n\n#### AP - disponibilidad y tolerancia a particiones\n\nLas respuestas devuelven la versión más fácilmente disponible de los datos en cualquier nodo, que podría no ser la más reciente. Las escrituras podrían tardar en propagarse cuando se resuelve la partición.\n\nAP es una buena opción si el negocio necesita permitir la [consistencia eventual](#eventual-consistency) o cuando el sistema debe continuar funcionando a pesar de errores externos.\n\n### Fuente(s) y lectura adicional\n\n* [Teorema CAP revisitado](http://robertgreiner.com/2014/08/cap-theorem-revisited/)\n* [Una introducción sencilla al teorema CAP](http://ksat.me/a-plain-english-introduction-to-cap-theorem)\n* [FAQ del teorema CAP](https://github.com/henryr/cap-faq)\n* [El teorema CAP](https://www.youtube.com/watch?v=k-Yaq8AHlFA)\n\n## Patrones de consistencia\n\nCon múltiples copias de los mismos datos, enfrentamos opciones sobre cómo sincronizarlas para que los clientes tengan una vista consistente de los datos. Recuerda la definición de consistencia del [teorema CAP](#cap-theorem): cada lectura recibe la escritura más reciente o un error.\n\n### Consistencia débil\n\nDespués de una escritura, las lecturas pueden o no verla. Se adopta un enfoque de mejor esfuerzo.\n\nEste enfoque se observa en sistemas como memcached. La consistencia débil funciona bien en casos de uso en tiempo real como VoIP, chat de video y juegos multijugador en tiempo real. Por ejemplo, si estás en una llamada telefónica y pierdes la señal por unos segundos, cuando recuperas la conexión no escuchas lo que se dijo durante la pérdida de conexión.",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 14,
    "Content": "\n### Eventual consistency\n\nAfter a write, reads will eventually see it (typically within milliseconds).  Data is replicated asynchronously.\n\nThis approach is seen in systems such as DNS and email.  Eventual consistency works well in highly available systems.\n\n### Strong consistency\n\nAfter a write, reads will see it.  Data is replicated synchronously.\n\nThis approach is seen in file systems and RDBMSes.  Strong consistency works well in systems that need transactions.\n\n### Source(s) and further reading\n\n* [Transactions across data centers](http://snarfed.org/transactions_across_datacenters_io.html)\n\n## Availability patterns\n\nThere are two complementary patterns to support high availability: **fail-over** and **replication**.\n\n### Fail-over\n\n#### Active-passive\n\nWith active-passive fail-over, heartbeats are sent between the active and the passive server on standby.  If the heartbeat is interrupted, the passive server takes over the active's IP address and resumes service.\n\nThe length of downtime is determined by whether the passive server is already running in 'hot' standby or whether it needs to start up from 'cold' standby.  Only the active server handles traffic.\n\nActive-passive failover can also be referred to as master-slave failover.\n\n#### Active-active\n\nIn active-active, both servers are managing traffic, spreading the load between them.\n\nIf the servers are public-facing, the DNS would need to know about the public IPs of both servers.  If the servers are internal-facing, application logic would need to know about both servers.\n\nActive-active failover can also be referred to as master-master failover.\n\n### Disadvantage(s): failover",
    "ContentSha": "Gej6bybZnoGj5vLH+IOLm2NuKTHBE7Z2TA3eWaBaiak=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n### Consistencia eventual\n\nDespués de una escritura, las lecturas eventualmente la verán (normalmente en milisegundos). Los datos se replican de forma asincrónica.\n\nEste enfoque se observa en sistemas como DNS y correo electrónico. La consistencia eventual funciona bien en sistemas altamente disponibles.\n\n### Consistencia fuerte\n\nDespués de una escritura, las lecturas la verán. Los datos se replican de forma sincrónica.\n\nEste enfoque se observa en sistemas de archivos y RDBMS. La consistencia fuerte funciona bien en sistemas que necesitan transacciones.\n\n### Fuente(s) y lectura adicional\n\n* [Transacciones entre centros de datos](http://snarfed.org/transactions_across_datacenters_io.html)\n\n## Patrones de disponibilidad\n\nExisten dos patrones complementarios para soportar alta disponibilidad: **fail-over** y **replicación**.\n\n### Fail-over\n\n#### Activo-pasivo\n\nCon fail-over activo-pasivo, se envían latidos entre el servidor activo y el servidor pasivo en espera. Si el latido se interrumpe, el servidor pasivo toma la dirección IP del activo y reanuda el servicio.\n\nLa duración del tiempo de inactividad depende de si el servidor pasivo ya está funcionando en espera \"caliente\" o si necesita arrancar desde una espera \"fría\". Solo el servidor activo maneja el tráfico.\n\nEl failover activo-pasivo también puede denominarse failover maestro-esclavo.\n\n#### Activo-activo\n\nEn activo-activo, ambos servidores gestionan el tráfico, distribuyendo la carga entre ellos.\n\nSi los servidores están expuestos al público, el DNS necesitaría conocer las IP públicas de ambos servidores. Si los servidores están orientados internamente, la lógica de la aplicación debería conocer ambos servidores.\n\nEl failover activo-activo también puede denominarse failover maestro-maestro.\n\n### Desventaja(s): failover",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 15,
    "Content": "\n* Fail-over adds more hardware and additional complexity.\n* There is a potential for loss of data if the active system fails before any newly written data can be replicated to the passive.\n\n### Replication\n\n#### Master-slave and master-master\n\nThis topic is further discussed in the [Database](#database) section:\n\n* [Master-slave replication](#master-slave-replication)\n* [Master-master replication](#master-master-replication)\n\n### Availability in numbers\n\nAvailability is often quantified by uptime (or downtime) as a percentage of time the service is available.  Availability is generally measured in number of 9s--a service with 99.99% availability is described as having four 9s.\n\n#### 99.9% availability - three 9s\n\n| Duration            | Acceptable downtime|\n|---------------------|--------------------|\n| Downtime per year   | 8h 45min 57s       |\n| Downtime per month  | 43m 49.7s          |\n| Downtime per week   | 10m 4.8s           |\n| Downtime per day    | 1m 26.4s           |\n\n#### 99.99% availability - four 9s\n\n| Duration            | Acceptable downtime|\n|---------------------|--------------------|\n| Downtime per year   | 52min 35.7s        |\n| Downtime per month  | 4m 23s             |\n| Downtime per week   | 1m 5s              |\n| Downtime per day    | 8.6s               |\n\n#### Availability in parallel vs in sequence\n\nIf a service consists of multiple components prone to failure, the service's overall availability depends on whether the components are in sequence or in parallel.\n\n###### In sequence",
    "ContentSha": "7iHIUIb6fJkzxQcIKEVyv2l5jzfrJATtAgzkxfBD6fg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* La conmutación por error añade más hardware y complejidad adicional.\n* Existe un potencial de pérdida de datos si el sistema activo falla antes de que cualquier dato recién escrito pueda ser replicado al pasivo.\n\n### Replicación\n\n#### Maestro-esclavo y maestro-maestro\n\nEste tema se discute más a fondo en la sección de [Base de datos](#database):\n\n* [Replicación maestro-esclavo](#master-slave-replication)\n* [Replicación maestro-maestro](#master-master-replication)\n\n### Disponibilidad en números\n\nLa disponibilidad a menudo se cuantifica por el tiempo de actividad (o inactividad) como un porcentaje del tiempo que el servicio está disponible. La disponibilidad generalmente se mide en número de nueves: un servicio con 99.99% de disponibilidad se describe como que tiene cuatro nueves.\n\n#### Disponibilidad del 99.9% - tres nueves\n\n| Duración            | Tiempo de inactividad aceptable |\n|---------------------|--------------------------------|\n| Inactividad por año | 8h 45min 57s                   |\n| Inactividad por mes | 43m 49.7s                      |\n| Inactividad por semana | 10m 4.8s                    |\n| Inactividad por día | 1m 26.4s                      |\n\n#### Disponibilidad del 99.99% - cuatro nueves\n\n| Duración            | Tiempo de inactividad aceptable |\n|---------------------|--------------------------------|\n| Inactividad por año | 52min 35.7s                    |\n| Inactividad por mes | 4m 23s                        |\n| Inactividad por semana | 1m 5s                      |\n| Inactividad por día | 8.6s                          |\n\n#### Disponibilidad en paralelo vs en secuencia\n\nSi un servicio consiste en múltiples componentes propensos a fallos, la disponibilidad general del servicio depende de si los componentes están en secuencia o en paralelo.\n\n###### En secuencia\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 16,
    "Content": "\nOverall availability decreases when two components with availability < 100% are in sequence:\n",
    "ContentSha": "MoWr3NjGedfagwyU1j0TqrIfLCsOUBLZEeMCD+o/O+Q=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nLa disponibilidad general disminuye cuando dos componentes con disponibilidad < 100 % están en secuencia:\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 17,
    "Content": "```\nAvailability (Total) = Availability (Foo) * Availability (Bar)\n```",
    "ContentSha": "lB9bEqLhXuNZd7e3CBBSvV+eKTVRfJQnqnxct5vKoDI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nAvailability (Total) = Availability (Foo) * Availability (Bar)\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 18,
    "Content": "\nIf both `Foo` and `Bar` each had 99.9% availability, their total availability in sequence would be 99.8%.\n\n###### In parallel\n\nOverall availability increases when two components with availability < 100% are in parallel:\n",
    "ContentSha": "8idS6k4SI9XJ+uNRuiFmAXUVaamdekOMo2MnsD7SUdw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Si tanto `Foo` como `Bar` tuvieran cada uno un 99.9% de disponibilidad, su disponibilidad total en secuencia sería del 99.8%.\n\n###### En paralelo\n\nLa disponibilidad general aumenta cuando dos componentes con disponibilidad < 100% están en paralelo:\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 19,
    "Content": "```\nAvailability (Total) = 1 - (1 - Availability (Foo)) * (1 - Availability (Bar))\n```",
    "ContentSha": "MYI40NgkLqO1BQo3TOiX+3Zu0VfgykdTCZcU4oJjKTs=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nAvailability (Total) = 1 - (1 - Availability (Foo)) * (1 - Availability (Bar))\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 20,
    "Content": "\nIf both `Foo` and `Bar` each had 99.9% availability, their total availability in parallel would be 99.9999%.\n\n## Domain name system\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/IOyLj4i.jpg\">\n  <br/>\n  <i><a href=http://www.slideshare.net/srikrupa5/dns-security-presentation-issa>Source: DNS security presentation</a></i>\n</p>\n\nA Domain Name System (DNS) translates a domain name such as www.example.com to an IP address.\n\nDNS is hierarchical, with a few authoritative servers at the top level.  Your router or ISP provides information about which DNS server(s) to contact when doing a lookup.  Lower level DNS servers cache mappings, which could become stale due to DNS propagation delays.  DNS results can also be cached by your browser or OS for a certain period of time, determined by the [time to live (TTL)](https://en.wikipedia.org/wiki/Time_to_live).\n\n* **NS record (name server)** - Specifies the DNS servers for your domain/subdomain.\n* **MX record (mail exchange)** - Specifies the mail servers for accepting messages.\n* **A record (address)** - Points a name to an IP address.\n* **CNAME (canonical)** - Points a name to another name or `CNAME` (example.com to www.example.com) or to an `A` record.\n\nServices such as [CloudFlare](https://www.cloudflare.com/dns/) and [Route 53](https://aws.amazon.com/route53/) provide managed DNS services.  Some DNS services can route traffic through various methods:\n\n* [Weighted round robin](https://www.jscape.com/blog/load-balancing-algorithms)\n    * Prevent traffic from going to servers under maintenance\n    * Balance between varying cluster sizes\n    * A/B testing\n* [Latency-based](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-latency.html)\n* [Geolocation-based](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html)\n\n### Disadvantage(s): DNS\n\n* Accessing a DNS server introduces a slight delay, although mitigated by caching described above.\n* DNS server management could be complex and is generally managed by [governments, ISPs, and large companies](http://superuser.com/questions/472695/who-controls-the-dns-servers/472729).\n* DNS services have recently come under [DDoS attack](http://dyn.com/blog/dyn-analysis-summary-of-friday-october-21-attack/), preventing users from accessing websites such as Twitter without knowing Twitter's IP address(es).\n\n### Source(s) and further reading\n\n* [DNS architecture](https://technet.microsoft.com/en-us/library/dd197427(v=ws.10).aspx)\n* [Wikipedia](https://en.wikipedia.org/wiki/Domain_Name_System)\n* [DNS articles](https://support.dnsimple.com/categories/dns/)",
    "ContentSha": "YhlbRAwaKJI7wcegCHvNOzGIOxkIHtEHSr0a7L+iJEc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Si tanto `Foo` como `Bar` tuvieran cada uno un 99.9% de disponibilidad, su disponibilidad total en paralelo sería del 99.9999%.\n\n## Sistema de nombres de dominio\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/IOyLj4i.jpg\">\n  <br/>\n  <i><a href=http://www.slideshare.net/srikrupa5/dns-security-presentation-issa>Fuente: Presentación de seguridad DNS</a></i>\n</p>\n\nUn Sistema de Nombres de Dominio (DNS) traduce un nombre de dominio como www.example.com a una dirección IP.\n\nEl DNS es jerárquico, con algunos servidores autorizados en el nivel superior.  Tu router o ISP proporciona información sobre qué servidor(es) DNS contactar al realizar una consulta.  Los servidores DNS de nivel inferior almacenan en caché los mapeos, que podrían volverse obsoletos debido a retrasos en la propagación del DNS.  Los resultados DNS también pueden ser almacenados en caché por tu navegador o sistema operativo durante un cierto período, determinado por el [tiempo de vida (TTL)](https://es.wikipedia.org/wiki/Time_to_live).\n\n* **Registro NS (servidor de nombres)** - Especifica los servidores DNS para tu dominio/subdominio.\n* **Registro MX (intercambio de correo)** - Especifica los servidores de correo para aceptar mensajes.\n* **Registro A (dirección)** - Apunta un nombre a una dirección IP.\n* **CNAME (canónico)** - Apunta un nombre a otro nombre o `CNAME` (example.com a www.example.com) o a un registro `A`.\n\nServicios como [CloudFlare](https://www.cloudflare.com/dns/) y [Route 53](https://aws.amazon.com/route53/) ofrecen servicios DNS gestionados.  Algunos servicios DNS pueden enrutar el tráfico mediante varios métodos:\n\n* [Round robin ponderado](https://www.jscape.com/blog/load-balancing-algorithms)\n    * Evitar que el tráfico vaya a servidores en mantenimiento\n    * Balancear entre tamaños variables de clúster\n    * Pruebas A/B\n* [Basado en latencia](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-latency.html)\n* [Basado en geolocalización](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html)\n\n### Desventaja(s): DNS\n\n* Acceder a un servidor DNS introduce una pequeña demora, aunque mitigada por el almacenamiento en caché descrito arriba.\n* La gestión de servidores DNS puede ser compleja y generalmente está a cargo de [gobiernos, ISP y grandes empresas](http://superuser.com/questions/472695/who-controls-the-dns-servers/472729).\n* Los servicios DNS han sido recientemente objeto de [ataques DDoS](http://dyn.com/blog/dyn-analysis-summary-of-friday-october-21-attack/), impidiendo que los usuarios accedan a sitios web como Twitter sin conocer la(s) dirección(es) IP de Twitter.\n\n### Fuente(s) y lecturas adicionales\n\n* [Arquitectura DNS](https://technet.microsoft.com/en-us/library/dd197427(v=ws.10).aspx)\n* [Wikipedia](https://es.wikipedia.org/wiki/Domain_Name_System)\n* [Artículos DNS](https://support.dnsimple.com/categories/dns/)\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 21,
    "Content": "\n## Content delivery network\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/h9TAuGI.jpg\">\n  <br/>\n  <i><a href=https://www.creative-artworks.eu/why-use-a-content-delivery-network-cdn/>Source: Why use a CDN</a></i>\n</p>\n\nA content delivery network (CDN) is a globally distributed network of proxy servers, serving content from locations closer to the user.  Generally, static files such as HTML/CSS/JS, photos, and videos are served from CDN, although some CDNs such as Amazon's CloudFront support dynamic content.  The site's DNS resolution will tell clients which server to contact.\n\nServing content from CDNs can significantly improve performance in two ways:\n\n* Users receive content from data centers close to them\n* Your servers do not have to serve requests that the CDN fulfills\n\n### Push CDNs\n\nPush CDNs receive new content whenever changes occur on your server.  You take full responsibility for providing content, uploading directly to the CDN and rewriting URLs to point to the CDN.  You can configure when content expires and when it is updated.  Content is uploaded only when it is new or changed, minimizing traffic, but maximizing storage.\n\nSites with a small amount of traffic or sites with content that isn't often updated work well with push CDNs.  Content is placed on the CDNs once, instead of being re-pulled at regular intervals.\n\n### Pull CDNs\n\nPull CDNs grab new content from your server when the first user requests the content.  You leave the content on your server and rewrite URLs to point to the CDN.  This results in a slower request until the content is cached on the CDN.\n\nA [time-to-live (TTL)](https://en.wikipedia.org/wiki/Time_to_live) determines how long content is cached.  Pull CDNs minimize storage space on the CDN, but can create redundant traffic if files expire and are pulled before they have actually changed.\n\nSites with heavy traffic work well with pull CDNs, as traffic is spread out more evenly with only recently-requested content remaining on the CDN.\n\n### Disadvantage(s): CDN\n\n* CDN costs could be significant depending on traffic, although this should be weighed with additional costs you would incur not using a CDN.\n* Content might be stale if it is updated before the TTL expires it.\n* CDNs require changing URLs for static content to point to the CDN.\n\n### Source(s) and further reading\n\n* [Globally distributed content delivery](https://figshare.com/articles/Globally_distributed_content_delivery/6605972)\n* [The differences between push and pull CDNs](http://www.travelblogadvice.com/technical/the-differences-between-push-and-pull-cdns/)",
    "ContentSha": "bGRlC+2cYKu2Zts6C6nMT6o/JLG5VQ9wuYmJZVvDRI0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n## Red de entrega de contenido\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/h9TAuGI.jpg\">\n  <br/>\n  <i><a href=https://www.creative-artworks.eu/why-use-a-content-delivery-network-cdn/>Fuente: Por qué usar una CDN</a></i>\n</p>\n\nUna red de entrega de contenido (CDN) es una red distribuida globalmente de servidores proxy, que sirven contenido desde ubicaciones más cercanas al usuario. Generalmente, archivos estáticos como HTML/CSS/JS, fotos y videos son servidos desde la CDN, aunque algunas CDNs como CloudFront de Amazon soportan contenido dinámico. La resolución DNS del sitio indicará a los clientes qué servidor contactar.\n\nServir contenido desde CDNs puede mejorar significativamente el rendimiento de dos maneras:\n\n* Los usuarios reciben contenido desde centros de datos cercanos a ellos\n* Tus servidores no tienen que atender solicitudes que la CDN cumple\n\n### CDNs Push\n\nLas CDNs push reciben contenido nuevo cada vez que ocurren cambios en tu servidor. Asumes plena responsabilidad por proporcionar contenido, subiéndolo directamente a la CDN y reescribiendo URLs para apuntar a la CDN. Puedes configurar cuándo expira el contenido y cuándo se actualiza. El contenido se sube solo cuando es nuevo o cambiado, minimizando el tráfico, pero maximizando el almacenamiento.\n\nLos sitios con poco tráfico o sitios con contenido que no se actualiza con frecuencia funcionan bien con CDNs push. El contenido se coloca en las CDNs una sola vez, en lugar de ser recuperado repetidamente en intervalos regulares.\n\n### CDNs Pull\n\nLas CDNs pull obtienen contenido nuevo de tu servidor cuando el primer usuario solicita el contenido. Dejas el contenido en tu servidor y reescribes URLs para apuntar a la CDN. Esto resulta en una solicitud más lenta hasta que el contenido se cachea en la CDN.\n\nUn [tiempo de vida (TTL)](https://es.wikipedia.org/wiki/Time_to_live) determina cuánto tiempo se cachea el contenido. Las CDNs pull minimizan el espacio de almacenamiento en la CDN, pero pueden crear tráfico redundante si los archivos expiran y se recuperan antes de que hayan cambiado realmente.\n\nLos sitios con tráfico elevado funcionan bien con CDNs pull, ya que el tráfico se distribuye de manera más uniforme y solo el contenido solicitado recientemente permanece en la CDN.\n\n### Desventaja(s): CDN\n\n* Los costos de CDN podrían ser significativos dependiendo del tráfico, aunque esto debe ponderarse con los costos adicionales que incurrirías al no usar una CDN.\n* El contenido podría estar desactualizado si se actualiza antes de que expire el TTL.\n* Las CDNs requieren cambiar URLs para el contenido estático para apuntar a la CDN.\n\n### Fuente(s) y lectura adicional\n\n* [Entrega de contenido distribuida globalmente](https://figshare.com/articles/Globally_distributed_content_delivery/6605972)\n* [Las diferencias entre CDNs push y pull](http://www.travelblogadvice.com/technical/the-differences-between-push-and-pull-cdns/)",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 22,
    "Content": "* [Wikipedia](https://en.wikipedia.org/wiki/Content_delivery_network)\n\n## Load balancer\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/h81n9iK.png\">\n  <br/>\n  <i><a href=http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html>Source: Scalable system design patterns</a></i>\n</p>\n\nLoad balancers distribute incoming client requests to computing resources such as application servers and databases.  In each case, the load balancer returns the response from the computing resource to the appropriate client.  Load balancers are effective at:\n\n* Preventing requests from going to unhealthy servers\n* Preventing overloading resources\n* Helping to eliminate a single point of failure\n\nLoad balancers can be implemented with hardware (expensive) or with software such as HAProxy.\n\nAdditional benefits include:\n\n* **SSL termination** - Decrypt incoming requests and encrypt server responses so backend servers do not have to perform these potentially expensive operations\n    * Removes the need to install [X.509 certificates](https://en.wikipedia.org/wiki/X.509) on each server\n* **Session persistence** - Issue cookies and route a specific client's requests to same instance if the web apps do not keep track of sessions\n\nTo protect against failures, it's common to set up multiple load balancers, either in [active-passive](#active-passive) or [active-active](#active-active) mode.\n\nLoad balancers can route traffic based on various metrics, including:\n\n* Random\n* Least loaded\n* Session/cookies\n* [Round robin or weighted round robin](https://www.g33kinfo.com/info/round-robin-vs-weighted-round-robin-lb)\n* [Layer 4](#layer-4-load-balancing)\n* [Layer 7](#layer-7-load-balancing)\n\n### Layer 4 load balancing\n\nLayer 4 load balancers look at info at the [transport layer](#communication) to decide how to distribute requests.  Generally, this involves the source, destination IP addresses, and ports in the header, but not the contents of the packet.  Layer 4 load balancers forward network packets to and from the upstream server, performing [Network Address Translation (NAT)](https://www.nginx.com/resources/glossary/layer-4-load-balancing/).\n\n### Layer 7 load balancing",
    "ContentSha": "9cdxRHyBtl0u7vNUNZ/06ZZn+SBn6/L1EyLOFfGBVdU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* [Wikipedia](https://en.wikipedia.org/wiki/Content_delivery_network)\n\n## Balanceador de carga\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/h81n9iK.png\">\n  <br/>\n  <i><a href=http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html>Fuente: Patrones de diseño de sistemas escalables</a></i>\n</p>\n\nLos balanceadores de carga distribuyen las solicitudes entrantes de los clientes a recursos informáticos como servidores de aplicaciones y bases de datos. En cada caso, el balanceador de carga devuelve la respuesta del recurso informático al cliente correspondiente. Los balanceadores de carga son efectivos para:\n\n* Prevenir que las solicitudes se dirijan a servidores no saludables\n* Evitar la sobrecarga de recursos\n* Ayudar a eliminar un punto único de fallo\n\nLos balanceadores de carga pueden implementarse con hardware (costoso) o con software como HAProxy.\n\nBeneficios adicionales incluyen:\n\n* **Terminación SSL** - Desencriptar solicitudes entrantes y encriptar respuestas del servidor para que los servidores backend no tengan que realizar estas operaciones potencialmente costosas\n    * Elimina la necesidad de instalar [certificados X.509](https://en.wikipedia.org/wiki/X.509) en cada servidor\n* **Persistencia de sesión** - Emitir cookies y enrutar las solicitudes de un cliente específico a la misma instancia si las aplicaciones web no mantienen el seguimiento de las sesiones\n\nPara proteger contra fallos, es común configurar múltiples balanceadores de carga, ya sea en modo [activo-pasivo](#active-passive) o [activo-activo](#active-active).\n\nLos balanceadores de carga pueden enrutar el tráfico basándose en varias métricas, incluyendo:\n\n* Aleatorio\n* Menos cargado\n* Sesión/cookies\n* [Round robin o round robin ponderado](https://www.g33kinfo.com/info/round-robin-vs-weighted-round-robin-lb)\n* [Capa 4](#layer-4-load-balancing)\n* [Capa 7](#layer-7-load-balancing)\n\n### Balanceo de carga en capa 4\n\nLos balanceadores de carga de capa 4 analizan la información en la [capa de transporte](#communication) para decidir cómo distribuir las solicitudes. Generalmente, esto involucra las direcciones IP de origen y destino, y los puertos en el encabezado, pero no el contenido del paquete. Los balanceadores de carga de capa 4 reenvían paquetes de red hacia y desde el servidor ascendente, realizando [Traducción de Direcciones de Red (NAT)](https://www.nginx.com/resources/glossary/layer-4-load-balancing/).\n\n### Balanceo de carga en capa 7",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 23,
    "Content": "\nLayer 7 load balancers look at the [application layer](#communication) to decide how to distribute requests.  This can involve contents of the header, message, and cookies.  Layer 7 load balancers terminate network traffic, reads the message, makes a load-balancing decision, then opens a connection to the selected server.  For example, a layer 7 load balancer can direct video traffic to servers that host videos while directing more sensitive user billing traffic to security-hardened servers.\n\nAt the cost of flexibility, layer 4 load balancing requires less time and computing resources than Layer 7, although the performance impact can be minimal on modern commodity hardware.\n\n### Horizontal scaling\n\nLoad balancers can also help with horizontal scaling, improving performance and availability.  Scaling out using commodity machines is more cost efficient and results in higher availability than scaling up a single server on more expensive hardware, called **Vertical Scaling**.  It is also easier to hire for talent working on commodity hardware than it is for specialized enterprise systems.\n\n#### Disadvantage(s): horizontal scaling\n\n* Scaling horizontally introduces complexity and involves cloning servers\n    * Servers should be stateless: they should not contain any user-related data like sessions or profile pictures\n    * Sessions can be stored in a centralized data store such as a [database](#database) (SQL, NoSQL) or a persistent [cache](#cache) (Redis, Memcached)\n* Downstream servers such as caches and databases need to handle more simultaneous connections as upstream servers scale out\n\n### Disadvantage(s): load balancer\n\n* The load balancer can become a performance bottleneck if it does not have enough resources or if it is not configured properly.\n* Introducing a load balancer to help eliminate a single point of failure results in increased complexity.\n* A single load balancer is a single point of failure, configuring multiple load balancers further increases complexity.\n\n### Source(s) and further reading\n\n* [NGINX architecture](https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/)\n* [HAProxy architecture guide](http://www.haproxy.org/download/1.2/doc/architecture.txt)\n* [Scalability](https://web.archive.org/web/20220530193911/https://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones)\n* [Wikipedia](https://en.wikipedia.org/wiki/Load_balancing_(computing))\n* [Layer 4 load balancing](https://www.nginx.com/resources/glossary/layer-4-load-balancing/)\n* [Layer 7 load balancing](https://www.nginx.com/resources/glossary/layer-7-load-balancing/)\n* [ELB listener config](http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html)\n\n## Reverse proxy (web server)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/n41Azff.png\">\n  <br/>\n  <i><a href=https://upload.wikimedia.org/wikipedia/commons/6/67/Reverse_proxy_h2g2bob.svg>Source: Wikipedia</a></i>\n  <br/>\n</p>",
    "ContentSha": "d9PfMKhS5It6VuFSV5VdEgf336M0xQeGW1c7I8NDHiY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nLos balanceadores de carga de capa 7 analizan la [capa de aplicación](#communication) para decidir cómo distribuir las solicitudes. Esto puede involucrar el contenido del encabezado, el mensaje y las cookies. Los balanceadores de carga de capa 7 terminan el tráfico de red, leen el mensaje, toman una decisión de balanceo de carga y luego abren una conexión con el servidor seleccionado. Por ejemplo, un balanceador de carga de capa 7 puede dirigir el tráfico de video a servidores que alojan videos mientras dirige el tráfico más sensible de facturación de usuarios a servidores reforzados en seguridad.\n\nA costa de la flexibilidad, el balanceo de carga de capa 4 requiere menos tiempo y recursos computacionales que la capa 7, aunque el impacto en el rendimiento puede ser mínimo en hardware moderno y común.\n\n### Escalamiento horizontal\n\nLos balanceadores de carga también pueden ayudar con el escalamiento horizontal, mejorando el rendimiento y la disponibilidad. Escalar usando máquinas comunes es más eficiente en costos y resulta en mayor disponibilidad que escalar un solo servidor con hardware más costoso, llamado **Escalamiento Vertical**. También es más fácil contratar talento que trabaje con hardware común que con sistemas empresariales especializados.\n\n#### Desventaja(s): escalamiento horizontal\n\n* Escalar horizontalmente introduce complejidad e implica clonar servidores\n    * Los servidores deben ser sin estado: no deben contener datos relacionados con el usuario como sesiones o fotos de perfil\n    * Las sesiones pueden almacenarse en un almacén de datos centralizado como una [base de datos](#database) (SQL, NoSQL) o una [caché](#cache) persistente (Redis, Memcached)\n* Los servidores aguas abajo, como cachés y bases de datos, necesitan manejar más conexiones simultáneas a medida que los servidores aguas arriba escalan\n\n### Desventaja(s): balanceador de carga\n\n* El balanceador de carga puede convertirse en un cuello de botella de rendimiento si no tiene suficientes recursos o si no está configurado correctamente.\n* Introducir un balanceador de carga para ayudar a eliminar un único punto de falla resulta en mayor complejidad.\n* Un solo balanceador de carga es un único punto de falla; configurar múltiples balanceadores de carga aumenta aún más la complejidad.\n\n### Fuente(s) y lectura adicional\n\n* [Arquitectura de NGINX](https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/)\n* [Guía de arquitectura de HAProxy](http://www.haproxy.org/download/1.2/doc/architecture.txt)\n* [Escalabilidad](https://web.archive.org/web/20220530193911/https://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones)\n* [Wikipedia](https://en.wikipedia.org/wiki/Load_balancing_(computing))\n* [Balanceo de carga de capa 4](https://www.nginx.com/resources/glossary/layer-4-load-balancing/)\n* [Balanceo de carga de capa 7](https://www.nginx.com/resources/glossary/layer-7-load-balancing/)\n* [Configuración de listener ELB](http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html)\n\n## Proxy inverso (servidor web)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/n41Azff.png\">\n  <br/>\n  <i><a href=https://upload.wikimedia.org/wikipedia/commons/6/67/Reverse_proxy_h2g2bob.svg>Fuente: Wikipedia</a></i>\n  <br/>\n</p>",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 24,
    "Content": "\nA reverse proxy is a web server that centralizes internal services and provides unified interfaces to the public.  Requests from clients are forwarded to a server that can fulfill it before the reverse proxy returns the server's response to the client.\n\nAdditional benefits include:\n\n* **Increased security** - Hide information about backend servers, blacklist IPs, limit number of connections per client\n* **Increased scalability and flexibility** - Clients only see the reverse proxy's IP, allowing you to scale servers or change their configuration\n* **SSL termination** - Decrypt incoming requests and encrypt server responses so backend servers do not have to perform these potentially expensive operations\n    * Removes the need to install [X.509 certificates](https://en.wikipedia.org/wiki/X.509) on each server\n* **Compression** - Compress server responses\n* **Caching** - Return the response for cached requests\n* **Static content** - Serve static content directly\n    * HTML/CSS/JS\n    * Photos\n    * Videos\n    * Etc\n\n### Load balancer vs reverse proxy\n\n* Deploying a load balancer is useful when you have multiple servers.  Often, load balancers  route traffic to a set of servers serving the same function.\n* Reverse proxies can be useful even with just one web server or application server, opening up the benefits described in the previous section.\n* Solutions such as NGINX and HAProxy can support both layer 7 reverse proxying and load balancing.\n\n### Disadvantage(s): reverse proxy\n\n* Introducing a reverse proxy results in increased complexity.\n* A single reverse proxy is a single point of failure, configuring multiple reverse proxies (ie a [failover](https://en.wikipedia.org/wiki/Failover)) further increases complexity.\n\n### Source(s) and further reading\n\n* [Reverse proxy vs load balancer](https://www.nginx.com/resources/glossary/reverse-proxy-vs-load-balancer/)\n* [NGINX architecture](https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/)\n* [HAProxy architecture guide](http://www.haproxy.org/download/1.2/doc/architecture.txt)\n* [Wikipedia](https://en.wikipedia.org/wiki/Reverse_proxy)\n\n## Application layer\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/yB5SYwm.png\">\n  <br/>",
    "ContentSha": "mSXIlXJOirzgK7lcCGgaBsQWdB09fQQPiRxJI8Azkv4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Un proxy inverso es un servidor web que centraliza servicios internos y proporciona interfaces unificadas al público. Las solicitudes de los clientes se reenvían a un servidor que puede cumplirlas antes de que el proxy inverso devuelva la respuesta del servidor al cliente.\n\nBeneficios adicionales incluyen:\n\n* **Mayor seguridad** - Ocultar información sobre los servidores backend, bloquear IPs, limitar el número de conexiones por cliente\n* **Mayor escalabilidad y flexibilidad** - Los clientes solo ven la IP del proxy inverso, lo que permite escalar servidores o cambiar su configuración\n* **Terminación SSL** - Desencriptar solicitudes entrantes y encriptar respuestas del servidor para que los servidores backend no tengan que realizar estas operaciones potencialmente costosas\n    * Elimina la necesidad de instalar [certificados X.509](https://en.wikipedia.org/wiki/X.509) en cada servidor\n* **Compresión** - Comprimir respuestas del servidor\n* **Caché** - Devolver la respuesta para solicitudes en caché\n* **Contenido estático** - Servir contenido estático directamente\n    * HTML/CSS/JS\n    * Fotos\n    * Videos\n    * Etc\n\n### Balanceador de carga vs proxy inverso\n\n* Implementar un balanceador de carga es útil cuando se tienen múltiples servidores. A menudo, los balanceadores de carga dirigen el tráfico a un conjunto de servidores que cumplen la misma función.\n* Los proxies inversos pueden ser útiles incluso con un solo servidor web o servidor de aplicaciones, abriendo los beneficios descritos en la sección anterior.\n* Soluciones como NGINX y HAProxy pueden soportar tanto proxy inverso en capa 7 como balanceo de carga.\n\n### Desventaja(s): proxy inverso\n\n* Introducir un proxy inverso resulta en una mayor complejidad.\n* Un solo proxy inverso es un único punto de fallo, configurar múltiples proxies inversos (es decir, un [failover](https://en.wikipedia.org/wiki/Failover)) aumenta aún más la complejidad.\n\n### Fuente(s) y lectura adicional\n\n* [Proxy inverso vs balanceador de carga](https://www.nginx.com/resources/glossary/reverse-proxy-vs-load-balancer/)\n* [Arquitectura de NGINX](https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/)\n* [Guía de arquitectura de HAProxy](http://www.haproxy.org/download/1.2/doc/architecture.txt)\n* [Wikipedia](https://en.wikipedia.org/wiki/Reverse_proxy)\n\n## Capa de aplicación\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/yB5SYwm.png\">\n  <br/>\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 25,
    "Content": "  <i><a href=http://lethain.com/introduction-to-architecting-systems-for-scale/#platform_layer>Source: Intro to architecting systems for scale</a></i>\n</p>\n\nSeparating out the web layer from the application layer (also known as platform layer) allows you to scale and configure both layers independently.  Adding a new API results in adding application servers without necessarily adding additional web servers.  The **single responsibility principle** advocates for small and autonomous services that work together.  Small teams with small services can plan more aggressively for rapid growth.\n\nWorkers in the application layer also help enable [asynchronism](#asynchronism).\n\n### Microservices\n\nRelated to this discussion are [microservices](https://en.wikipedia.org/wiki/Microservices), which can be described as a suite of independently deployable, small, modular services.  Each service runs a unique process and communicates through a well-defined, lightweight mechanism to serve a business goal. <sup><a href=https://smartbear.com/learn/api-design/what-are-microservices>1</a></sup>\n\nPinterest, for example, could have the following microservices: user profile, follower, feed, search, photo upload, etc.\n\n### Service Discovery\n\nSystems such as [Consul](https://www.consul.io/docs/index.html), [Etcd](https://coreos.com/etcd/docs/latest), and [Zookeeper](http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper) can help services find each other by keeping track of registered names, addresses, and ports.  [Health checks](https://www.consul.io/intro/getting-started/checks.html) help verify service integrity and are often done using an [HTTP](#hypertext-transfer-protocol-http) endpoint.  Both Consul and Etcd have a built in [key-value store](#key-value-store) that can be useful for storing config values and other shared data.\n\n### Disadvantage(s): application layer\n\n* Adding an application layer with loosely coupled services requires a different approach from an architectural, operations, and process viewpoint (vs a monolithic system).\n* Microservices can add complexity in terms of deployments and operations.\n\n### Source(s) and further reading\n\n* [Intro to architecting systems for scale](http://lethain.com/introduction-to-architecting-systems-for-scale)\n* [Crack the system design interview](http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview)\n* [Service oriented architecture](https://en.wikipedia.org/wiki/Service-oriented_architecture)\n* [Introduction to Zookeeper](http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper)\n* [Here's what you need to know about building microservices](https://cloudncode.wordpress.com/2016/07/22/msa-getting-started/)\n\n## Database\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/Xkm5CXz.png\">\n  <br/>\n  <i><a href=https://www.youtube.com/watch?v=kKjm4ehYiMs>Source: Scaling up to your first 10 million users</a></i>\n</p>\n\n### Relational database management system (RDBMS)\n",
    "ContentSha": "4XnXpBum9tEdb1sG9FZ65dxvl1TxD2b55kzZSCwIQE8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "  <i><a href=http://lethain.com/introduction-to-architecting-systems-for-scale/#platform_layer>Fuente: Introducción a la arquitectura de sistemas para escalabilidad</a></i>\n</p>\n\nSeparar la capa web de la capa de aplicación (también conocida como capa de plataforma) permite escalar y configurar ambas capas de manera independiente. Agregar una nueva API resulta en añadir servidores de aplicación sin necesariamente añadir servidores web adicionales. El **principio de responsabilidad única** aboga por servicios pequeños y autónomos que trabajan juntos. Equipos pequeños con servicios pequeños pueden planificar de forma más agresiva para un crecimiento rápido.\n\nLos trabajadores en la capa de aplicación también ayudan a habilitar el [asincronismo](#asynchronism).\n\n### Microservicios\n\nRelacionado con esta discusión están los [microservicios](https://es.wikipedia.org/wiki/Microservicio), que pueden describirse como un conjunto de servicios pequeños, modulares e independientemente desplegables. Cada servicio ejecuta un proceso único y se comunica a través de un mecanismo ligero y bien definido para cumplir un objetivo de negocio. <sup><a href=https://smartbear.com/learn/api-design/what-are-microservices>1</a></sup>\n\nPinterest, por ejemplo, podría tener los siguientes microservicios: perfil de usuario, seguidores, feed, búsqueda, subida de fotos, etc.\n\n### Descubrimiento de servicios\n\nSistemas como [Consul](https://www.consul.io/docs/index.html), [Etcd](https://coreos.com/etcd/docs/latest), y [Zookeeper](http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper) pueden ayudar a que los servicios se encuentren entre sí manteniendo un registro de nombres, direcciones y puertos registrados. Los [chequeos de salud](https://www.consul.io/intro/getting-started/checks.html) ayudan a verificar la integridad del servicio y a menudo se realizan usando un endpoint [HTTP](#hypertext-transfer-protocol-http). Tanto Consul como Etcd tienen una [almacén clave-valor](#key-value-store) incorporado que puede ser útil para almacenar valores de configuración y otros datos compartidos.\n\n### Desventaja(s): capa de aplicación\n\n* Agregar una capa de aplicación con servicios débilmente acoplados requiere un enfoque diferente desde el punto de vista arquitectónico, operativo y de procesos (vs un sistema monolítico).\n* Los microservicios pueden añadir complejidad en términos de despliegues y operaciones.\n\n### Fuente(s) y lectura adicional\n\n* [Introducción a la arquitectura de sistemas para escalabilidad](http://lethain.com/introduction-to-architecting-systems-for-scale)\n* [Domina la entrevista de diseño de sistemas](http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview)\n* [Arquitectura orientada a servicios](https://es.wikipedia.org/wiki/Arquitectura_orientada_a_servicios)\n* [Introducción a Zookeeper](http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper)\n* [Esto es lo que necesitas saber sobre la construcción de microservicios](https://cloudncode.wordpress.com/2016/07/22/msa-getting-started/)\n\n## Base de datos\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/Xkm5CXz.png\">\n  <br/>\n  <i><a href=https://www.youtube.com/watch?v=kKjm4ehYiMs>Fuente: Escalando hasta tus primeros 10 millones de usuarios</a></i>\n</p>\n\n### Sistema de gestión de bases de datos relacionales (RDBMS)\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 26,
    "Content": "A relational database like SQL is a collection of data items organized in tables.\n\n**ACID** is a set of properties of relational database [transactions](https://en.wikipedia.org/wiki/Database_transaction).\n\n* **Atomicity** - Each transaction is all or nothing\n* **Consistency** - Any transaction will bring the database from one valid state to another\n* **Isolation** - Executing transactions concurrently has the same results as if the transactions were executed serially\n* **Durability** - Once a transaction has been committed, it will remain so\n\nThere are many techniques to scale a relational database: **master-slave replication**, **master-master replication**, **federation**, **sharding**, **denormalization**, and **SQL tuning**.\n\n#### Master-slave replication\n\nThe master serves reads and writes, replicating writes to one or more slaves, which serve only reads.  Slaves can also replicate to additional slaves in a tree-like fashion.  If the master goes offline, the system can continue to operate in read-only mode until a slave is promoted to a master or a new master is provisioned.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/C9ioGtn.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/jboner/scalability-availability-stability-patterns/>Source: Scalability, availability, stability, patterns</a></i>\n</p>\n\n##### Disadvantage(s): master-slave replication\n\n* Additional logic is needed to promote a slave to a master.\n* See [Disadvantage(s): replication](#disadvantages-replication) for points related to **both** master-slave and master-master.\n\n#### Master-master replication\n\nBoth masters serve reads and writes and coordinate with each other on writes.  If either master goes down, the system can continue to operate with both reads and writes.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/krAHLGg.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/jboner/scalability-availability-stability-patterns/>Source: Scalability, availability, stability, patterns</a></i>\n</p>\n\n##### Disadvantage(s): master-master replication\n\n* You'll need a load balancer or you'll need to make changes to your application logic to determine where to write.\n* Most master-master systems are either loosely consistent (violating ACID) or have increased write latency due to synchronization.",
    "ContentSha": "xbwODyHVavckLsfDMlRqRxmfdv3+erTT0ITmoKYGnqg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Una base de datos relacional como SQL es una colección de elementos de datos organizados en tablas.\n\n**ACID** es un conjunto de propiedades de las [transacciones](https://es.wikipedia.org/wiki/Transacci%C3%B3n_(inform%C3%A1tica)) en bases de datos relacionales.\n\n* **Atomicidad** - Cada transacción es todo o nada\n* **Consistencia** - Cualquier transacción llevará la base de datos de un estado válido a otro\n* **Aislamiento** - Ejecutar transacciones concurrentemente tiene los mismos resultados que si se ejecutaran en serie\n* **Durabilidad** - Una vez que una transacción ha sido confirmada, permanecerá así\n\nExisten muchas técnicas para escalar una base de datos relacional: **replicación maestro-esclavo**, **replicación maestro-maestro**, **federación**, **sharding**, **desnormalización** y **optimización de SQL**.\n\n#### Replicación maestro-esclavo\n\nEl maestro atiende lecturas y escrituras, replicando las escrituras a uno o más esclavos, que solo atienden lecturas. Los esclavos también pueden replicar a esclavos adicionales en forma de árbol. Si el maestro se desconecta, el sistema puede continuar operando en modo solo lectura hasta que un esclavo sea promovido a maestro o se configure un nuevo maestro.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/C9ioGtn.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/jboner/scalability-availability-stability-patterns/>Fuente: Escalabilidad, disponibilidad, estabilidad, patrones</a></i>\n</p>\n\n##### Desventaja(s): replicación maestro-esclavo\n\n* Se necesita lógica adicional para promover un esclavo a maestro.\n* Ver [Desventaja(s): replicación](#disadvantages-replication) para puntos relacionados con **ambos** maestro-esclavo y maestro-maestro.\n\n#### Replicación maestro-maestro\n\nAmbos maestros atienden lecturas y escrituras y coordinan entre sí las escrituras. Si alguno de los maestros falla, el sistema puede continuar operando con lecturas y escrituras.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/krAHLGg.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/jboner/scalability-availability-stability-patterns/>Fuente: Escalabilidad, disponibilidad, estabilidad, patrones</a></i>\n</p>\n\n##### Desventaja(s): replicación maestro-maestro\n\n* Necesitarás un balanceador de carga o deberás hacer cambios en la lógica de tu aplicación para determinar dónde escribir.\n* La mayoría de sistemas maestro-maestro son o bien débilmente consistentes (violando ACID) o tienen mayor latencia de escritura debido a la sincronización.",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 27,
    "Content": "* Conflict resolution comes more into play as more write nodes are added and as latency increases.\n* See [Disadvantage(s): replication](#disadvantages-replication) for points related to **both** master-slave and master-master.\n\n##### Disadvantage(s): replication\n\n* There is a potential for loss of data if the master fails before any newly written data can be replicated to other nodes.\n* Writes are replayed to the read replicas.  If there are a lot of writes, the read replicas can get bogged down with replaying writes and can't do as many reads.\n* The more read slaves, the more you have to replicate, which leads to greater replication lag.\n* On some systems, writing to the master can spawn multiple threads to write in parallel, whereas read replicas only support writing sequentially with a single thread.\n* Replication adds more hardware and additional complexity.\n\n##### Source(s) and further reading: replication\n\n* [Scalability, availability, stability, patterns](http://www.slideshare.net/jboner/scalability-availability-stability-patterns/)\n* [Multi-master replication](https://en.wikipedia.org/wiki/Multi-master_replication)\n\n#### Federation\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/U3qV33e.png\">\n  <br/>\n  <i><a href=https://www.youtube.com/watch?v=kKjm4ehYiMs>Source: Scaling up to your first 10 million users</a></i>\n</p>\n\nFederation (or functional partitioning) splits up databases by function.  For example, instead of a single, monolithic database, you could have three databases: **forums**, **users**, and **products**, resulting in less read and write traffic to each database and therefore less replication lag.  Smaller databases result in more data that can fit in memory, which in turn results in more cache hits due to improved cache locality.  With no single central master serializing writes you can write in parallel, increasing throughput.\n\n##### Disadvantage(s): federation\n\n* Federation is not effective if your schema requires huge functions or tables.\n* You'll need to update your application logic to determine which database to read and write.\n* Joining data from two databases is more complex with a [server link](http://stackoverflow.com/questions/5145637/querying-data-by-joining-two-tables-in-two-database-on-different-servers).\n* Federation adds more hardware and additional complexity.\n\n##### Source(s) and further reading: federation\n\n* [Scaling up to your first 10 million users](https://www.youtube.com/watch?v=kKjm4ehYiMs)\n\n#### Sharding\n\n<p align=\"center\">",
    "ContentSha": "I/gTQQL3xkPYu5E5dWj4YTG/hfUu3BM7YFOD7HwCQH0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* La resolución de conflictos cobra mayor importancia a medida que se añaden más nodos de escritura y aumenta la latencia.  \n* Consulte [Desventaja(s): replicación](#disadvantages-replication) para puntos relacionados con **ambos** master-esclavo y master-master.\n\n##### Desventaja(s): replicación\n\n* Existe la posibilidad de pérdida de datos si el maestro falla antes de que los datos recién escritos puedan replicarse a otros nodos.  \n* Las escrituras se reproducen en las réplicas de lectura. Si hay muchas escrituras, las réplicas de lectura pueden saturarse con la reproducción de escrituras y no pueden realizar tantas lecturas.  \n* Cuantos más esclavos de lectura, más tiene que replicar, lo que conduce a una mayor latencia de replicación.  \n* En algunos sistemas, escribir en el maestro puede generar múltiples hilos para escribir en paralelo, mientras que las réplicas de lectura solo admiten escritura secuencial con un solo hilo.  \n* La replicación añade más hardware y complejidad adicional.\n\n##### Fuente(s) y lectura adicional: replicación\n\n* [Escalabilidad, disponibilidad, estabilidad, patrones](http://www.slideshare.net/jboner/scalability-availability-stability-patterns/)  \n* [Replicación multi-maestro](https://es.wikipedia.org/wiki/Replicaci%C3%B3n_multi-maestro)\n\n#### Federación\n\n<p align=\"center\">  \n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/U3qV33e.png\">  \n  <br/>  \n  <i><a href=https://www.youtube.com/watch?v=kKjm4ehYiMs>Fuente: Escalando hasta tus primeros 10 millones de usuarios</a></i>  \n</p>\n\nLa federación (o partición funcional) divide las bases de datos por función. Por ejemplo, en lugar de una base de datos monolítica única, podrías tener tres bases de datos: **foros**, **usuarios** y **productos**, lo que resulta en menos tráfico de lectura y escritura para cada base de datos y por lo tanto menos latencia de replicación. Bases de datos más pequeñas resultan en más datos que pueden caber en memoria, lo que a su vez resulta en más aciertos de caché debido a una mejor localidad de caché. Sin un maestro central único que serialice las escrituras, puedes escribir en paralelo, aumentando el rendimiento.\n\n##### Desventaja(s): federación\n\n* La federación no es efectiva si tu esquema requiere funciones o tablas enormes.  \n* Necesitarás actualizar la lógica de tu aplicación para determinar qué base de datos leer y escribir.  \n* Unir datos de dos bases de datos es más complejo con un [enlace de servidor](http://stackoverflow.com/questions/5145637/querying-data-by-joining-two-tables-in-two-database-on-different-servers).  \n* La federación añade más hardware y complejidad adicional.\n\n##### Fuente(s) y lectura adicional: federación\n\n* [Escalando hasta tus primeros 10 millones de usuarios](https://www.youtube.com/watch?v=kKjm4ehYiMs)\n\n#### Sharding\n\n<p align=\"center\">",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 28,
    "Content": "  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/wU8x5Id.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/jboner/scalability-availability-stability-patterns/>Source: Scalability, availability, stability, patterns</a></i>\n</p>\n\nSharding distributes data across different databases such that each database can only manage a subset of the data.  Taking a users database as an example, as the number of users increases, more shards are added to the cluster.\n\nSimilar to the advantages of [federation](#federation), sharding results in less read and write traffic, less replication, and more cache hits.  Index size is also reduced, which generally improves performance with faster queries.  If one shard goes down, the other shards are still operational, although you'll want to add some form of replication to avoid data loss.  Like federation, there is no single central master serializing writes, allowing you to write in parallel with increased throughput.\n\nCommon ways to shard a table of users is either through the user's last name initial or the user's geographic location.\n\n##### Disadvantage(s): sharding\n\n* You'll need to update your application logic to work with shards, which could result in complex SQL queries.\n* Data distribution can become lopsided in a shard.  For example, a set of power users on a shard could result in increased load to that shard compared to others.\n    * Rebalancing adds additional complexity.  A sharding function based on [consistent hashing](http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html) can reduce the amount of transferred data.\n* Joining data from multiple shards is more complex.\n* Sharding adds more hardware and additional complexity.\n\n##### Source(s) and further reading: sharding\n\n* [The coming of the shard](http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html)\n* [Shard database architecture](https://en.wikipedia.org/wiki/Shard_(database_architecture))\n* [Consistent hashing](http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html)\n\n#### Denormalization\n\nDenormalization attempts to improve read performance at the expense of some write performance.  Redundant copies of the data are written in multiple tables to avoid expensive joins.  Some RDBMS such as [PostgreSQL](https://en.wikipedia.org/wiki/PostgreSQL) and Oracle support [materialized views](https://en.wikipedia.org/wiki/Materialized_view) which handle the work of storing redundant information and keeping redundant copies consistent.\n\nOnce data becomes distributed with techniques such as [federation](#federation) and [sharding](#sharding), managing joins across data centers further increases complexity.  Denormalization might circumvent the need for such complex joins.\n\nIn most systems, reads can heavily outnumber writes 100:1 or even 1000:1.  A read resulting in a complex database join can be very expensive, spending a significant amount of time on disk operations.\n\n##### Disadvantage(s): denormalization\n\n* Data is duplicated.\n* Constraints can help redundant copies of information stay in sync, which increases complexity of the database design.\n* A denormalized database under heavy write load might perform worse than its normalized counterpart.\n\n###### Source(s) and further reading: denormalization",
    "ContentSha": "GzP1YEx8H74doj7cHlqPZNKSbHvkETAbRVSJw4T5QnY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/wU8x5Id.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/jboner/scalability-availability-stability-patterns/>Fuente: Escalabilidad, disponibilidad, estabilidad, patrones</a></i>\n</p>\n\nEl sharding distribuye datos a través de diferentes bases de datos de modo que cada base de datos solo puede gestionar un subconjunto de los datos. Tomando como ejemplo una base de datos de usuarios, a medida que aumenta el número de usuarios, se añaden más shards al clúster.\n\nDe manera similar a las ventajas de la [federación](#federation), el sharding resulta en menos tráfico de lectura y escritura, menos replicación y más aciertos en caché. El tamaño del índice también se reduce, lo que generalmente mejora el rendimiento con consultas más rápidas. Si un shard falla, los otros shards siguen operativos, aunque querrás añadir alguna forma de replicación para evitar la pérdida de datos. Al igual que la federación, no hay un maestro central único que serialice las escrituras, lo que permite escribir en paralelo con mayor rendimiento.\n\nLas formas comunes de shardear una tabla de usuarios son a través de la inicial del apellido del usuario o la ubicación geográfica del usuario.\n\n##### Desventaja(s): sharding\n\n* Necesitarás actualizar la lógica de tu aplicación para trabajar con shards, lo que podría resultar en consultas SQL complejas.\n* La distribución de datos puede volverse desigual en un shard. Por ejemplo, un conjunto de usuarios con mucha actividad en un shard podría resultar en una carga mayor en ese shard comparado con otros.\n    * El rebalanceo añade complejidad adicional. Una función de sharding basada en [hashing consistente](http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html) puede reducir la cantidad de datos transferidos.\n* Realizar joins de datos desde múltiples shards es más complejo.\n* El sharding añade más hardware y complejidad adicional.\n\n##### Fuente(s) y lectura adicional: sharding\n\n* [La llegada del shard](http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html)\n* [Arquitectura de base de datos shard](https://en.wikipedia.org/wiki/Shard_(database_architecture))\n* [Hashing consistente](http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html)\n\n#### Desnormalización\n\nLa desnormalización intenta mejorar el rendimiento de lectura a expensas de algo de rendimiento en escritura. Se escriben copias redundantes de los datos en múltiples tablas para evitar joins costosos. Algunos RDBMS como [PostgreSQL](https://en.wikipedia.org/wiki/PostgreSQL) y Oracle soportan [vistas materializadas](https://en.wikipedia.org/wiki/Materialized_view) que gestionan el trabajo de almacenar información redundante y mantener las copias redundantes consistentes.\n\nUna vez que los datos se distribuyen con técnicas como la [federación](#federation) y el [sharding](#sharding), gestionar joins entre centros de datos incrementa aún más la complejidad. La desnormalización podría evitar la necesidad de esos joins complejos.\n\nEn la mayoría de los sistemas, las lecturas pueden superar ampliamente a las escrituras en una proporción de 100:1 o incluso 1000:1. Una lectura que resulta en un join complejo puede ser muy costosa, consumiendo una cantidad significativa de tiempo en operaciones de disco.\n\n##### Desventaja(s): desnormalización\n\n* Los datos se duplican.\n* Las restricciones pueden ayudar a que las copias redundantes de información se mantengan sincronizadas, lo que aumenta la complejidad del diseño de la base de datos.\n* Una base de datos desnormalizada bajo una carga pesada de escrituras podría rendir peor que su contraparte normalizada.\n\n###### Fuente(s) y lectura adicional: desnormalización",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 29,
    "Content": "\n* [Denormalization](https://en.wikipedia.org/wiki/Denormalization)\n\n#### SQL tuning\n\nSQL tuning is a broad topic and many [books](https://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Daps&field-keywords=sql+tuning) have been written as reference.\n\nIt's important to **benchmark** and **profile** to simulate and uncover bottlenecks.\n\n* **Benchmark** - Simulate high-load situations with tools such as [ab](http://httpd.apache.org/docs/2.2/programs/ab.html).\n* **Profile** - Enable tools such as the [slow query log](http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html) to help track performance issues.\n\nBenchmarking and profiling might point you to the following optimizations.\n\n##### Tighten up the schema\n\n* MySQL dumps to disk in contiguous blocks for fast access.\n* Use `CHAR` instead of `VARCHAR` for fixed-length fields.\n    * `CHAR` effectively allows for fast, random access, whereas with `VARCHAR`, you must find the end of a string before moving onto the next one.\n* Use `TEXT` for large blocks of text such as blog posts.  `TEXT` also allows for boolean searches.  Using a `TEXT` field results in storing a pointer on disk that is used to locate the text block.\n* Use `INT` for larger numbers up to 2^32 or 4 billion.\n* Use `DECIMAL` for currency to avoid floating point representation errors.\n* Avoid storing large `BLOBS`, store the location of where to get the object instead.\n* `VARCHAR(255)` is the largest number of characters that can be counted in an 8 bit number, often maximizing the use of a byte in some RDBMS.\n* Set the `NOT NULL` constraint where applicable to [improve search performance](http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search).\n\n##### Use good indices\n\n* Columns that you are querying (`SELECT`, `GROUP BY`, `ORDER BY`, `JOIN`) could be faster with indices.\n* Indices are usually represented as self-balancing [B-tree](https://en.wikipedia.org/wiki/B-tree) that keeps data sorted and allows searches, sequential access, insertions, and deletions in logarithmic time.\n* Placing an index can keep the data in memory, requiring more space.\n* Writes could also be slower since the index also needs to be updated.\n* When loading large amounts of data, it might be faster to disable indices, load the data, then rebuild the indices.\n\n##### Avoid expensive joins\n\n* [Denormalize](#denormalization) where performance demands it.\n\n##### Partition tables\n",
    "ContentSha": "RC5xUXwhghEuq573LDD6+Is8QYupI3Y4Dn+nKYuNP3o=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* [Desnormalización](https://es.wikipedia.org/wiki/Desnormalizaci%C3%B3n)\n\n#### Afinación de SQL\n\nLa afinación de SQL es un tema amplio y se han escrito muchos [libros](https://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Daps&field-keywords=sql+tuning) como referencia.\n\nEs importante **realizar pruebas de rendimiento** y **perfiles** para simular y descubrir cuellos de botella.\n\n* **Prueba de rendimiento** - Simular situaciones de alta carga con herramientas como [ab](http://httpd.apache.org/docs/2.2/programs/ab.html).\n* **Perfil** - Habilitar herramientas como el [registro de consultas lentas](http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html) para ayudar a rastrear problemas de rendimiento.\n\nLas pruebas de rendimiento y los perfiles podrían indicarle las siguientes optimizaciones.\n\n##### Ajustar el esquema\n\n* MySQL volca a disco en bloques contiguos para acceso rápido.\n* Use `CHAR` en lugar de `VARCHAR` para campos de longitud fija.\n    * `CHAR` permite un acceso rápido y aleatorio, mientras que con `VARCHAR` debe encontrar el final de una cadena antes de pasar a la siguiente.\n* Use `TEXT` para grandes bloques de texto como entradas de blog. `TEXT` también permite búsquedas booleanas. Usar un campo `TEXT` implica almacenar un puntero en disco que se usa para localizar el bloque de texto.\n* Use `INT` para números grandes hasta 2^32 o 4 mil millones.\n* Use `DECIMAL` para moneda para evitar errores de representación en punto flotante.\n* Evite almacenar `BLOBS` grandes, almacene la ubicación de donde obtener el objeto en su lugar.\n* `VARCHAR(255)` es el número máximo de caracteres que se pueden contar en un número de 8 bits, maximizando a menudo el uso de un byte en algunos RDBMS.\n* Establezca la restricción `NOT NULL` donde sea aplicable para [mejorar el rendimiento de búsqueda](http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search).\n\n##### Use buenos índices\n\n* Las columnas que consulte (`SELECT`, `GROUP BY`, `ORDER BY`, `JOIN`) podrían ser más rápidas con índices.\n* Los índices generalmente se representan como [B-tree](https://es.wikipedia.org/wiki/%C3%81rbol_B) autoequilibrados que mantienen los datos ordenados y permiten búsquedas, acceso secuencial, inserciones y eliminaciones en tiempo logarítmico.\n* Colocar un índice puede mantener los datos en memoria, requiriendo más espacio.\n* Las escrituras también podrían ser más lentas ya que el índice debe actualizarse.\n* Al cargar grandes cantidades de datos, puede ser más rápido deshabilitar los índices, cargar los datos y luego reconstruir los índices.\n\n##### Evite joins costosos\n\n* [Desnormalice](#desnormalización) donde el rendimiento lo demande.\n\n##### Particione tablas\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 30,
    "Content": "* Break up a table by putting hot spots in a separate table to help keep it in memory.\n\n##### Tune the query cache\n\n* In some cases, the [query cache](https://dev.mysql.com/doc/refman/5.7/en/query-cache.html) could lead to [performance issues](https://www.percona.com/blog/2016/10/12/mysql-5-7-performance-tuning-immediately-after-installation/).\n\n##### Source(s) and further reading: SQL tuning\n\n* [Tips for optimizing MySQL queries](http://aiddroid.com/10-tips-optimizing-mysql-queries-dont-suck/)\n* [Is there a good reason i see VARCHAR(255) used so often?](http://stackoverflow.com/questions/1217466/is-there-a-good-reason-i-see-varchar255-used-so-often-as-opposed-to-another-l)\n* [How do null values affect performance?](http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search)\n* [Slow query log](http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html)\n\n### NoSQL\n\nNoSQL is a collection of data items represented in a **key-value store**, **document store**, **wide column store**, or a **graph database**.  Data is denormalized, and joins are generally done in the application code.  Most NoSQL stores lack true ACID transactions and favor [eventual consistency](#eventual-consistency).\n\n**BASE** is often used to describe the properties of NoSQL databases.  In comparison with the [CAP Theorem](#cap-theorem), BASE chooses availability over consistency.\n\n* **Basically available** - the system guarantees availability.\n* **Soft state** - the state of the system may change over time, even without input.\n* **Eventual consistency** - the system will become consistent over a period of time, given that the system doesn't receive input during that period.\n\nIn addition to choosing between [SQL or NoSQL](#sql-or-nosql), it is helpful to understand which type of NoSQL database best fits your use case(s).  We'll review **key-value stores**, **document stores**, **wide column stores**, and **graph databases** in the next section.\n\n#### Key-value store\n\n> Abstraction: hash table\n\nA key-value store generally allows for O(1) reads and writes and is often backed by memory or SSD.  Data stores can maintain keys in [lexicographic order](https://en.wikipedia.org/wiki/Lexicographical_order), allowing efficient retrieval of key ranges.  Key-value stores can allow for storing of metadata with a value.\n\nKey-value stores provide high performance and are often used for simple data models or for rapidly-changing data, such as an in-memory cache layer.  Since they offer only a limited set of operations, complexity is shifted to the application layer if additional operations are needed.\n\nA key-value store is the basis for more complex systems such as a document store, and in some cases, a graph database.\n\n##### Source(s) and further reading: key-value store\n\n* [Key-value database](https://en.wikipedia.org/wiki/Key-value_database)\n* [Disadvantages of key-value stores](http://stackoverflow.com/questions/4056093/what-are-the-disadvantages-of-using-a-key-value-table-over-nullable-columns-or)\n* [Redis architecture](http://qnimate.com/overview-of-redis-architecture/)",
    "ContentSha": "+vnJh/M2dUlgEZ6CZbzhFf3VoeY7aJE4IGjH1bsbrm8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* Dividir una tabla poniendo puntos calientes en una tabla separada para ayudar a mantenerla en memoria.\n\n##### Ajustar la caché de consultas\n\n* En algunos casos, la [caché de consultas](https://dev.mysql.com/doc/refman/5.7/en/query-cache.html) podría causar [problemas de rendimiento](https://www.percona.com/blog/2016/10/12/mysql-5-7-performance-tuning-immediately-after-installation/).\n\n##### Fuente(s) y lecturas adicionales: Optimización SQL\n\n* [Consejos para optimizar consultas MySQL](http://aiddroid.com/10-tips-optimizing-mysql-queries-dont-suck/)\n* [¿Hay una buena razón para ver VARCHAR(255) usado tan frecuentemente?](http://stackoverflow.com/questions/1217466/is-there-a-good-reason-i-see-varchar255-used-so-often-as-opposed-to-another-l)\n* [¿Cómo afectan los valores nulos al rendimiento?](http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search)\n* [Registro de consultas lentas](http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html)\n\n### NoSQL\n\nNoSQL es una colección de elementos de datos representados en un **almacén clave-valor**, **almacén de documentos**, **almacén de columnas anchas**, o una **base de datos de grafos**.  Los datos están desnormalizados, y las uniones generalmente se hacen en el código de la aplicación.  La mayoría de los almacenes NoSQL carecen de transacciones ACID verdaderas y prefieren la [consistencia eventual](#eventual-consistency).\n\n**BASE** se usa a menudo para describir las propiedades de las bases de datos NoSQL.  En comparación con el [Teorema CAP](#cap-theorem), BASE elige disponibilidad sobre consistencia.\n\n* **Básicamente disponible** - el sistema garantiza disponibilidad.\n* **Estado blando** - el estado del sistema puede cambiar con el tiempo, incluso sin entrada.\n* **Consistencia eventual** - el sistema se volverá consistente en un período de tiempo, dado que el sistema no reciba entrada durante ese período.\n\nAdemás de elegir entre [SQL o NoSQL](#sql-or-nosql), es útil entender qué tipo de base de datos NoSQL se adapta mejor a su(s) caso(s) de uso.  Revisaremos **almacenes clave-valor**, **almacenes de documentos**, **almacenes de columnas anchas** y **bases de datos de grafos** en la siguiente sección.\n\n#### Almacén clave-valor\n\n> Abstracción: tabla hash\n\nUn almacén clave-valor generalmente permite lecturas y escrituras O(1) y a menudo está respaldado por memoria o SSD.  Los almacenes de datos pueden mantener claves en [orden lexicográfico](https://en.wikipedia.org/wiki/Lexicographical_order), permitiendo una recuperación eficiente de rangos de claves.  Los almacenes clave-valor pueden permitir almacenar metadatos junto con un valor.\n\nLos almacenes clave-valor ofrecen alto rendimiento y se usan frecuentemente para modelos de datos simples o para datos que cambian rápidamente, como una capa de caché en memoria.  Dado que ofrecen solo un conjunto limitado de operaciones, la complejidad se traslada a la capa de aplicación si se necesitan operaciones adicionales.\n\nUn almacén clave-valor es la base para sistemas más complejos como un almacén de documentos y, en algunos casos, una base de datos de grafos.\n\n##### Fuente(s) y lecturas adicionales: almacén clave-valor\n\n* [Base de datos clave-valor](https://en.wikipedia.org/wiki/Key-value_database)\n* [Desventajas de los almacenes clave-valor](http://stackoverflow.com/questions/4056093/what-are-the-disadvantages-of-using-a-key-value-table-over-nullable-columns-or)\n* [Arquitectura de Redis](http://qnimate.com/overview-of-redis-architecture/)",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 31,
    "Content": "* [Memcached architecture](https://adayinthelifeof.nl/2011/02/06/memcache-internals/)\n\n#### Document store\n\n> Abstraction: key-value store with documents stored as values\n\nA document store is centered around documents (XML, JSON, binary, etc), where a document stores all information for a given object.  Document stores provide APIs or a query language to query based on the internal structure of the document itself.  *Note, many key-value stores include features for working with a value's metadata, blurring the lines between these two storage types.*\n\nBased on the underlying implementation, documents are organized by collections, tags, metadata, or directories.  Although documents can be organized or grouped together, documents may have fields that are completely different from each other.\n\nSome document stores like [MongoDB](https://www.mongodb.com/mongodb-architecture) and [CouchDB](https://blog.couchdb.org/2016/08/01/couchdb-2-0-architecture/) also provide a SQL-like language to perform complex queries.  [DynamoDB](http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf) supports both key-values and documents.\n\nDocument stores provide high flexibility and are often used for working with occasionally changing data.\n\n##### Source(s) and further reading: document store\n\n* [Document-oriented database](https://en.wikipedia.org/wiki/Document-oriented_database)\n* [MongoDB architecture](https://www.mongodb.com/mongodb-architecture)\n* [CouchDB architecture](https://blog.couchdb.org/2016/08/01/couchdb-2-0-architecture/)\n* [Elasticsearch architecture](https://www.elastic.co/blog/found-elasticsearch-from-the-bottom-up)\n\n#### Wide column store\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/n16iOGk.png\">\n  <br/>\n  <i><a href=http://blog.grio.com/2015/11/sql-nosql-a-brief-history.html>Source: SQL & NoSQL, a brief history</a></i>\n</p>\n\n> Abstraction: nested map `ColumnFamily<RowKey, Columns<ColKey, Value, Timestamp>>`\n\nA wide column store's basic unit of data is a column (name/value pair).  A column can be grouped in column families (analogous to a SQL table).  Super column families further group column families.  You can access each column independently with a row key, and columns with the same row key form a row.  Each value contains a timestamp for versioning and for conflict resolution.\n\nGoogle introduced [Bigtable](http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf) as the first wide column store, which influenced the open-source [HBase](https://www.edureka.co/blog/hbase-architecture/) often-used in the Hadoop ecosystem, and [Cassandra](http://docs.datastax.com/en/cassandra/3.0/cassandra/architecture/archIntro.html) from Facebook.  Stores such as BigTable, HBase, and Cassandra maintain keys in lexicographic order, allowing efficient retrieval of selective key ranges.\n\nWide column stores offer high availability and high scalability.  They are often used for very large data sets.\n\n##### Source(s) and further reading: wide column store\n\n* [SQL & NoSQL, a brief history](http://blog.grio.com/2015/11/sql-nosql-a-brief-history.html)",
    "ContentSha": "qChjAGddKNc8A4k6Ydpi6HXYPt34LJFKDxqqAKCkrXw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* [Arquitectura de Memcached](https://adayinthelifeof.nl/2011/02/06/memcache-internals/)\n\n#### Almacenamiento de documentos\n\n> Abstracción: almacén clave-valor con documentos almacenados como valores\n\nUn almacenamiento de documentos se centra en documentos (XML, JSON, binario, etc.), donde un documento almacena toda la información de un objeto dado. Los almacenes de documentos proporcionan APIs o un lenguaje de consulta para consultar basándose en la estructura interna del documento mismo. *Nota, muchos almacenes clave-valor incluyen características para trabajar con los metadatos de un valor, difuminando las líneas entre estos dos tipos de almacenamiento.*\n\nSegún la implementación subyacente, los documentos se organizan por colecciones, etiquetas, metadatos o directorios. Aunque los documentos pueden organizarse o agruparse juntos, los documentos pueden tener campos que son completamente diferentes entre sí.\n\nAlgunos almacenes de documentos como [MongoDB](https://www.mongodb.com/mongodb-architecture) y [CouchDB](https://blog.couchdb.org/2016/08/01/couchdb-2-0-architecture/) también proporcionan un lenguaje similar a SQL para realizar consultas complejas. [DynamoDB](http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf) soporta tanto clave-valor como documentos.\n\nLos almacenes de documentos ofrecen alta flexibilidad y se utilizan frecuentemente para trabajar con datos que cambian ocasionalmente.\n\n##### Fuente(s) y lectura adicional: almacenamiento de documentos\n\n* [Base de datos orientada a documentos](https://es.wikipedia.org/wiki/Base_de_datos_orientada_a_documentos)\n* [Arquitectura de MongoDB](https://www.mongodb.com/mongodb-architecture)\n* [Arquitectura de CouchDB](https://blog.couchdb.org/2016/08/01/couchdb-2-0-architecture/)\n* [Arquitectura de Elasticsearch](https://www.elastic.co/blog/found-elasticsearch-from-the-bottom-up)\n\n#### Almacenamiento de columnas anchas\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/n16iOGk.png\">\n  <br/>\n  <i><a href=http://blog.grio.com/2015/11/sql-nosql-a-brief-history.html>Fuente: SQL & NoSQL, una breve historia</a></i>\n</p>\n\n> Abstracción: mapa anidado `ColumnFamily<RowKey, Columns<ColKey, Value, Timestamp>>`\n\nLa unidad básica de datos de un almacenamiento de columnas anchas es una columna (par nombre/valor). Una columna puede agruparse en familias de columnas (análogas a una tabla SQL). Las familias de supercolumnas agrupan aún más familias de columnas. Puedes acceder a cada columna de forma independiente con una clave de fila, y las columnas con la misma clave forman una fila. Cada valor contiene una marca de tiempo para versionado y resolución de conflictos.\n\nGoogle introdujo [Bigtable](http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf) como el primer almacenamiento de columnas anchas, que influyó en el proyecto open-source [HBase](https://www.edureka.co/blog/hbase-architecture/) usado frecuentemente en el ecosistema Hadoop, y [Cassandra](http://docs.datastax.com/en/cassandra/3.0/cassandra/architecture/archIntro.html) de Facebook. Almacenes como BigTable, HBase y Cassandra mantienen las claves en orden lexicográfico, permitiendo una recuperación eficiente de rangos selectivos de claves.\n\nLos almacenes de columnas anchas ofrecen alta disponibilidad y alta escalabilidad. A menudo se utilizan para conjuntos de datos muy grandes.\n\n##### Fuente(s) y lectura adicional: almacenamiento de columnas anchas\n\n* [SQL & NoSQL, una breve historia](http://blog.grio.com/2015/11/sql-nosql-a-brief-history.html)",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 32,
    "Content": "* [Bigtable architecture](http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf)\n* [HBase architecture](https://www.edureka.co/blog/hbase-architecture/)\n* [Cassandra architecture](http://docs.datastax.com/en/cassandra/3.0/cassandra/architecture/archIntro.html)\n\n#### Graph database\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/fNcl65g.png\">\n  <br/>\n  <i><a href=https://en.wikipedia.org/wiki/File:GraphDatabase_PropertyGraph.png>Source: Graph database</a></i>\n</p>\n\n> Abstraction: graph\n\nIn a graph database, each node is a record and each arc is a relationship between two nodes.  Graph databases are optimized to represent complex relationships with many foreign keys or many-to-many relationships.\n\nGraphs databases offer high performance for data models with complex relationships, such as a social network.  They are relatively new and are not yet widely-used; it might be more difficult to find development tools and resources.  Many graphs can only be accessed with [REST APIs](#representational-state-transfer-rest).\n\n##### Source(s) and further reading: graph\n\n* [Graph database](https://en.wikipedia.org/wiki/Graph_database)\n* [Neo4j](https://neo4j.com/)\n* [FlockDB](https://blog.twitter.com/2010/introducing-flockdb)\n\n#### Source(s) and further reading: NoSQL\n\n* [Explanation of base terminology](http://stackoverflow.com/questions/3342497/explanation-of-base-terminology)\n* [NoSQL databases a survey and decision guidance](https://medium.com/baqend-blog/nosql-databases-a-survey-and-decision-guidance-ea7823a822d#.wskogqenq)\n* [Scalability](https://web.archive.org/web/20220602114024/https://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database)\n* [Introduction to NoSQL](https://www.youtube.com/watch?v=qI_g07C_Q5I)\n* [NoSQL patterns](http://horicky.blogspot.com/2009/11/nosql-patterns.html)\n\n### SQL or NoSQL\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/wXGqG5f.png\">\n  <br/>\n  <i><a href=https://www.infoq.com/articles/Transition-RDBMS-NoSQL/>Source: Transitioning from RDBMS to NoSQL</a></i>\n</p>\n",
    "ContentSha": "yvB08chNWcvF9yiu0b/QLR53EBOeWK574rgWXfnGOXg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* [Arquitectura de Bigtable](http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf)\n* [Arquitectura de HBase](https://www.edureka.co/blog/hbase-architecture/)\n* [Arquitectura de Cassandra](http://docs.datastax.com/en/cassandra/3.0/cassandra/architecture/archIntro.html)\n\n#### Base de datos de grafos\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/fNcl65g.png\">\n  <br/>\n  <i><a href=https://en.wikipedia.org/wiki/File:GraphDatabase_PropertyGraph.png>Fuente: Base de datos de grafos</a></i>\n</p>\n\n> Abstracción: grafo\n\nEn una base de datos de grafos, cada nodo es un registro y cada arco es una relación entre dos nodos.  Las bases de datos de grafos están optimizadas para representar relaciones complejas con muchas claves foráneas o relaciones muchos a muchos.\n\nLas bases de datos de grafos ofrecen un alto rendimiento para modelos de datos con relaciones complejas, como una red social.  Son relativamente nuevas y aún no se usan ampliamente; puede ser más difícil encontrar herramientas de desarrollo y recursos.  Muchos grafos solo pueden accederse con [APIs REST](#representational-state-transfer-rest).\n\n##### Fuente(s) y lectura adicional: grafo\n\n* [Base de datos de grafos](https://en.wikipedia.org/wiki/Graph_database)\n* [Neo4j](https://neo4j.com/)\n* [FlockDB](https://blog.twitter.com/2010/introducing-flockdb)\n\n#### Fuente(s) y lectura adicional: NoSQL\n\n* [Explicación de la terminología BASE](http://stackoverflow.com/questions/3342497/explanation-of-base-terminology)\n* [Bases de datos NoSQL: una encuesta y guía para la decisión](https://medium.com/baqend-blog/nosql-databases-a-survey-and-decision-guidance-ea7823a822d#.wskogqenq)\n* [Escalabilidad](https://web.archive.org/web/20220602114024/https://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database)\n* [Introducción a NoSQL](https://www.youtube.com/watch?v=qI_g07C_Q5I)\n* [Patrones NoSQL](http://horicky.blogspot.com/2009/11/nosql-patterns.html)\n\n### SQL o NoSQL\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/wXGqG5f.png\">\n  <br/>\n  <i><a href=https://www.infoq.com/articles/Transition-RDBMS-NoSQL/>Fuente: Transición de RDBMS a NoSQL</a></i>\n</p>\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 33,
    "Content": "Reasons for **SQL**:\n\n* Structured data\n* Strict schema\n* Relational data\n* Need for complex joins\n* Transactions\n* Clear patterns for scaling\n* More established: developers, community, code, tools, etc\n* Lookups by index are very fast\n\nReasons for **NoSQL**:\n\n* Semi-structured data\n* Dynamic or flexible schema\n* Non-relational data\n* No need for complex joins\n* Store many TB (or PB) of data\n* Very data intensive workload\n* Very high throughput for IOPS\n\nSample data well-suited for NoSQL:\n\n* Rapid ingest of clickstream and log data\n* Leaderboard or scoring data\n* Temporary data, such as a shopping cart\n* Frequently accessed ('hot') tables\n* Metadata/lookup tables\n\n##### Source(s) and further reading: SQL or NoSQL\n\n* [Scaling up to your first 10 million users](https://www.youtube.com/watch?v=kKjm4ehYiMs)\n* [SQL vs NoSQL differences](https://www.sitepoint.com/sql-vs-nosql-differences/)\n\n## Cache\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/Q6z24La.png\">\n  <br/>\n  <i><a href=http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html>Source: Scalable system design patterns</a></i>",
    "ContentSha": "s5JZtpzJOg6uZVhDykP9Uy+U/KEwjhNiySMSqZAIAwI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Razones para **SQL**:\n\n* Datos estructurados\n* Esquema estricto\n* Datos relacionales\n* Necesidad de uniones complejas\n* Transacciones\n* Patrones claros para escalado\n* Más establecido: desarrolladores, comunidad, código, herramientas, etc.\n* Las búsquedas por índice son muy rápidas\n\nRazones para **NoSQL**:\n\n* Datos semiestructurados\n* Esquema dinámico o flexible\n* Datos no relacionales\n* No necesita uniones complejas\n* Almacenar muchos TB (o PB) de datos\n* Carga de trabajo muy intensiva en datos\n* Muy alto rendimiento para IOPS\n\nDatos de ejemplo bien adaptados para NoSQL:\n\n* Ingesta rápida de datos de clickstream y registros\n* Datos de tablas de clasificación o puntuación\n* Datos temporales, como un carrito de compras\n* Tablas frecuentemente accedidas ('calientes')\n* Tablas de metadatos/búsqueda\n\n##### Fuente(s) y lectura adicional: SQL o NoSQL\n\n* [Escalando hasta tus primeros 10 millones de usuarios](https://www.youtube.com/watch?v=kKjm4ehYiMs)\n* [Diferencias entre SQL y NoSQL](https://www.sitepoint.com/sql-vs-nosql-differences/)\n\n## Caché\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/Q6z24La.png\">\n  <br/>\n  <i><a href=http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html>Fuente: Patrones de diseño de sistemas escalables</a></i>",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 34,
    "Content": "</p>\n\nCaching improves page load times and can reduce the load on your servers and databases.  In this model, the dispatcher will first lookup if the request has been made before and try to find the previous result to return, in order to save the actual execution.\n\nDatabases often benefit from a uniform distribution of reads and writes across its partitions.  Popular items can skew the distribution, causing bottlenecks.  Putting a cache in front of a database can help absorb uneven loads and spikes in traffic.\n\n### Client caching\n\nCaches can be located on the client side (OS or browser), [server side](#reverse-proxy-web-server), or in a distinct cache layer.\n\n### CDN caching\n\n[CDNs](#content-delivery-network) are considered a type of cache.\n\n### Web server caching\n\n[Reverse proxies](#reverse-proxy-web-server) and caches such as [Varnish](https://www.varnish-cache.org/) can serve static and dynamic content directly.  Web servers can also cache requests, returning responses without having to contact application servers.\n\n### Database caching\n\nYour database usually includes some level of caching in a default configuration, optimized for a generic use case.  Tweaking these settings for specific usage patterns can further boost performance.\n\n### Application caching\n\nIn-memory caches such as Memcached and Redis are key-value stores between your application and your data storage.  Since the data is held in RAM, it is much faster than typical databases where data is stored on disk.  RAM is more limited than disk, so [cache invalidation](https://en.wikipedia.org/wiki/Cache_algorithms) algorithms such as [least recently used (LRU)](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)) can help invalidate 'cold' entries and keep 'hot' data in RAM.\n\nRedis has the following additional features:\n\n* Persistence option\n* Built-in data structures such as sorted sets and lists\n\nThere are multiple levels you can cache that fall into two general categories: **database queries** and **objects**:\n\n* Row level\n* Query-level\n* Fully-formed serializable objects\n* Fully-rendered HTML\n\nGenerally, you should try to avoid file-based caching, as it makes cloning and auto-scaling more difficult.\n",
    "ContentSha": "PfUbgKkIJf45vxersAv0t5I8be53ZYhiGpd5NAhmomo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "</p>\n\nEl almacenamiento en caché mejora los tiempos de carga de la página y puede reducir la carga en sus servidores y bases de datos. En este modelo, el despachador primero buscará si la solicitud se ha realizado antes e intentará encontrar el resultado previo para devolverlo, con el fin de ahorrar la ejecución real.\n\nLas bases de datos a menudo se benefician de una distribución uniforme de lecturas y escrituras a través de sus particiones. Los elementos populares pueden sesgar la distribución, causando cuellos de botella. Colocar una caché delante de una base de datos puede ayudar a absorber cargas desiguales y picos de tráfico.\n\n### Caché del cliente\n\nLas cachés pueden estar ubicadas en el lado del cliente (SO o navegador), [lado del servidor](#reverse-proxy-web-server) o en una capa de caché distinta.\n\n### Caché CDN\n\nLas [CDNs](#content-delivery-network) se consideran un tipo de caché.\n\n### Caché del servidor web\n\nLos [proxy inversos](#reverse-proxy-web-server) y cachés como [Varnish](https://www.varnish-cache.org/) pueden servir contenido estático y dinámico directamente. Los servidores web también pueden almacenar en caché solicitudes, devolviendo respuestas sin tener que contactar con servidores de aplicaciones.\n\n### Caché de base de datos\n\nSu base de datos generalmente incluye algún nivel de caché en una configuración predeterminada, optimizada para un caso de uso genérico. Ajustar estas configuraciones para patrones de uso específicos puede mejorar aún más el rendimiento.\n\n### Caché de aplicación\n\nLas cachés en memoria como Memcached y Redis son almacenes clave-valor entre su aplicación y su almacenamiento de datos. Dado que los datos se mantienen en RAM, es mucho más rápido que las bases de datos típicas donde los datos se almacenan en disco. La RAM es más limitada que el disco, por lo que algoritmos de [invalidación de caché](https://es.wikipedia.org/wiki/Algoritmos_de_cach%C3%A9) como [el menos utilizado recientemente (LRU)](https://es.wikipedia.org/wiki/Pol%C3%ADticas_de_reemplazo_de_cach%C3%A9#El_menos_usado_recientemente_(LRU)) pueden ayudar a invalidar entradas 'frías' y mantener datos 'calientes' en RAM.\n\nRedis tiene las siguientes características adicionales:\n\n* Opción de persistencia\n* Estructuras de datos integradas como conjuntos ordenados y listas\n\nHay múltiples niveles que puede almacenar en caché y que se dividen en dos categorías generales: **consultas de base de datos** y **objetos**:\n\n* Nivel de fila\n* Nivel de consulta\n* Objetos serializables completamente formados\n* HTML completamente renderizado\n\nEn general, debería tratar de evitar el almacenamiento en caché basado en archivos, ya que dificulta la clonación y el autoescalado.\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 35,
    "Content": "### Caching at the database query level\n\nWhenever you query the database, hash the query as a key and store the result to the cache.  This approach suffers from expiration issues:\n\n* Hard to delete a cached result with complex queries\n* If one piece of data changes such as a table cell, you need to delete all cached queries that might include the changed cell\n\n### Caching at the object level\n\nSee your data as an object, similar to what you do with your application code.  Have your application assemble the dataset from the database into a class instance or a data structure(s):\n\n* Remove the object from cache if its underlying data has changed\n* Allows for asynchronous processing: workers assemble objects by consuming the latest cached object\n\nSuggestions of what to cache:\n\n* User sessions\n* Fully rendered web pages\n* Activity streams\n* User graph data\n\n### When to update the cache\n\nSince you can only store a limited amount of data in cache, you'll need to determine which cache update strategy works best for your use case.\n\n#### Cache-aside\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/ONjORqk.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast>Source: From cache to in-memory data grid</a></i>\n</p>\n\nThe application is responsible for reading and writing from storage.  The cache does not interact with storage directly.  The application does the following:\n\n* Look for entry in cache, resulting in a cache miss\n* Load entry from the database\n* Add entry to cache\n* Return entry\n",
    "ContentSha": "1LZ2C/EUSShYNdt1FP+/fZdVQMcH8WGFigSx+nEiAZI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### Caché a nivel de consulta de base de datos\n\nCada vez que consultas la base de datos, hashea la consulta como una clave y almacena el resultado en la caché. Este enfoque sufre problemas de expiración:\n\n* Difícil eliminar un resultado en caché con consultas complejas\n* Si un dato cambia, como una celda de tabla, necesitas eliminar todas las consultas en caché que podrían incluir la celda cambiada\n\n### Caché a nivel de objeto\n\nVe tus datos como un objeto, similar a lo que haces con el código de tu aplicación. Haz que tu aplicación arme el conjunto de datos desde la base de datos en una instancia de clase o una(s) estructura(s) de datos:\n\n* Elimina el objeto de la caché si sus datos subyacentes han cambiado\n* Permite procesamiento asíncrono: los workers arman objetos consumiendo el último objeto en caché\n\nSugerencias de qué cachéar:\n\n* Sesiones de usuario\n* Páginas web completamente renderizadas\n* Flujos de actividad\n* Datos de grafo de usuario\n\n### Cuándo actualizar la caché\n\nDado que solo puedes almacenar una cantidad limitada de datos en caché, deberás determinar qué estrategia de actualización de caché funciona mejor para tu caso de uso.\n\n#### Cache-aside\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/ONjORqk.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast>Fuente: De caché a grid de datos en memoria</a></i>\n</p>\n\nLa aplicación es responsable de leer y escribir desde el almacenamiento. La caché no interactúa directamente con el almacenamiento. La aplicación hace lo siguiente:\n\n* Busca la entrada en caché, resultando en un fallo de caché\n* Carga la entrada desde la base de datos\n* Añade la entrada a la caché\n* Devuelve la entrada\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 36,
    "Content": "```python\ndef get_user(self, user_id):\n    user = cache.get(\"user.{0}\", user_id)\n    if user is None:\n        user = db.query(\"SELECT * FROM users WHERE user_id = {0}\", user_id)\n        if user is not None:\n            key = \"user.{0}\".format(user_id)\n            cache.set(key, json.dumps(user))\n    return user\n```",
    "ContentSha": "oOOkxiaDDsfJgZibD4WyvNCLh494Kkw0zeQUjNF+dKA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```python\ndef get_user(self, user_id):\n    user = cache.get(\"user.{0}\", user_id)\n    if user is None:\n        user = db.query(\"SELECT * FROM users WHERE user_id = {0}\", user_id)\n        if user is not None:\n            key = \"user.{0}\".format(user_id)\n            cache.set(key, json.dumps(user))\n    return user\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 37,
    "Content": "\n[Memcached](https://memcached.org/) is generally used in this manner.\n\nSubsequent reads of data added to cache are fast.  Cache-aside is also referred to as lazy loading.  Only requested data is cached, which avoids filling up the cache with data that isn't requested.\n\n##### Disadvantage(s): cache-aside\n\n* Each cache miss results in three trips, which can cause a noticeable delay.\n* Data can become stale if it is updated in the database.  This issue is mitigated by setting a time-to-live (TTL) which forces an update of the cache entry, or by using write-through.\n* When a node fails, it is replaced by a new, empty node, increasing latency.\n\n#### Write-through\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/0vBc0hN.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/jboner/scalability-availability-stability-patterns/>Source: Scalability, availability, stability, patterns</a></i>\n</p>\n\nThe application uses the cache as the main data store, reading and writing data to it, while the cache is responsible for reading and writing to the database:\n\n* Application adds/updates entry in cache\n* Cache synchronously writes entry to data store\n* Return\n\nApplication code:\n",
    "ContentSha": "fTUxdhUP8C+msOuO6oFCQBKVESfJlBRIv+xTex+NRH4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n[Memcached](https://memcached.org/) generalmente se usa de esta manera.\n\nLas lecturas posteriores de datos agregados a la caché son rápidas. Cache-aside también se conoce como carga perezosa. Solo se almacena en caché los datos solicitados, lo que evita llenar la caché con datos que no se solicitan.\n\n##### Desventaja(s): cache-aside\n\n* Cada fallo de caché resulta en tres viajes, lo que puede causar una demora notable.\n* Los datos pueden volverse obsoletos si se actualizan en la base de datos. Este problema se mitiga configurando un tiempo de vida (TTL) que fuerza una actualización de la entrada de caché, o usando write-through.\n* Cuando un nodo falla, es reemplazado por un nodo nuevo y vacío, aumentando la latencia.\n\n#### Write-through\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/0vBc0hN.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/jboner/scalability-availability-stability-patterns/>Fuente: Escalabilidad, disponibilidad, estabilidad, patrones</a></i>\n</p>\n\nLa aplicación usa la caché como el almacén principal de datos, leyendo y escribiendo datos en ella, mientras que la caché es responsable de leer y escribir en la base de datos:\n\n* La aplicación agrega/actualiza la entrada en la caché\n* La caché escribe sincrónicamente la entrada en el almacén de datos\n* Retorna\n\nCódigo de la aplicación:\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 38,
    "Content": "```python\nset_user(12345, {\"foo\":\"bar\"})\n```",
    "ContentSha": "7tpMTtbDSdUbs+oC+Qf5dKLGCUAcRFUe6DfcgSYQP7c=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```python\nset_user(12345, {\"foo\":\"bar\"})\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 39,
    "Content": "\nCache code:\n",
    "ContentSha": "3TQIz863VWmVTS8NeQVBQ2s9apIl1JpwXxyAqo7YRXU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nCódigo de caché:\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 40,
    "Content": "```python\ndef set_user(user_id, values):\n    user = db.query(\"UPDATE Users WHERE id = {0}\", user_id, values)\n    cache.set(user_id, user)\n```",
    "ContentSha": "2/SVlo2Tq+z8vN6s72UuRvXSio2ONq8aOqxj7V/g+MY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```python\ndef set_user(user_id, values):\n    user = db.query(\"UPDATE Users WHERE id = {0}\", user_id, values)\n    cache.set(user_id, user)\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 41,
    "Content": "\nWrite-through is a slow overall operation due to the write operation, but subsequent reads of just written data are fast.  Users are generally more tolerant of latency when updating data than reading data.  Data in the cache is not stale.\n\n##### Disadvantage(s): write through\n\n* When a new node is created due to failure or scaling, the new node will not cache entries until the entry is updated in the database.  Cache-aside in conjunction with write through can mitigate this issue.\n* Most data written might never be read, which can be minimized with a TTL.\n\n#### Write-behind (write-back)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/rgSrvjG.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/jboner/scalability-availability-stability-patterns/>Source: Scalability, availability, stability, patterns</a></i>\n</p>\n\nIn write-behind, the application does the following:\n\n* Add/update entry in cache\n* Asynchronously write entry to the data store, improving write performance\n\n##### Disadvantage(s): write-behind\n\n* There could be data loss if the cache goes down prior to its contents hitting the data store.\n* It is more complex to implement write-behind than it is to implement cache-aside or write-through.\n\n#### Refresh-ahead\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/kxtjqgE.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast>Source: From cache to in-memory data grid</a></i>\n</p>\n\nYou can configure the cache to automatically refresh any recently accessed cache entry prior to its expiration.\n\nRefresh-ahead can result in reduced latency vs read-through if the cache can accurately predict which items are likely to be needed in the future.\n\n##### Disadvantage(s): refresh-ahead\n",
    "ContentSha": "7f5A+XWrDoL377SvEQn7a+GkFngcY2VPIRUi5SDADy0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nWrite-through es una operación general lenta debido a la operación de escritura, pero las lecturas posteriores de datos recién escritos son rápidas. Los usuarios generalmente son más tolerantes a la latencia al actualizar datos que al leer datos. Los datos en la caché no están obsoletos.\n\n##### Desventaja(s): write through\n\n* Cuando se crea un nuevo nodo debido a una falla o escalado, el nuevo nodo no almacenará en caché las entradas hasta que la entrada se actualice en la base de datos. Cache-aside junto con write through puede mitigar este problema.\n* La mayoría de los datos escritos podrían nunca ser leídos, lo que se puede minimizar con un TTL.\n\n#### Write-behind (write-back)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/rgSrvjG.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/jboner/scalability-availability-stability-patterns/>Fuente: Escalabilidad, disponibilidad, estabilidad, patrones</a></i>\n</p>\n\nEn write-behind, la aplicación hace lo siguiente:\n\n* Añadir/actualizar entrada en caché\n* Escribir la entrada de forma asíncrona en el almacén de datos, mejorando el rendimiento de escritura\n\n##### Desventaja(s): write-behind\n\n* Podría haber pérdida de datos si la caché se cae antes de que sus contenidos lleguen al almacén de datos.\n* Es más complejo implementar write-behind que implementar cache-aside o write-through.\n\n#### Refresh-ahead\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/kxtjqgE.png\">\n  <br/>\n  <i><a href=http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast>Fuente: De caché a grid de datos en memoria</a></i>\n</p>\n\nPuede configurar la caché para actualizar automáticamente cualquier entrada de caché recientemente accedida antes de su expiración.\n\nRefresh-ahead puede resultar en una latencia reducida frente a read-through si la caché puede predecir con precisión qué elementos probablemente se necesitarán en el futuro.\n\n##### Desventaja(s): refresh-ahead\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 42,
    "Content": "* Not accurately predicting which items are likely to be needed in the future can result in reduced performance than without refresh-ahead.\n\n### Disadvantage(s): cache\n\n* Need to maintain consistency between caches and the source of truth such as the database through [cache invalidation](https://en.wikipedia.org/wiki/Cache_algorithms).\n* Cache invalidation is a difficult problem, there is additional complexity associated with when to update the cache.\n* Need to make application changes such as adding Redis or memcached.\n\n### Source(s) and further reading\n\n* [From cache to in-memory data grid](http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast)\n* [Scalable system design patterns](http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html)\n* [Introduction to architecting systems for scale](http://lethain.com/introduction-to-architecting-systems-for-scale/)\n* [Scalability, availability, stability, patterns](http://www.slideshare.net/jboner/scalability-availability-stability-patterns/)\n* [Scalability](https://web.archive.org/web/20230126233752/https://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache)\n* [AWS ElastiCache strategies](http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Strategies.html)\n* [Wikipedia](https://en.wikipedia.org/wiki/Cache_(computing))\n\n## Asynchronism\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/54GYsSx.png\">\n  <br/>\n  <i><a href=http://lethain.com/introduction-to-architecting-systems-for-scale/#platform_layer>Source: Intro to architecting systems for scale</a></i>\n</p>\n\nAsynchronous workflows help reduce request times for expensive operations that would otherwise be performed in-line.  They can also help by doing time-consuming work in advance, such as periodic aggregation of data.\n\n### Message queues\n\nMessage queues receive, hold, and deliver messages.  If an operation is too slow to perform inline, you can use a message queue with the following workflow:\n\n* An application publishes a job to the queue, then notifies the user of job status\n* A worker picks up the job from the queue, processes it, then signals the job is complete\n\nThe user is not blocked and the job is processed in the background.  During this time, the client might optionally do a small amount of processing to make it seem like the task has completed.  For example, if posting a tweet, the tweet could be instantly posted to your timeline, but it could take some time before your tweet is actually delivered to all of your followers.\n\n**[Redis](https://redis.io/)** is useful as a simple message broker but messages can be lost.\n\n**[RabbitMQ](https://www.rabbitmq.com/)** is popular but requires you to adapt to the 'AMQP' protocol and manage your own nodes.",
    "ContentSha": "m5CQKaSxoSpqZLBi9DEuTpec6TQ1PuzDQenhKpH7SUw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* No predecir con precisión qué elementos serán necesarios en el futuro puede resultar en un rendimiento reducido en comparación con no usar refresh-ahead.\n\n### Desventaja(s): caché\n\n* Es necesario mantener la consistencia entre las cachés y la fuente de la verdad, como la base de datos, mediante [invalidación de caché](https://es.wikipedia.org/wiki/Algoritmo_de_cach%C3%A9).\n* La invalidación de caché es un problema difícil, existe una complejidad adicional asociada a cuándo actualizar la caché.\n* Es necesario hacer cambios en la aplicación, como agregar Redis o memcached.\n\n### Fuente(s) y lecturas adicionales\n\n* [De caché a grid de datos en memoria](http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast)\n* [Patrones de diseño de sistemas escalables](http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html)\n* [Introducción a la arquitectura de sistemas para escala](http://lethain.com/introduction-to-architecting-systems-for-scale/)\n* [Escalabilidad, disponibilidad, estabilidad, patrones](http://www.slideshare.net/jboner/scalability-availability-stability-patterns/)\n* [Escalabilidad](https://web.archive.org/web/20230126233752/https://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache)\n* [Estrategias AWS ElastiCache](http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Strategies.html)\n* [Wikipedia](https://es.wikipedia.org/wiki/Cache_(inform%C3%A1tica))\n\n## Asincronismo\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/54GYsSx.png\">\n  <br/>\n  <i><a href=http://lethain.com/introduction-to-architecting-systems-for-scale/#platform_layer>Fuente: Introducción a la arquitectura de sistemas para escala</a></i>\n</p>\n\nLos flujos de trabajo asíncronos ayudan a reducir los tiempos de respuesta para operaciones costosas que de otro modo se realizarían en línea. También pueden ayudar realizando trabajo que consume tiempo por adelantado, como la agregación periódica de datos.\n\n### Colas de mensajes\n\nLas colas de mensajes reciben, retienen y entregan mensajes. Si una operación es demasiado lenta para realizarse en línea, puede usar una cola de mensajes con el siguiente flujo de trabajo:\n\n* Una aplicación publica un trabajo en la cola y luego notifica al usuario sobre el estado del trabajo\n* Un trabajador recoge el trabajo de la cola, lo procesa y luego señala que el trabajo está completo\n\nEl usuario no queda bloqueado y el trabajo se procesa en segundo plano. Durante este tiempo, el cliente podría opcionalmente realizar una pequeña cantidad de procesamiento para que parezca que la tarea ha finalizado. Por ejemplo, si publicas un tweet, el tweet podría aparecer instantáneamente en tu línea de tiempo, pero podría tardar un poco antes de que tu tweet sea realmente entregado a todos tus seguidores.\n\n**[Redis](https://redis.io/)** es útil como un broker de mensajes simple, pero los mensajes pueden perderse.\n\n**[RabbitMQ](https://www.rabbitmq.com/)** es popular pero requiere que te adaptes al protocolo 'AMQP' y administres tus propios nodos.",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 43,
    "Content": "\n**[Amazon SQS](https://aws.amazon.com/sqs/)** is hosted but can have high latency and has the possibility of messages being delivered twice.\n\n### Task queues\n\nTasks queues receive tasks and their related data, runs them, then delivers their results.  They can support scheduling and can be used to run computationally-intensive jobs in the background.\n\n**[Celery](https://docs.celeryproject.org/en/stable/)** has support for scheduling and primarily has python support.\n\n### Back pressure\n\nIf queues start to grow significantly, the queue size can become larger than memory, resulting in cache misses, disk reads, and even slower performance.  [Back pressure](http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html) can help by limiting the queue size, thereby maintaining a high throughput rate and good response times for jobs already in the queue.  Once the queue fills up, clients get a server busy or HTTP 503 status code to try again later.  Clients can retry the request at a later time, perhaps with [exponential backoff](https://en.wikipedia.org/wiki/Exponential_backoff).\n\n### Disadvantage(s): asynchronism\n\n* Use cases such as inexpensive calculations and realtime workflows might be better suited for synchronous operations, as introducing queues can add delays and complexity.\n\n### Source(s) and further reading\n\n* [It's all a numbers game](https://www.youtube.com/watch?v=1KRYH75wgy4)\n* [Applying back pressure when overloaded](http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html)\n* [Little's law](https://en.wikipedia.org/wiki/Little%27s_law)\n* [What is the difference between a message queue and a task queue?](https://www.quora.com/What-is-the-difference-between-a-message-queue-and-a-task-queue-Why-would-a-task-queue-require-a-message-broker-like-RabbitMQ-Redis-Celery-or-IronMQ-to-function)\n\n## Communication\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/5KeocQs.jpg\">\n  <br/>\n  <i><a href=http://www.escotal.com/osilayer.html>Source: OSI 7 layer model</a></i>\n</p>\n\n### Hypertext transfer protocol (HTTP)\n\nHTTP is a method for encoding and transporting data between a client and a server.  It is a request/response protocol: clients issue requests and servers issue responses with relevant content and completion status info about the request.  HTTP is self-contained, allowing requests and responses to flow through many intermediate routers and servers that perform load balancing, caching, encryption, and compression.\n\nA basic HTTP request consists of a verb (method) and a resource (endpoint).  Below are common HTTP verbs:\n\n| Verb | Description | Idempotent* | Safe | Cacheable |\n|---|---|---|---|---|",
    "ContentSha": "EQovDG9OkNb9dVypgpzwJggXSXWXdn7svWuM8fLZ6Es=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n**[Amazon SQS](https://aws.amazon.com/sqs/)** está alojado pero puede tener alta latencia y existe la posibilidad de que los mensajes se entreguen dos veces.\n\n### Colas de tareas\n\nLas colas de tareas reciben tareas y sus datos relacionados, las ejecutan y luego entregan sus resultados. Pueden soportar programación y pueden usarse para ejecutar trabajos computacionalmente intensivos en segundo plano.\n\n**[Celery](https://docs.celeryproject.org/en/stable/)** tiene soporte para programación y principalmente tiene soporte para python.\n\n### Presión de retorno\n\nSi las colas comienzan a crecer significativamente, el tamaño de la cola puede ser mayor que la memoria, lo que resulta en fallos de caché, lecturas de disco y un rendimiento aún más lento. [La presión de retorno](http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html) puede ayudar limitando el tamaño de la cola, manteniendo así una alta tasa de rendimiento y buenos tiempos de respuesta para los trabajos ya en la cola. Una vez que la cola se llena, los clientes reciben un código de estado de servidor ocupado o HTTP 503 para intentar de nuevo más tarde. Los clientes pueden reintentar la solicitud en otro momento, quizás con [retroceso exponencial](https://en.wikipedia.org/wiki/Exponential_backoff).\n\n### Desventaja(s): asincronía\n\n* Casos de uso como cálculos económicos y flujos de trabajo en tiempo real podrían ser más adecuados para operaciones síncronas, ya que introducir colas puede añadir retrasos y complejidad.\n\n### Fuente(s) y lectura adicional\n\n* [Todo es un juego de números](https://www.youtube.com/watch?v=1KRYH75wgy4)\n* [Aplicando presión de retorno cuando está sobrecargado](http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html)\n* [Ley de Little](https://en.wikipedia.org/wiki/Little%27s_law)\n* [¿Cuál es la diferencia entre una cola de mensajes y una cola de tareas?](https://www.quora.com/What-is-the-difference-between-a-message-queue-and-a-task-queue-Why-would-a-task-queue-require-a-message-broker-like-RabbitMQ-Redis-Celery-or-IronMQ-to-function)\n\n## Comunicación\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/5KeocQs.jpg\">\n  <br/>\n  <i><a href=http://www.escotal.com/osilayer.html>Fuente: modelo OSI de 7 capas</a></i>\n</p>\n\n### Protocolo de transferencia de hipertexto (HTTP)\n\nHTTP es un método para codificar y transportar datos entre un cliente y un servidor. Es un protocolo de solicitud/respuesta: los clientes emiten solicitudes y los servidores emiten respuestas con contenido relevante e información de estado de finalización sobre la solicitud. HTTP es autónomo, permitiendo que solicitudes y respuestas fluyan a través de muchos routers y servidores intermedios que realizan balanceo de carga, almacenamiento en caché, cifrado y compresión.\n\nUna solicitud HTTP básica consiste en un verbo (método) y un recurso (endpoint). A continuación se muestran verbos HTTP comunes:\n\n| Verbo | Descripción | Idempotente* | Seguro | Cacheable |\n|---|---|---|---|---|",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 44,
    "Content": "| GET | Reads a resource | Yes | Yes | Yes |\n| POST | Creates a resource or trigger a process that handles data | No | No | Yes if response contains freshness info |\n| PUT | Creates or replace a resource | Yes | No | No |\n| PATCH | Partially updates a resource | No | No | Yes if response contains freshness info |\n| DELETE | Deletes a resource | Yes | No | No |\n\n*Can be called many times without different outcomes.\n\nHTTP is an application layer protocol relying on lower-level protocols such as **TCP** and **UDP**.\n\n#### Source(s) and further reading: HTTP\n\n* [What is HTTP?](https://www.nginx.com/resources/glossary/http/)\n* [Difference between HTTP and TCP](https://www.quora.com/What-is-the-difference-between-HTTP-protocol-and-TCP-protocol)\n* [Difference between PUT and PATCH](https://laracasts.com/discuss/channels/general-discussion/whats-the-differences-between-put-and-patch?page=1)\n\n### Transmission control protocol (TCP)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/JdAsdvG.jpg\">\n  <br/>\n  <i><a href=http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/>Source: How to make a multiplayer game</a></i>\n</p>\n\nTCP is a connection-oriented protocol over an [IP network](https://en.wikipedia.org/wiki/Internet_Protocol).  Connection is established and terminated using a [handshake](https://en.wikipedia.org/wiki/Handshaking).  All packets sent are guaranteed to reach the destination in the original order and without corruption through:\n\n* Sequence numbers and [checksum fields](https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Checksum_computation) for each packet\n* [Acknowledgement](https://en.wikipedia.org/wiki/Acknowledgement_(data_networks)) packets and automatic retransmission\n\nIf the sender does not receive a correct response, it will resend the packets.  If there are multiple timeouts, the connection is dropped.  TCP also implements [flow control](https://en.wikipedia.org/wiki/Flow_control_(data)) and [congestion control](https://en.wikipedia.org/wiki/Network_congestion#Congestion_control).  These guarantees cause delays and generally result in less efficient transmission than UDP.\n\nTo ensure high throughput, web servers can keep a large number of TCP connections open, resulting in high memory usage.  It can be expensive to have a large number of open connections between web server threads and say, a [memcached](https://memcached.org/) server.  [Connection pooling](https://en.wikipedia.org/wiki/Connection_pool) can help in addition to switching to UDP where applicable.\n\nTCP is useful for applications that require high reliability but are less time critical.  Some examples include web servers, database info, SMTP, FTP, and SSH.\n\nUse TCP over UDP when:\n\n* You need all of the data to arrive intact\n* You want to automatically make a best estimate use of the network throughput\n",
    "ContentSha": "EP5TmrahE1oj6DWbBMp+YEc76iteUbB8TKDGw6d8MFY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "| GET | Lee un recurso | Sí | Sí | Sí |\n| POST | Crea un recurso o activa un proceso que maneja datos | No | No | Sí si la respuesta contiene información de frescura |\n| PUT | Crea o reemplaza un recurso | Sí | No | No |\n| PATCH | Actualiza parcialmente un recurso | No | No | Sí si la respuesta contiene información de frescura |\n| DELETE | Elimina un recurso | Sí | No | No |\n\n*Puede llamarse muchas veces sin resultados diferentes.\n\nHTTP es un protocolo de capa de aplicación que se basa en protocolos de nivel inferior como **TCP** y **UDP**.\n\n#### Fuente(s) y lectura adicional: HTTP\n\n* [¿Qué es HTTP?](https://www.nginx.com/resources/glossary/http/)\n* [Diferencia entre HTTP y TCP](https://www.quora.com/What-is-the-difference-between-HTTP-protocol-and-TCP-protocol)\n* [Diferencia entre PUT y PATCH](https://laracasts.com/discuss/channels/general-discussion/whats-the-differences-between-put-and-patch?page=1)\n\n### Protocolo de control de transmisión (TCP)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/JdAsdvG.jpg\">\n  <br/>\n  <i><a href=http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/>Fuente: Cómo hacer un juego multijugador</a></i>\n</p>\n\nTCP es un protocolo orientado a conexión sobre una [red IP](https://es.wikipedia.org/wiki/Protocolo_de_Internet). La conexión se establece y termina usando un [handshake](https://es.wikipedia.org/wiki/Intercambio_de_señales). Todos los paquetes enviados están garantizados a llegar al destino en el orden original y sin corrupción mediante:\n\n* Números de secuencia y [campos de checksum](https://es.wikipedia.org/wiki/Protocolo_de_control_de_transmisión#Cálculo_del_checksum) para cada paquete\n* Paquetes de [reconocimiento](https://es.wikipedia.org/wiki/Reconocimiento_(redes_de_datos)) y retransmisión automática\n\nSi el emisor no recibe una respuesta correcta, reenviará los paquetes. Si hay múltiples tiempos de espera, la conexión se cae. TCP también implementa [control de flujo](https://es.wikipedia.org/wiki/Control_de_flujo_(datos)) y [control de congestión](https://es.wikipedia.org/wiki/Congestión_de_red#Control_de_la_congestión). Estas garantías causan retrasos y generalmente resultan en una transmisión menos eficiente que UDP.\n\nPara asegurar un alto rendimiento, los servidores web pueden mantener un gran número de conexiones TCP abiertas, lo que resulta en un alto uso de memoria. Puede ser costoso tener un gran número de conexiones abiertas entre hilos del servidor web y, por ejemplo, un servidor [memcached](https://memcached.org/). El [pooling de conexiones](https://es.wikipedia.org/wiki/Pool_de_conexiones) puede ayudar además de cambiar a UDP cuando sea aplicable.\n\nTCP es útil para aplicaciones que requieren alta fiabilidad pero son menos críticas en tiempo. Algunos ejemplos incluyen servidores web, información de bases de datos, SMTP, FTP y SSH.\n\nUsa TCP sobre UDP cuando:\n\n* Necesites que todos los datos lleguen intactos\n* Quieras hacer automáticamente una mejor estimación del uso del rendimiento de la red\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 45,
    "Content": "### User datagram protocol (UDP)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/yzDrJtA.jpg\">\n  <br/>\n  <i><a href=http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/>Source: How to make a multiplayer game</a></i>\n</p>\n\nUDP is connectionless.  Datagrams (analogous to packets) are guaranteed only at the datagram level.  Datagrams might reach their destination out of order or not at all.  UDP does not support congestion control.  Without the guarantees that TCP support, UDP is generally more efficient.\n\nUDP can broadcast, sending datagrams to all devices on the subnet.  This is useful with [DHCP](https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol) because the client has not yet received an IP address, thus preventing a way for TCP to stream without the IP address.\n\nUDP is less reliable but works well in real time use cases such as VoIP, video chat, streaming, and realtime multiplayer games.\n\nUse UDP over TCP when:\n\n* You need the lowest latency\n* Late data is worse than loss of data\n* You want to implement your own error correction\n\n#### Source(s) and further reading: TCP and UDP\n\n* [Networking for game programming](http://gafferongames.com/networking-for-game-programmers/udp-vs-tcp/)\n* [Key differences between TCP and UDP protocols](http://www.cyberciti.biz/faq/key-differences-between-tcp-and-udp-protocols/)\n* [Difference between TCP and UDP](http://stackoverflow.com/questions/5970383/difference-between-tcp-and-udp)\n* [Transmission control protocol](https://en.wikipedia.org/wiki/Transmission_Control_Protocol)\n* [User datagram protocol](https://en.wikipedia.org/wiki/User_Datagram_Protocol)\n* [Scaling memcache at Facebook](http://www.cs.bu.edu/~jappavoo/jappavoo.github.com/451/papers/memcache-fb.pdf)\n\n### Remote procedure call (RPC)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/iF4Mkb5.png\">\n  <br/>\n  <i><a href=http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview>Source: Crack the system design interview</a></i>\n</p>\n\nIn an RPC, a client causes a procedure to execute on a different address space, usually a remote server.  The procedure is coded as if it were a local procedure call, abstracting away the details of how to communicate with the server from the client program.  Remote calls are usually slower and less reliable than local calls so it is helpful to distinguish RPC calls from local calls.  Popular RPC frameworks include [Protobuf](https://developers.google.com/protocol-buffers/), [Thrift](https://thrift.apache.org/), and [Avro](https://avro.apache.org/docs/current/).\n\nRPC is a request-response protocol:",
    "ContentSha": "qWH5LAPvggn7k7ivyK8v6v8/pTXkZRoURbzBFakhSEM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### Protocolo de datagramas de usuario (UDP)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/yzDrJtA.jpg\">\n  <br/>\n  <i><a href=http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/>Fuente: Cómo hacer un juego multijugador</a></i>\n</p>\n\nUDP es sin conexión. Los datagramas (análogos a paquetes) están garantizados solo a nivel de datagrama. Los datagramas pueden llegar a su destino fuera de orden o no llegar en absoluto. UDP no soporta control de congestión. Sin las garantías que soporta TCP, UDP es generalmente más eficiente.\n\nUDP puede hacer broadcast, enviando datagramas a todos los dispositivos en la subred. Esto es útil con [DHCP](https://es.wikipedia.org/wiki/Protocolo_de_configuraci%C3%B3n_din%C3%A1mica_de_host) porque el cliente aún no ha recibido una dirección IP, lo que impide una manera para que TCP transmita sin la dirección IP.\n\nUDP es menos confiable pero funciona bien en casos de uso en tiempo real como VoIP, videollamadas, streaming y juegos multijugador en tiempo real.\n\nUsa UDP en lugar de TCP cuando:\n\n* Necesitas la latencia más baja\n* Los datos tardíos son peores que la pérdida de datos\n* Quieres implementar tu propia corrección de errores\n\n#### Fuente(s) y lectura adicional: TCP y UDP\n\n* [Redes para programación de juegos](http://gafferongames.com/networking-for-game-programmers/udp-vs-tcp/)\n* [Diferencias clave entre los protocolos TCP y UDP](http://www.cyberciti.biz/faq/key-differences-between-tcp-and-udp-protocols/)\n* [Diferencia entre TCP y UDP](http://stackoverflow.com/questions/5970383/difference-between-tcp-and-udp)\n* [Protocolo de control de transmisión](https://es.wikipedia.org/wiki/Protocolo_de_control_de_transmisi%C3%B3n)\n* [Protocolo de datagramas de usuario](https://es.wikipedia.org/wiki/Protocolo_de_datagramas_de_usuario)\n* [Escalando memcache en Facebook](http://www.cs.bu.edu/~jappavoo/jappavoo.github.com/451/papers/memcache-fb.pdf)\n\n### Llamada a procedimiento remoto (RPC)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/iF4Mkb5.png\">\n  <br/>\n  <i><a href=http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview>Fuente: Crack the system design interview</a></i>\n</p>\n\nEn una RPC, un cliente hace que un procedimiento se ejecute en un espacio de direcciones diferente, usualmente un servidor remoto. El procedimiento está codificado como si fuera una llamada a procedimiento local, abstrayendo los detalles de cómo comunicarse con el servidor desde el programa cliente. Las llamadas remotas suelen ser más lentas y menos confiables que las llamadas locales, por lo que es útil distinguir las llamadas RPC de las llamadas locales. Los frameworks RPC populares incluyen [Protobuf](https://developers.google.com/protocol-buffers/), [Thrift](https://thrift.apache.org/), y [Avro](https://avro.apache.org/docs/current/).\n\nRPC es un protocolo de solicitud-respuesta:",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 46,
    "Content": "\n* **Client program** - Calls the client stub procedure.  The parameters are pushed onto the stack like a local procedure call.\n* **Client stub procedure** - Marshals (packs) procedure id and arguments into a request message.\n* **Client communication module** - OS sends the message from the client to the server.\n* **Server communication module** - OS passes the incoming packets to the server stub procedure.\n* **Server stub procedure** -  Unmarshalls the results, calls the server procedure matching the procedure id and passes the given arguments.\n* The server response repeats the steps above in reverse order.\n\nSample RPC calls:\n",
    "ContentSha": "5PmI2LbQPBewUn/2iz277V+TkEFWqKJeqfFmrsij1fA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n* **Programa cliente** - Llama al procedimiento stub del cliente. Los parámetros se apilan en la pila como en una llamada a procedimiento local.\n* **Procedimiento stub del cliente** - Empaqueta (marshal) el id del procedimiento y los argumentos en un mensaje de solicitud.\n* **Módulo de comunicación del cliente** - El SO envía el mensaje desde el cliente al servidor.\n* **Módulo de comunicación del servidor** - El SO pasa los paquetes entrantes al procedimiento stub del servidor.\n* **Procedimiento stub del servidor** - Desempaqueta (unmarshal) los resultados, llama al procedimiento del servidor que coincide con el id del procedimiento y pasa los argumentos dados.\n* La respuesta del servidor repite los pasos anteriores en orden inverso.\n\nLlamadas RPC de ejemplo:\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 47,
    "Content": "```\nGET /someoperation?data=anId\n\nPOST /anotheroperation\n{\n  \"data\":\"anId\";\n  \"anotherdata\": \"another value\"\n}\n```",
    "ContentSha": "BYLxUnd5OWhXrWTwm++n0cxi7AnIAvtoL/RnYPfjXXk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nGET /someoperation?data=anId\n\nPOST /anotheroperation\n{\n  \"data\":\"anId\";\n  \"anotherdata\": \"another value\"\n}\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 48,
    "Content": "\nRPC is focused on exposing behaviors.  RPCs are often used for performance reasons with internal communications, as you can hand-craft native calls to better fit your use cases.\n\nChoose a native library (aka SDK) when:\n\n* You know your target platform.\n* You want to control how your \"logic\" is accessed.\n* You want to control how error control happens off your library.\n* Performance and end user experience is your primary concern.\n\nHTTP APIs following **REST** tend to be used more often for public APIs.\n\n#### Disadvantage(s): RPC\n\n* RPC clients become tightly coupled to the service implementation.\n* A new API must be defined for every new operation or use case.\n* It can be difficult to debug RPC.\n* You might not be able to leverage existing technologies out of the box.  For example, it might require additional effort to ensure [RPC calls are properly cached](https://web.archive.org/web/20170608193645/http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/) on caching servers such as [Squid](http://www.squid-cache.org/).\n\n### Representational state transfer (REST)\n\nREST is an architectural style enforcing a client/server model where the client acts on a set of resources managed by the server.  The server provides a representation of resources and actions that can either manipulate or get a new representation of resources.  All communication must be stateless and cacheable.\n\nThere are four qualities of a RESTful interface:\n\n* **Identify resources (URI in HTTP)** - use the same URI regardless of any operation.\n* **Change with representations (Verbs in HTTP)** - use verbs, headers, and body.\n* **Self-descriptive error message (status response in HTTP)** - Use status codes, don't reinvent the wheel.\n* **[HATEOAS](http://restcookbook.com/Basics/hateoas/) (HTML interface for HTTP)** - your web service should be fully accessible in a browser.\n\nSample REST calls:\n",
    "ContentSha": "Rt/8zO9jLRQq0DxNqYrouOd/1z3QvXPXQYsN4u7rca0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nRPC se centra en exponer comportamientos. Los RPC a menudo se utilizan por razones de rendimiento en comunicaciones internas, ya que puedes crear llamadas nativas a medida para ajustarlas mejor a tus casos de uso.\n\nElige una biblioteca nativa (también conocida como SDK) cuando:\n\n* Conozcas tu plataforma objetivo.\n* Quieras controlar cómo se accede a tu \"lógica\".\n* Quieras controlar cómo se maneja el control de errores fuera de tu biblioteca.\n* El rendimiento y la experiencia del usuario final sean tu principal preocupación.\n\nLas APIs HTTP que siguen **REST** tienden a usarse más a menudo para APIs públicas.\n\n#### Desventaja(s): RPC\n\n* Los clientes RPC se vuelven fuertemente acoplados a la implementación del servicio.\n* Se debe definir una nueva API para cada nueva operación o caso de uso.\n* Puede ser difícil depurar RPC.\n* Puede que no puedas aprovechar tecnologías existentes directamente. Por ejemplo, podría requerir esfuerzo adicional asegurar que [las llamadas RPC se almacenen en caché adecuadamente](https://web.archive.org/web/20170608193645/http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/) en servidores de caché como [Squid](http://www.squid-cache.org/).\n\n### Transferencia de estado representacional (REST)\n\nREST es un estilo arquitectónico que impone un modelo cliente/servidor donde el cliente actúa sobre un conjunto de recursos gestionados por el servidor. El servidor proporciona una representación de recursos y acciones que pueden manipular o obtener una nueva representación de recursos. Toda la comunicación debe ser sin estado y cacheable.\n\nHay cuatro cualidades de una interfaz RESTful:\n\n* **Identificar recursos (URI en HTTP)** - usar el mismo URI independientemente de la operación.\n* **Cambiar con representaciones (Verbos en HTTP)** - usar verbos, encabezados y cuerpo.\n* **Mensaje de error auto-descriptivo (respuesta de estado en HTTP)** - usar códigos de estado, no reinventar la rueda.\n* **[HATEOAS](http://restcookbook.com/Basics/hateoas/) (interfaz HTML para HTTP)** - tu servicio web debe ser completamente accesible en un navegador.\n\nEjemplos de llamadas REST:\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 49,
    "Content": "```\nGET /someresources/anId\n\nPUT /someresources/anId\n{\"anotherdata\": \"another value\"}\n```",
    "ContentSha": "LfYrdSaJCXPWw5FeIGqODwCXjq6vLSYullHQ6dtLt9M=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nGET /someresources/anId\n\nPUT /someresources/anId\n{\"anotherdata\": \"another value\"}\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 50,
    "Content": "\nREST is focused on exposing data.  It minimizes the coupling between client/server and is often used for public HTTP APIs.  REST uses a more generic and uniform method of exposing resources through URIs, [representation through headers](https://github.com/for-GET/know-your-http-well/blob/master/headers.md), and actions through verbs such as GET, POST, PUT, DELETE, and PATCH.  Being stateless, REST is great for horizontal scaling and partitioning.\n\n#### Disadvantage(s): REST\n\n* With REST being focused on exposing data, it might not be a good fit if resources are not naturally organized or accessed in a simple hierarchy.  For example, returning all updated records from the past hour matching a particular set of events is not easily expressed as a path.  With REST, it is likely to be implemented with a combination of URI path, query parameters, and possibly the request body.\n* REST typically relies on a few verbs (GET, POST, PUT, DELETE, and PATCH) which sometimes doesn't fit your use case.  For example, moving expired documents to the archive folder might not cleanly fit within these verbs.\n* Fetching complicated resources with nested hierarchies requires multiple round trips between the client and server to render single views, e.g. fetching content of a blog entry and the comments on that entry. For mobile applications operating in variable network conditions, these multiple roundtrips are highly undesirable.\n* Over time, more fields might be added to an API response and older clients will receive all new data fields, even those that they do not need, as a result, it bloats the payload size and leads to larger latencies.\n\n### RPC and REST calls comparison\n\n| Operation | RPC | REST |\n|---|---|---|\n| Signup    | **POST** /signup | **POST** /persons |\n| Resign    | **POST** /resign<br/>{<br/>\"personid\": \"1234\"<br/>} | **DELETE** /persons/1234 |\n| Read a person | **GET** /readPerson?personid=1234 | **GET** /persons/1234 |\n| Read a person’s items list | **GET** /readUsersItemsList?personid=1234 | **GET** /persons/1234/items |\n| Add an item to a person’s items | **POST** /addItemToUsersItemsList<br/>{<br/>\"personid\": \"1234\";<br/>\"itemid\": \"456\"<br/>} | **POST** /persons/1234/items<br/>{<br/>\"itemid\": \"456\"<br/>} |\n| Update an item    | **POST** /modifyItem<br/>{<br/>\"itemid\": \"456\";<br/>\"key\": \"value\"<br/>} | **PUT** /items/456<br/>{<br/>\"key\": \"value\"<br/>} |\n| Delete an item | **POST** /removeItem<br/>{<br/>\"itemid\": \"456\"<br/>} | **DELETE** /items/456 |\n\n<p align=\"center\">\n  <i><a href=https://apihandyman.io/do-you-really-know-why-you-prefer-rest-over-rpc/>Source: Do you really know why you prefer REST over RPC</a></i>\n</p>\n\n#### Source(s) and further reading: REST and RPC\n\n* [Do you really know why you prefer REST over RPC](https://apihandyman.io/do-you-really-know-why-you-prefer-rest-over-rpc/)\n* [When are RPC-ish approaches more appropriate than REST?](http://programmers.stackexchange.com/a/181186)\n* [REST vs JSON-RPC](http://stackoverflow.com/questions/15056878/rest-vs-json-rpc)\n* [Debunking the myths of RPC and REST](https://web.archive.org/web/20170608193645/http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/)\n* [What are the drawbacks of using REST](https://www.quora.com/What-are-the-drawbacks-of-using-RESTful-APIs)\n* [Crack the system design interview](http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview)\n* [Thrift](https://code.facebook.com/posts/1468950976659943/)\n* [Why REST for internal use and not RPC](http://arstechnica.com/civis/viewtopic.php?t=1190508)\n\n## Security\n\nThis section could use some updates.  Consider [contributing](#contributing)!",
    "ContentSha": "SY9oRc1IgrKNdRZI1YEjzyytSRn6DjylmnfEWHK6KsU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nREST se centra en exponer datos. Minimiza el acoplamiento entre cliente/servidor y se utiliza a menudo para APIs HTTP públicas. REST utiliza un método más genérico y uniforme para exponer recursos a través de URIs, [representación mediante encabezados](https://github.com/for-GET/know-your-http-well/blob/master/headers.md) y acciones a través de verbos como GET, POST, PUT, DELETE y PATCH. Al ser sin estado, REST es ideal para escalado horizontal y particionamiento.\n\n#### Desventaja(s): REST\n\n* Al estar REST centrado en exponer datos, puede no ser adecuado si los recursos no están organizados naturalmente o accedidos en una jerarquía simple. Por ejemplo, devolver todos los registros actualizados de la última hora que coincidan con un conjunto particular de eventos no se expresa fácilmente como una ruta. Con REST, es probable que se implemente con una combinación de ruta URI, parámetros de consulta y posiblemente el cuerpo de la solicitud.\n* REST típicamente se basa en algunos verbos (GET, POST, PUT, DELETE y PATCH) que a veces no encajan en tu caso de uso. Por ejemplo, mover documentos expirados a la carpeta de archivo podría no encajar claramente dentro de estos verbos.\n* Obtener recursos complicados con jerarquías anidadas requiere múltiples viajes de ida y vuelta entre cliente y servidor para renderizar vistas individuales, p. ej., obtener el contenido de una entrada de blog y los comentarios sobre esa entrada. Para aplicaciones móviles que operan en condiciones de red variables, estos múltiples viajes son altamente indeseables.\n* Con el tiempo, se pueden añadir más campos a una respuesta de API y los clientes antiguos recibirán todos los nuevos campos de datos, incluso aquellos que no necesitan, lo que hace que el tamaño de la carga útil se incremente y provoque latencias mayores.\n\n### Comparación de llamadas RPC y REST\n\n| Operación | RPC | REST |\n|---|---|---|\n| Registro    | **POST** /signup | **POST** /persons |\n| Renuncia    | **POST** /resign<br/>{<br/>\"personid\": \"1234\"<br/>} | **DELETE** /persons/1234 |\n| Leer una persona | **GET** /readPerson?personid=1234 | **GET** /persons/1234 |\n| Leer lista de ítems de una persona | **GET** /readUsersItemsList?personid=1234 | **GET** /persons/1234/items |\n| Añadir un ítem a la lista de una persona | **POST** /addItemToUsersItemsList<br/>{<br/>\"personid\": \"1234\";<br/>\"itemid\": \"456\"<br/>} | **POST** /persons/1234/items<br/>{<br/>\"itemid\": \"456\"<br/>} |\n| Actualizar un ítem    | **POST** /modifyItem<br/>{<br/>\"itemid\": \"456\";<br/>\"key\": \"value\"<br/>} | **PUT** /items/456<br/>{<br/>\"key\": \"value\"<br/>} |\n| Eliminar un ítem | **POST** /removeItem<br/>{<br/>\"itemid\": \"456\"<br/>} | **DELETE** /items/456 |\n\n<p align=\"center\">\n  <i><a href=https://apihandyman.io/do-you-really-know-why-you-prefer-rest-over-rpc/>Fuente: ¿Realmente sabes por qué prefieres REST sobre RPC?</a></i>\n</p>\n\n#### Fuente(s) y lecturas adicionales: REST y RPC\n\n* [¿Realmente sabes por qué prefieres REST sobre RPC?](https://apihandyman.io/do-you-really-know-why-you-prefer-rest-over-rpc/)\n* [¿Cuándo son más apropiados enfoques tipo RPC que REST?](http://programmers.stackexchange.com/a/181186)\n* [REST vs JSON-RPC](http://stackoverflow.com/questions/15056878/rest-vs-json-rpc)\n* [Desmitificando los mitos de RPC y REST](https://web.archive.org/web/20170608193645/http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/)\n* [¿Cuáles son las desventajas de usar REST?](https://www.quora.com/What-are-the-drawbacks-of-using-RESTful-APIs)\n* [Supera la entrevista de diseño de sistemas](http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview)\n* [Thrift](https://code.facebook.com/posts/1468950976659943/)\n* [Por qué REST para uso interno y no RPC](http://arstechnica.com/civis/viewtopic.php?t=1190508)\n\n## Seguridad\n\nEsta sección podría usar algunas actualizaciones. ¡Considera [contribuir](#contributing)!",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 51,
    "Content": "\nSecurity is a broad topic.  Unless you have considerable experience, a security background, or are applying for a position that requires knowledge of security, you probably won't need to know more than the basics:\n\n* Encrypt in transit and at rest.\n* Sanitize all user inputs or any input parameters exposed to user to prevent [XSS](https://en.wikipedia.org/wiki/Cross-site_scripting) and [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* Use parameterized queries to prevent SQL injection.\n* Use the principle of [least privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege).\n\n### Source(s) and further reading\n\n* [API security checklist](https://github.com/shieldfy/API-Security-Checklist)\n* [Security guide for developers](https://github.com/FallibleInc/security-guide-for-developers)\n* [OWASP top ten](https://www.owasp.org/index.php/OWASP_Top_Ten_Cheat_Sheet)\n\n## Appendix\n\nYou'll sometimes be asked to do 'back-of-the-envelope' estimates.  For example, you might need to determine how long it will take to generate 100 image thumbnails from disk or how much memory a data structure will take.  The **Powers of two table** and **Latency numbers every programmer should know** are handy references.\n\n### Powers of two table\n",
    "ContentSha": "lttd9OX13KgyFAZReRo/UiwT2DoGI4tHaEGVoAH3mCA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nLa seguridad es un tema amplio. A menos que tengas una experiencia considerable, un conocimiento en seguridad, o estés aplicando para un puesto que requiera conocimientos de seguridad, probablemente no necesites saber más que lo básico:\n\n* Encripta en tránsito y en reposo.\n* Sanitiza todas las entradas de usuario o cualquier parámetro de entrada expuesto al usuario para prevenir [XSS](https://es.wikipedia.org/wiki/Cross-site_scripting) y [inyección SQL](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_SQL).\n* Usa consultas parametrizadas para prevenir la inyección SQL.\n* Usa el principio de [mínimo privilegio](https://es.wikipedia.org/wiki/Principio_de_m%C3%ADnimo_privilegio).\n\n### Fuente(s) y lectura adicional\n\n* [Lista de verificación de seguridad para API](https://github.com/shieldfy/API-Security-Checklist)\n* [Guía de seguridad para desarrolladores](https://github.com/FallibleInc/security-guide-for-developers)\n* [Top ten de OWASP](https://www.owasp.org/index.php/OWASP_Top_Ten_Cheat_Sheet)\n\n## Apéndice\n\nA veces se te pedirá hacer estimaciones 'rápidas'. Por ejemplo, podrías necesitar determinar cuánto tiempo tomará generar 100 miniaturas de imágenes desde el disco o cuánta memoria ocupará una estructura de datos. La **tabla de potencias de dos** y los **números de latencia que todo programador debería conocer** son referencias útiles.\n\n### Tabla de potencias de dos\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 52,
    "Content": "```\nPower           Exact Value         Approx Value        Bytes\n---------------------------------------------------------------\n7                             128\n8                             256\n10                           1024   1 thousand           1 KB\n16                         65,536                       64 KB\n20                      1,048,576   1 million            1 MB\n30                  1,073,741,824   1 billion            1 GB\n32                  4,294,967,296                        4 GB\n40              1,099,511,627,776   1 trillion           1 TB\n```",
    "ContentSha": "tY3s4yO7vTGsjW+GZNlakuBkrCR3FXNKe9N9AYlzPrU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nPower           Exact Value         Approx Value        Bytes\n---------------------------------------------------------------\n7                             128\n8                             256\n10                           1024   1 thousand           1 KB\n16                         65,536                       64 KB\n20                      1,048,576   1 million            1 MB\n30                  1,073,741,824   1 billion            1 GB\n32                  4,294,967,296                        4 GB\n40              1,099,511,627,776   1 trillion           1 TB\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 53,
    "Content": "\n#### Source(s) and further reading\n\n* [Powers of two](https://en.wikipedia.org/wiki/Power_of_two)\n\n### Latency numbers every programmer should know\n",
    "ContentSha": "ppBLjl4GPpTTuZuZkRCmUB3lr0F/LbyDBiLBdXbuDDw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### Fuente(s) y lectura adicional\n\n* [Potencias de dos](https://es.wikipedia.org/wiki/Potencia_de_dos)\n\n### Números de latencia que todo programador debe conocer\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 54,
    "Content": "```\nLatency Comparison Numbers\n--------------------------\nL1 cache reference                           0.5 ns\nBranch mispredict                            5   ns\nL2 cache reference                           7   ns                      14x L1 cache\nMutex lock/unlock                           25   ns\nMain memory reference                      100   ns                      20x L2 cache, 200x L1 cache\nCompress 1K bytes with Zippy            10,000   ns       10 us\nSend 1 KB bytes over 1 Gbps network     10,000   ns       10 us\nRead 4 KB randomly from SSD*           150,000   ns      150 us          ~1GB/sec SSD\nRead 1 MB sequentially from memory     250,000   ns      250 us\nRound trip within same datacenter      500,000   ns      500 us\nRead 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory\nHDD seek                            10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip\nRead 1 MB sequentially from 1 Gbps  10,000,000   ns   10,000 us   10 ms  40x memory, 10X SSD\nRead 1 MB sequentially from HDD     30,000,000   ns   30,000 us   30 ms 120x memory, 30X SSD\nSend packet CA->Netherlands->CA    150,000,000   ns  150,000 us  150 ms\n\nNotes\n-----\n1 ns = 10^-9 seconds\n1 us = 10^-6 seconds = 1,000 ns\n1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns\n```",
    "ContentSha": "Cxjssj59JwVoJhpDLS31tIAyvakR0WQUIHZP4hMVLy8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nLatency Comparison Numbers\n--------------------------\nL1 cache reference                           0.5 ns\nBranch mispredict                            5   ns\nL2 cache reference                           7   ns                      14x L1 cache\nMutex lock/unlock                           25   ns\nMain memory reference                      100   ns                      20x L2 cache, 200x L1 cache\nCompress 1K bytes with Zippy            10,000   ns       10 us\nSend 1 KB bytes over 1 Gbps network     10,000   ns       10 us\nRead 4 KB randomly from SSD*           150,000   ns      150 us          ~1GB/sec SSD\nRead 1 MB sequentially from memory     250,000   ns      250 us\nRound trip within same datacenter      500,000   ns      500 us\nRead 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory\nHDD seek                            10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip\nRead 1 MB sequentially from 1 Gbps  10,000,000   ns   10,000 us   10 ms  40x memory, 10X SSD\nRead 1 MB sequentially from HDD     30,000,000   ns   30,000 us   30 ms 120x memory, 30X SSD\nSend packet CA->Netherlands->CA    150,000,000   ns  150,000 us  150 ms\n\nNotes\n-----\n1 ns = 10^-9 seconds\n1 us = 10^-6 seconds = 1,000 ns\n1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 55,
    "Content": "\nHandy metrics based on numbers above:\n\n* Read sequentially from HDD at 30 MB/s\n* Read sequentially from 1 Gbps Ethernet at 100 MB/s\n* Read sequentially from SSD at 1 GB/s\n* Read sequentially from main memory at 4 GB/s\n* 6-7 world-wide round trips per second\n* 2,000 round trips per second within a data center\n\n#### Latency numbers visualized\n\n![](https://camo.githubusercontent.com/77f72259e1eb58596b564d1ad823af1853bc60a3/687474703a2f2f692e696d6775722e636f6d2f6b307431652e706e67)\n\n#### Source(s) and further reading\n\n* [Latency numbers every programmer should know - 1](https://gist.github.com/jboner/2841832)\n* [Latency numbers every programmer should know - 2](https://gist.github.com/hellerbarde/2843375)\n* [Designs, lessons, and advice from building large distributed systems](http://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf)\n* [Software Engineering Advice from Building Large-Scale Distributed Systems](https://static.googleusercontent.com/media/research.google.com/en//people/jeff/stanford-295-talk.pdf)\n\n### Additional system design interview questions\n\n> Common system design interview questions, with links to resources on how to solve each.\n\n| Question | Reference(s) |\n|---|---|\n| Design a file sync service like Dropbox | [youtube.com](https://www.youtube.com/watch?v=PE4gwstWhmc) |\n| Design a search engine like Google | [queue.acm.org](http://queue.acm.org/detail.cfm?id=988407)<br/>[stackexchange.com](http://programmers.stackexchange.com/questions/38324/interview-question-how-would-you-implement-google-search)<br/>[ardendertat.com](http://www.ardendertat.com/2012/01/11/implementing-search-engines/)<br/>[stanford.edu](http://infolab.stanford.edu/~backrub/google.html) |\n| Design a scalable web crawler like Google | [quora.com](https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch) |\n| Design Google docs | [code.google.com](https://code.google.com/p/google-mobwrite/)<br/>[neil.fraser.name](https://neil.fraser.name/writing/sync/) |\n| Design a key-value store like Redis | [slideshare.net](http://www.slideshare.net/dvirsky/introduction-to-redis) |\n| Design a cache system like Memcached | [slideshare.net](http://www.slideshare.net/oemebamo/introduction-to-memcached) |\n| Design a recommendation system like Amazon's | [hulu.com](https://web.archive.org/web/20170406065247/http://tech.hulu.com/blog/2011/09/19/recommendation-system.html)<br/>[ijcai13.org](http://ijcai13.org/files/tutorial_slides/td3.pdf) |\n| Design a tinyurl system like Bitly | [n00tc0d3r.blogspot.com](http://n00tc0d3r.blogspot.com/) |\n| Design a chat app like WhatsApp | [highscalability.com](http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html)\n| Design a picture sharing system like Instagram | [highscalability.com](http://highscalability.com/flickr-architecture)<br/>[highscalability.com](http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html) |\n| Design the Facebook news feed function | [quora.com](http://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed)<br/>[quora.com](http://www.quora.com/Activity-Streams/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed)<br/>[slideshare.net](http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture) |\n| Design the Facebook timeline function | [facebook.com](https://www.facebook.com/note.php?note_id=10150468255628920)<br/>[highscalability.com](http://highscalability.com/blog/2012/1/23/facebook-timeline-brought-to-you-by-the-power-of-denormaliza.html) |\n| Design the Facebook chat function | [erlang-factory.com](http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf)<br/>[facebook.com](https://www.facebook.com/note.php?note_id=14218138919&id=9445547199&index=0) |",
    "ContentSha": "ufMEAJjeJvG/71zGm1ZrFnYShGruhPDGcpEQX8jnGIY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Métricas útiles basadas en los números anteriores:\n\n* Lectura secuencial desde HDD a 30 MB/s\n* Lectura secuencial desde Ethernet de 1 Gbps a 100 MB/s\n* Lectura secuencial desde SSD a 1 GB/s\n* Lectura secuencial desde memoria principal a 4 GB/s\n* 6-7 viajes de ida y vuelta en todo el mundo por segundo\n* 2,000 viajes de ida y vuelta por segundo dentro de un centro de datos\n\n#### Números de latencia visualizados\n\n![](https://camo.githubusercontent.com/77f72259e1eb58596b564d1ad823af1853bc60a3/687474703a2f2f692e696d6775722e636f6d2f6b307431652e706e67)\n\n#### Fuente(s) y lectura adicional\n\n* [Números de latencia que todo programador debe conocer - 1](https://gist.github.com/jboner/2841832)\n* [Números de latencia que todo programador debe conocer - 2](https://gist.github.com/hellerbarde/2843375)\n* [Diseños, lecciones y consejos de la construcción de sistemas distribuidos grandes](http://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf)\n* [Consejos de ingeniería de software al construir sistemas distribuidos a gran escala](https://static.googleusercontent.com/media/research.google.com/en//people/jeff/stanford-295-talk.pdf)\n\n### Preguntas adicionales para entrevistas de diseño de sistemas\n\n> Preguntas comunes en entrevistas de diseño de sistemas, con enlaces a recursos sobre cómo resolver cada una.\n\n| Pregunta | Referencia(s) |\n|---|---|\n| Diseñar un servicio de sincronización de archivos como Dropbox | [youtube.com](https://www.youtube.com/watch?v=PE4gwstWhmc) |\n| Diseñar un motor de búsqueda como Google | [queue.acm.org](http://queue.acm.org/detail.cfm?id=988407)<br/>[stackexchange.com](http://programmers.stackexchange.com/questions/38324/interview-question-how-would-you-implement-google-search)<br/>[ardendertat.com](http://www.ardendertat.com/2012/01/11/implementing-search-engines/)<br/>[stanford.edu](http://infolab.stanford.edu/~backrub/google.html) |\n| Diseñar un rastreador web escalable como Google | [quora.com](https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch) |\n| Diseñar Google docs | [code.google.com](https://code.google.com/p/google-mobwrite/)<br/>[neil.fraser.name](https://neil.fraser.name/writing/sync/) |\n| Diseñar un almacén clave-valor como Redis | [slideshare.net](http://www.slideshare.net/dvirsky/introduction-to-redis) |\n| Diseñar un sistema de caché como Memcached | [slideshare.net](http://www.slideshare.net/oemebamo/introduction-to-memcached) |\n| Diseñar un sistema de recomendación como el de Amazon | [hulu.com](https://web.archive.org/web/20170406065247/http://tech.hulu.com/blog/2011/09/19/recommendation-system.html)<br/>[ijcai13.org](http://ijcai13.org/files/tutorial_slides/td3.pdf) |\n| Diseñar un sistema tinyurl como Bitly | [n00tc0d3r.blogspot.com](http://n00tc0d3r.blogspot.com/) |\n| Diseñar una app de chat como WhatsApp | [highscalability.com](http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html) |\n| Diseñar un sistema para compartir fotos como Instagram | [highscalability.com](http://highscalability.com/flickr-architecture)<br/>[highscalability.com](http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html) |\n| Diseñar la función de noticias en Facebook | [quora.com](http://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed)<br/>[quora.com](http://www.quora.com/Activity-Streams/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed)<br/>[slideshare.net](http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture) |\n| Diseñar la función de línea de tiempo en Facebook | [facebook.com](https://www.facebook.com/note.php?note_id=10150468255628920)<br/>[highscalability.com](http://highscalability.com/blog/2012/1/23/facebook-timeline-brought-to-you-by-the-power-of-denormaliza.html) |\n| Diseñar la función de chat en Facebook | [erlang-factory.com](http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf)<br/>[facebook.com](https://www.facebook.com/note.php?note_id=14218138919&id=9445547199&index=0) |\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 56,
    "Content": "| Design a graph search function like Facebook's | [facebook.com](https://www.facebook.com/notes/facebook-engineering/under-the-hood-building-out-the-infrastructure-for-graph-search/10151347573598920)<br/>[facebook.com](https://www.facebook.com/notes/facebook-engineering/under-the-hood-indexing-and-ranking-in-graph-search/10151361720763920)<br/>[facebook.com](https://www.facebook.com/notes/facebook-engineering/under-the-hood-the-natural-language-interface-of-graph-search/10151432733048920) |\n| Design a content delivery network like CloudFlare | [figshare.com](https://figshare.com/articles/Globally_distributed_content_delivery/6605972) |\n| Design a trending topic system like Twitter's | [michael-noll.com](http://www.michael-noll.com/blog/2013/01/18/implementing-real-time-trending-topics-in-storm/)<br/>[snikolov .wordpress.com](http://snikolov.wordpress.com/2012/11/14/early-detection-of-twitter-trends/) |\n| Design a random ID generation system | [blog.twitter.com](https://blog.twitter.com/2010/announcing-snowflake)<br/>[github.com](https://github.com/twitter/snowflake/) |\n| Return the top k requests during a time interval | [cs.ucsb.edu](https://www.cs.ucsb.edu/sites/default/files/documents/2005-23.pdf)<br/>[wpi.edu](http://davis.wpi.edu/xmdv/docs/EDBT11-diyang.pdf) |\n| Design a system that serves data from multiple data centers | [highscalability.com](http://highscalability.com/blog/2009/8/24/how-google-serves-data-from-multiple-datacenters.html) |\n| Design an online multiplayer card game | [indieflashblog.com](https://web.archive.org/web/20180929181117/http://www.indieflashblog.com/how-to-create-an-asynchronous-multiplayer-game.html)<br/>[buildnewgames.com](http://buildnewgames.com/real-time-multiplayer/) |\n| Design a garbage collection system | [stuffwithstuff.com](http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/)<br/>[washington.edu](http://courses.cs.washington.edu/courses/csep521/07wi/prj/rick.pdf) |\n| Design an API rate limiter | [https://stripe.com/blog/](https://stripe.com/blog/rate-limiters) |\n| Design a Stock Exchange (like NASDAQ or Binance) | [Jane Street](https://youtu.be/b1e4t2k2KJY)<br/>[Golang Implementation](https://around25.com/blog/building-a-trading-engine-for-a-crypto-exchange/)<br/>[Go Implementation](http://bhomnick.net/building-a-simple-limit-order-in-go/) |\n| Add a system design question | [Contribute](#contributing) |\n\n### Real world architectures\n\n> Articles on how real world systems are designed.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/TcUo2fw.png\">\n  <br/>\n  <i><a href=https://www.infoq.com/presentations/Twitter-Timeline-Scalability>Source: Twitter timelines at scale</a></i>\n</p>\n\n**Don't focus on nitty gritty details for the following articles, instead:**\n\n* Identify shared principles, common technologies, and patterns within these articles\n* Study what problems are solved by each component, where it works, where it doesn't\n* Review the lessons learned\n\n|Type | System | Reference(s) |\n|---|---|---|\n| Data processing | **MapReduce** - Distributed data processing from Google | [research.google.com](http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf) |\n| Data processing | **Spark** - Distributed data processing from Databricks | [slideshare.net](http://www.slideshare.net/AGrishchenko/apache-spark-architecture) |\n| Data processing | **Storm** - Distributed data processing from Twitter | [slideshare.net](http://www.slideshare.net/previa/storm-16094009) |\n| | | |\n| Data store | **Bigtable** - Distributed column-oriented database from Google | [harvard.edu](http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf) |\n| Data store | **HBase** - Open source implementation of Bigtable | [slideshare.net](http://www.slideshare.net/alexbaranau/intro-to-hbase) |\n| Data store | **Cassandra** - Distributed column-oriented database from Facebook | [slideshare.net](http://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666)\n| Data store | **DynamoDB** - Document-oriented database from Amazon | [harvard.edu](http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf) |\n| Data store | **MongoDB** - Document-oriented database | [slideshare.net](http://www.slideshare.net/mdirolf/introduction-to-mongodb) |\n| Data store | **Spanner** - Globally-distributed database from Google | [research.google.com](http://research.google.com/archive/spanner-osdi2012.pdf) |",
    "ContentSha": "5hNQndfbSnlP1RLa/GyRt8pzzHWJN34J9g6lOThi724=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "| Diseñar una función de búsqueda en grafo como la de Facebook | [facebook.com](https://www.facebook.com/notes/facebook-engineering/under-the-hood-building-out-the-infrastructure-for-graph-search/10151347573598920)<br/>[facebook.com](https://www.facebook.com/notes/facebook-engineering/under-the-hood-indexing-and-ranking-in-graph-search/10151361720763920)<br/>[facebook.com](https://www.facebook.com/notes/facebook-engineering/under-the-hood-the-natural-language-interface-of-graph-search/10151432733048920) |\n| Diseñar una red de entrega de contenido como CloudFlare | [figshare.com](https://figshare.com/articles/Globally_distributed_content_delivery/6605972) |\n| Diseñar un sistema de temas de tendencia como el de Twitter | [michael-noll.com](http://www.michael-noll.com/blog/2013/01/18/implementing-real-time-trending-topics-in-storm/)<br/>[snikolov .wordpress.com](http://snikolov.wordpress.com/2012/11/14/early-detection-of-twitter-trends/) |\n| Diseñar un sistema de generación de ID aleatorio | [blog.twitter.com](https://blog.twitter.com/2010/announcing-snowflake)<br/>[github.com](https://github.com/twitter/snowflake/) |\n| Devolver las k solicitudes principales durante un intervalo de tiempo | [cs.ucsb.edu](https://www.cs.ucsb.edu/sites/default/files/documents/2005-23.pdf)<br/>[wpi.edu](http://davis.wpi.edu/xmdv/docs/EDBT11-diyang.pdf) |\n| Diseñar un sistema que sirva datos desde múltiples centros de datos | [highscalability.com](http://highscalability.com/blog/2009/8/24/how-google-serves-data-from-multiple-datacenters.html) |\n| Diseñar un juego de cartas multijugador en línea | [indieflashblog.com](https://web.archive.org/web/20180929181117/http://www.indieflashblog.com/how-to-create-an-asynchronous-multiplayer-game.html)<br/>[buildnewgames.com](http://buildnewgames.com/real-time-multiplayer/) |\n| Diseñar un sistema de recolección de basura | [stuffwithstuff.com](http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/)<br/>[washington.edu](http://courses.cs.washington.edu/courses/csep521/07wi/prj/rick.pdf) |\n| Diseñar un limitador de tasa para API | [https://stripe.com/blog/](https://stripe.com/blog/rate-limiters) |\n| Diseñar una bolsa de valores (como NASDAQ o Binance) | [Jane Street](https://youtu.be/b1e4t2k2KJY)<br/>[Implementación en Golang](https://around25.com/blog/building-a-trading-engine-for-a-crypto-exchange/)<br/>[Implementación en Go](http://bhomnick.net/building-a-simple-limit-order-in-go/) |\n| Añadir una pregunta de diseño de sistema | [Contribuir](#contributing) |\n\n### Arquitecturas del mundo real\n\n> Artículos sobre cómo se diseñan los sistemas en el mundo real.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/TcUo2fw.png\">\n  <br/>\n  <i><a href=https://www.infoq.com/presentations/Twitter-Timeline-Scalability>Fuente: Líneas de tiempo de Twitter a gran escala</a></i>\n</p>\n\n**No te centres en los detalles minuciosos de los siguientes artículos, en cambio:**\n\n* Identifica principios compartidos, tecnologías comunes y patrones dentro de estos artículos\n* Estudia qué problemas resuelve cada componente, dónde funciona, dónde no\n* Revisa las lecciones aprendidas\n\n|Tipo | Sistema | Referencia(s) |\n|---|---|---|\n| Procesamiento de datos | **MapReduce** - Procesamiento de datos distribuido de Google | [research.google.com](http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf) |\n| Procesamiento de datos | **Spark** - Procesamiento de datos distribuido de Databricks | [slideshare.net](http://www.slideshare.net/AGrishchenko/apache-spark-architecture) |\n| Procesamiento de datos | **Storm** - Procesamiento de datos distribuido de Twitter | [slideshare.net](http://www.slideshare.net/previa/storm-16094009) |\n| | | |\n| Almacenamiento de datos | **Bigtable** - Base de datos distribuida orientada a columnas de Google | [harvard.edu](http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf) |\n| Almacenamiento de datos | **HBase** - Implementación de código abierto de Bigtable | [slideshare.net](http://www.slideshare.net/alexbaranau/intro-to-hbase) |\n| Almacenamiento de datos | **Cassandra** - Base de datos distribuida orientada a columnas de Facebook | [slideshare.net](http://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666)\n| Almacenamiento de datos | **DynamoDB** - Base de datos orientada a documentos de Amazon | [harvard.edu](http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf) |\n| Almacenamiento de datos | **MongoDB** - Base de datos orientada a documentos | [slideshare.net](http://www.slideshare.net/mdirolf/introduction-to-mongodb) |\n| Almacenamiento de datos | **Spanner** - Base de datos distribuida globalmente de Google | [research.google.com](http://research.google.com/archive/spanner-osdi2012.pdf) |",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 57,
    "Content": "| Data store | **Memcached** - Distributed memory caching system | [slideshare.net](http://www.slideshare.net/oemebamo/introduction-to-memcached) |\n| Data store | **Redis** - Distributed memory caching system with persistence and value types | [slideshare.net](http://www.slideshare.net/dvirsky/introduction-to-redis) |\n| | | |\n| File system | **Google File System (GFS)** - Distributed file system | [research.google.com](http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf) |\n| File system | **Hadoop File System (HDFS)** - Open source implementation of GFS | [apache.org](http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html) |\n| | | |\n| Misc | **Chubby** - Lock service for loosely-coupled distributed systems from Google | [research.google.com](http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf) |\n| Misc | **Dapper** - Distributed systems tracing infrastructure | [research.google.com](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf)\n| Misc | **Kafka** - Pub/sub message queue from LinkedIn | [slideshare.net](http://www.slideshare.net/mumrah/kafka-talk-tri-hug) |\n| Misc | **Zookeeper** - Centralized infrastructure and services enabling synchronization | [slideshare.net](http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper) |\n| | Add an architecture | [Contribute](#contributing) |\n\n### Company architectures\n\n| Company | Reference(s) |\n|---|---|\n| Amazon | [Amazon architecture](http://highscalability.com/amazon-architecture) |\n| Cinchcast | [Producing 1,500 hours of audio every day](http://highscalability.com/blog/2012/7/16/cinchcast-architecture-producing-1500-hours-of-audio-every-d.html) |\n| DataSift | [Realtime datamining At 120,000 tweets per second](http://highscalability.com/blog/2011/11/29/datasift-architecture-realtime-datamining-at-120000-tweets-p.html) |\n| Dropbox | [How we've scaled Dropbox](https://www.youtube.com/watch?v=PE4gwstWhmc) |\n| ESPN | [Operating At 100,000 duh nuh nuhs per second](http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html) |\n| Google | [Google architecture](http://highscalability.com/google-architecture) |\n| Instagram | [14 million users, terabytes of photos](http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html)<br/>[What powers Instagram](http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances) |\n| Justin.tv | [Justin.Tv's live video broadcasting architecture](http://highscalability.com/blog/2010/3/16/justintvs-live-video-broadcasting-architecture.html) |\n| Facebook | [Scaling memcached at Facebook](https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/key-value/fb-memcached-nsdi-2013.pdf)<br/>[TAO: Facebook’s distributed data store for the social graph](https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/data-store/tao-facebook-distributed-datastore-atc-2013.pdf)<br/>[Facebook’s photo storage](https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf)<br/>[How Facebook Live Streams To 800,000 Simultaneous Viewers](http://highscalability.com/blog/2016/6/27/how-facebook-live-streams-to-800000-simultaneous-viewers.html) |\n| Flickr | [Flickr architecture](http://highscalability.com/flickr-architecture) |\n| Mailbox | [From 0 to one million users in 6 weeks](http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html) |\n| Netflix | [A 360 Degree View Of The Entire Netflix Stack](http://highscalability.com/blog/2015/11/9/a-360-degree-view-of-the-entire-netflix-stack.html)<br/>[Netflix: What Happens When You Press Play?](http://highscalability.com/blog/2017/12/11/netflix-what-happens-when-you-press-play.html) |\n| Pinterest | [From 0 To 10s of billions of page views a month](http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html)<br/>[18 million visitors, 10x growth, 12 employees](http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html) |\n| Playfish | [50 million monthly users and growing](http://highscalability.com/blog/2010/9/21/playfishs-social-gaming-architecture-50-million-monthly-user.html) |\n| PlentyOfFish | [PlentyOfFish architecture](http://highscalability.com/plentyoffish-architecture) |\n| Salesforce | [How they handle 1.3 billion transactions a day](http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html) |\n| Stack Overflow | [Stack Overflow architecture](http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html) |\n| TripAdvisor | [40M visitors, 200M dynamic page views, 30TB data](http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html) |\n| Tumblr | [15 billion page views a month](http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html) |\n| Twitter | [Making Twitter 10000 percent faster](http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster)<br/>[Storing 250 million tweets a day using MySQL](http://highscalability.com/blog/2011/12/19/how-twitter-stores-250-million-tweets-a-day-using-mysql.html)<br/>[150M active users, 300K QPS, a 22 MB/S firehose](http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html)<br/>[Timelines at scale](https://www.infoq.com/presentations/Twitter-Timeline-Scalability)<br/>[Big and small data at Twitter](https://www.youtube.com/watch?v=5cKTP36HVgI)<br/>[Operations at Twitter: scaling beyond 100 million users](https://www.youtube.com/watch?v=z8LU0Cj6BOU)<br/>[How Twitter Handles 3,000 Images Per Second](http://highscalability.com/blog/2016/4/20/how-twitter-handles-3000-images-per-second.html) |\n| Uber | [How Uber scales their real-time market platform](http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html)<br/>[Lessons Learned From Scaling Uber To 2000 Engineers, 1000 Services, And 8000 Git Repositories](http://highscalability.com/blog/2016/10/12/lessons-learned-from-scaling-uber-to-2000-engineers-1000-ser.html) |\n| WhatsApp | [The WhatsApp architecture Facebook bought for $19 billion](http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html) |\n| YouTube | [YouTube scalability](https://www.youtube.com/watch?v=w5WVu624fY8)<br/>[YouTube architecture](http://highscalability.com/youtube-architecture) |\n",
    "ContentSha": "HJ43cGa2ts5Z1+EHjvCRBV9mq+PjUY5QXfwqLIs80oA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "| Almacén de datos | **Memcached** - Sistema de caché distribuido en memoria | [slideshare.net](http://www.slideshare.net/oemebamo/introduction-to-memcached) |\n| Almacén de datos | **Redis** - Sistema de caché distribuido en memoria con persistencia y tipos de valores | [slideshare.net](http://www.slideshare.net/dvirsky/introduction-to-redis) |\n| | | |\n| Sistema de archivos | **Google File System (GFS)** - Sistema de archivos distribuido | [research.google.com](http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf) |\n| Sistema de archivos | **Hadoop File System (HDFS)** - Implementación de código abierto de GFS | [apache.org](http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html) |\n| | | |\n| Varios | **Chubby** - Servicio de bloqueo para sistemas distribuidos débilmente acoplados de Google | [research.google.com](http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf) |\n| Varios | **Dapper** - Infraestructura para rastreo de sistemas distribuidos | [research.google.com](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf) |\n| Varios | **Kafka** - Cola de mensajes pub/sub de LinkedIn | [slideshare.net](http://www.slideshare.net/mumrah/kafka-talk-tri-hug) |\n| Varios | **Zookeeper** - Infraestructura y servicios centralizados que permiten la sincronización | [slideshare.net](http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper) |\n| | Añadir una arquitectura | [Contribuir](#contributing) |\n\n### Arquitecturas de empresas\n\n| Empresa | Referencia(s) |\n|---|---|\n| Amazon | [Arquitectura de Amazon](http://highscalability.com/amazon-architecture) |\n| Cinchcast | [Produciendo 1,500 horas de audio cada día](http://highscalability.com/blog/2012/7/16/cinchcast-architecture-producing-1500-hours-of-audio-every-d.html) |\n| DataSift | [Minería de datos en tiempo real a 120,000 tweets por segundo](http://highscalability.com/blog/2011/11/29/datasift-architecture-realtime-datamining-at-120000-tweets-p.html) |\n| Dropbox | [Cómo hemos escalado Dropbox](https://www.youtube.com/watch?v=PE4gwstWhmc) |\n| ESPN | [Operando a 100,000 duh nuh nuhs por segundo](http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html) |\n| Google | [Arquitectura de Google](http://highscalability.com/google-architecture) |\n| Instagram | [14 millones de usuarios, terabytes de fotos](http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html)<br/>[Qué impulsa Instagram](http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances) |\n| Justin.tv | [Arquitectura de transmisión de video en vivo de Justin.Tv](http://highscalability.com/blog/2010/3/16/justintvs-live-video-broadcasting-architecture.html) |\n| Facebook | [Escalando memcached en Facebook](https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/key-value/fb-memcached-nsdi-2013.pdf)<br/>[TAO: Almacén de datos distribuido de Facebook para el grafo social](https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/data-store/tao-facebook-distributed-datastore-atc-2013.pdf)<br/>[Almacenamiento de fotos de Facebook](https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf)<br/>[Cómo Facebook transmite en vivo a 800,000 espectadores simultáneos](http://highscalability.com/blog/2016/6/27/how-facebook-live-streams-to-800000-simultaneous-viewers.html) |\n| Flickr | [Arquitectura de Flickr](http://highscalability.com/flickr-architecture) |\n| Mailbox | [De 0 a un millón de usuarios en 6 semanas](http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html) |\n| Netflix | [Una vista de 360 grados de toda la pila de Netflix](http://highscalability.com/blog/2015/11/9/a-360-degree-view-of-the-entire-netflix-stack.html)<br/>[Netflix: Qué sucede cuando presionas reproducir](http://highscalability.com/blog/2017/12/11/netflix-what-happens-when-you-press-play.html) |\n| Pinterest | [De 0 a decenas de miles de millones de vistas de página al mes](http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html)<br/>[18 millones de visitantes, crecimiento de 10x, 12 empleados](http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html) |\n| Playfish | [50 millones de usuarios mensuales y creciendo](http://highscalability.com/blog/2010/9/21/playfishs-social-gaming-architecture-50-million-monthly-user.html) |\n| PlentyOfFish | [Arquitectura de PlentyOfFish](http://highscalability.com/plentyoffish-architecture) |\n| Salesforce | [Cómo manejan 1.3 mil millones de transacciones por día](http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html) |\n| Stack Overflow | [Arquitectura de Stack Overflow](http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html) |\n| TripAdvisor | [40M visitantes, 200M vistas dinámicas de página, 30TB de datos](http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html) |\n| Tumblr | [15 mil millones de vistas de página al mes](http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html) |\n| Twitter | [Haciendo Twitter 10,000 por ciento más rápido](http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster)<br/>[Almacenando 250 millones de tweets al día usando MySQL](http://highscalability.com/blog/2011/12/19/how-twitter-stores-250-million-tweets-a-day-using-mysql.html)<br/>[150M usuarios activos, 300K QPS, un firehose de 22 MB/s](http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html)<br/>[Líneas de tiempo a escala](https://www.infoq.com/presentations/Twitter-Timeline-Scalability)<br/>[Datos grandes y pequeños en Twitter](https://www.youtube.com/watch?v=5cKTP36HVgI)<br/>[Operaciones en Twitter: escalando más allá de 100 millones de usuarios](https://www.youtube.com/watch?v=z8LU0Cj6BOU)<br/>[Cómo Twitter maneja 3,000 imágenes por segundo](http://highscalability.com/blog/2016/4/20/how-twitter-handles-3000-images-per-second.html) |\n| Uber | [Cómo Uber escala su plataforma de mercado en tiempo real](http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html)<br/>[Lecciones aprendidas al escalar Uber a 2000 ingenieros, 1000 servicios y 8000 repositorios Git](http://highscalability.com/blog/2016/10/12/lessons-learned-from-scaling-uber-to-2000-engineers-1000-ser.html) |\n| WhatsApp | [La arquitectura de WhatsApp que Facebook compró por 19 mil millones de dólares](http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html) |\n| YouTube | [Escalabilidad de YouTube](https://www.youtube.com/watch?v=w5WVu624fY8)<br/>[Arquitectura de YouTube](http://highscalability.com/youtube-architecture) |\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 58,
    "Content": "### Company engineering blogs\n\n> Architectures for companies you are interviewing with.\n>\n> Questions you encounter might be from the same domain.\n\n* [Airbnb Engineering](http://nerds.airbnb.com/)\n* [Atlassian Developers](https://developer.atlassian.com/blog/)\n* [AWS Blog](https://aws.amazon.com/blogs/aws/)\n* [Bitly Engineering Blog](http://word.bitly.com/)\n* [Box Blogs](https://blog.box.com/blog/category/engineering)\n* [Cloudera Developer Blog](http://blog.cloudera.com/)\n* [Dropbox Tech Blog](https://tech.dropbox.com/)\n* [Engineering at Quora](https://www.quora.com/q/quoraengineering)\n* [Ebay Tech Blog](http://www.ebaytechblog.com/)\n* [Evernote Tech Blog](https://blog.evernote.com/tech/)\n* [Etsy Code as Craft](http://codeascraft.com/)\n* [Facebook Engineering](https://www.facebook.com/Engineering)\n* [Flickr Code](http://code.flickr.net/)\n* [Foursquare Engineering Blog](http://engineering.foursquare.com/)\n* [GitHub Engineering Blog](https://github.blog/category/engineering)\n* [Google Research Blog](http://googleresearch.blogspot.com/)\n* [Groupon Engineering Blog](https://engineering.groupon.com/)\n* [Heroku Engineering Blog](https://engineering.heroku.com/)\n* [Hubspot Engineering Blog](http://product.hubspot.com/blog/topic/engineering)\n* [High Scalability](http://highscalability.com/)\n* [Instagram Engineering](http://instagram-engineering.tumblr.com/)\n* [Intel Software Blog](https://software.intel.com/en-us/blogs/)\n* [Jane Street Tech Blog](https://blogs.janestreet.com/category/ocaml/)\n* [LinkedIn Engineering](http://engineering.linkedin.com/blog)\n* [Microsoft Engineering](https://engineering.microsoft.com/)\n* [Microsoft Python Engineering](https://blogs.msdn.microsoft.com/pythonengineering/)\n* [Netflix Tech Blog](http://techblog.netflix.com/)\n* [Paypal Developer Blog](https://medium.com/paypal-engineering)\n* [Pinterest Engineering Blog](https://medium.com/@Pinterest_Engineering)\n* [Reddit Blog](http://www.redditblog.com/)\n* [Salesforce Engineering Blog](https://developer.salesforce.com/blogs/engineering/)\n* [Slack Engineering Blog](https://slack.engineering/)\n* [Spotify Labs](https://labs.spotify.com/)\n* [Stripe Engineering Blog](https://stripe.com/blog/engineering)",
    "ContentSha": "K2HaPjFBuIAolMM1jFJHWyWd16kC4a7w+PNnWCMvsfw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### Blogs de ingeniería de empresas\n\n> Arquitecturas para las empresas con las que estás entrevistando.\n>\n> Las preguntas que encuentres podrían ser del mismo dominio.\n\n* [Ingeniería de Airbnb](http://nerds.airbnb.com/)\n* [Desarrolladores de Atlassian](https://developer.atlassian.com/blog/)\n* [Blog de AWS](https://aws.amazon.com/blogs/aws/)\n* [Blog de Ingeniería de Bitly](http://word.bitly.com/)\n* [Blogs de Box](https://blog.box.com/blog/category/engineering)\n* [Blog de Desarrolladores de Cloudera](http://blog.cloudera.com/)\n* [Blog Técnico de Dropbox](https://tech.dropbox.com/)\n* [Ingeniería en Quora](https://www.quora.com/q/quoraengineering)\n* [Blog Técnico de Ebay](http://www.ebaytechblog.com/)\n* [Blog Técnico de Evernote](https://blog.evernote.com/tech/)\n* [Etsy Código como Artesanía](http://codeascraft.com/)\n* [Ingeniería de Facebook](https://www.facebook.com/Engineering)\n* [Código de Flickr](http://code.flickr.net/)\n* [Blog de Ingeniería de Foursquare](http://engineering.foursquare.com/)\n* [Blog de Ingeniería de GitHub](https://github.blog/category/engineering)\n* [Blog de Investigación de Google](http://googleresearch.blogspot.com/)\n* [Blog de Ingeniería de Groupon](https://engineering.groupon.com/)\n* [Blog de Ingeniería de Heroku](https://engineering.heroku.com/)\n* [Blog de Ingeniería de Hubspot](http://product.hubspot.com/blog/topic/engineering)\n* [Alta Escalabilidad](http://highscalability.com/)\n* [Ingeniería de Instagram](http://instagram-engineering.tumblr.com/)\n* [Blog de Software de Intel](https://software.intel.com/en-us/blogs/)\n* [Blog Técnico de Jane Street](https://blogs.janestreet.com/category/ocaml/)\n* [Ingeniería de LinkedIn](http://engineering.linkedin.com/blog)\n* [Ingeniería de Microsoft](https://engineering.microsoft.com/)\n* [Ingeniería Python de Microsoft](https://blogs.msdn.microsoft.com/pythonengineering/)\n* [Blog Técnico de Netflix](http://techblog.netflix.com/)\n* [Blog para Desarrolladores de Paypal](https://medium.com/paypal-engineering)\n* [Blog de Ingeniería de Pinterest](https://medium.com/@Pinterest_Engineering)\n* [Blog de Reddit](http://www.redditblog.com/)\n* [Blog de Ingeniería de Salesforce](https://developer.salesforce.com/blogs/engineering/)\n* [Blog de Ingeniería de Slack](https://slack.engineering/)\n* [Laboratorios Spotify](https://labs.spotify.com/)\n* [Blog de Ingeniería de Stripe](https://stripe.com/blog/engineering)",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 59,
    "Content": "* [Twilio Engineering Blog](http://www.twilio.com/engineering)\n* [Twitter Engineering](https://blog.twitter.com/engineering/)\n* [Uber Engineering Blog](http://eng.uber.com/)\n* [Yahoo Engineering Blog](http://yahooeng.tumblr.com/)\n* [Yelp Engineering Blog](http://engineeringblog.yelp.com/)\n* [Zynga Engineering Blog](https://www.zynga.com/blogs/engineering)\n\n#### Source(s) and further reading\n\nLooking to add a blog?  To avoid duplicating work, consider adding your company blog to the following repo:\n\n* [kilimchoi/engineering-blogs](https://github.com/kilimchoi/engineering-blogs)\n\n## Under development\n\nInterested in adding a section or helping complete one in-progress?  [Contribute](#contributing)!\n\n* Distributed computing with MapReduce\n* Consistent hashing\n* Scatter gather\n* [Contribute](#contributing)\n\n## Credits\n\nCredits and sources are provided throughout this repo.\n\nSpecial thanks to:\n\n* [Hired in tech](http://www.hiredintech.com/system-design/the-system-design-process/)\n* [Cracking the coding interview](https://www.amazon.com/dp/0984782850/)\n* [High scalability](http://highscalability.com/)\n* [checkcheckzz/system-design-interview](https://github.com/checkcheckzz/system-design-interview)\n* [shashank88/system_design](https://github.com/shashank88/system_design)\n* [mmcgrana/services-engineering](https://github.com/mmcgrana/services-engineering)\n* [System design cheat sheet](https://gist.github.com/vasanthk/485d1c25737e8e72759f)\n* [A distributed systems reading list](http://dancres.github.io/Pages/)\n* [Cracking the system design interview](http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview)\n\n## Contact info\n",
    "ContentSha": "Ybn7ZSN9UGUEPKyqpiStfZWdM+FBaEvnQtoViA95ahg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "* [Blog de Ingeniería de Twilio](http://www.twilio.com/engineering)\n* [Ingeniería de Twitter](https://blog.twitter.com/engineering/)\n* [Blog de Ingeniería de Uber](http://eng.uber.com/)\n* [Blog de Ingeniería de Yahoo](http://yahooeng.tumblr.com/)\n* [Blog de Ingeniería de Yelp](http://engineeringblog.yelp.com/)\n* [Blog de Ingeniería de Zynga](https://www.zynga.com/blogs/engineering)\n\n#### Fuente(s) y lecturas adicionales\n\n¿Quieres agregar un blog? Para evitar trabajo duplicado, considera añadir el blog de tu empresa al siguiente repositorio:\n\n* [kilimchoi/engineering-blogs](https://github.com/kilimchoi/engineering-blogs)\n\n## En desarrollo\n\n¿Interesado en agregar una sección o ayudar a completar una en progreso? ¡[Contribuye](#contributing)!\n\n* Computación distribuida con MapReduce\n* Hashing consistente\n* Scatter gather\n* [Contribuye](#contributing)\n\n## Créditos\n\nLos créditos y fuentes están proporcionados a lo largo de este repositorio.\n\nAgradecimientos especiales a:\n\n* [Hired in tech](http://www.hiredintech.com/system-design/the-system-design-process/)\n* [Cracking the coding interview](https://www.amazon.com/dp/0984782850/)\n* [High scalability](http://highscalability.com/)\n* [checkcheckzz/system-design-interview](https://github.com/checkcheckzz/system-design-interview)\n* [shashank88/system_design](https://github.com/shashank88/system_design)\n* [mmcgrana/services-engineering](https://github.com/mmcgrana/services-engineering)\n* [System design cheat sheet](https://gist.github.com/vasanthk/485d1c25737e8e72759f)\n* [A distributed systems reading list](http://dancres.github.io/Pages/)\n* [Cracking the system design interview](http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview)\n\n## Información de contacto\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 60,
    "Content": "Feel free to contact me to discuss any issues, questions, or comments.\n\nMy contact info can be found on my [GitHub page](https://github.com/donnemartin).\n\n## License\n\n*I am providing code and resources in this repository to you under an open source license.  Because this is my personal repository, the license you receive to my code and resources is from me and not my employer (Facebook).*\n\n    Copyright 2017 Donne Martin\n\n    Creative Commons Attribution 4.0 International License (CC BY 4.0)\n\n    http://creativecommons.org/licenses/by/4.0/\n",
    "ContentSha": "pZfW5OoDeEHMjsOQIbYzifgEtKuSRxAcRTUdmpdKaBQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "No dude en contactarme para discutir cualquier problema, pregunta o comentario.\n\nMi información de contacto se puede encontrar en mi [página de GitHub](https://github.com/donnemartin).\n\n## Licencia\n\n*Estoy proporcionando el código y los recursos en este repositorio bajo una licencia de código abierto. Debido a que este es mi repositorio personal, la licencia que recibe para mi código y recursos es de mi parte y no de mi empleador (Facebook).*\n\n    Derechos de autor 2017 Donne Martin\n\n    Licencia Internacional Creative Commons Atribución 4.0 (CC BY 4.0)\n\n    http://creativecommons.org/licenses/by/4.0/\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  }
]