{
  "id": 2,
  "origin": "\n* **Automatic Dependency Tracking** - A computed Signal automatically discovers any other Signals that it is dependent on, whether those Signals be simple values or other computations.\n* **Lazy Evaluation** - Computations are not eagerly evaluated when they are declared, nor are they immediately evaluated when their dependencies change. They are only evaluated when their value is explicitly requested.\n* **Memoization** - Computed Signals cache their last value so that computations that don't have changes in their dependencies do not need to be re-evaluated, no matter how many times they are accessed.\n\n## Motivation for standardizing Signals\n\n#### Interoperability\n\nEach Signal implementation has its own auto-tracking mechanism, to keep track of the sources encountered when evaluating a computed Signal. This makes it hard to share models, components, and libraries between different frameworks--they tend to come with a false coupling to their view engine (given that Signals are usually implemented as part of JS frameworks).\n\nA goal of this proposal is to fully decouple the reactive model from the rendering view, enabling developers to migrate to new rendering technologies without rewriting their non-UI code, or develop shared reactive models in JS to be deployed in different contexts. Unfortunately, due to versioning and duplication, it has turned out to be impractical to reach a strong level of sharing via JS-level libraries--built-ins offer a stronger sharing guarantee.\n\n#### Performance/Memory usage\n\nIt is always a small potential performance boost to ship less code due to commonly used libraries being built-in, but implementations of Signals are generally pretty small, so we don't expect this effect to be very large.\n\nWe suspect that native C++ implementations of Signal-related data structures and algorithms can be slightly more efficient than what is achievable in JS, by a constant factor. However, no algorithmic changes are anticipated vs. what would be present in a polyfill; engines are not expected to be magic here, and the reactivity algorithms themselves will be well-defined and unambiguous.\n\nThe champion group expects to develop various implementations of Signals, and use these to investigate these performance possibilities.\n\n#### DevTools\n\nWith existing JS-language Signal libraries, it can be difficult to trace things like:\n* The callstack across a chain of computed Signals, showing the causal chain for an error\n* The reference graph among Signals, when one depends on another -- important when debugging memory usage\n\nBuilt-in Signals enable JS runtimes and DevTools to potentially have improved support for inspecting Signals, particularly for debugging or performance analysis, whether this is built into browsers or through a shared extension. Existing tools such as the element inspector, performance snapshot, and memory profilers could be updated to specifically highlight Signals in their presentation of information.\n\n#### Secondary benefits\n\n##### Benefits of a standard library\n\nIn general, JavaScript has had a fairly minimal standard library, but a trend in TC39 has been to make JS more of a \"batteries-included\" language, with a high-quality, built-in set of functionality available. For example, Temporal is replacing moment.js, and a number of small features, e.g., `Array.prototype.flat` and `Object.groupBy` are replacing many lodash use cases. Benefits include smaller bundle sizes, improved stability and quality, less to learn when joining a new project, and a generally common vocabulary across JS developers.\n\n##### HTML/DOM Integration (a future possibility)\n\nCurrent work in W3C and by browser implementors is seeking to bring native templating to HTML ([DOM Parts][wicg-pr-1023] and [Template Instantiation][wicg-propsal-template-instantiation]). Additionally, the W3C Web Components CG is exploring the possibility of extending Web Components to offer a fully declarative HTML API. To accomplish both of these goals, eventually a reactive primitive will be needed by HTML. Additionally, many ergonomic improvements to the DOM through integration of Signals can be imagined and have been asked for by the community.\n\n[wicg-pr-1023]: https://github.com/WICG/webcomponents/pull/1023\n[wicg-propsal-template-instantiation]: https://github.com/WICG/webcomponents/blob/gh-pages/proposals/Template-Instantiation.md\n\n> Note, this integration would be a separate effort to come later, not part of this proposal itself.\n\n##### Ecosystem information exchange (*not* a reason to ship)\n\nStandardization efforts can sometimes be helpful just at the \"community\" level, even without changes in browsers. The Signals effort is bringing together many different framework authors for a deep discussion about the nature of reactivity, algorithms and interoperability. This has already been useful, and does not justify inclusion in JS engines and browsers; Signals should only be added to the JavaScript standard if there are significant benefits *beyond* the ecosystem information exchange enabled.\n\n## Design goals for Signals\n\nIt turns out that existing Signal libraries are not all that different from each other, at their core. This proposal aims to build on their success by implementing the important qualities of many of those libraries.\n\n### Core features\n\n* A Signal type which represents state, i.e. writable Signal. This is a value that others can read.\n* A computed/memo/derived Signal type, which depends on others and is lazily calculated and cached.\n    * Computation is lazy, meaning computed Signals aren't calculated again by default when one of their dependencies changes, but rather only run if someone actually reads them.\n    * Computation is \"[glitch](https://en.wikipedia.org/wiki/Reactive_programming#Glitches)-free\", meaning no unnecessary calculations are ever performed. This implies that, when an application reads a computed Signal, there is a topological sorting of the potentially dirty parts of the graph to run, to eliminate any duplicates.\n    * Computation is cached, meaning that if, after the last time a dependency changes, no dependencies have changed, then the computed Signal is *not* recalculated when accessed.\n    * Custom comparisons are possible for computed Signals as well as state Signals, to note when further computed Signals which depend on them should be updated.\n* Reactions to the condition where a computed Signal has one of its dependencies (or nested dependencies) become \"dirty\" and change, meaning that the Signal's value might be outdated.\n    * This reaction is meant to schedule more significant work to be performed later.\n    * Effects are implemented in terms of these reactions, plus framework-level scheduling.\n    * Computed signals need the ability to react to whether they are registered as a (nested) dependency of one of these reactions.\n* Enable JS frameworks to do their own scheduling. No Promise-style built-in forced-on scheduling.\n    * Synchronous reactions are needed to enable scheduling later work based on framework logic.\n    * Writes are synchronous and immediately take effect (a framework which batches writes can do that on top).\n    * It is possible to separate checking whether an effect may be \"dirty\" from actually running the effect (enabling a two-stage effect scheduler).\n* Ability to read Signals *without* triggering dependencies to be recorded (`untrack`)\n* Enable composition of different codebases which use Signals/reactivity, e.g.,\n    * Using multiple frameworks together as far as tracking/reactivity itself goes (modulo omissions, see below)\n    * Framework-independent reactive data structures (e.g., recursively reactive store proxy, reactive Map and Set and Array, etc.)\n\n### Soundness\n\n* Discourage/prohibit naive misuse of synchronous reactions.\n    * Soundness risk: it may expose \"[glitches](https://en.wikipedia.org/wiki/Reactive_programming#Glitches)\" if improperly used: If rendering is done immediately when a Signal is set, it may expose incomplete application state to the end user. Therefore, this feature should only be used to intelligently schedule work for later, once application logic is finished.\n    * Solution: Disallow reading and writing any Signal from within a synchronous reaction callback\n* Discourage `untrack` and mark its unsound nature\n    * Soundness risk: allows the creation of computed Signals whose value depends on other Signals, but which aren't updated when those Signals change. It should be used when the untracked accesses will not change the result of the computation.\n    * Solution: The API is marked \"unsafe\" in the name.\n* Note: This proposal does allow signals to be both read and written from computed and effect signals, without restricting writes that come after reads, despite the soundness risk. This decision was taken to preserve flexibility and compatibility in integration with frameworks.\n\n### Surface API\n\n* Must be a solid base for multiple frameworks to implement their Signals/reactivity mechanisms.\n    * Should be a good base for recursive store proxies, decorator-based class field reactivity, and both `.value` and `[state, setState]`-style APIs.\n    * The semantics are able to express the valid patterns enabled by different frameworks. For example, it should be possible for these Signals to be the basis of either immediately-reflected writes or writes which are batched and applied later.\n* It would be nice if this API is usable directly by JavaScript developers.\n    * If a feature matches with an ecosystem concept, using common vocabulary is good.\n        * However, it is important to not literally shadow the exact same names!\n    * Tension between \"usability by JS devs\" and \"providing all the hooks to frameworks\"\n        * Idea: Provide all the hooks, but include errors when misused if possible.\n        * Idea: Put subtle APIs in a `subtle` namespace, similar to [`crypto.subtle`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle), to mark the line between APIs which are necessary for more advanced usage like implementing a framework or building dev tools versus more everyday application development usage like instantiating signals for use with a framework.\n* Be implementable and usable with good performance -- the surface API doesn't cause too much overhead\n    * Enable subclassing, so that frameworks can add their own methods and fields, including private fields. This is important to avoid the need for additional allocations at the framework level. See \"Memory management\" below.\n\n### Memory management\n\n* If possible: A computed Signal should be garbage-collectable if nothing live is referencing it for possible future reads, even if it's linked into a broader graph which stays alive (e.g., by reading a state which remains live).",
  "translate": "* **स्वचालित डिपेंडेंसी ट्रैकिंग** - एक गणना की गई सिग्नल अपने आप यह पता लगा लेती है कि वह किन अन्य सिग्नल्स पर निर्भर है, चाहे वे सिग्नल्स साधारण मान हों या अन्य गणनाएँ।\n* **आलसी मूल्यांकन (Lazy Evaluation)** - गणनाएँ घोषित किए जाने पर तुरंत मूल्यांकित नहीं होतीं, और न ही उनकी डिपेंडेंसी बदलने पर तुरंत मूल्यांकित होती हैं। वे केवल तब मूल्यांकित होती हैं जब उनका मान स्पष्ट रूप से अनुरोधित किया जाता है।\n* **मेमोइज़ेशन** - गणना की गई सिग्नल्स अपने अंतिम मान को कैश करती हैं ताकि जिन गणनाओं की डिपेंडेंसी में कोई बदलाव नहीं हुआ है, उन्हें दोबारा मूल्यांकित करने की आवश्यकता न हो, चाहे उन्हें कितनी भी बार एक्सेस किया जाए।\n\n## सिग्नल्स को मानकीकृत करने के लिए प्रेरणा\n\n#### इंटरऑपरेबिलिटी\n\nप्रत्येक सिग्नल इम्प्लीमेंटेशन का अपना ऑटो-ट्रैकिंग मैकेनिज्म होता है, जो यह ट्रैक करता है कि किसी गणना की गई सिग्नल का मूल्यांकन करते समय किन स्रोतों का सामना हुआ। इससे विभिन्न फ्रेमवर्क्स के बीच मॉडल, कंपोनेंट्स और लाइब्रेरीज़ साझा करना कठिन हो जाता है—ये अक्सर अपने व्यू इंजन के साथ झूठी कड़ी के साथ आते हैं (क्योंकि सिग्नल्स आमतौर पर JS फ्रेमवर्क्स का हिस्सा होते हैं)।\n\nइस प्रस्ताव का एक उद्देश्य प्रतिक्रियाशील मॉडल को रेंडरिंग व्यू से पूरी तरह अलग करना है, जिससे डेवलपर्स बिना अपने गैर-UI कोड को फिर से लिखे, नई रेंडरिंग तकनीकों में माइग्रेट कर सकें, या साझा प्रतिक्रियाशील मॉडल JS में विकसित कर सकें जिन्हें विभिन्न संदर्भों में डिप्लॉय किया जा सके। दुर्भाग्यवश, संस्करण नियंत्रण और डुप्लीकेशन के कारण, JS-स्तरीय लाइब्रेरीज़ के माध्यम से मज़बूत स्तर की साझेदारी प्राप्त करना अव्यावहारिक साबित हुआ है—बिल्ट-इन सुविधाएँ अधिक मज़बूत साझेदारी गारंटी देती हैं।\n\n#### प्रदर्शन/मेमोरी उपयोग\n\nकम कोड भेजना हमेशा एक छोटा संभावित प्रदर्शन लाभ होता है, क्योंकि आमतौर पर उपयोग की जाने वाली लाइब्रेरीज़ बिल्ट-इन होती हैं, लेकिन सिग्नल्स की इम्प्लीमेंटेशन आम तौर पर बहुत छोटी होती हैं, इसलिए हमें यह प्रभाव बहुत बड़ा होने की उम्मीद नहीं है।\n\nहमें संदेह है कि सिग्नल-संबंधित डेटा स्ट्रक्चर और एल्गोरिदम की नेटिव C++ इम्प्लीमेंटेशन JS में उपलब्ध स्तर से थोड़ा अधिक कुशल हो सकती है, एक नियतांक गुणक (constant factor) द्वारा। हालांकि, किसी भी एल्गोरिदमिक परिवर्तन की अपेक्षा नहीं है बनाम वह जो एक पॉलीफिल में मौजूद होगा; इंजन से यहाँ जादू की अपेक्षा नहीं की जाती, और स्वयं प्रतिक्रियाशील एल्गोरिदम अच्छी तरह परिभाषित और अस्पष्ट रहेंगे।\n\nचैम्पियन समूह विभिन्न सिग्नल्स की इम्प्लीमेंटेशन विकसित करने की उम्मीद करता है, और इनका उपयोग करके इन प्रदर्शन संभावनाओं की जांच करेगा।\n\n#### DevTools\n\nमौजूदा JS-भाषा सिग्नल लाइब्रेरीज़ के साथ, निम्नलिखित को ट्रेस करना कठिन हो सकता है:\n* गणना की गई सिग्नल्स की श्रृंखला में कॉलस्टैक, जो किसी त्रुटि के लिए कारण श्रृंखला दिखाता है\n* सिग्नल्स के बीच संदर्भ ग्राफ़, जब एक दूसरे पर निर्भर करता है -- मेमोरी उपयोग को डिबग करते समय महत्वपूर्ण\n\nबिल्ट-इन सिग्नल्स JS रनटाइम्स और DevTools को सिग्नल्स का निरीक्षण करने के लिए बेहतर समर्थन प्रदान कर सकते हैं, विशेष रूप से डिबगिंग या प्रदर्शन विश्लेषण के लिए, चाहे यह ब्राउज़रों में बिल्ट-इन हो या किसी साझा एक्सटेंशन के माध्यम से। मौजूदा टूल्स जैसे एलिमेंट इंस्पेक्टर, प्रदर्शन स्नैपशॉट, और मेमोरी प्रोफाइलर्स को उनकी जानकारी की प्रस्तुति में विशेष रूप से सिग्नल्स को उजागर करने के लिए अपडेट किया जा सकता है।\n\n#### द्वितीयक लाभ\n\n##### एक मानक लाइब्रेरी के लाभ\n\nसामान्यतः, जावास्क्रिप्ट की मानक लाइब्रेरी काफी न्यूनतम रही है, लेकिन TC39 में एक प्रवृत्ति रही है कि JS को अधिक \"बैटरियों के साथ\" भाषा बनाया जाए, जिसमें उच्च गुणवत्ता, बिल्ट-इन कार्यक्षमता उपलब्ध हो। उदाहरण के लिए, Temporal moment.js की जगह ले रहा है, और कई छोटी विशेषताएँ, जैसे कि `Array.prototype.flat` और `Object.groupBy` कई lodash उपयोग मामलों की जगह ले रही हैं। लाभों में छोटे बंडल आकार, बेहतर स्थिरता और गुणवत्ता, नए प्रोजेक्ट में शामिल होने पर सीखने के लिए कम चीजें, और JS डेवलपर्स के बीच आम शब्दावली शामिल हैं।\n\n##### HTML/DOM एकीकरण (भविष्य की संभावना)\n\nW3C और ब्राउज़र इम्प्लीमेंटर्स वर्तमान में HTML में नेटिव टेम्पलेटिंग लाने का प्रयास कर रहे हैं ([DOM Parts][wicg-pr-1023] और [Template Instantiation][wicg-propsal-template-instantiation])। इसके अतिरिक्त, W3C Web Components CG Web Components को पूरी तरह डिक्लेरेटिव HTML API प्रदान करने की संभावना का अन्वेषण कर रहा है। इन दोनों लक्ष्यों को प्राप्त करने के लिए, अंततः HTML को एक प्रतिक्रियाशील प्रिमिटिव की आवश्यकता होगी। इसके अलावा, सिग्नल्स के एकीकरण के माध्यम से DOM में कई उपयोगकर्ता-अनुकूल सुधारों की कल्पना की जा सकती है और समुदाय द्वारा इसकी मांग की गई है।\n\n[wicg-pr-1023]: https://github.com/WICG/webcomponents/pull/1023\n[wicg-propsal-template-instantiation]: https://github.com/WICG/webcomponents/blob/gh-pages/proposals/Template-Instantiation.md\n\n> ध्यान दें, यह एकीकरण बाद में आने वाला एक अलग प्रयास होगा, यह स्वयं इस प्रस्ताव का हिस्सा नहीं है।\n\n##### इकोसिस्टम सूचना विनिमय (*शिपिंग का कारण नहीं*)\n\nमानकीकरण के प्रयास कभी-कभी केवल \"समुदाय\" स्तर पर सहायक हो सकते हैं, भले ही ब्राउज़रों में कोई बदलाव न हो। सिग्नल्स का प्रयास प्रतिक्रियाशीलता, एल्गोरिदम और इंटरऑपरेबिलिटी की प्रकृति पर गहन चर्चा के लिए कई अलग-अलग फ्रेमवर्क लेखकों को एक साथ ला रहा है। यह पहले से ही उपयोगी रहा है, और यह JS इंजन और ब्राउज़रों में शामिल किए जाने का औचित्य नहीं है; सिग्नल्स को केवल तभी जावास्क्रिप्ट मानक में जोड़ा जाना चाहिए जब इकोसिस्टम सूचना विनिमय से *अधिक* महत्वपूर्ण लाभ हों।\n\n## सिग्नल्स के लिए डिज़ाइन लक्ष्य\n\nयह पता चला है कि मौजूदा सिग्नल लाइब्रेरीज़ मूल रूप से एक-दूसरे से ज्यादा भिन्न नहीं हैं। यह प्रस्ताव उनकी सफलता पर आधारित है और उन लाइब्रेरीज़ की महत्वपूर्ण विशेषताओं को लागू करने का लक्ष्य रखता है।\n\n### मुख्य विशेषताएँ\n\n* एक सिग्नल प्रकार जो स्थिति का प्रतिनिधित्व करता है, यानी लिखने योग्य सिग्नल। यह एक मान है जिसे अन्य पढ़ सकते हैं।\n* एक गणना/मेमो/व्युत्पन्न सिग्नल प्रकार, जो दूसरों पर निर्भर करता है और आलसी तरीके से गणना और कैश किया जाता है।\n    * गणना आलसी है, अर्थात् जब तक कोई उसकी डिपेंडेंसी बदलने पर वास्तव में उसे पढ़ता नहीं है, तब तक गणना की गई सिग्नल्स दोबारा गणना नहीं की जातीं।\n    * गणना \"[ग्लिच](https://en.wikipedia.org/wiki/Reactive_programming#Glitches)-मुक्त\" है, यानी कभी भी अनावश्यक गणनाएँ नहीं की जातीं। इसका अर्थ है कि जब कोई एप्लिकेशन एक गणना की गई सिग्नल को पढ़ता है, तो ग्राफ के संभावित गंदे हिस्सों को निष्पादित करने के लिए शीर्षस्थ संरचना (topological sorting) होती है, जिससे कोई डुप्लिकेट नहीं रहता।\n    * गणना कैश की जाती है, यानी यदि अंतिम बार जब डिपेंडेंसी बदली थी, उसके बाद से कोई डिपेंडेंसी नहीं बदली है, तो गणना की गई सिग्नल को एक्सेस करते समय पुनः गणना नहीं की जाती।\n    * गणना की गई सिग्नल्स के साथ-साथ स्थिति सिग्नल्स के लिए कस्टम तुलना संभव है, ताकि यह पता चल सके कि उन पर निर्भर आगे की गणना की गई सिग्नल्स को कब अपडेट करना चाहिए।\n* उस स्थिति पर प्रतिक्रिया जब किसी गणना की गई सिग्नल की कोई डिपेंडेंसी (या नेस्टेड डिपेंडेंसी) \"गंदी\" (dirty) हो जाए और बदल जाए, जिसका अर्थ है कि सिग्नल का मान अब पुराना हो सकता है।\n    * यह प्रतिक्रिया अधिक महत्वपूर्ण कार्य को बाद में शेड्यूल करने के लिए है।\n    * इफेक्ट्स को इन प्रतिक्रियाओं और फ्रेमवर्क-स्तरीय शेड्यूलिंग के संदर्भ में लागू किया जाता है।\n    * गणना की गई सिग्नल्स को यह पता लगाने की क्षमता चाहिए कि वे इन प्रतिक्रियाओं में से किसी एक की (नेस्टेड) डिपेंडेंसी के रूप में पंजीकृत हैं या नहीं।\n* JS फ्रेमवर्क्स को अपना शेड्यूलिंग स्वयं करने में सक्षम बनाना। कोई Promise-शैली की बिल्ट-इन बाध्यकारी शेड्यूलिंग नहीं।\n    * सिंक्रोनस प्रतिक्रियाएँ आवश्यक हैं ताकि बाद के कार्य को फ्रेमवर्क लॉजिक के आधार पर शेड्यूल किया जा सके।\n    * लिखना सिंक्रोनस है और तुरंत प्रभावी होता है (कोई फ्रेमवर्क जो लिखने को बैच करता है, वह उसे ऊपर से लागू कर सकता है)।\n    * यह संभव है कि यह जाँचा जा सके कि कोई इफेक्ट \"गंदा\" हो सकता है या नहीं, बिना इफेक्ट को वास्तव में चलाए (दो-चरणीय इफेक्ट शेड्यूलर को सक्षम करना)।\n* सिग्नल्स को पढ़ने की क्षमता *बिना* डिपेंडेंसी रिकॉर्ड किए (`untrack`)\n* विभिन्न कोडबेस का संयोजन सक्षम करना जो सिग्नल्स/प्रतिक्रियाशीलता का उपयोग करते हैं, जैसे,\n    * ट्रैकिंग/प्रतिक्रियाशीलता के संदर्भ में कई फ्रेमवर्क्स को एक साथ उपयोग करना (कुछ अपवादों के साथ, नीचे देखें)\n    * फ्रेमवर्क-स्वतंत्र प्रतिक्रियाशील डेटा स्ट्रक्चर (जैसे, आवर्ती प्रतिक्रियाशील स्टोर प्रॉक्सी, प्रतिक्रियाशील Map और Set और Array, आदि)\n\n### साउंडनेस\n\n* सिंक्रोनस प्रतिक्रियाओं के भोलेपन से दुरुपयोग को हतोत्साहित/प्रतिबंधित करना।\n    * साउंडनेस जोखिम: यदि इसे अनुचित तरीके से उपयोग किया गया तो यह \"[ग्लिच](https://en.wikipedia.org/wiki/Reactive_programming#Glitches)\" को उजागर कर सकता है: यदि रेंडरिंग सिग्नल सेट करते समय तुरंत की जाती है, तो यह अंतिम उपयोगकर्ता को अपूर्ण एप्लिकेशन स्थिति दिखा सकता है। इसलिए, इस सुविधा का उपयोग केवल काम को बुद्धिमानी से बाद में शेड्यूल करने के लिए किया जाना चाहिए, जब एप्लिकेशन लॉजिक समाप्त हो जाए।\n    * समाधान: सिंक्रोनस प्रतिक्रिया कॉलबैक के भीतर किसी भी सिग्नल को पढ़ने और लिखने की अनुमति नहीं देना\n* `untrack` को हतोत्साहित करना और इसकी अस्वस्थ प्रकृति को चिह्नित करना\n    * साउंडनेस जोखिम: इससे ऐसे गणना की गई सिग्नल्स बनाए जा सकते हैं जिनका मान अन्य सिग्नल्स पर निर्भर करता है, लेकिन जब वे सिग्नल्स बदलते हैं तो ये अपडेट नहीं होते। इसका उपयोग तभी किया जाना चाहिए जब अनट्रैक्ड एक्सेस गणना के परिणाम को नहीं बदलेंगे।\n    * समाधान: API को नाम में \"unsafe\" के रूप में चिह्नित किया गया है।\n* नोट: यह प्रस्ताव सिग्नल्स को गणना और इफेक्ट सिग्नल्स से पढ़ने और लिखने दोनों की अनुमति देता है, बिना पढ़ने के बाद लिखने को प्रतिबंधित किए, भले ही साउंडनेस जोखिम हो। यह निर्णय लचीलेपन और फ्रेमवर्क्स के साथ संगतता बनाए रखने के लिए लिया गया है।\n\n### सतही API\n\n* कई फ्रेमवर्क्स के लिए अपने सिग्नल्स/प्रतिक्रियाशीलता मैकेनिज्म को लागू करने के लिए एक ठोस आधार होना चाहिए।\n    * यह आवर्ती स्टोर प्रॉक्सी, डेकोरेटर-आधारित क्लास फील्ड प्रतिक्रियाशीलता, और `.value` एवं `[state, setState]`-शैली APIs दोनों के लिए अच्छा आधार होना चाहिए।\n    * इनकी सेमांटिक्स विभिन्न फ्रेमवर्क्स द्वारा सक्षम मान्य पैटर्न को व्यक्त करने में सक्षम हैं। उदाहरण के लिए, यह संभव होना चाहिए कि ये सिग्नल्स या तो तुरंत परिलक्षित लिखने या बाद में बैच करके लागू किए गए लिखने का आधार बन सकें।\n* अच्छा होगा यदि यह API सीधे जावास्क्रिप्ट डेवलपर्स द्वारा उपयोग की जा सके।\n    * यदि कोई सुविधा किसी इकोसिस्टम अवधारणा से मेल खाती है, तो सामान्य शब्दावली का उपयोग करना अच्छा है।\n        * हालाँकि, बिल्कुल वही नाम न देना महत्वपूर्ण है!\n    * \"JS डेवलपर्स द्वारा उपयोगिता\" और \"फ्रेमवर्क्स के लिए सभी हुक्स प्रदान करना\" के बीच तनाव\n        * विचार: सभी हुक्स प्रदान करें, लेकिन यदि संभव हो तो गलत उपयोग पर त्रुटियाँ शामिल करें।\n        * विचार: सूक्ष्म APIs को एक `subtle` नामस्थान में रखें, [`crypto.subtle`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle) के समान, ताकि उन APIs के बीच रेखा खींची जा सके जो अधिक उन्नत उपयोग जैसे कि फ्रेमवर्क या Dev Tools बनाने के लिए आवश्यक हैं बनाम वे जो रोजमर्रा के एप्लिकेशन विकास के लिए हैं जैसे कि किसी फ्रेमवर्क के साथ सिग्नल्स इंस्टैंसिएट करना।\n* अच्छे प्रदर्शन के साथ लागू और उपयोग करने योग्य हो -- सतही API बहुत अधिक ओवरहेड नहीं पैदा करता है\n    * सबक्लासिंग को सक्षम करें, ताकि फ्रेमवर्क्स अपने स्वयं के तरीके और फ़ील्ड, निजी फ़ील्ड सहित, जोड़ सकें। यह फ्रेमवर्क स्तर पर अतिरिक्त आवंटनों की आवश्यकता से बचने के लिए महत्वपूर्ण है। \"मेमोरी प्रबंधन\" नीचे देखें।\n\n### मेमोरी प्रबंधन\n\n* यदि संभव हो: कोई गणना की गई सिग्नल गारबेज-कलेक्ट होनी चाहिए यदि भविष्य में उसे पढ़ने के लिए कुछ भी जीवित नहीं है, भले ही वह एक व्यापक ग्राफ में जुड़ी हो जो जीवित रहता है (जैसे, एक ऐसी स्थिति को पढ़कर जो जीवित रहती है)।",
  "status": "ok"
}