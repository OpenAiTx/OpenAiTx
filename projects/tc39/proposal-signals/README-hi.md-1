{
  "id": 1,
  "origin": "# ЁЯЪж JavaScript Signals standard proposalЁЯЪж\n<img align=right src=\"Signals.svg\" alt=\"Signals logo\" width=100>\n\nStage 1 ([explanation](https://tc39.es/process-document/))\n\nTC39 proposal champions: Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nOriginal authors: Rob Eisenberg and Daniel Ehrenberg\n\nThis document describes an early common direction for signals in JavaScript, similar to the Promises/A+ effort which preceded the Promises standardized by TC39 in ES2015. Try it for yourself, using [a polyfill](https://github.com/proposal-signals/signal-polyfill).\n\nSimilarly to Promises/A+, this effort focuses on aligning the JavaScript ecosystem. If this alignment is successful, then a standard could emerge, based on that experience. Several framework authors are collaborating here on a common model which could back their reactivity core. The current draft is based on design input from the authors/maintainers of [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a), and moreтАж\n\nDifferently from Promises/A+, we're not trying to solve for a common developer-facing surface API, but rather the precise core semantics of the underlying signal graph. This proposal does include a fully concrete API, but the API is not targeted to most application developers. Instead, the signal API here is a better fit for frameworks to build on top of, providing interoperability through common signal graph and auto-tracking mechanism.\n\nThe plan for this proposal is to do significant early prototyping, including integration into several frameworks, before advancing beyond Stage 1. We are only interested in standardizing Signals if they are suitable for use in practice in multiple frameworks, and provide real benefits over framework-provided signals. We hope that significant early prototyping will give us this information. See \"Status and development plan\" below for more details.\n\n## Background: Why Signals?\n\nTo develop a complicated user interface (UI), JavaScript application developers need to store, compute, invalidate, sync, and push state to the application's view layer in an efficient way. UIs commonly involve more than just managing simple values, but often involve rendering computed state which is dependent on a complex tree of other values or state that is also computed itself. The goal of Signals is to provide infrastructure for managing such application state so developers can focus on business logic rather than these repetitive details.\n\nSignal-like constructs have independently been found to be useful in non-UI contexts as well, particularly in build systems to avoid unnecessary rebuilds.\n\nSignals are used in reactive programming to remove the need to manage updating in applications.\n\n> A declarative programming model for updating based on changes to state.\n\nfrom _[What is Reactivity?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### Example - A VanillaJS Counter\n\nGiven a variable, `counter`, you want to render into the DOM whether the counter is even or odd. Whenever the `counter` changes, you want to update the DOM with the latest parity. In Vanilla JS, you might have something like this:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simulate external updates to counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTE]  \n> Globals are used here for demonstration purposes only. Proper state management has many solutions, and the examples in this proposal are meant to be as minimal as possible. This proposal does not encourage global variables.\n\n\nThis has a number of problems...\n\n* The `counter` setup is noisy and boilerplate-heavy.\n* The `counter` state is tightly coupled to the rendering system.\n* If the `counter` changes but `parity` does not (e.g. counter goes from 2 to 4), then we do unnecessary computation of the parity and unnecessary rendering.\n* What if another part of our UI just wants to render when the `counter` updates?\n* What if another part of our UI is dependent on `isEven` or `parity` alone?\n\nEven in this relatively simple scenario, a number of issues arise quickly. We could try to work around these by introducing pub/sub for the `counter`. This would allow additional consumers of the `counter` could subscribe to add their own reactions to state changes.\n\nHowever, we're still stuck with the following problems:\n\n* The render function, which is only dependent on `parity` must instead \"know\" that it actually needs to subscribe to `counter`.\n* It isn't possible to update UI based on either `isEven` or `parity` alone, without directly interacting with `counter`.\n* We've increased our boilerplate. Any time you are using something, it's not just a matter of calling a function or reading a variable, but instead subscribing and doing updates there. Managing unsubscription is also especially complicated.\n\nNow, we could solve a couple issues by adding pub/sub not just to `counter` but also to `isEven` and `parity`. We would then have to subscribe `isEven` to `counter`,  `parity` to `isEven`, and `render` to `parity`. Unfortunately, not only has our boilerplate code exploded, but we're stuck with a ton of bookkeeping of subscriptions, and a potential memory leak disaster if we don't properly clean everything up in the right way. So, we've solved some issues but created a whole new category of problems and a lot of code. To make matters worse, we have to go through this entire process for every piece of state in our system.\n\n### Introducing Signals\n\nData binding abstractions in UIs for the model and view have long been core to UI frameworks across multiple programming languages, despite the absence of any such mechanism built into JS or the web platform. Within JS frameworks and libraries, there has been a large amount of experimentation across different ways to represent this binding, and experience has shown the power of one-way data flow in conjunction with a first-class data type representing a cell of state or computation derived from other data, now often called \"Signals\".\nThis first-class reactive value approach seems to have made its first popular appearance in open-source JavaScript web frameworks with [Knockout](https://knockoutjs.com/) [in 2010](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/). In the years since, many variations and implementations have been created. Within the last 3-4 years, the Signal primitive and related approaches have gained further traction, with nearly every modern JavaScript library or framework having something similar, under one name or another.\n\nTo understand Signals, let's take a look at the above example, re-imagined with a Signal API further articulated below.\n\n#### Example - A Signals Counter\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// A library or framework defines effects based on other Signal primitives\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simulate external updates to counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nThere are a few things we can see right away:\n* We've eliminated the noisy boilerplate around the `counter` variable from our previous example.\n* There is a unified API to handle values, computations, and side effects.\n* There's no circular reference problem or upside down dependencies between `counter` and `render`.\n* There are no manual subscriptions, nor is there any need for bookkeeping.\n* There is a means of controlling side-effect timing/scheduling.\n\nSignals give us much more than what can be seen on the surface of the API though:",
  "translate": "# ЁЯЪж JavaScript Signals рдорд╛рдирдХ рдкреНрд░рд╕реНрддрд╛рд╡ ЁЯЪж\n<img align=right src=\"https://raw.githubusercontent.com/tc39/proposal-signals/main/Signals.svg\" alt=\"Signals logo\" width=100>\n\nрдЪрд░рдг 1 ([рд╡реНрдпрд╛рдЦреНрдпрд╛](https://tc39.es/process-document/))\n\nTC39 рдкреНрд░рд╕реНрддрд╛рд╡ рдЪреИрдореНрдкрд┐рдпрдиреНрд╕: рдбреИрдирд┐рдпрд▓ рдПрд░реЗрдирдмрд░реНрдЧ, рдпрд╣реВрджрд╛ рдХрд╛рдЯреНрдЬрд╝, рдЬрддрд┐рди рд░рдордирд╛рдерди, рд╢реЗрдп рд▓реБрдИрд╕, рдХреНрд░рд┐рд╕реНрдЯрди рд╣реНрдпреВрд▓ рдЧреИрд░реЗрдЯ, рдбреЛрдорд┐рдирд┐рдХ рдЧрдирд╛рд╡реЗ, рдкреНрд░реЗрд╕реНрдЯрди рд╕реЗрдЧреЛ, рдорд┐рд▓реЛ рдПрдо, рд░реЙрдм рдЖрдЗрдЬрд╝рдирдмрд░реНрдЧ\n\nрдореВрд▓ рд▓реЗрдЦрдХ: рд░реЙрдм рдЖрдЗрдЬрд╝рдирдмрд░реНрдЧ рдФрд░ рдбреИрдирд┐рдпрд▓ рдПрд░реЗрдирдмрд░реНрдЧ\n\nрдпрд╣ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдЬрд╛рд╡рд╛рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдореЗрдВ рд╕рд┐рдЧреНрдирд▓реНрд╕ рдХреЗ рд▓рд┐рдП рдПрдХ рд╢реБрд░реБрдЖрддреА рд╕рд╛рдЭрд╛ рджрд┐рд╢рд╛ рдХрд╛ рд╡рд░реНрдгрди рдХрд░рддрд╛ рд╣реИ, рдЬреЛ Promises/A+ рдкреНрд░рдпрд╛рд╕ рдХреЗ рд╕рдорд╛рди рд╣реИ, рдЬрд┐рд╕рдиреЗ ES2015 рдореЗрдВ TC39 рджреНрд╡рд╛рд░рд╛ рдорд╛рдирдХреАрдХреГрдд рдкреНрд░реЙрдорд┐рд╕реЗрдЬрд╝ рд╕реЗ рдкрд╣рд▓реЗ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХрд┐рдпрд╛ рдерд╛ред рдЗрд╕реЗ рд╕реНрд╡рдпрдВ рдЖрдЬрд╝рдорд╛рдПрдБ, [рдПрдХ рдкреЙрд▓реАрдлрд┐рд▓](https://github.com/proposal-signals/signal-polyfill) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗред\n\nPromises/A+ рдХреА рддрд░рд╣, рдпрд╣ рдкреНрд░рдпрд╛рд╕ рдЬрд╛рд╡рд╛рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдЗрдХреЛрд╕рд┐рд╕реНрдЯрдо рдХреЛ рд╕рдВрд░реЗрдЦрд┐рдд рдХрд░рдиреЗ рдкрд░ рдХреЗрдВрджреНрд░рд┐рдд рд╣реИред рдпрджрд┐ рдпрд╣ рд╕рдВрд░реЗрдЦрдг рд╕рдлрд▓ рд░рд╣рддрд╛ рд╣реИ, рддреЛ рдЙрд╕ рдЕрдиреБрднрд╡ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдПрдХ рдорд╛рдирдХ рдЙрднрд░ рд╕рдХрддрд╛ рд╣реИред рдХрдИ рдлреНрд░реЗрдорд╡рд░реНрдХ рд▓реЗрдЦрдХ рдпрд╣рд╛рдВ рдПрдХ рд╕рд╛рдЭрд╛ рдореЙрдбрд▓ рдкрд░ рд╕рд╣рдпреЛрдЧ рдХрд░ рд░рд╣реЗ рд╣реИрдВ рдЬреЛ рдЙрдирдХреЗ рд░рд┐рдПрдХреНрдЯрд┐рд╡рд┐рдЯреА рдХреЛрд░ рдХрд╛ рд╕рдорд░реНрдерди рдХрд░ рд╕рдХрддрд╛ рд╣реИред рд╡рд░реНрддрдорд╛рди рдорд╕реМрджрд╛ [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a), рдФрд░ рдЕрдиреНрдп рдХреЗ рд▓реЗрдЦрдХ/рд░рдЦрд░рдЦрд╛рд╡рдХрд░реНрддрд╛рдУрдВ рдХреЗ рдбрд┐рдЬрд╝рд╛рдЗрди рдЗрдирдкреБрдЯ рдкрд░ рдЖрдзрд╛рд░рд┐рдд рд╣реИтАж\n\nPromises/A+ рд╕реЗ рдЕрд▓рдЧ, рд╣рдо рд╕рд╛рдорд╛рдиреНрдп рдбреЗрд╡рд▓рдкрд░-рдлреЗрд╕рд┐рдВрдЧ рд╕рд░рдлреЗрд╕ API рдХреЗ рд▓рд┐рдП рд╕рдорд╛рдзрд╛рди рдЦреЛрдЬрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдирд╣реАрдВ рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рдмрд▓реНрдХрд┐ рдЕрдВрддрд░реНрдирд┐рд╣рд┐рдд рд╕рд┐рдЧреНрдирд▓ рдЧреНрд░рд╛рдл рдХреА рд╕рдЯреАрдХ рдХреЛрд░ рд╕реЗрдорд╛рдВрдЯрд┐рдХреНрд╕ рдХреЗ рд▓рд┐рдП рдХрд░ рд░рд╣реЗ рд╣реИрдВред рдЗрд╕ рдкреНрд░рд╕реНрддрд╛рд╡ рдореЗрдВ рдПрдХ рдкреВрд░реНрдгрддрдГ рдареЛрд╕ API рд╢рд╛рдорд┐рд▓ рд╣реИ, рд▓реЗрдХрд┐рди рдпрд╣ API рдЕрдзрд┐рдХрд╛рдВрд╢ рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдбреЗрд╡рд▓рдкрд░реНрд╕ рдХреЗ рд▓рд┐рдП рд▓рдХреНрд╖рд┐рдд рдирд╣реАрдВ рд╣реИред рдЗрд╕рдХреЗ рдмрдЬрд╛рдп, рдпрд╣рд╛рдВ рдкреНрд░рд╕реНрддреБрдд рд╕рд┐рдЧреНрдирд▓ API рдлреНрд░реЗрдорд╡рд░реНрдХреНрд╕ рдХреЗ рд▓рд┐рдП рдмреЗрд╣рддрд░ рдлрд┐рдЯ рд╣реИ, рддрд╛рдХрд┐ рд╡реЗ рдЗрд╕рдХреЗ рдКрдкрд░ рдирд┐рд░реНрдорд╛рдг рдХрд░ рд╕рдХреЗрдВ, рдФрд░ рд╕рд╛рдорд╛рдиреНрдп рд╕рд┐рдЧреНрдирд▓ рдЧреНрд░рд╛рдл рддрдерд╛ рдСрдЯреЛ-рдЯреНрд░реИрдХрд┐рдВрдЧ рдореЗрдХреИрдирд┐рдЬреНрдо рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдЗрдВрдЯрд░рдСрдкрд░реЗрдмрд┐рд▓рд┐рдЯреА рдкреНрд░рджрд╛рди рдХрд░ рд╕рдХреЗрдВред\n\nрдЗрд╕ рдкреНрд░рд╕реНрддрд╛рд╡ рдХреА рдпреЛрдЬрдирд╛ рд╣реИ рдХрд┐ рд╕реНрдЯреЗрдЬ 1 рд╕реЗ рдЖрдЧреЗ рдмрдврд╝рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ, рдХрдИ рдлреНрд░реЗрдорд╡рд░реНрдХреНрд╕ рдореЗрдВ рдПрдХреАрдХрд░рдг рд╕рд╣рд┐рдд, рдорд╣рддреНрд╡рдкреВрд░реНрдг рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдкреНрд░реЛрдЯреЛрдЯрд╛рдЗрдкрд┐рдВрдЧ рдХреА рдЬрд╛рдПред рд╣рдо рдХреЗрд╡рд▓ рддрднреА Signals рдХрд╛ рдорд╛рдирдХреАрдХрд░рдг рдХрд░рдиреЗ рдореЗрдВ рд░реБрдЪрд┐ рд░рдЦрддреЗ рд╣реИрдВ, рдпрджрд┐ рд╡реЗ рд╡реНрдпрд╡рд╣рд╛рд░ рдореЗрдВ рдХрдИ рдлреНрд░реЗрдорд╡рд░реНрдХреНрд╕ рдореЗрдВ рдЙрдкрдпреЛрдЧ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╣реИрдВ, рдФрд░ рдлреНрд░реЗрдорд╡рд░реНрдХ-рдкреНрд░рджрддреНрдд рд╕рд┐рдЧреНрдирд▓реНрд╕ рдХреА рддреБрд▓рдирд╛ рдореЗрдВ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд▓рд╛рдн рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВред рд╣рдореЗрдВ рдЖрд╢рд╛ рд╣реИ рдХрд┐ рдкрд░реНрдпрд╛рдкреНрдд рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдкреНрд░реЛрдЯреЛрдЯрд╛рдЗрдкрд┐рдВрдЧ рд╕реЗ рд╣рдореЗрдВ рдпрд╣ рдЬрд╛рдирдХрд╛рд░реА рдорд┐рд▓ рдЬрд╛рдПрдЧреАред рдЕрдзрд┐рдХ рд╡рд┐рд╡рд░рдг рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ \"рд╕реНрдерд┐рддрд┐ рдФрд░ рд╡рд┐рдХрд╛рд╕ рдпреЛрдЬрдирд╛\" рджреЗрдЦреЗрдВред\n\n## рдкреГрд╖реНрдарднреВрдорд┐: Signals рдХреНрдпреЛрдВ?\n\nрдПрдХ рдЬрдЯрд┐рд▓ рдпреВрдЬрд╝рд░ рдЗрдВрдЯрд░рдлреЗрд╕ (UI) рд╡рд┐рдХрд╕рд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдЬрд╛рд╡рд╛рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдбреЗрд╡рд▓рдкрд░реНрд╕ рдХреЛ рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдХреА рд╡реНрдпреВ рд▓реЗрдпрд░ рдореЗрдВ рд╕реНрдерд┐рддрд┐ рдХреЛ рдХреБрд╢рд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕реНрдЯреЛрд░, рдЧрдгрдирд╛, рдЕрдорд╛рдиреНрдп, рд╕рд┐рдВрдХ рдФрд░ рдкреБрд╢ рдХрд░рдиреЗ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрддреА рд╣реИред UI рдореЗрдВ рдЕрдХреНрд╕рд░ рдХреЗрд╡рд▓ рд╕рд░рд▓ рдорд╛рдиреЛрдВ рдХрд╛ рдкреНрд░рдмрдВрдзрди рдирд╣реАрдВ рд╣реЛрддрд╛, рдмрд▓реНрдХрд┐ рдЕрдХреНрд╕рд░ рдРрд╕реЗ рдЧрдгрд┐рддреАрдп рд╕реНрдерд┐рддрд┐ рдХрд╛ рд░реЗрдВрдбрд░рд┐рдВрдЧ рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИ, рдЬреЛ рдЕрдиреНрдп рдорд╛рдиреЛрдВ рдпрд╛ рд╕реНрдерд┐рддрд┐ рдХреЗ рдПрдХ рдЬрдЯрд┐рд▓ рд╡реГрдХреНрд╖ рдкрд░ рдирд┐рд░реНрднрд░ рдХрд░рддрд╛ рд╣реИ, рдЬреЛ рд╕реНрд╡рдпрдВ рднреА рдЧрдгрдирд╛ рдХреА рдЬрд╛рддреА рд╣реИред Signals рдХрд╛ рд▓рдХреНрд╖реНрдп рдРрд╕реА рдПрдкреНрд▓рд┐рдХреЗрд╢рди рд╕реНрдерд┐рддрд┐ рдХреЗ рдкреНрд░рдмрдВрдзрди рдХреЗ рд▓рд┐рдП рдЖрдзрд╛рд░рднреВрдд рд╕рдВрд░рдЪрдирд╛ рдкреНрд░рджрд╛рди рдХрд░рдирд╛ рд╣реИ рддрд╛рдХрд┐ рдбреЗрд╡рд▓рдкрд░реНрд╕ рдЗрди рджреЛрд╣рд░рд╛рд╡рджрд╛рд░ рд╡рд┐рд╡рд░рдгреЛрдВ рдХреЗ рдмрдЬрд╛рдп рд╡реНрдпрд╛рдкрд╛рд░рд┐рдХ рддрд░реНрдХ рдкрд░ рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рдХрд░ рд╕рдХреЗрдВред\n\nSignal-рдЬреИрд╕реА рд░рдЪрдирд╛рдПрдБ рд╕реНрд╡рддрдВрддреНрд░ рд░реВрдк рд╕реЗ рдЧреИрд░-UI рд╕рдВрджрд░реНрднреЛрдВ рдореЗрдВ рднреА рдЙрдкрдпреЛрдЧреА рдкрд╛рдИ рдЧрдИ рд╣реИрдВ, рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ рдмрд┐рд▓реНрдб рд╕рд┐рд╕реНрдЯрдореНрд╕ рдореЗрдВ рдЕрдирд╛рд╡рд╢реНрдпрдХ рдкреБрдирд░реНрдирд┐рд░реНрдорд╛рдг рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдПред\n\nрд░рд┐рдПрдХреНрдЯрд┐рд╡ рдкреНрд░реЛрдЧреНрд░рд╛рдорд┐рдВрдЧ рдореЗрдВ Signals рдХрд╛ рдЙрдкрдпреЛрдЧ рдПрдкреНрд▓рд┐рдХреЗрд╢рдиреНрд╕ рдореЗрдВ рдЕрдкрдбреЗрдЯрд┐рдВрдЧ рдХреЗ рдкреНрд░рдмрдВрдзрди рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдХреЛ рджреВрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред\n\n> рд░рд╛рдЬреНрдп рдореЗрдВ рдкрд░рд┐рд╡рд░реНрддрди рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЕрджреНрдпрддрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдШреЛрд╖рдгрд╛рддреНрдордХ рдкреНрд░реЛрдЧреНрд░рд╛рдорд┐рдВрдЧ рдореЙрдбрд▓ред\n\n_рд╕реЗ [What is Reactivity?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### рдЙрджрд╛рд╣рд░рдг - рдПрдХ VanillaJS рдХрд╛рдЙрдВрдЯрд░\n\nрдорд╛рди рд▓реАрдЬрд┐рдП рдПрдХ рд╡реЗрд░рд┐рдПрдмрд▓ `counter` рд╣реИ, рдЖрдк рдбреЛрдо рдореЗрдВ рдпрд╣ рд░реЗрдВрдбрд░ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдХрд╛рдЙрдВрдЯрд░ рд╕рдо (even) рд╣реИ рдпрд╛ рд╡рд┐рд╖рдо (odd)ред рдЬрдм рднреА `counter` рдмрджрд▓рддрд╛ рд╣реИ, рдЖрдк рдбреЛрдо рдХреЛ рдирд╡реАрдирддрдо рдкреИрд░рд┐рдЯреА рдХреЗ рд╕рд╛рде рдЕрдкрдбреЗрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред рд╡рдиреАрд▓рд╛ рдЬреЗрдПрд╕ рдореЗрдВ, рдЖрдкрдХреЗ рдкрд╛рд╕ рдХреБрдЫ рдРрд╕рд╛ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simulate external updates to counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTE]  \n> рдпрд╣рд╛рдБ рдбреЗрдореЛ рдХреЗ рд▓рд┐рдП рдЧреНрд▓реЛрдмрд▓реНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред рдЙрдЪрд┐рдд рд╕реНрдерд┐рддрд┐ рдкреНрд░рдмрдВрдзрди рдХреЗ рдХрдИ рд╕рдорд╛рдзрд╛рди рд╣реИрдВ, рдФрд░ рдЗрд╕ рдкреНрд░рд╕реНрддрд╛рд╡ рдХреЗ рдЙрджрд╛рд╣рд░рдг рдпрдерд╛рд╕рдВрднрд╡ рдиреНрдпреВрдирддрдо рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рд╣реИрдВред рдпрд╣ рдкреНрд░рд╕реНрддрд╛рд╡ рдЧреНрд▓реЛрдмрд▓ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕ рдХреЛ рдкреНрд░реЛрддреНрд╕рд╛рд╣рд┐рдд рдирд╣реАрдВ рдХрд░рддрд╛ред\n\nрдЗрд╕рдореЗрдВ рдХрдИ рд╕рдорд╕реНрдпрд╛рдПрдБ рд╣реИрдВ...\n\n* `counter` рд╕реЗрдЯрдЕрдк рд╢реЛрд░рдЧреБрд▓ рдФрд░ рднрд╛рд░реА рдмрд╛рдпрд▓рд░рдкреНрд▓реЗрдЯ рд╡рд╛рд▓рд╛ рд╣реИред\n* `counter` рд╕реНрдерд┐рддрд┐ рд░реЗрдВрдбрд░рд┐рдВрдЧ рд╕рд┐рд╕реНрдЯрдо рд╕реЗ рд╕рдЦреНрддреА рд╕реЗ рдЬреБрдбрд╝реА рд╣реБрдИ рд╣реИред\n* рдпрджрд┐ `counter` рдмрджрд▓рддрд╛ рд╣реИ рд▓реЗрдХрд┐рди `parity` рдирд╣реАрдВ (рдЬреИрд╕реЗ рдХрд╛рдЙрдВрдЯрд░ 2 рд╕реЗ 4 рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ), рддреЛ рд╣рдо рдЕрдирд╛рд╡рд╢реНрдпрдХ рд░реВрдк рд╕реЗ рдкреИрд░рд┐рдЯреА рдХреА рдЧрдгрдирд╛ рдФрд░ рдЕрдирд╛рд╡рд╢реНрдпрдХ рд░реЗрдВрдбрд░рд┐рдВрдЧ рдХрд░рддреЗ рд╣реИрдВред\n* рдЕрдЧрд░ рд╣рдорд╛рд░реЗ UI рдХрд╛ рдХреЛрдИ рдФрд░ рднрд╛рдЧ рдХреЗрд╡рд▓ `counter` рдХреЗ рдЕрдкрдбреЗрдЯ рд╣реЛрдиреЗ рдкрд░ рд░реЗрдВрдбрд░ рдХрд░рдирд╛ рдЪрд╛рд╣рддрд╛ рд╣реИ рддреЛ рдХреНрдпрд╛?\n* рдЕрдЧрд░ рд╣рдорд╛рд░реЗ UI рдХрд╛ рдХреЛрдИ рдФрд░ рднрд╛рдЧ рдХреЗрд╡рд▓ `isEven` рдпрд╛ `parity` рдкрд░ рдирд┐рд░реНрднрд░ рд╣реИ рддреЛ рдХреНрдпрд╛?\n\nрдпрд╣рд╛рдБ рддрдХ рдХрд┐ рдЗрд╕ рдЕрдкреЗрдХреНрд╖рд╛рдХреГрдд рд╕рд░рд▓ рдкрд░рд┐рджреГрд╢реНрдп рдореЗрдВ рднреА рдХрдИ рд╕рдорд╕реНрдпрд╛рдПрдБ рддреБрд░рдВрдд рд╕рд╛рдордиреЗ рдЖ рдЬрд╛рддреА рд╣реИрдВред рд╣рдо рдЗрдирдХрд╛ рд╕рдорд╛рдзрд╛рди `counter` рдХреЗ рд▓рд┐рдП pub/sub рдЬреЛрдбрд╝рдХрд░ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдЗрд╕рд╕реЗ `counter` рдХреЗ рдЕрддрд┐рд░рд┐рдХреНрдд рдЙрдкрднреЛрдХреНрддрд╛ рднреА рдЕрдкрдиреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛рдПрдБ рдЬреЛрдбрд╝ рд╕рдХрддреЗ рд╣реИрдВред\n\nрд╣рд╛рд▓рд╛рдВрдХрд┐, рдлрд┐рд░ рднреА рд╣рдо рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╕рдорд╕реНрдпрд╛рдУрдВ рд╕реЗ рдЬреВрдЭ рд░рд╣реЗ рд╣реИрдВ:\n\n* рд░реЗрдВрдбрд░ рдлрдВрдХреНрд╢рди, рдЬреЛ рдХреЗрд╡рд▓ `parity` рдкрд░ рдирд┐рд░реНрднрд░ рд╣реИ, рдЙрд╕реЗ рд╡рд╛рд╕реНрддрд╡ рдореЗрдВ \"рдкрддрд╛\" рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП рдХрд┐ рдЙрд╕реЗ `counter` рдХреЛ рд╕рдмреНрд╕реНрдХреНрд░рд╛рдЗрдм рдХрд░рдирд╛ рд╣реИред\n* рдХреЗрд╡рд▓ `isEven` рдпрд╛ `parity` рдХреЗ рдЖрдзрд╛рд░ рдкрд░ UI рдХреЛ рдЕрдкрдбреЗрдЯ рдХрд░рдирд╛ рд╕рдВрднрд╡ рдирд╣реАрдВ рд╣реИ, рдмрд┐рдирд╛ рд╕реАрдзреЗ `counter` рд╕реЗ рдЗрдВрдЯрд░реИрдХреНрдЯ рдХрд┐рдПред\n* рд╣рдорд╛рд░рд╛ рдмрд╛рдпрд▓рд░рдкреНрд▓реЗрдЯ рдмрдврд╝ рдЧрдпрд╛ рд╣реИред рдЬрдм рднреА рдЖрдк рдХреБрдЫ рдЙрдкрдпреЛрдЧ рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рдпрд╣ рдХреЗрд╡рд▓ рдПрдХ рдлрдВрдХреНрд╢рди рдХреЙрд▓ рдпрд╛ рд╡реЗрд░рд┐рдПрдмрд▓ рдкрдврд╝рдиреЗ рдХреА рдмрд╛рдд рдирд╣реАрдВ рд╣реИ, рдмрд▓реНрдХрд┐ рд╕рдмреНрд╕реНрдХреНрд░рд╛рдЗрдм рдХрд░рдиреЗ рдФрд░ рд╡рд╣рд╛рдБ рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдХреА рдмрд╛рдд рд╣реИред рдЕрдирд╕рдмреНрд╕реНрдХреНрд░рд┐рдкреНрд╢рди рдХрд╛ рдкреНрд░рдмрдВрдзрди рднреА рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ рдЬрдЯрд┐рд▓ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред\n\nрдЕрдм, рд╣рдо рдХреБрдЫ рд╕рдорд╕реНрдпрд╛рдУрдВ рдХреЛ рд╣рд▓ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рди рдХреЗрд╡рд▓ `counter` рдореЗрдВ pub/sub рдЬреЛрдбрд╝рдХрд░, рдмрд▓реНрдХрд┐ `isEven` рдФрд░ `parity` рдореЗрдВ рднреАред рдлрд┐рд░ рд╣рдореЗрдВ `isEven` рдХреЛ `counter`, `parity` рдХреЛ `isEven`, рдФрд░ `render` рдХреЛ `parity` рдкрд░ рд╕рдмреНрд╕реНрдХреНрд░рд╛рдЗрдм рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред рджреБрд░реНрднрд╛рдЧреНрдп рд╕реЗ, рди рдХреЗрд╡рд▓ рд╣рдорд╛рд░рд╛ рдмрд╛рдпрд▓рд░рдкреНрд▓реЗрдЯ рдХреЛрдб рдмрд╣реБрдд рдмрдврд╝ рдЧрдпрд╛ рд╣реИ, рдмрд▓реНрдХрд┐ рд╣рдореЗрдВ рдмрд╣реБрдд рд╕рд╛рд░реА рд╕рдмреНрд╕реНрдХреНрд░рд┐рдкреНрд╢рди рдмреБрдХрдХреАрдкрд┐рдВрдЧ рдХрд░рдиреА рдкрдбрд╝ рд░рд╣реА рд╣реИ, рдФрд░ рдЕрдЧрд░ рд╣рдо рд╕рдм рдХреБрдЫ рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рд╕рд╛рдлрд╝ рдирд╣реАрдВ рдХрд░рддреЗ рд╣реИрдВ рддреЛ рд╕рдВрднрд╛рд╡рд┐рдд рдореЗрдореЛрд░реА рд▓реАрдХ рдХрд╛ рдЦрддрд░рд╛ рднреА рд╣реИред рддреЛ, рд╣рдордиреЗ рдХреБрдЫ рд╕рдорд╕реНрдпрд╛рдПрдБ рд╣рд▓ рдХреА рд╣реИрдВ рд▓реЗрдХрд┐рди рд╕рдорд╕реНрдпрд╛рдУрдВ рдФрд░ рдХреЛрдб рдХреА рдПрдХ рдирдИ рд╢реНрд░реЗрдгреА рдмрдирд╛ рд▓реА рд╣реИред рдФрд░ рднреА рдмреБрд░рд╛ рдпрд╣ рд╣реИ рдХрд┐ рд╣рдореЗрдВ рдпрд╣ рдкреВрд░реА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдЕрдкрдиреЗ рд╕рд┐рд╕реНрдЯрдо рдХреА рд╣рд░ рд╕реНрдерд┐рддрд┐ рдХреЗ рд▓рд┐рдП рджреЛрд╣рд░рд╛рдиреА рд╣реЛрдЧреАред\n\n### Signals рдХрд╛ рдкрд░рд┐рдЪрдп\n\nUI рдореЗрдВ рдореЙрдбрд▓ рдФрд░ рд╡реНрдпреВ рдХреЗ рд▓рд┐рдП рдбреЗрдЯрд╛ рдмрд╛рдЗрдВрдбрд┐рдВрдЧ рдЕрдореВрд░реНрддрддрд╛ рд╡рд┐рднрд┐рдиреНрди рдкреНрд░реЛрдЧреНрд░рд╛рдорд┐рдВрдЧ рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ UI рдлреНрд░реЗрдорд╡рд░реНрдХреНрд╕ рдХрд╛ рдореВрд▓ рд╣рд┐рд╕реНрд╕рд╛ рд░рд╣реА рд╣реИ, рднрд▓реЗ рд╣реА JS рдпрд╛ рд╡реЗрдм рдкреНрд▓реЗрдЯрдлрд╛рд░реНрдо рдореЗрдВ рдХреЛрдИ рдРрд╕рд╛ рдореИрдХреЗрдирд┐рдЬреНрдо рди рд╣реЛред JS рдлреНрд░реЗрдорд╡рд░реНрдХреНрд╕ рдФрд░ рд▓рд╛рдЗрдмреНрд░реЗрд░реАрдЬрд╝ рдореЗрдВ, рдЗрд╕ рдмрд╛рдЗрдВрдбрд┐рдВрдЧ рдХреЛ рджрд░реНрд╢рд╛рдиреЗ рдХреЗ рд╡рд┐рднрд┐рдиреНрди рддрд░реАрдХреЛрдВ рдкрд░ рдмрд╣реБрдд рдЕрдзрд┐рдХ рдкреНрд░рдпреЛрдЧ рд╣реБрдЖ рд╣реИ, рдФрд░ рдЕрдиреБрднрд╡ рдиреЗ рджрд┐рдЦрд╛рдпрд╛ рд╣реИ рдХрд┐ рдПрдХ-рддрд░рдлрд╛ рдбреЗрдЯрд╛ рдлреНрд▓реЛ рдХреА рд╢рдХреНрддрд┐, рдПрдХ рдкреНрд░рдердо рд╢реНрд░реЗрдгреА рдХреЗ рдбреЗрдЯрд╛ рдкреНрд░рдХрд╛рд░ рдХреЗ рд╕рд╛рде, рдЬреЛ рдЕрдиреНрдп рдбреЗрдЯрд╛ рд╕реЗ рд╡реНрдпреБрддреНрдкрдиреНрди рд╕реНрдерд┐рддрд┐ рдпрд╛ рдЧрдгрдирд╛ рдХрд╛ рдкреНрд░рддрд┐рдирд┐рдзрд┐рддреНрд╡ рдХрд░рддрд╛ рд╣реИ, рдЕрдм рдЕрдХреНрд╕рд░ \"Signals\" рдХрд╣рд╛ рдЬрд╛рддрд╛ рд╣реИред\nрдпрд╣ рдкреНрд░рдердо рд╢реНрд░реЗрдгреА рдХрд╛ рд░рд┐рдПрдХреНрдЯрд┐рд╡ рдорд╛рди рджреГрд╖реНрдЯрд┐рдХреЛрдг рд╢рд╛рдпрдж рдкрд╣рд▓реА рдмрд╛рд░ [Knockout](https://knockoutjs.com/) [2010 рдореЗрдВ](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/) рдУрдкрди-рд╕реЛрд░реНрд╕ рдЬрд╛рд╡рд╛рд╕реНрдХреНрд░рд┐рдкреНрдЯ рд╡реЗрдм рдлреНрд░реЗрдорд╡рд░реНрдХреНрд╕ рдореЗрдВ рд▓реЛрдХрдкреНрд░рд┐рдп рд╣реБрдЖред рддрдм рд╕реЗ, рдХрдИ рд╡рд┐рд╡рд┐рдзрддрд╛рдПрдБ рдФрд░ рдХрд╛рд░реНрдпрд╛рдиреНрд╡рдпрди рдмрдирд╛рдП рдЧрдП рд╣реИрдВред рдкрд┐рдЫрд▓реЗ 3-4 рд╡рд░реНрд╖реЛрдВ рдореЗрдВ, рд╕рд┐рдЧреНрдирд▓ рдкреНрд░рд┐рдорд┐рдЯрд┐рд╡ рдФрд░ рд╕рдВрдмрдВрдзрд┐рдд рджреГрд╖реНрдЯрд┐рдХреЛрдгреЛрдВ рдиреЗ рдФрд░ рднреА рд▓реЛрдХрдкреНрд░рд┐рдпрддрд╛ рд╣рд╛рд╕рд┐рд▓ рдХреА рд╣реИ, рд▓рдЧрднрдЧ рд╣рд░ рдЖрдзреБрдирд┐рдХ рдЬрд╛рд╡рд╛рд╕реНрдХреНрд░рд┐рдкреНрдЯ рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдпрд╛ рдлреНрд░реЗрдорд╡рд░реНрдХ рдореЗрдВ рдХрд┐рд╕реА рди рдХрд┐рд╕реА рд░реВрдк рдореЗрдВ рдХреБрдЫ рди рдХреБрдЫ рдРрд╕рд╛ рд╣реИред\n\nSignals рдХреЛ рд╕рдордЭрдиреЗ рдХреЗ рд▓рд┐рдП, рдЪрд▓рд┐рдП рдКрдкрд░ рджрд┐рдП рдЧрдП рдЙрджрд╛рд╣рд░рдг рдХреЛ рдлрд┐рд░ рд╕реЗ рджреЗрдЦреЗрдВ, рдиреАрдЪреЗ рдФрд░ рдЕрдзрд┐рдХ рд╕реНрдкрд╖реНрдЯ рдХрд┐рдП рдЧрдП Signal API рдХреЗ рд╕рд╛рдеред\n\n#### рдЙрджрд╛рд╣рд░рдг - рдПрдХ Signals рдХрд╛рдЙрдВрдЯрд░\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// рдХреЛрдИ рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдпрд╛ рдлреНрд░реЗрдорд╡рд░реНрдХ рдЕрдиреНрдп Signal рдкреНрд░рд┐рдорд┐рдЯрд┐рд╡реНрд╕ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЗрдлреЗрдХреНрдЯреНрд╕ рдХреЛ рдкрд░рд┐рднрд╛рд╖рд┐рдд рдХрд░рддрд╛ рд╣реИ\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simulate external updates to counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nрдХреБрдЫ рдмрд╛рддреЗрдВ рддреБрд░рдВрдд рд╕реНрдкрд╖реНрдЯ рд╣реЛ рдЬрд╛рддреА рд╣реИрдВ:\n* рд╣рдордиреЗ рдЕрдкрдиреЗ рдкрд┐рдЫрд▓реЗ рдЙрджрд╛рд╣рд░рдг рд╕реЗ `counter` рд╡реЗрд░рд┐рдПрдмрд▓ рдХреЗ рдЪрд╛рд░реЛрдВ рдУрд░ рдХрд╛ рд╢реЛрд░рдЧреБрд▓ рдФрд░ рдмрд╛рдпрд▓рд░рдкреНрд▓реЗрдЯ рд╣рдЯрд╛ рджрд┐рдпрд╛ рд╣реИред\n* рдорд╛рди, рдЧрдгрдирд╛рдПрдБ, рдФрд░ рд╕рд╛рдЗрдб рдЗрдлреЗрдХреНрдЯреНрд╕ рдХреЛ рд╕рдВрднрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рдПрдХреАрдХреГрдд API рд╣реИред\n* `counter` рдФрд░ `render` рдХреЗ рдмреАрдЪ рдХреЛрдИ рд╕рд░реНрдХреБрд▓рд░ рд░реЗрдлрд░реЗрдВрд╕ рд╕рдорд╕реНрдпрд╛ рдпрд╛ рдЙрд▓рдЯреА рдирд┐рд░реНрднрд░рддрд╛ рдирд╣реАрдВ рд╣реИред\n* рдХреЛрдИ рдореИрдиреНрдпреБрдЕрд▓ рд╕рдмреНрд╕реНрдХреНрд░рд┐рдкреНрд╢рди рдирд╣реАрдВ рд╣реИ, рдФрд░ рди рд╣реА рдХрд┐рд╕реА рдмреБрдХрдХреАрдкрд┐рдВрдЧ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред\n* рд╕рд╛рдЗрдб-рдЗрдлреЗрдХреНрдЯ рдЯрд╛рдЗрдорд┐рдВрдЧ/рд╢реЗрдбреНрдпреВрд▓рд┐рдВрдЧ рдХреЛ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░рдиреЗ рдХрд╛ рдПрдХ рд╕рд╛рдзрди рд╣реИред\n\nSignals рд╣рдореЗрдВ API рдХреА рд╕рддрд╣ рд╕реЗ рдХрд╣реАрдВ рдЕрдзрд┐рдХ рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВ:",
  "status": "ok"
}