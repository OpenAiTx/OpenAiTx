{
  "id": 4,
  "origin": "\n        // Callback called when isWatched becomes true, if it was previously false\n        [Signal.subtle.watched]?: (this: Signal<T>) => void;\n\n        // Callback called whenever isWatched becomes false, if it was previously true\n        [Signal.subtle.unwatched]?: (this: Signal<T>) => void;\n    }\n}\n```\n\n### How Signals work\n\nA Signal represents a cell of data which may change over time. Signals may be either \"state\" (just a value which is set manually) or \"computed\" (a formula based on other Signals).\n\nComputed Signals work by automatically tracking which other Signals are read during their evaluation. When a computed is read, it checks whether any of its previously recorded dependencies have changed, and re-evaluates itself if so. When multiple computed Signals are nested, all of the attribution of the tracking goes to the innermost one.\n\nComputed Signals are lazy, i.e., pull-based: they are only re-evaluated when they are accessed, even if one of their dependencies changed earlier.\n\nThe callback passed into computed Signals should generally be \"pure\" in the sense of being a deterministic, side-effect-free function of the other Signals which it accesses. At the same time, the timing of the callback being called is deterministic, allowing side effects to be used with care.\n\nSignals feature prominent caching/memoization: both state and computed Signals remember their current value, and only trigger recalculation of computed Signals which reference them if they actually change. A repeated comparison of old vs new values isn't even needed--the comparison is made once when the source Signal is reset/re-evaluated, and the Signal mechanism keeps track of which things referencing that Signal have not updated based on the new value yet. Internally, this is generally represented through \"graph coloring\" as described in (Milo's blog post).\n\nComputed Signals track their dependencies dynamically--each time they are run, they may end up depending on different things, and that precise dependency set is kept fresh in the Signal graph. This means that if you have a dependency needed on only one branch, and the previous calculation took the other branch, then a change to that temporarily unused value will not cause the computed Signal to be recalculated, even when pulled.\n\nUnlike JavaScript Promises, everything in Signals runs synchronously:\n- Setting a Signal to a new value is synchronous, and this is immediately reflected when reading any computed Signal which depends on it afterwards. There is no built-in batching of this mutation.\n- Reading computed Signals is synchronous--their value is always available.\n- The `notify` callback in Watchers, as explained below, runs synchronously, during the `.set()` call which triggered it (but after graph coloring has completed).\n\nLike Promises, Signals can represent an error state: If a computed Signal's callback throws, then that error is cached just like another value, and rethrown every time the Signal is read.\n\n### Understanding the Signal class\n\nA `Signal` instance represents the capability to read a dynamically changing value whose updates are tracked over time. It also implicitly includes the capability to subscribe to the Signal, implicitly through a tracked access from another computed Signal.\n\nThe API here is designed to match the very rough ecosystem consensus among a large fraction of Signal libraries in the use of names like \"signal\", \"computed\" and \"state\". However, access to Computed and State Signals is through a `.get()` method, which disagrees with all popular Signal APIs, which either use a `.value`-style accessor, or `signal()` call syntax.\n\nThe API is designed to reduce the number of allocations, to make Signals suitable for embedding in JavaScript frameworks while reaching same or better performance than existing framework-customized Signals. This implies:\n- State Signals are a single writable object, which can be both accessed and set from the same reference. (See implications below in the \"Capability separation\" section.)\n- Both State and Computed Signals are designed to be subclassable, to facilitate frameworks' ability to add additional properties through public and private class fields (as well as methods for using that state).\n- Various callbacks (e.g., `equals`, the computed callback) are called with the relevant Signal as the `this` value for context, so that a new closure isn't needed per Signal. Instead, context can be saved in extra properties of the signal itself.\n\nSome error conditions enforced by this API:\n- It is an error to read a computed recursively.\n- The `notify` callback of a Watcher cannot read or write any signals\n- If a computed Signal's callback throws, then subsequent accesses of the Signal rethrow that cached error, until one of the dependencies changes and it is recalculated.\n\nSome conditions which are *not* enforced:\n- Computed Signals can write to other Signals, synchronously within their callback\n- Work which is queued by a Watcher's `notify` callback may read or write signals, making it possible to replicate [classic React antipatterns](https://react.dev/learn/you-might-not-need-an-effect) in terms of Signals!\n\n### Implementing effects\n\nThe `Watcher` interface defined above gives the basis for implementing typical JS APIs for effects: callbacks which are re-run when other Signals change, purely for their side effect. The `effect` function used above in the initial example can be defined as follows:\n\n```ts\n// This function would usually live in a library/framework, not application code\n// NOTE: This scheduling logic is too basic to be useful. Do not copy/paste.\nlet pending = false;\n\nlet w = new Signal.subtle.Watcher(() => {\n    if (!pending) {\n        pending = true;\n        queueMicrotask(() => {\n            pending = false;\n            for (let s of w.getPending()) s.get();\n            w.watch();\n        });\n    }\n});\n\n// An effect effect Signal which evaluates to cb, which schedules a read of\n// itself on the microtask queue whenever one of its dependencies might change\nexport function effect(cb) {\n    let destructor;\n    let c = new Signal.Computed(() => { destructor?.(); destructor = cb(); });\n    w.watch(c);\n    c.get();\n    return () => { destructor?.(); w.unwatch(c) };\n}\n```\n\nThe Signal API does not include any built-in function like `effect`. This is because effect scheduling is subtle and often ties into framework rendering cycles and other high-level framework-specific state or strategies which JS does not have access to.\n\nWalking through the different operations used here: The `notify` callback passed into `Watcher` constructor is the function that is called when the Signal goes from a \"clean\" state (where we know the cache is initialized and valid) into a \"checked\" or \"dirty\" state (where the cache might or might not be valid because at least one of the states which this recursively depends on has been changed).\n\nCalls to `notify` are ultimately triggered by a call to `.set()` on some state Signal. This call is synchronous: it happens before `.set` returns. But there's no need to worry about this callback observing the Signal graph in a half-processed state, because during a `notify` callback, no Signal can be read or written, even in an `untrack` call. Because `notify` is called during `.set()`, it is interrupting another thread of logic, which might not be complete. To read or write Signals from `notify`, schedule work to run later, e.g., by writing the Signal down in a list to later be accessed, or with `queueMicrotask` as above.\n\nNote that it is perfectly possible to use Signals effectively without `Signal.subtle.Watcher` by scheduling polling of computed Signals, as Glimmer does. However, many frameworks have found that it is very often useful to have this scheduling logic run synchronously, so the Signals API includes it.\n\nBoth computed and state Signals are garbage-collected like any JS values. But Watchers have a special way of holding things alive: Any Signals which are watched by a Watcher will be held alive as long as any of the underlying states are reachable, as these may trigger a future `notify` call (and then a future `.get()`). For this reason, remember to call `Watcher.prototype.unwatch` to clean up effects.\n\n### An unsound escape hatch\n\n`Signal.subtle.untrack` is an escape hatch allowing reading Signals *without* tracking those reads. This capability is unsafe because it allows the creation of computed Signals whose value depends on other Signals, but which aren't updated when those Signals change. It should be used when the untracked accesses will not change the result of the computation.\n\n<!--\nTODO: Show example where it's a good idea to use untrack\n\n### Using watched/unwatched",
  "translate": "```ts\n// Callback called when isWatched becomes true, if it was previously false\n[Signal.subtle.watched]?: (this: Signal<T>) => void;\n\n// Callback called whenever isWatched becomes false, if it was previously true\n[Signal.subtle.unwatched]?: (this: Signal<T>) => void;\n}\n}\n```\n\n### सिग्नल्स कैसे काम करते हैं\n\nएक सिग्नल डेटा की एक सेल का प्रतिनिधित्व करता है जो समय के साथ बदल सकती है। सिग्नल्स या तो \"स्टेट\" (सिर्फ एक मान जिसे मैन्युअली सेट किया जाता है) या \"कंप्यूटेड\" (अन्य सिग्नल्स पर आधारित एक सूत्र) हो सकते हैं।\n\nकंप्यूटेड सिग्नल्स स्वचालित रूप से ट्रैक करते हैं कि उनके मूल्यांकन के दौरान किन अन्य सिग्नल्स को पढ़ा गया है। जब एक कंप्यूटेड को पढ़ा जाता है, तो यह जांचता है कि क्या इसके पहले रिकॉर्ड किए गए डिपेंडेंसी में से कोई बदल गया है, और यदि हाँ, तो यह खुद को फिर से मूल्यांकित करता है। जब कई कंप्यूटेड सिग्नल्स नेस्टेड होते हैं, तो ट्रैकिंग का सारा क्रेडिट सबसे भीतरी सिग्नल को जाता है।\n\nकंप्यूटेड सिग्नल्स आलसी (लेज़ी), यानी पुल-आधारित होते हैं: इन्हें केवल तभी फिर से मूल्यांकित किया जाता है जब इन्हें एक्सेस किया जाता है, भले ही इनकी डिपेंडेंसी पहले बदल गई हो।\n\nकंप्यूटेड सिग्नल्स में पास किया गया कॉलबैक आमतौर पर \"प्योर\" होना चाहिए, अर्थात् वह एक निर्धारक (डिटर्मिनिस्टिक), साइड-इफेक्ट-रहित फंक्शन हो, जो केवल उन अन्य सिग्नल्स पर निर्भर हो, जिन्हें वह एक्सेस करता है। साथ ही, इस कॉलबैक के कॉल होने का समय निर्धारक होता है, जिससे साइड इफेक्ट्स को सावधानी से उपयोग किया जा सकता है।\n\nसिग्नल्स में प्रमुख कैशिंग/मेमोइज़ेशन की सुविधा होती है: स्टेट और कंप्यूटेड दोनों प्रकार के सिग्नल्स अपने वर्तमान मान को याद रखते हैं, और केवल उन्हीं कंप्यूटेड सिग्नल्स की फिर से गणना ट्रिगर करते हैं जो वास्तव में बदलते हैं। पुराने और नए मान की बार-बार तुलना की आवश्यकता नहीं होती—यह तुलना केवल एक बार होती है जब स्रोत सिग्नल रीसेट/री-इवैल्युएट होता है, और सिग्नल तंत्र ट्रैक करता है कि कौन-कौन सी चीजें उस सिग्नल को संदर्भित कर रही हैं जिन्हें अभी तक नए मान के आधार पर अपडेट नहीं किया गया है। आंतरिक रूप से, यह सामान्यतः \"ग्राफ कलरिंग\" के माध्यम से दर्शाया जाता है जैसा कि (Milo's blog post) में वर्णित है।\n\nकंप्यूटेड सिग्नल्स अपनी डिपेंडेंसी को डायनामिक रूप से ट्रैक करते हैं—हर बार जब वे चलते हैं, वे अलग-अलग चीजों पर निर्भर हो सकते हैं, और वह सटीक डिपेंडेंसी सेट सिग्नल ग्राफ में ताज़ा रखा जाता है। इसका अर्थ है कि यदि आपके पास कोई डिपेंडेंसी है जो केवल एक ब्रांच में आवश्यक है, और पिछली गणना ने दूसरी ब्रांच ली थी, तो उस अस्थायी रूप से अप्रयुक्त मान में बदलाव कंप्यूटेड सिग्नल को फिर से गणना करने का कारण नहीं बनेगा, भले ही उसे खींचा (pulled) गया हो।\n\nजावास्क्रिप्ट प्रॉमिसेज के विपरीत, सिग्नल्स में सब कुछ सिंक्रोनस रूप से चलता है:\n- किसी सिग्नल को नए मान पर सेट करना सिंक्रोनस होता है, और यह तुरंत दर्शाता है जब भी कोई कंप्यूटेड सिग्नल जो इस पर निर्भर करता है, उसे बाद में पढ़ा जाए। इस म्यूटेशन के बैचिंग की कोई इनबिल्ट सुविधा नहीं है।\n- कंप्यूटेड सिग्नल्स को पढ़ना सिंक्रोनस होता है—उनका मान हमेशा उपलब्ध रहता है।\n- नीचे समझाए गए अनुसार, वॉचर्स में `notify` कॉलबैक सिंक्रोनस रूप से चलता है, उसी `.set()` कॉल के दौरान जिसने इसे ट्रिगर किया (लेकिन ग्राफ कलरिंग के पूर्ण होने के बाद)।\n\nप्रॉमिसेज की तरह, सिग्नल्स एक त्रुटि स्थिति का प्रतिनिधित्व कर सकते हैं: यदि किसी कंप्यूटेड सिग्नल का कॉलबैक थ्रो करता है, तो वह त्रुटि भी अन्य मान की तरह कैश हो जाती है, और हर बार सिग्नल को पढ़ते समय फिर से थ्रो होती है।\n\n### Signal क्लास को समझना\n\nएक `Signal` इंस्टेंस एक डायनामिक रूप से बदलते मान को पढ़ने की क्षमता का प्रतिनिधित्व करता है, जिसके अपडेट समय के साथ ट्रैक किए जाते हैं। इसमें सिग्नल की सदस्यता लेने की क्षमता भी निहित होती है, जो कि किसी अन्य कंप्यूटेड सिग्नल से ट्रैक्ड एक्सेस के माध्यम से स्वतः होती है।\n\nयहां दिया गया API बड़े पैमाने पर सिग्नल लाइब्रेरीज़ के बीच नामों जैसे \"signal\", \"computed\" और \"state\" के उपयोग में मौजूद मोटे तौर पर सहमति से मेल खाने के लिए डिज़ाइन किया गया है। हालांकि, Computed और State सिग्नल्स तक पहुंच `.get()` मेथड के माध्यम से होती है, जो सभी लोकप्रिय सिग्नल API से असहमत है, जो या तो `.value`-स्टाइल एक्सेसर या `signal()` कॉल सिंटैक्स का उपयोग करते हैं।\n\nAPI को अलोकेशन की संख्या कम करने के लिए डिज़ाइन किया गया है, ताकि सिग्नल्स को जावास्क्रिप्ट फ्रेमवर्क्स में एम्बेड करने के लिए उपयुक्त बनाया जा सके, और मौजूदा फ्रेमवर्क-कस्टमाइज्ड सिग्नल्स से समान या बेहतर प्रदर्शन प्राप्त किया जा सके। इसका अर्थ है:\n- State सिग्नल्स एकल लेखनीय ऑब्जेक्ट होते हैं, जिन्हें उसी रेफरेंस से एक्सेस और सेट दोनों किया जा सकता है। (नीचे \"Capability separation\" अनुभाग में इसके प्रभाव देखें।)\n- स्टेट और कंप्यूटेड दोनों सिग्नल्स को सबक्लास किया जा सकता है, ताकि फ्रेमवर्क्स सार्वजनिक और निजी क्लास फील्ड्स (साथ ही उस स्टेट का उपयोग करने के मेथड्स) के माध्यम से अतिरिक्त गुण जोड़ सकें।\n- विभिन्न कॉलबैक (जैसे, `equals`, कंप्यूटेड कॉलबैक) को संबंधित सिग्नल को `this` मान के रूप में पास किया जाता है, ताकि प्रत्येक सिग्नल के लिए नया क्लोजर आवश्यक न हो। इसके बजाय, संदर्भ को स्वयं सिग्नल के अतिरिक्त गुणों में संग्रहीत किया जा सकता है।\n\nइस API द्वारा लागू की गई कुछ त्रुटि स्थितियाँ:\n- कंप्यूटेड को पुनरावृत्त रूप से पढ़ना एक त्रुटि है।\n- वॉचर के `notify` कॉलबैक को किसी भी सिग्नल को पढ़ने या लिखने की अनुमति नहीं है।\n- यदि किसी कंप्यूटेड सिग्नल का कॉलबैक थ्रो करता है, तो सिग्नल की बाद की सभी एक्सेस उस कैश की गई त्रुटि को फिर से थ्रो करती हैं, जब तक कि डिपेंडेंसीज़ में से कोई बदल न जाए और वह फिर से गणना न हो जाए।\n\nकुछ स्थितियाँ जो *लागू नहीं* की गई हैं:\n- कंप्यूटेड सिग्नल्स अपने कॉलबैक के भीतर सिंक्रोनस रूप से अन्य सिग्नल्स को लिख सकते हैं\n- वॉचर के `notify` कॉलबैक द्वारा कतारबद्ध किया गया कार्य सिग्नल्स को पढ़ या लिख सकता है, जिससे सिग्नल्स के संदर्भ में [क्लासिक React एंटिपैटर्न्स](https://react.dev/learn/you-might-not-need-an-effect) को दोहराना संभव है!\n\n### इफेक्ट्स को लागू करना\n\nऊपर परिभाषित `Watcher` इंटरफेस इफेक्ट्स के लिए विशिष्ट JS API को लागू करने का आधार देता है: ऐसे कॉलबैक जिन्हें अन्य सिग्नल्स के बदलने पर फिर से चलाया जाता है, केवल उनके साइड इफेक्ट के लिए। प्रारंभिक उदाहरण में प्रयुक्त `effect` फंक्शन को निम्नानुसार परिभाषित किया जा सकता है:\n\n```ts\n// यह फंक्शन आमतौर पर किसी लाइब्रेरी/फ्रेमवर्क में होगा, एप्लिकेशन कोड में नहीं\n// नोट: यह शेड्यूलिंग लॉजिक बहुत बुनियादी है। इसे कॉपी/पेस्ट न करें।\nlet pending = false;\n\nlet w = new Signal.subtle.Watcher(() => {\n    if (!pending) {\n        pending = true;\n        queueMicrotask(() => {\n            pending = false;\n            for (let s of w.getPending()) s.get();\n            w.watch();\n        });\n    }\n});\n\n// एक इफेक्ट सिग्नल जो cb पर मूल्यांकन करता है, और जब भी इसकी डिपेंडेंसी बदल सकती है,\n// तब अपने आप को माइक्रोटास्क कतार में पढ़ने के लिए शेड्यूल करता है\nexport function effect(cb) {\n    let destructor;\n    let c = new Signal.Computed(() => { destructor?.(); destructor = cb(); });\n    w.watch(c);\n    c.get();\n    return () => { destructor?.(); w.unwatch(c) };\n}\n```\n\nSignal API में कोई इनबिल्ट `effect` जैसी फंक्शन शामिल नहीं है। इसका कारण यह है कि इफेक्ट शेड्यूलिंग सूक्ष्म है और अक्सर फ्रेमवर्क रेंडरिंग साइकिल्स और अन्य उच्च-स्तरीय फ्रेमवर्क-विशिष्ट स्टेट या रणनीतियों से जुड़ी होती है, जिन तक JS की पहुंच नहीं होती।\n\nयहां प्रयुक्त विभिन्न ऑपरेशनों को समझते हुए: `Watcher` कंस्ट्रक्टर में पास किया गया `notify` कॉलबैक वह फंक्शन है जिसे सिग्नल के \"clean\" (जहां हम जानते हैं कि कैश इनिशियलाइज़ और वैध है) से \"checked\" या \"dirty\" स्टेट (जहां कैश वैध हो सकता है या नहीं, क्योंकि इस पर निर्भर किसी स्टेट में बदलाव हुआ है) में जाने पर कॉल किया जाता है।\n\n`notify` को कॉल करने की प्रक्रिया अंततः किसी स्टेट सिग्नल पर `.set()` के कॉल द्वारा ट्रिगर होती है। यह कॉल सिंक्रोनस है: यह `.set` के लौटने से पहले होती है। लेकिन इस कॉलबैक के सिग्नल ग्राफ को अध-प्रसंस्कृत स्थिति में देखने के बारे में चिंता करने की आवश्यकता नहीं है, क्योंकि `notify` कॉलबैक के दौरान कोई सिग्नल पढ़ा या लिखा नहीं जा सकता, यहां तक कि `untrack` कॉल में भी नहीं। चूंकि `notify` को `.set()` के दौरान कॉल किया जाता है, यह किसी अन्य लॉजिक थ्रेड को बाधित कर रहा है, जो अभी पूरा नहीं हुआ है। `notify` से सिग्नल्स को पढ़ने या लिखने के लिए, कार्य को बाद में चलाने के लिए शेड्यूल करें, जैसे कि सिग्नल को एक सूची में लिखना जिसे बाद में एक्सेस किया जाएगा, या ऊपर दिखाए गए अनुसार `queueMicrotask` के साथ।\n\nध्यान दें कि बिना `Signal.subtle.Watcher` के भी सिग्नल्स का प्रभावी ढंग से उपयोग करना पूरी तरह संभव है, जैसे कि कंप्यूटेड सिग्नल्स की पोलिंग शेड्यूल करके, जैसा कि Glimmer करता है। हालांकि, कई फ्रेमवर्क्स ने पाया है कि अक्सर यह शेड्यूलिंग लॉजिक सिंक्रोनस रूप से चलाना उपयोगी है, इसलिए Signals API इसे शामिल करता है।\n\nकंप्यूटेड और स्टेट दोनों सिग्नल्स किसी भी JS मान की तरह गार्बेज-कलेक्ट हो जाते हैं। लेकिन वॉचर्स के पास चीजों को जीवित रखने का एक विशेष तरीका है: जो भी सिग्नल्स किसी वॉचर द्वारा वॉच किए जाते हैं, वे तब तक जीवित रहते हैं जब तक कि उनकी कोई भी अंतर्निहित स्टेट पहुँच योग्य है, क्योंकि ये भविष्य के `notify` कॉल (और फिर भविष्य के `.get()`) को ट्रिगर कर सकते हैं। इस कारण से, इफेक्ट्स को साफ करने के लिए `Watcher.prototype.unwatch` को कॉल करना याद रखें।\n\n### एक असुरक्षित एस्केप हैच\n\n`Signal.subtle.untrack` एक एस्केप हैच है जो सिग्नल्स को *बिना* उन रीड्स को ट्रैक किए पढ़ने की अनुमति देता है। यह क्षमता असुरक्षित है क्योंकि यह ऐसे कंप्यूटेड सिग्नल्स बनाने की अनुमति देती है जिनका मान अन्य सिग्नल्स पर निर्भर है, लेकिन जब वे सिग्नल्स बदलते हैं तो वे अपडेट नहीं होते। इसे तब उपयोग करना चाहिए जब अनट्रैक किए गए एक्सेस से गणना के परिणाम पर कोई प्रभाव न पड़े।\n\n<!--\nTODO: Show example where it's a good idea to use untrack\n\n### Using watched/unwatched",
  "status": "ok"
}