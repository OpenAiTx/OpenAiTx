{
  "id": 6,
  "origin": "\nThe `state` of a Computed Signal may be one of the following:\n\n- `~clean~`: The Signal's value is present and known not to be stale.\n- `~checked~`: An (indirect) source of this Signal has changed; this Signal has a value but it _may_ be stale. Whether or it not is stale will be known only when all immediate sources have been evaluated.\n- `~computing~`: This Signal's callback is currently being executed as a side-effect of a `.get()` call.\n- `~dirty~`: Either this Signal has a value which is known to be stale, or it has never been evaluated.\n\nThe transition graph is as follows:\n\n```mermaid\nstateDiagram-v2\n    [*] --> dirty\n    dirty --> computing: [4]\n    computing --> clean: [5]\n    clean --> dirty: [2]\n    clean --> checked: [3]\n    checked --> clean: [6]\n    checked --> dirty: [1]\n```\n\nThe transitions are:\n| Number | From | To | Condition | Algorithm |\n| ------ | ---- | -- | --------- | --------- |\n| 1 | `~checked~` | `~dirty~` | An immediate source of this signal, which is a computed signal, has been evaluated, and its value has changed. | Algorithm: recalculate dirty computed Signal |\n| 2 | `~clean~` | `~dirty~` | An immediate source of this signal, which is a State, has been set, with a value which is not equal to its previous value. | Method: `Signal.State.prototype.set(newValue)` |\n| 3 | `~clean~` | `~checked~` | A recursive, but not immediate, source of this signal, which is a State, has been set, with a value which is not equal to its previous value. | Method: `Signal.State.prototype.set(newValue)` |\n| 4 | `~dirty~` | `~computing~` | We are about to execute the `callback`. | Algorithm: recalculate dirty computed Signal |\n| 5 | `~computing~` | `~clean~` | The `callback` has finished evaluating and either returned a value or thrown an exception. | Algorithm: recalculate dirty computed Signal |\n| 6 | `~checked~` | `~clean~` | All immediate sources of this signal have been evaluated, and all have been discovered unchanged, so we are now known not to be stale. | Algorithm: recalculate dirty computed Signal |\n\n#### `Signal.Computed` Internal slots\n\n- `value`: The previous cached value of the Signal, or `~uninitialized~` for a never-read computed Signal. The value may be an exception which gets rethrown when the value is read. Always `undefined` for effect signals.\n- `state`: May be `~clean~`, `~checked~`, `~computing~`, or `~dirty~`.\n- `sources`: An ordered set of Signals which this Signal depends on.\n- `sinks`: An ordered set of Signals which depend on this Signal.\n- `equals`: The equals method provided in the options.\n- `callback`: The callback which is called to get the computed Signal's value. Set to the first parameter passed to the constructor.\n\n#### `Signal.Computed` Constructor\n\nThe constructor sets\n- `callback` to its first parameter\n- `equals` based on options, defaulting to `Object.is` if absent\n- `state` to `~dirty~`\n- `value` to `~uninitialized~`\n\nWith [AsyncContext](https://github.com/tc39/proposal-async-context), the callback passed to `new Signal.Computed` closes over the snapshot from when the constructor was called, and restores this snapshot during its execution.\n\n#### Method: `Signal.Computed.prototype.get`\n\n1. If the current execution context is `frozen` or if this Signal has the state `~computing~`, or if this signal is a Watcher and `computing` a computed Signal, throw an exception.\n1. If `computing` is not `null`, add this Signal to `computing`'s `sources` set.\n1. NOTE: We do not add `computing` to this Signal's `sinks` set until/unless it becomes watched by a Watcher.\n1. If this Signal's state is `~dirty~` or `~checked~`: Repeat the following steps until this Signal is `~clean~`:\n    1. Recurse up via `sources` to find the deepest, left-most (i.e. earliest observed) recursive source which is a Computed Signal marked `~dirty~` (cutting off search when hitting a `~clean~` Computed Signal, and including this Computed Signal as the last thing to search).\n    1. Perform the \"recalculate dirty computed Signal\" algorithm on that Signal.\n1. At this point, this Signal's state will be `~clean~`, and no recursive sources will be `~dirty~` or `~checked~`. Return the Signal's `value`. If the value is an exception, rethrow that exception.\n\n### The `Signal.subtle.Watcher` class\n\n#### `Signal.subtle.Watcher` State machine\n\nThe `state` of a Watcher may be one of the following:\n\n- `~waiting~`: The `notify` callback has been run, or the Watcher is new, but is not actively watching any signals.\n- `~watching~`: The Watcher is actively watching signals, but no changes have yet happened which would necessitate a `notify` callback.\n- `~pending~`: A dependency of the Watcher has changed, but the `notify` callback has not yet been run.\n\nThe transition graph is as follows:\n\n```mermaid\nstateDiagram-v2\n    [*] --> waiting\n    waiting --> watching: [1]\n    watching --> waiting: [2]\n    watching --> pending: [3]\n    pending --> waiting: [4]\n```\n\nThe transitions are:\n| Number | From | To | Condition | Algorithm |\n| ------ | ---- | -- | --------- | --------- |\n| 1 | `~waiting~` | `~watching~` | The Watcher's `watch` method has been called. | Method: `Signal.subtle.Watcher.prototype.watch(...signals)` |\n| 2 | `~watching~` | `~waiting~` | The Watcher's `unwatch` method has been called, and the last watched signal has been removed. | Method: `Signal.subtle.Watcher.prototype.unwatch(...signals)` |\n| 3 | `~watching~` | `~pending~` | A watched signal may have changed value. | Method: `Signal.State.prototype.set(newValue)` |\n| 4 | `~pending~` | `~waiting~` | The `notify` callback has been run. | Method: `Signal.State.prototype.set(newValue)` |\n\n#### `Signal.subtle.Watcher` internal slots\n\n- `state`: May be `~watching~`, `~pending~` or `~waiting~`\n- `signals`: An ordered set of Signals which this Watcher is watching\n- `notifyCallback`: The callback which is called when something changes. Set to the first parameter passed to the constructor.\n\n#### Constructor: `new Signal.subtle.Watcher(callback)`\n\n1. `state` is set to `~waiting~`.\n1. Initialize `signals` as an empty set.\n1. `notifyCallback` is set to the callback parameter.",
  "translate": "एक Computed Signal की `state` निम्न में से कोई एक हो सकती है:\n\n- `~clean~`: Signal का मान मौजूद है और यह ज्ञात है कि वह पुराना (stale) नहीं है।\n- `~checked~`: इस Signal का (अप्रत्यक्ष) स्रोत बदल गया है; इस Signal का मान है लेकिन वह _पुराना हो सकता है_। यह पुराना है या नहीं, यह तभी पता चलेगा जब सभी तत्काल स्रोतों का मूल्यांकन हो जाएगा।\n- `~computing~`: इस Signal का callback वर्तमान में `.get()` कॉल के साइड-इफेक्ट के रूप में निष्पादित हो रहा है।\n- `~dirty~`: या तो इस Signal का मान है जो कि पुराना होने के लिए जाना जाता है, या इसे कभी मूल्यांकित नहीं किया गया है।\n\nस्थानांतरण ग्राफ़ निम्नानुसार है:\n\n```mermaid\nstateDiagram-v2\n    [*] --> dirty\n    dirty --> computing: [4]\n    computing --> clean: [5]\n    clean --> dirty: [2]\n    clean --> checked: [3]\n    checked --> clean: [6]\n    checked --> dirty: [1]\n```\n\nस्थानांतरण इस प्रकार हैं:\n| संख्या | से | तक | शर्त | एल्गोरिद्म |\n| ------ | ---- | -- | --------- | --------- |\n| 1 | `~checked~` | `~dirty~` | इस Signal का कोई तत्काल स्रोत, जो कि एक computed signal है, का मूल्यांकन किया गया है, और उसका मान बदल गया है। | एल्गोरिद्म: गंदे (dirty) computed Signal का पुनर्गणना |\n| 2 | `~clean~` | `~dirty~` | इस Signal का कोई तत्काल स्रोत, जो कि एक State है, को एक ऐसे मान के साथ सेट किया गया है जो इसके पिछले मान के बराबर नहीं है। | विधि: `Signal.State.prototype.set(newValue)` |\n| 3 | `~clean~` | `~checked~` | इस Signal का कोई पुनरावर्ती (recursive), लेकिन तत्काल नहीं, स्रोत, जो कि एक State है, को एक ऐसे मान के साथ सेट किया गया है जो इसके पिछले मान के बराबर नहीं है। | विधि: `Signal.State.prototype.set(newValue)` |\n| 4 | `~dirty~` | `~computing~` | हम `callback` को निष्पादित करने जा रहे हैं। | एल्गोरिद्म: गंदे (dirty) computed Signal का पुनर्गणना |\n| 5 | `~computing~` | `~clean~` | `callback` का मूल्यांकन पूरा हो गया है और या तो मान लौटाया गया है या अपवाद (exception) फेंका गया है। | एल्गोरिद्म: गंदे (dirty) computed Signal का पुनर्गणना |\n| 6 | `~checked~` | `~clean~` | इस Signal के सभी तत्काल स्रोतों का मूल्यांकन किया गया है, और सभी बिना बदले पाए गए हैं, इसलिए अब यह ज्ञात है कि यह पुराना नहीं है। | एल्गोरिद्म: गंदे (dirty) computed Signal का पुनर्गणना |\n\n#### `Signal.Computed` आंतरिक स्लॉट्स\n\n- `value`: Signal का पिछला कैश्ड मान, या कभी न पढ़े गए computed Signal के लिए `~uninitialized~`। मान एक अपवाद (exception) भी हो सकता है जिसे पढ़ते समय पुनः फेंका जाता है। प्रभाव signals के लिए हमेशा `undefined`।\n- `state`: `~clean~`, `~checked~`, `~computing~` या `~dirty~` हो सकता है।\n- `sources`: Signals का एक क्रमबद्ध सेट जिन पर यह Signal निर्भर करता है।\n- `sinks`: Signals का एक क्रमबद्ध सेट जो इस Signal पर निर्भर करते हैं।\n- `equals`: विकल्पों (options) में प्रदान किया गया equals मेथड।\n- `callback`: वह callback जो computed Signal का मान प्राप्त करने के लिए कॉल किया जाता है। कंस्ट्रक्टर को दिए गए पहले पैरामीटर के रूप में सेट किया जाता है।\n\n#### `Signal.Computed` कंस्ट्रक्टर\n\nकंस्ट्रक्टर निम्न सेट करता है:\n- `callback` को उसके पहले पैरामीटर पर\n- `equals` को विकल्पों के आधार पर, अनुपस्थित होने पर डिफ़ॉल्ट रूप से `Object.is`\n- `state` को `~dirty~`\n- `value` को `~uninitialized~`\n\n[AsyncContext](https://github.com/tc39/proposal-async-context) के साथ, `new Signal.Computed` को पास किया गया callback कंस्ट्रक्टर के कॉल समय की snapshot को बंद कर देता है, और इसके निष्पादन के दौरान इस snapshot को पुनर्स्थापित करता है।\n\n#### विधि: `Signal.Computed.prototype.get`\n\n1. यदि वर्तमान निष्पादन संदर्भ `frozen` है या यदि इस Signal की स्थिति `~computing~` है, या यदि यह Signal एक Watcher है और एक computed Signal का `computing` कर रहा है, तो एक अपवाद फेंके।\n1. यदि `computing` `null` नहीं है, तो इस Signal को `computing` के `sources` सेट में जोड़ें।\n1. नोट: जब तक यह किसी Watcher द्वारा देखा (watched) नहीं जाता, तब तक/जब तक हम `computing` को इस Signal के `sinks` सेट में नहीं जोड़ते।\n1. यदि इस Signal की स्थिति `~dirty~` या `~checked~` है: निम्नलिखित चरणों को दोहराएँ जब तक कि यह Signal `~clean~` न हो जाए:\n    1. `sources` के माध्यम से ऊपर की ओर पुनरावृत्त करें ताकि सबसे गहरा, बाएँ-तम (अर्थात सबसे पहले देखा गया) पुनरावर्ती स्रोत खोजा जा सके जो कि `~dirty~` के रूप में चिह्नित Computed Signal है (खोज को तब रोकें जब किसी `~clean~` Computed Signal पर पहुँचें, और इस Computed Signal को खोजने के लिए अंतिम चीज के रूप में शामिल करें)।\n    1. उस Signal पर \"गंदे (dirty) computed Signal का पुनर्गणना\" एल्गोरिद्म निष्पादित करें।\n1. इस बिंदु पर, इस Signal की स्थिति `~clean~` होगी, और कोई भी पुनरावर्ती स्रोत `~dirty~` या `~checked~` नहीं होगा। Signal का `value` लौटाएँ। यदि मान एक अपवाद है, तो उस अपवाद को पुनः फेंकें।\n\n### `Signal.subtle.Watcher` वर्ग\n\n#### `Signal.subtle.Watcher` स्थिति मशीन\n\nWatcher की `state` निम्न में से कोई एक हो सकती है:\n\n- `~waiting~`: `notify` callback चल चुका है, या Watcher नया है, लेकिन वर्तमान में कोई Signal सक्रिय रूप से नहीं देख रहा है।\n- `~watching~`: Watcher सक्रिय रूप से Signals को देख रहा है, लेकिन अभी तक कोई ऐसा परिवर्तन नहीं हुआ है जिससे `notify` callback आवश्यक हो।\n- `~pending~`: Watcher की कोई निर्भरता बदल गई है, लेकिन `notify` callback अभी तक नहीं चला है।\n\nस्थानांतरण ग्राफ़ निम्नानुसार है:\n\n```mermaid\nstateDiagram-v2\n    [*] --> waiting\n    waiting --> watching: [1]\n    watching --> waiting: [2]\n    watching --> pending: [3]\n    pending --> waiting: [4]\n```\n\nस्थानांतरण इस प्रकार हैं:\n| संख्या | से | तक | शर्त | एल्गोरिद्म |\n| ------ | ---- | -- | --------- | --------- |\n| 1 | `~waiting~` | `~watching~` | Watcher की `watch` विधि को कॉल किया गया है। | विधि: `Signal.subtle.Watcher.prototype.watch(...signals)` |\n| 2 | `~watching~` | `~waiting~` | Watcher की `unwatch` विधि को कॉल किया गया है, और अंतिम देखा गया signal हटा दिया गया है। | विधि: `Signal.subtle.Watcher.prototype.unwatch(...signals)` |\n| 3 | `~watching~` | `~pending~` | कोई देखा गया signal बदल गया होगा। | विधि: `Signal.State.prototype.set(newValue)` |\n| 4 | `~pending~` | `~waiting~` | `notify` callback चल चुका है। | विधि: `Signal.State.prototype.set(newValue)` |\n\n#### `Signal.subtle.Watcher` आंतरिक स्लॉट्स\n\n- `state`: `~watching~`, `~pending~` या `~waiting~` हो सकता है\n- `signals`: एक क्रमबद्ध सेट जिन Signals को यह Watcher देख रहा है\n- `notifyCallback`: वह callback जो कुछ बदलने पर कॉल किया जाता है। कंस्ट्रक्टर को दिए गए पहले पैरामीटर के रूप में सेट किया जाता है।\n\n#### कंस्ट्रक्टर: `new Signal.subtle.Watcher(callback)`\n\n1. `state` को `~waiting~` पर सेट किया जाता है।\n1. `signals` को एक खाली सेट के रूप में इनिशियलाइज़ करें।\n1. `notifyCallback` को callback पैरामीटर पर सेट किया जाता है।",
  "status": "ok"
}