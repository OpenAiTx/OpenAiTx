{
  "id": 1,
  "origin": "# 🚦 JavaScript Signals standard proposal🚦\n<img align=right src=\"Signals.svg\" alt=\"Signals logo\" width=100>\n\nStage 1 ([explanation](https://tc39.es/process-document/))\n\nTC39 proposal champions: Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nOriginal authors: Rob Eisenberg and Daniel Ehrenberg\n\nThis document describes an early common direction for signals in JavaScript, similar to the Promises/A+ effort which preceded the Promises standardized by TC39 in ES2015. Try it for yourself, using [a polyfill](https://github.com/proposal-signals/signal-polyfill).\n\nSimilarly to Promises/A+, this effort focuses on aligning the JavaScript ecosystem. If this alignment is successful, then a standard could emerge, based on that experience. Several framework authors are collaborating here on a common model which could back their reactivity core. The current draft is based on design input from the authors/maintainers of [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a), and more…\n\nDifferently from Promises/A+, we're not trying to solve for a common developer-facing surface API, but rather the precise core semantics of the underlying signal graph. This proposal does include a fully concrete API, but the API is not targeted to most application developers. Instead, the signal API here is a better fit for frameworks to build on top of, providing interoperability through common signal graph and auto-tracking mechanism.\n\nThe plan for this proposal is to do significant early prototyping, including integration into several frameworks, before advancing beyond Stage 1. We are only interested in standardizing Signals if they are suitable for use in practice in multiple frameworks, and provide real benefits over framework-provided signals. We hope that significant early prototyping will give us this information. See \"Status and development plan\" below for more details.\n\n## Background: Why Signals?\n\nTo develop a complicated user interface (UI), JavaScript application developers need to store, compute, invalidate, sync, and push state to the application's view layer in an efficient way. UIs commonly involve more than just managing simple values, but often involve rendering computed state which is dependent on a complex tree of other values or state that is also computed itself. The goal of Signals is to provide infrastructure for managing such application state so developers can focus on business logic rather than these repetitive details.\n\nSignal-like constructs have independently been found to be useful in non-UI contexts as well, particularly in build systems to avoid unnecessary rebuilds.\n\nSignals are used in reactive programming to remove the need to manage updating in applications.\n\n> A declarative programming model for updating based on changes to state.\n\nfrom _[What is Reactivity?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### Example - A VanillaJS Counter\n\nGiven a variable, `counter`, you want to render into the DOM whether the counter is even or odd. Whenever the `counter` changes, you want to update the DOM with the latest parity. In Vanilla JS, you might have something like this:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simulate external updates to counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTE]  \n> Globals are used here for demonstration purposes only. Proper state management has many solutions, and the examples in this proposal are meant to be as minimal as possible. This proposal does not encourage global variables.\n\n\nThis has a number of problems...\n\n* The `counter` setup is noisy and boilerplate-heavy.\n* The `counter` state is tightly coupled to the rendering system.\n* If the `counter` changes but `parity` does not (e.g. counter goes from 2 to 4), then we do unnecessary computation of the parity and unnecessary rendering.\n* What if another part of our UI just wants to render when the `counter` updates?\n* What if another part of our UI is dependent on `isEven` or `parity` alone?\n\nEven in this relatively simple scenario, a number of issues arise quickly. We could try to work around these by introducing pub/sub for the `counter`. This would allow additional consumers of the `counter` could subscribe to add their own reactions to state changes.\n\nHowever, we're still stuck with the following problems:\n\n* The render function, which is only dependent on `parity` must instead \"know\" that it actually needs to subscribe to `counter`.\n* It isn't possible to update UI based on either `isEven` or `parity` alone, without directly interacting with `counter`.\n* We've increased our boilerplate. Any time you are using something, it's not just a matter of calling a function or reading a variable, but instead subscribing and doing updates there. Managing unsubscription is also especially complicated.\n\nNow, we could solve a couple issues by adding pub/sub not just to `counter` but also to `isEven` and `parity`. We would then have to subscribe `isEven` to `counter`,  `parity` to `isEven`, and `render` to `parity`. Unfortunately, not only has our boilerplate code exploded, but we're stuck with a ton of bookkeeping of subscriptions, and a potential memory leak disaster if we don't properly clean everything up in the right way. So, we've solved some issues but created a whole new category of problems and a lot of code. To make matters worse, we have to go through this entire process for every piece of state in our system.\n\n### Introducing Signals\n\nData binding abstractions in UIs for the model and view have long been core to UI frameworks across multiple programming languages, despite the absence of any such mechanism built into JS or the web platform. Within JS frameworks and libraries, there has been a large amount of experimentation across different ways to represent this binding, and experience has shown the power of one-way data flow in conjunction with a first-class data type representing a cell of state or computation derived from other data, now often called \"Signals\".\nThis first-class reactive value approach seems to have made its first popular appearance in open-source JavaScript web frameworks with [Knockout](https://knockoutjs.com/) [in 2010](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/). In the years since, many variations and implementations have been created. Within the last 3-4 years, the Signal primitive and related approaches have gained further traction, with nearly every modern JavaScript library or framework having something similar, under one name or another.\n\nTo understand Signals, let's take a look at the above example, re-imagined with a Signal API further articulated below.\n\n#### Example - A Signals Counter\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// A library or framework defines effects based on other Signal primitives\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simulate external updates to counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nThere are a few things we can see right away:\n* We've eliminated the noisy boilerplate around the `counter` variable from our previous example.\n* There is a unified API to handle values, computations, and side effects.\n* There's no circular reference problem or upside down dependencies between `counter` and `render`.\n* There are no manual subscriptions, nor is there any need for bookkeeping.\n* There is a means of controlling side-effect timing/scheduling.\n\nSignals give us much more than what can be seen on the surface of the API though:",
  "translate": "# 🚦 Propozycja standardu JavaScript Signals 🚦\n<img align=right src=\"https://raw.githubusercontent.com/tc39/proposal-signals/main/Signals.svg\" alt=\"Signals logo\" width=100>\n\nEtap 1 ([wyjaśnienie](https://tc39.es/process-document/))\n\nLiderzy propozycji TC39: Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nOryginalni autorzy: Rob Eisenberg i Daniel Ehrenberg\n\nTen dokument opisuje wczesny wspólny kierunek dla sygnałów w JavaScript, podobnie jak wysiłek Promises/A+, który poprzedził ustandaryzowanie Promise przez TC39 w ES2015. Wypróbuj samodzielnie, korzystając z [polyfill](https://github.com/proposal-signals/signal-polyfill).\n\nPodobnie jak Promises/A+, ten wysiłek koncentruje się na ujednoliceniu ekosystemu JavaScript. Jeśli to ujednolicenie się powiedzie, na podstawie tych doświadczeń może powstać standard. Kilku autorów frameworków współpracuje tutaj nad wspólnym modelem, który mógłby stanowić podstawę ich mechanizmów reaktywności. Aktualny szkic opiera się na wkładzie projektowym autorów/opiekunów [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a) i innych…\n\nW odróżnieniu od Promises/A+, nie próbujemy rozwiązywać wspólnego API dla deweloperów, ale raczej precyzyjne, podstawowe semantyki leżącego u podstaw grafu sygnałów. Propozycja ta zawiera w pełni konkretny interfejs API, ale nie jest on przeznaczony dla większości programistów aplikacji. Zamiast tego, przedstawione tu API sygnałów lepiej nadaje się jako podstawa do budowy frameworków, zapewniając interoperacyjność poprzez wspólny graf sygnałów i mechanizm automatycznego śledzenia zależności.\n\nPlan dla tej propozycji zakłada przeprowadzenie znacznych wczesnych prototypów, w tym integrację z kilkoma frameworkami, zanim wyjdziemy poza Etap 1. Jesteśmy zainteresowani standaryzacją Signals tylko wtedy, gdy będą one praktycznie użyteczne w wielu frameworkach i zapewnią realne korzyści w porównaniu do sygnałów dostarczanych przez frameworki. Mamy nadzieję, że szeroko zakrojone prototypowanie dostarczy nam tych informacji. Zobacz \"Status i plan rozwoju\" poniżej, aby uzyskać więcej szczegółów.\n\n## Tło: Dlaczego Signals?\n\nAby stworzyć złożony interfejs użytkownika (UI), programiści aplikacji JavaScript muszą przechowywać, obliczać, unieważniać, synchronizować i przekazywać stan do warstwy widoku aplikacji w efektywny sposób. UI zwykle obejmuje więcej niż tylko zarządzanie prostymi wartościami; często wymaga renderowania stanu wyliczonego na podstawie złożonego drzewa innych wartości lub stanu, który również jest obliczany. Celem Signals jest zapewnienie infrastruktury do zarządzania takim stanem aplikacji, aby programiści mogli skupić się na logice biznesowej, zamiast na powtarzalnych detalach.\n\nKonstrukcje podobne do sygnałów okazały się przydatne także w kontekstach nie związanych z UI, szczególnie w systemach budowania, aby unikać niepotrzebnych przebudów.\n\nSygnały są używane w programowaniu reaktywnym, aby wyeliminować potrzebę ręcznego zarządzania aktualizacją w aplikacjach.\n\n> Deklaratywny model programowania do aktualizacji na podstawie zmian stanu.\n\nz _[What is Reactivity?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### Przykład – licznik w VanillaJS\n\nMając zmienną `counter`, chcesz wyrenderować w DOM informację, czy licznik jest parzysty czy nieparzysty. Za każdym razem, gdy `counter` się zmienia, chcesz zaktualizować DOM z najnowszą parzystością. W czystym JS możesz mieć coś takiego:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Symulacja zewnętrznych aktualizacji licznika...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTE]  \n> Zmienne globalne są tutaj używane wyłącznie do celów demonstracyjnych. Prawidłowe zarządzanie stanem ma wiele rozwiązań, a przykłady w tej propozycji mają być jak najbardziej minimalne. Propozycja nie zaleca używania zmiennych globalnych.\n\n\nTo rozwiązanie ma kilka problemów...\n\n* Konfiguracja `counter` jest rozbudowana i pełna powtarzalnego kodu.\n* Stan `counter` jest silnie powiązany z systemem renderowania.\n* Jeśli `counter` się zmienia, ale `parity` nie (np. licznik przechodzi z 2 na 4), wykonujemy niepotrzebne obliczenia parzystości i zbędne renderowanie.\n* Co jeśli inna część UI chce się wyrenderować tylko podczas aktualizacji `counter`?\n* Co jeśli inna część UI zależy wyłącznie od `isEven` lub `parity`?\n\nNawet w tym stosunkowo prostym scenariuszu szybko pojawia się szereg problemów. Możemy próbować je obejść, wprowadzając pub/sub dla `counter`. Pozwoliłoby to dodatkowym odbiorcom `counter` zasubskrybować i reagować na zmiany stanu.\n\nJednak nadal pozostają następujące problemy:\n\n* Funkcja renderująca, która zależy tylko od `parity`, musi „wiedzieć”, że tak naprawdę powinna subskrybować `counter`.\n* Nie da się aktualizować UI na podstawie samego `isEven` lub `parity` bez bezpośredniej interakcji z `counter`.\n* Zwiększyliśmy ilość powtarzalnego kodu. Za każdym razem, gdy coś wykorzystujemy, nie wystarczy już wywołać funkcji lub odczytać zmiennej, ale trzeba subskrybować i obsługiwać tam aktualizacje. Zarządzanie wypisaniem z subskrypcji jest również szczególnie skomplikowane.\n\nMożemy rozwiązać kilka problemów, dodając pub/sub nie tylko do `counter`, ale także do `isEven` i `parity`. Wtedy musielibyśmy subskrybować `isEven` do `counter`, `parity` do `isEven`, a `render` do `parity`. Niestety, nie tylko nasz kod eksplodował objętościowo, ale mamy mnóstwo pracy z zarządzaniem subskrypcjami i potencjalną katastrofą wycieków pamięci, jeśli nie posprzątamy wszystkiego we właściwy sposób. Rozwiązaliśmy więc część problemów, ale stworzyliśmy zupełnie nową kategorię trudności i dużo kodu. Co gorsza, cały ten proces trzeba powtarzać dla każdego fragmentu stanu w systemie.\n\n### Wprowadzenie Signals\n\nAbstrakcje wiązania danych w UI między modelem a widokiem od dawna są podstawą frameworków UI w różnych językach programowania, mimo braku takiego mechanizmu wbudowanego w JS czy platformę webową. W ramach frameworków i bibliotek JS eksperymentowano z różnymi sposobami reprezentacji tego powiązania, a doświadczenie pokazało siłę jednokierunkowego przepływu danych w połączeniu z pierwszorzędnym typem danych reprezentującym komórkę stanu lub obliczenie pochodne od innych danych, obecnie często nazywane „Signals”.\nTo podejście z pierwszorzędnymi wartościami reaktywnymi po raz pierwszy pojawiło się w popularnych open-source'owych frameworkach JavaScript wraz z [Knockout](https://knockoutjs.com/) [w 2010 roku](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/). Od tego czasu powstało wiele wariacji i implementacji. W ciągu ostatnich 3-4 lat prymityw Signal i pokrewne podejścia zyskały jeszcze większą popularność, a niemal każda nowoczesna biblioteka lub framework JavaScript ma coś podobnego – pod jedną lub drugą nazwą.\n\nAby zrozumieć Signals, spójrzmy na powyższy przykład, przeprojektowany z użyciem API Signal opisanym poniżej.\n\n#### Przykład – licznik z Signals\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// Biblioteka lub framework definiuje efekty bazujące na innych prymitywach Signal\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Symulacja zewnętrznych aktualizacji licznika...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nOd razu widać kilka rzeczy:\n* Wyeliminowaliśmy rozbudowaną powtarzalność wokół zmiennej `counter` z poprzedniego przykładu.\n* Jest jednolite API do obsługi wartości, obliczeń i efektów ubocznych.\n* Nie ma problemu z cyklicznymi referencjami ani odwróconymi zależnościami pomiędzy `counter` a `render`.\n* Nie ma ręcznych subskrypcji ani potrzeby prowadzenia ewidencji zależności.\n* Jest możliwość kontrolowania czasu/schedulingu efektów ubocznych.\n\nSignals dają nam znacznie więcej niż to, co widać na powierzchni API:",
  "status": "ok"
}