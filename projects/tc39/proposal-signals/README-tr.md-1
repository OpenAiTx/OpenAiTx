{
  "id": 1,
  "origin": "# 🚦 JavaScript Signals standard proposal🚦\n<img align=right src=\"Signals.svg\" alt=\"Signals logo\" width=100>\n\nStage 1 ([explanation](https://tc39.es/process-document/))\n\nTC39 proposal champions: Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nOriginal authors: Rob Eisenberg and Daniel Ehrenberg\n\nThis document describes an early common direction for signals in JavaScript, similar to the Promises/A+ effort which preceded the Promises standardized by TC39 in ES2015. Try it for yourself, using [a polyfill](https://github.com/proposal-signals/signal-polyfill).\n\nSimilarly to Promises/A+, this effort focuses on aligning the JavaScript ecosystem. If this alignment is successful, then a standard could emerge, based on that experience. Several framework authors are collaborating here on a common model which could back their reactivity core. The current draft is based on design input from the authors/maintainers of [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a), and more…\n\nDifferently from Promises/A+, we're not trying to solve for a common developer-facing surface API, but rather the precise core semantics of the underlying signal graph. This proposal does include a fully concrete API, but the API is not targeted to most application developers. Instead, the signal API here is a better fit for frameworks to build on top of, providing interoperability through common signal graph and auto-tracking mechanism.\n\nThe plan for this proposal is to do significant early prototyping, including integration into several frameworks, before advancing beyond Stage 1. We are only interested in standardizing Signals if they are suitable for use in practice in multiple frameworks, and provide real benefits over framework-provided signals. We hope that significant early prototyping will give us this information. See \"Status and development plan\" below for more details.\n\n## Background: Why Signals?\n\nTo develop a complicated user interface (UI), JavaScript application developers need to store, compute, invalidate, sync, and push state to the application's view layer in an efficient way. UIs commonly involve more than just managing simple values, but often involve rendering computed state which is dependent on a complex tree of other values or state that is also computed itself. The goal of Signals is to provide infrastructure for managing such application state so developers can focus on business logic rather than these repetitive details.\n\nSignal-like constructs have independently been found to be useful in non-UI contexts as well, particularly in build systems to avoid unnecessary rebuilds.\n\nSignals are used in reactive programming to remove the need to manage updating in applications.\n\n> A declarative programming model for updating based on changes to state.\n\nfrom _[What is Reactivity?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### Example - A VanillaJS Counter\n\nGiven a variable, `counter`, you want to render into the DOM whether the counter is even or odd. Whenever the `counter` changes, you want to update the DOM with the latest parity. In Vanilla JS, you might have something like this:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simulate external updates to counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTE]  \n> Globals are used here for demonstration purposes only. Proper state management has many solutions, and the examples in this proposal are meant to be as minimal as possible. This proposal does not encourage global variables.\n\n\nThis has a number of problems...\n\n* The `counter` setup is noisy and boilerplate-heavy.\n* The `counter` state is tightly coupled to the rendering system.\n* If the `counter` changes but `parity` does not (e.g. counter goes from 2 to 4), then we do unnecessary computation of the parity and unnecessary rendering.\n* What if another part of our UI just wants to render when the `counter` updates?\n* What if another part of our UI is dependent on `isEven` or `parity` alone?\n\nEven in this relatively simple scenario, a number of issues arise quickly. We could try to work around these by introducing pub/sub for the `counter`. This would allow additional consumers of the `counter` could subscribe to add their own reactions to state changes.\n\nHowever, we're still stuck with the following problems:\n\n* The render function, which is only dependent on `parity` must instead \"know\" that it actually needs to subscribe to `counter`.\n* It isn't possible to update UI based on either `isEven` or `parity` alone, without directly interacting with `counter`.\n* We've increased our boilerplate. Any time you are using something, it's not just a matter of calling a function or reading a variable, but instead subscribing and doing updates there. Managing unsubscription is also especially complicated.\n\nNow, we could solve a couple issues by adding pub/sub not just to `counter` but also to `isEven` and `parity`. We would then have to subscribe `isEven` to `counter`,  `parity` to `isEven`, and `render` to `parity`. Unfortunately, not only has our boilerplate code exploded, but we're stuck with a ton of bookkeeping of subscriptions, and a potential memory leak disaster if we don't properly clean everything up in the right way. So, we've solved some issues but created a whole new category of problems and a lot of code. To make matters worse, we have to go through this entire process for every piece of state in our system.\n\n### Introducing Signals\n\nData binding abstractions in UIs for the model and view have long been core to UI frameworks across multiple programming languages, despite the absence of any such mechanism built into JS or the web platform. Within JS frameworks and libraries, there has been a large amount of experimentation across different ways to represent this binding, and experience has shown the power of one-way data flow in conjunction with a first-class data type representing a cell of state or computation derived from other data, now often called \"Signals\".\nThis first-class reactive value approach seems to have made its first popular appearance in open-source JavaScript web frameworks with [Knockout](https://knockoutjs.com/) [in 2010](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/). In the years since, many variations and implementations have been created. Within the last 3-4 years, the Signal primitive and related approaches have gained further traction, with nearly every modern JavaScript library or framework having something similar, under one name or another.\n\nTo understand Signals, let's take a look at the above example, re-imagined with a Signal API further articulated below.\n\n#### Example - A Signals Counter\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// A library or framework defines effects based on other Signal primitives\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simulate external updates to counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nThere are a few things we can see right away:\n* We've eliminated the noisy boilerplate around the `counter` variable from our previous example.\n* There is a unified API to handle values, computations, and side effects.\n* There's no circular reference problem or upside down dependencies between `counter` and `render`.\n* There are no manual subscriptions, nor is there any need for bookkeeping.\n* There is a means of controlling side-effect timing/scheduling.\n\nSignals give us much more than what can be seen on the surface of the API though:",
  "translate": "# 🚦 JavaScript Signals standart teklifi 🚦\n<img align=right src=\"https://raw.githubusercontent.com/tc39/proposal-signals/main/Signals.svg\" alt=\"Signals logo\" width=100>\n\nAşama 1 ([açıklama](https://tc39.es/process-document/))\n\nTC39 teklif şampiyonları: Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nOrijinal yazarlar: Rob Eisenberg ve Daniel Ehrenberg\n\nBu belge, JavaScript'te sinyaller için Promises/A+ çabasına benzer şekilde, ES2015'te TC39 tarafından standartlaştırılan Promises'tan önceki erken ortak bir yönü açıklamaktadır. [Bir polyfill](https://github.com/proposal-signals/signal-polyfill) kullanarak kendiniz deneyin.\n\nPromises/A+'ya benzer şekilde, bu çaba JavaScript ekosistemini hizalamaya odaklanıyor. Bu hizalama başarılı olursa, o deneyime dayalı olarak bir standart ortaya çıkabilir. Birkaç framework yazarı burada reaktivite çekirdeklerini destekleyebilecek ortak bir model üzerinde iş birliği yapıyor. Mevcut taslak, [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a) ve daha fazlasının yazarlarının/koruyucularının tasarım girdilerine dayanmaktadır…\n\nPromises/A+'dan farklı olarak, ortak bir geliştiriciye yönelik yüzey API'si çözmeye çalışmıyoruz, bunun yerine temel sinyal grafiğinin kesin çekirdek semantiğini hedefliyoruz. Bu teklif, tamamen somut bir API de içermektedir, ancak API çoğu uygulama geliştiricisine yönelik değildir. Bunun yerine, buradaki sinyal API'si, frameworklerin üzerine inşa edebileceği, ortak sinyal grafiği ve otomatik izleme mekanizması yoluyla birlikte çalışabilirlik sağlayan bir yapıdır.\n\nBu teklifin planı, Aşama 1'in ötesine geçmeden önce önemli erken prototipleme yapmak, birkaç framework'e entegrasyon dahil etmektir. Sinyallerin, birden çok framework'te pratikte kullanıma uygun olmaları ve frameworklerin sağladığı sinyallere göre gerçek faydalar sağlamaları durumunda standartlaştırılmasıyla ilgileniyoruz. Erken prototiplemenin bize bu bilgiyi vereceğini umuyoruz. Daha fazla ayrıntı için aşağıdaki \"Durum ve geliştirme planı\" bölümüne bakınız.\n\n## Arka Plan: Neden Sinyaller?\n\nKarmaşık bir kullanıcı arayüzü (UI) geliştirmek için, JavaScript uygulama geliştiricilerinin uygulamanın görünüm katmanına durumu verimli bir şekilde depolaması, hesaplaması, geçersiz kılması, senkronize etmesi ve aktarması gerekir. UI'ler genellikle yalnızca basit değerleri yönetmekle kalmaz, aynı zamanda başka değerler veya kendi başına hesaplanan karmaşık bir ağaçtan türetilen durumları da işleyerek hesaplanmış durumların işlenmesini gerektirir. Sinyallerin hedefi, bu tür uygulama durumlarını yönetmek için altyapı sağlamaktır, böylece geliştiriciler bu tekrarlayan ayrıntılar yerine iş mantığına odaklanabilirler.\n\nSinyal benzeri yapılar, özellikle gereksiz yeniden derlemeleri önlemek için, UI dışı bağlamlarda da bağımsız olarak faydalı bulunmuştur.\n\nSinyaller, uygulamalarda güncellemeyi yönetme ihtiyacını ortadan kaldırmak için reaktif programlamada kullanılır.\n\n> Durum değişikliklerine dayalı olarak güncelleme için deklaratif bir programlama modeli.\n\n_[Reactivity Nedir?](https://www.pzuraq.com/blog/what-is-reactivity)_'den.\n\n#### Örnek - VanillaJS Sayaç\n\nBir `counter` değişkeniniz olduğunu ve sayacın çift mi tek mi olduğunu DOM'da göstermek istediğinizi düşünelim. `counter` her değiştiğinde, DOM'u en son tek/çiftlik ile güncellemek istiyorsunuz. Vanilla JS'de şöyle bir şeyiniz olabilir:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simulate external updates to counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTE]  \n> Global değişkenler yalnızca gösterim amacıyla kullanılmıştır. Uygun durum yönetimi için birçok çözüm vardır ve bu teklifteki örneklerin mümkün olduğunca minimal olması amaçlanmıştır. Bu teklif global değişkenleri teşvik etmez.\n\n\nBunun birkaç sorunu var...\n\n* `counter` kurulumu gereksiz yere gürültülü ve şablon kodu ağır.\n* `counter` durumu, render sistemiyle sıkı bir şekilde bağlı.\n* `counter` değiştiğinde ancak `parity` değişmediğinde (örneğin sayaç 2'den 4'e çıktığında), gereksiz yere parity hesaplaması ve render işlemi yapıyoruz.\n* Ya UI'nın başka bir kısmı yalnızca `counter` güncellendiğinde render yapmak isterse?\n* Ya UI'nın başka bir kısmı yalnızca `isEven` veya `parity`'ye bağlıysa?\n\nBu nispeten basit senaryoda bile, hızla bir dizi sorun ortaya çıkıyor. Bunların etrafından dolaşmak için `counter` için bir pub/sub (yayınla/abone ol) sistemi ekleyebiliriz. Bu, `counter`'ın ek tüketicilerinin kendi tepkilerini durum değişikliklerine eklemek için abone olmasına izin verir.\n\nAncak, hâlâ şu sorunlarla karşı karşıyayız:\n\n* Yalnızca `parity`'ye bağlı olan render fonksiyonu, aslında `counter`'a abone olması gerektiğini \"bilmek\" zorunda.\n* Sadece `isEven` veya `parity`'ye dayalı olarak UI'yı güncellemek mümkün değildir, doğrudan `counter` ile etkileşim olmadan.\n* Şablon kodumuz arttı. Bir şeyi kullandığınız her seferinde, sadece bir fonksiyon çağırmak veya bir değişken okumak değil, ayrıca abone olmak ve orada güncelleme yapmak gerekiyor. Abonelikten çıkmayı yönetmek de özellikle karmaşık.\n\nŞimdi, sadece `counter`'a değil, aynı zamanda `isEven` ve `parity`'ye de pub/sub ekleyerek birkaç sorunu çözebiliriz. O zaman `isEven`'ı `counter`'a, `parity`'yi `isEven`'a ve `render`'ı `parity`'ye abone etmemiz gerekir. Ne yazık ki, şablon kodumuz yalnızca patlamakla kalmadı, aynı zamanda bir sürü abonelik takibiyle uğraşıyoruz ve her şeyi doğru şekilde temizlemezsek potansiyel bir bellek sızıntısı felaketiyle karşı karşıyayız. Yani, bazı sorunları çözdük ama yepyeni bir sorun kategorisi ve çok fazla kod oluşturduk. Dahası, sistemimizdeki her bir durum parçası için bu sürecin tamamından geçmemiz gerekiyor.\n\n### Sinyallerle Tanışın\n\nModel ve görünüm için veri bağlama soyutlamaları, JavaScript veya web platformunda böyle bir mekanizma olmasa da, birden fazla programlama dili arasında UI frameworklerinin temelini uzun süredir oluşturuyor. JS frameworkleri ve kütüphanelerinde, bu bağlamayı temsil etmenin farklı yolları üzerinde çok sayıda deneme yapıldı ve deneyimler, birinci sınıf bir veri tipinin diğer verilerden türetilen bir durum veya hesaplama hücresini temsil etmesiyle birlikte tek yönlü veri akışının gücünü gösterdi; bu türe artık sıklıkla \"Sinyal\" deniyor.\nBu birinci sınıf reaktif değer yaklaşımı, açık kaynak JavaScript web frameworklerinde [Knockout](https://knockoutjs.com/) ile [2010 yılında](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/) popülerliğini ilk kez kazanmış gibi görünüyor. O zamandan bu yana birçok varyasyon ve uygulama oluşturuldu. Son 3-4 yıl içinde, Signal temel tipi ve ilgili yaklaşımlar daha da yaygınlaştı; neredeyse her modern JavaScript kütüphanesi veya frameworkü, bir şekilde buna benzer bir şeye sahip.\n\nSinyalleri anlamak için, yukarıdaki örneğe, aşağıda daha ayrıntılı olarak açıklanan bir Signal API'si ile yeniden bakalım.\n\n#### Örnek - Sinyallerle Sayaç\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// Bir kütüphane veya framework, diğer Signal primitiflerine dayalı etkiler tanımlar\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Sayaçta harici güncellemeleri simüle edin...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nHemen görebileceğimiz birkaç şey var:\n* Önceki örneğimizdeki `counter` değişkeninin etrafındaki gürültülü şablon kodunu ortadan kaldırdık.\n* Değerleri, hesaplamaları ve yan etkileri yönetmek için birleşik bir API var.\n* `counter` ve `render` arasında dairesel referans sorunu veya tersine bağımlılıklar yok.\n* Hiçbir manuel abonelik veya takip etme ihtiyacı yok.\n* Yan etkilerin zamanlamasını/planlanmasını kontrol etmenin bir yolu var.\n\nSinyaller, API'nin yüzeyinde görülebilenden çok daha fazlasını sunar:",
  "status": "ok"
}