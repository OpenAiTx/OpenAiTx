{
  "id": 1,
  "origin": "# üö¶ JavaScript Signals standard proposalüö¶\n<img align=right src=\"Signals.svg\" alt=\"Signals logo\" width=100>\n\nStage 1 ([explanation](https://tc39.es/process-document/))\n\nTC39 proposal champions: Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nOriginal authors: Rob Eisenberg and Daniel Ehrenberg\n\nThis document describes an early common direction for signals in JavaScript, similar to the Promises/A+ effort which preceded the Promises standardized by TC39 in ES2015. Try it for yourself, using [a polyfill](https://github.com/proposal-signals/signal-polyfill).\n\nSimilarly to Promises/A+, this effort focuses on aligning the JavaScript ecosystem. If this alignment is successful, then a standard could emerge, based on that experience. Several framework authors are collaborating here on a common model which could back their reactivity core. The current draft is based on design input from the authors/maintainers of [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a), and more‚Ä¶\n\nDifferently from Promises/A+, we're not trying to solve for a common developer-facing surface API, but rather the precise core semantics of the underlying signal graph. This proposal does include a fully concrete API, but the API is not targeted to most application developers. Instead, the signal API here is a better fit for frameworks to build on top of, providing interoperability through common signal graph and auto-tracking mechanism.\n\nThe plan for this proposal is to do significant early prototyping, including integration into several frameworks, before advancing beyond Stage 1. We are only interested in standardizing Signals if they are suitable for use in practice in multiple frameworks, and provide real benefits over framework-provided signals. We hope that significant early prototyping will give us this information. See \"Status and development plan\" below for more details.\n\n## Background: Why Signals?\n\nTo develop a complicated user interface (UI), JavaScript application developers need to store, compute, invalidate, sync, and push state to the application's view layer in an efficient way. UIs commonly involve more than just managing simple values, but often involve rendering computed state which is dependent on a complex tree of other values or state that is also computed itself. The goal of Signals is to provide infrastructure for managing such application state so developers can focus on business logic rather than these repetitive details.\n\nSignal-like constructs have independently been found to be useful in non-UI contexts as well, particularly in build systems to avoid unnecessary rebuilds.\n\nSignals are used in reactive programming to remove the need to manage updating in applications.\n\n> A declarative programming model for updating based on changes to state.\n\nfrom _[What is Reactivity?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### Example - A VanillaJS Counter\n\nGiven a variable, `counter`, you want to render into the DOM whether the counter is even or odd. Whenever the `counter` changes, you want to update the DOM with the latest parity. In Vanilla JS, you might have something like this:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simulate external updates to counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTE]  \n> Globals are used here for demonstration purposes only. Proper state management has many solutions, and the examples in this proposal are meant to be as minimal as possible. This proposal does not encourage global variables.\n\n\nThis has a number of problems...\n\n* The `counter` setup is noisy and boilerplate-heavy.\n* The `counter` state is tightly coupled to the rendering system.\n* If the `counter` changes but `parity` does not (e.g. counter goes from 2 to 4), then we do unnecessary computation of the parity and unnecessary rendering.\n* What if another part of our UI just wants to render when the `counter` updates?\n* What if another part of our UI is dependent on `isEven` or `parity` alone?\n\nEven in this relatively simple scenario, a number of issues arise quickly. We could try to work around these by introducing pub/sub for the `counter`. This would allow additional consumers of the `counter` could subscribe to add their own reactions to state changes.\n\nHowever, we're still stuck with the following problems:\n\n* The render function, which is only dependent on `parity` must instead \"know\" that it actually needs to subscribe to `counter`.\n* It isn't possible to update UI based on either `isEven` or `parity` alone, without directly interacting with `counter`.\n* We've increased our boilerplate. Any time you are using something, it's not just a matter of calling a function or reading a variable, but instead subscribing and doing updates there. Managing unsubscription is also especially complicated.\n\nNow, we could solve a couple issues by adding pub/sub not just to `counter` but also to `isEven` and `parity`. We would then have to subscribe `isEven` to `counter`,  `parity` to `isEven`, and `render` to `parity`. Unfortunately, not only has our boilerplate code exploded, but we're stuck with a ton of bookkeeping of subscriptions, and a potential memory leak disaster if we don't properly clean everything up in the right way. So, we've solved some issues but created a whole new category of problems and a lot of code. To make matters worse, we have to go through this entire process for every piece of state in our system.\n\n### Introducing Signals\n\nData binding abstractions in UIs for the model and view have long been core to UI frameworks across multiple programming languages, despite the absence of any such mechanism built into JS or the web platform. Within JS frameworks and libraries, there has been a large amount of experimentation across different ways to represent this binding, and experience has shown the power of one-way data flow in conjunction with a first-class data type representing a cell of state or computation derived from other data, now often called \"Signals\".\nThis first-class reactive value approach seems to have made its first popular appearance in open-source JavaScript web frameworks with [Knockout](https://knockoutjs.com/) [in 2010](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/). In the years since, many variations and implementations have been created. Within the last 3-4 years, the Signal primitive and related approaches have gained further traction, with nearly every modern JavaScript library or framework having something similar, under one name or another.\n\nTo understand Signals, let's take a look at the above example, re-imagined with a Signal API further articulated below.\n\n#### Example - A Signals Counter\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// A library or framework defines effects based on other Signal primitives\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simulate external updates to counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nThere are a few things we can see right away:\n* We've eliminated the noisy boilerplate around the `counter` variable from our previous example.\n* There is a unified API to handle values, computations, and side effects.\n* There's no circular reference problem or upside down dependencies between `counter` and `render`.\n* There are no manual subscriptions, nor is there any need for bookkeeping.\n* There is a means of controlling side-effect timing/scheduling.\n\nSignals give us much more than what can be seen on the surface of the API though:",
  "translate": "# üö¶ Proposition de standard JavaScript Signals üö¶\n<img align=right src=\"https://raw.githubusercontent.com/tc39/proposal-signals/main/Signals.svg\" alt=\"Logo Signals\" width=100>\n\n√âtape 1 ([explication](https://tc39.es/process-document/))\n\nChampions de la proposition TC39 : Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nAuteurs originaux : Rob Eisenberg et Daniel Ehrenberg\n\nCe document d√©crit une premi√®re orientation commune pour les signaux en JavaScript, similaire √† l‚Äôeffort Promises/A+ qui a pr√©c√©d√© la standardisation des Promises par TC39 dans ES2015. Essayez-le vous-m√™me, en utilisant [un polyfill](https://github.com/proposal-signals/signal-polyfill).\n\nDe mani√®re similaire √† Promises/A+, cet effort vise √† aligner l‚Äô√©cosyst√®me JavaScript. Si cet alignement est r√©ussi, une norme pourrait √©merger, bas√©e sur cette exp√©rience. Plusieurs auteurs de frameworks collaborent ici sur un mod√®le commun qui pourrait servir de base √† leur c≈ìur de r√©activit√©. Le brouillon actuel se base sur les retours de conception des auteurs/mainteneurs de [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a), et plus encore‚Ä¶\n\nContrairement √† Promises/A+, nous ne cherchons pas √† r√©soudre une API commune orient√©e d√©veloppeur, mais plut√¥t √† d√©finir pr√©cis√©ment les s√©mantiques du c≈ìur du graphe de signaux sous-jacent. Cette proposition inclut une API concr√®te compl√®te, mais cette API n‚Äôest pas destin√©e √† la majorit√© des d√©veloppeurs d‚Äôapplications. Au contraire, l‚ÄôAPI de signal propos√©e ici est mieux adapt√©e pour les frameworks qui pourront se baser dessus, offrant l‚Äôinterop√©rabilit√© via un graphe de signaux commun et un m√©canisme d‚Äôauto-suivi.\n\nLe plan pour cette proposition est de faire des prototypes pr√©coces significatifs, y compris l‚Äôint√©gration dans plusieurs frameworks, avant d‚Äôaller au-del√† de l‚Äô√©tape 1. Nous ne sommes int√©ress√©s par la standardisation des Signals que s‚Äôils sont adapt√©s √† une utilisation pratique dans plusieurs frameworks, et qu‚Äôils apportent de r√©els b√©n√©fices par rapport aux signaux fournis par les frameworks. Nous esp√©rons que ces prototypes pr√©coces nous apporteront ces informations. Voir ¬´¬†Statut et plan de d√©veloppement¬†¬ª ci-dessous pour plus de d√©tails.\n\n## Contexte : Pourquoi des Signals ?\n\nPour d√©velopper une interface utilisateur (UI) complexe, les d√©veloppeurs d‚Äôapplications JavaScript doivent stocker, calculer, invalider, synchroniser et pousser l‚Äô√©tat vers la couche d‚Äôaffichage de l‚Äôapplication de mani√®re efficace. Les interfaces utilisateur impliquent souvent plus que la gestion de simples valeurs, mais n√©cessitent aussi le rendu d‚Äôun √©tat calcul√© d√©pendant d‚Äôun arbre complexe d‚Äôautres valeurs ou d‚Äô√©tats eux-m√™mes calcul√©s. L‚Äôobjectif des Signals est de fournir l‚Äôinfrastructure permettant de g√©rer un tel √©tat applicatif afin que les d√©veloppeurs puissent se concentrer sur la logique m√©tier plut√¥t que sur ces d√©tails r√©p√©titifs.\n\nDes constructions similaires aux signaux se sont √©galement av√©r√©es utiles dans des contextes non-UI, notamment dans les syst√®mes de build pour √©viter les reconstructions inutiles.\n\nLes signaux sont utilis√©s en programmation r√©active pour √©liminer le besoin de g√©rer manuellement les mises √† jour dans les applications.\n\n> Un mod√®le de programmation d√©claratif pour la mise √† jour bas√©e sur les changements d‚Äô√©tat.\n\ntir√© de _[What is Reactivity?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### Exemple ‚Äì Un compteur VanillaJS\n\n√âtant donn√© une variable `counter`, vous souhaitez afficher dans le DOM si le compteur est pair ou impair. Chaque fois que `counter` change, vous souhaitez mettre √† jour le DOM avec la nouvelle parit√©. En Vanilla JS, vous pourriez avoir quelque chose comme ceci¬†:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simuler des mises √† jour externes de counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTE]  \n> Des variables globales sont utilis√©es ici uniquement √† des fins de d√©monstration. La gestion correcte de l‚Äô√©tat a de nombreuses solutions, et les exemples de cette proposition se veulent les plus minimalistes possible. Cette proposition n‚Äôencourage pas l‚Äôutilisation de variables globales.\n\nCela pose plusieurs probl√®mes...\n\n* La mise en place de `counter` est verbeuse et n√©cessite beaucoup de code passe-partout.\n* L‚Äô√©tat de `counter` est fortement coupl√© au syst√®me de rendu.\n* Si `counter` change mais que `parity` ne change pas (par exemple, si le compteur passe de 2 √† 4), alors nous faisons un calcul de parit√© et un rendu inutiles.\n* Que faire si une autre partie de notre UI souhaite juste se mettre √† jour quand `counter` change ?\n* Que faire si une autre partie de notre UI d√©pend uniquement de `isEven` ou `parity` ?\n\nM√™me dans ce sc√©nario relativement simple, plusieurs probl√®mes surgissent rapidement. Nous pourrions essayer de les contourner en introduisant un syst√®me pub/sub pour `counter`. Cela permettrait √† d‚Äôautres consommateurs de `counter` de s‚Äôabonner pour r√©agir aux changements d‚Äô√©tat.\n\nCependant, nous restons confront√©s aux probl√®mes suivants¬†:\n\n* La fonction de rendu, qui ne d√©pend que de `parity`, doit ¬´¬†savoir¬†¬ª qu‚Äôelle doit en r√©alit√© s‚Äôabonner √† `counter`.\n* Il n‚Äôest pas possible de mettre √† jour l‚ÄôUI en se basant uniquement sur `isEven` ou `parity`, sans interagir directement avec `counter`.\n* Nous avons augment√© le code passe-partout. √Ä chaque fois que vous utilisez quelque chose, il ne s‚Äôagit plus simplement d‚Äôappeler une fonction ou de lire une variable, mais de s‚Äôabonner et de g√©rer les mises √† jour. La gestion du d√©sabonnement devient √©galement particuli√®rement compliqu√©e.\n\nNous pourrions maintenant r√©soudre certains probl√®mes en ajoutant pub/sub non seulement √† `counter` mais aussi √† `isEven` et `parity`. Il faudrait alors abonner `isEven` √† `counter`, `parity` √† `isEven`, et `render` √† `parity`. Malheureusement, non seulement notre code passe-partout explose, mais nous devons aussi g√©rer une multitude d‚Äôabonnements, avec un risque important de fuite m√©moire si nous ne nettoyons pas tout correctement. Nous avons donc r√©solu certains probl√®mes, mais cr√©√© toute une nouvelle cat√©gorie de soucis, et beaucoup de code. Pire encore, il faudrait r√©p√©ter tout ce processus pour chaque morceau d‚Äô√©tat dans notre syst√®me.\n\n### Introduction aux Signals\n\nLes abstractions de liaison de donn√©es entre le mod√®le et la vue sont depuis longtemps au c≈ìur des frameworks UI dans de nombreux langages de programmation, malgr√© l‚Äôabsence de tel m√©canisme natif dans JS ou la plateforme web. Dans les frameworks et biblioth√®ques JS, il y a eu √©norm√©ment d‚Äôexp√©rimentations quant √† la fa√ßon de repr√©senter cette liaison, et l‚Äôexp√©rience a montr√© la puissance du flux de donn√©es unidirectionnel combin√© √† un type de donn√©e de premi√®re classe repr√©sentant une cellule d‚Äô√©tat ou un calcul d√©riv√© d‚Äôautres donn√©es, qu‚Äôon appelle aujourd‚Äôhui souvent ¬´¬†Signals¬†¬ª.\nCette approche de valeur r√©active de premi√®re classe semble √™tre apparue pour la premi√®re fois dans les frameworks web open-source JavaScript avec [Knockout](https://knockoutjs.com/) [en 2010](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/). Depuis, de nombreuses variantes et impl√©mentations ont vu le jour. Au cours des 3-4 derni√®res ann√©es, la primitive Signal et les approches associ√©es ont connu un regain d‚Äôint√©r√™t, avec presque toutes les biblioth√®ques ou frameworks JavaScript modernes disposant d‚Äôun √©quivalent, sous un nom ou un autre.\n\nPour comprendre les Signals, examinons l‚Äôexemple pr√©c√©dent, r√©-imagin√© avec une API Signal d√©taill√©e ci-dessous.\n\n#### Exemple ‚Äì Un compteur avec Signals\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// Une biblioth√®que ou un framework d√©finit des effets bas√©s sur d‚Äôautres primitives Signal\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simuler des mises √† jour externes de counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nOn remarque imm√©diatement plusieurs choses :\n* Nous avons √©limin√© le code passe-partout verbeux autour de la variable `counter` de l‚Äôexemple pr√©c√©dent.\n* Il existe une API unifi√©e pour g√©rer les valeurs, les calculs et les effets de bord.\n* Il n‚Äôy a plus de probl√®me de r√©f√©rence circulaire ni de d√©pendances invers√©es entre `counter` et `render`.\n* Il n‚Äôy a pas d‚Äôabonnements manuels, ni de besoin de gestion administrative.\n* Il existe un moyen de contr√¥ler le moment/la planification des effets de bord.\n\nLes Signals nous offrent bien plus que ce que l‚Äôon peut voir en surface de l‚ÄôAPI¬†:",
  "status": "ok"
}