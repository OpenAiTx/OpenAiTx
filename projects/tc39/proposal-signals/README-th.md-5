{
  "id": 5,
  "origin": "\nTODO: Show example of converting an Observable to a computed signal, subscribed only when used by an effect\n\nTODO: Show example of a computed signal which represents the result of a fetch directed at a state, which is cancelled\n\n### Introspection for SSR\n\nTODO: Show how serializing the signal graph works\n\nTODO: Show how you can \"hydrate\" a signal from state to computed later, using a few signals.\n-->\n\n### Omitted for now\n\nThese features may be added later, but they are not included in the current draft. Their omission is due to the lack of established consensus in the design space among frameworks, as well as the demonstrated ability to work around their absence with mechanisms on top of the Signals notion described in this document. However, unfortunately, the omission limits the potential of interoperability among frameworks. As prototypes of Signals as described in this document are produced, there will be an effort to reexamine whether these omissions were the appropriate decision.\n\n* **Async**: Signals are always synchronously available for evaluation, in this model. However, it is frequently useful to have certain asynchronous processes which lead to a signal being set, and to have an understanding of when a signal is still \"loading\". One simple way to model the loading state is with exceptions, and the exception-caching behavior of computed signals composes somewhat reasonably with this technique. Improved techniques are discussed in [Issue #30](https://github.com/proposal-signals/proposal-signals/issues/30).\n* **Transactions**: For transitions between views, it is often useful to maintain a live state for both the \"from\" and \"to\" states. The \"to\" state renders in the background, until it is ready to swap over (committing the transaction), while the \"from\" state remains interactive. Maintaining both states at the same time requires \"forking\" the state of the signal graph, and it may even be useful to support multiple pending transitions at once. Discussion in [Issue #73](https://github.com/proposal-signals/proposal-signals/issues/73).\n\nSome possible [convenience methods](https://github.com/proposal-signals/proposal-signals/issues/32) are also omitted.\n\n## Status and development plan\n\nThis proposal is on the April 2024 TC39 agenda for Stage 1. It can currently be thought of as \"Stage 0\".\n\n[A polyfill](https://github.com/proposal-signals/signal-polyfill) for this proposal is available, with some basic tests. Some framework authors have begun experimenting with substituting this signal implementation, but this usage is at an early stage.\n\nThe collaborators on the Signal proposal want to be especially **conservative** in how we push this proposal forward, so that we don't land in the trap of getting something shipped which we end up regretting and not actually using. Our plan is to do the following extra tasks, not required by the TC39 process, to make sure that this proposal is on track:\n\nBefore proposing for Stage 2, we plan to:\n- Develop multiple production-grade polyfill implementations which are solid, well-tested (e.g., passing tests from various frameworks as well as test262-style tests), and competitive in terms of performance (as verified with a thorough signal/framework benchmark set).\n- Integrate the proposed Signal API into a large number of JS frameworks that we consider somewhat representative, and some large applications work with this basis. Test that it works efficiently and correctly in these contexts.\n- Have a solid understanding on the space of possible extensions to the API, and have concluded which (if any) should be added into this proposal.\n\n## Signal algorithms\n\nThis section describes each of the APIs exposed to JavaScript, in terms of the algorithms that they implement. This can be thought of as a proto-specification, and is included at this early point to nail down one possible set of semantics, while being very open to changes.\n\nSome aspects of the algorithm:\n- The order of reads of Signals within a computed is significant, and is observable in the order that certain callbacks (which `Watcher` is invoked, `equals`, the first parameter to `new Signal.Computed`, and the `watched`/`unwatched` callbacks) are executed. This means that the sources of a computed Signal must be stored ordered.\n- These four callbacks might all throw exceptions, and these exceptions are propagated in a predictable manner to the calling JS code. The exceptions do *not* halt execution of this algorithm or leave the graph in a half-processed state. For errors thrown in the `notify` callback of a Watcher, that exception is sent to the `.set()` call which triggered it, using an AggregateError if multiple exceptions were thrown. The others (including `watched`/`unwatched`?) are stored in the value of the Signal, to be rethrown when read, and such a rethrowing Signal can be marked `~clean~` just like any other with a normal value.\n- Care is taken to avoid circularities in cases of computed signals which are not \"watched\" (being observed by any Watcher), so that they can be garbage collected independently from other parts of the signal graph. Internally, this can be implemented with a system of generation numbers which are always collected; note that optimized implementations may also include local per-node generation numbers, or avoid tracking some numbers on watched signals.\n\n### Hidden global state\n\nSignal algorithms need to reference certain global state. This state is global for the entire thread, or \"agent\".\n\n- `computing`: The innermost computed or effect Signal currently being reevaluated due to a `.get` or `.run` call, or `null`. Initially `null`.\n- `frozen`: Boolean denoting whether there is a callback currently executing which requires that the graph not be modified. Initially `false`.\n- `generation`: An incrementing integer, starting at 0, used to track how current a value is while avoiding circularities.\n\n### The `Signal` namespace\n\n`Signal` is an ordinary object which serves as a namespace for Signal-related classes and functions.\n\n`Signal.subtle` is a similar inner namespace object.\n\n### The `Signal.State` class\n\n#### `Signal.State` internal slots\n\n- `value`: The current value of the state signal\n- `equals`: The comparison function used when changing values\n- `watched`: The callback to be called when the signal becomes observed by an effect\n- `unwatched`: The callback to be called when the signal is no longer observed by an effect\n- `sinks`: Set of watched signals which depend on this one\n\n#### Constructor: `Signal.State(initialValue, options)`\n\n1. Set this Signal's `value` to `initialValue`.\n1. Set this Signal's `equals` to options?.equals\n1. Set this Signal's `watched` to options?.[Signal.subtle.watched]\n1. Set this Signal's `unwatched` to options?.[Signal.subtle.unwatched]\n1. Set this Signal's `sinks` to the empty set\n\n#### Method: `Signal.State.prototype.get()`\n\n1. If `frozen` is true, throw an exception.\n1. If `computing` is not `undefined`, add this Signal to `computing`'s `sources` set.\n1. NOTE: We do not add `computing` to this Signal's `sinks` set until it is watched by a Watcher.\n1. Return this Signal's `value`.\n\n#### Method: `Signal.State.prototype.set(newValue)`\n\n1. If the current execution context is `frozen`, throw an exception.\n1. Run the \"set Signal value\" algorithm with this Signal and the first parameter for the value.\n1. If that algorithm returned `~clean~`, then return undefined.\n1. Set the `state` of all `sinks` of this Signal to (if it is a Computed Signal) `~dirty~` if they were previously clean, or (if it is a Watcher) `~pending~` if it was previously `~watching~`.\n1. Set the `state` of all of the sinks' Computed Signal dependencies (recursively) to `~checked~` if they were previously `~clean~` (that is, leave dirty markings in place), or for Watchers, `~pending~` if previously `~watching~`.\n1. For each previously `~watching~` Watcher encountered in that recursive search, then in depth-first order,\n    1. Set `frozen` to true.\n    1. Calling their `notify` callback (saving aside any exception thrown, but ignoring the return value of `notify`).\n    1. Restore `frozen` to false.\n    1. Set the `state` of the Watcher to `~waiting~`.\n1. If any exception was thrown from the `notify` callbacks, propagate it to the caller after all `notify` callbacks have run. If there are multiple exceptions, then package them up together into an AggregateError and throw that.\n1. Return undefined.\n\n### The `Signal.Computed` class\n\n#### `Signal.Computed` State machine",
  "translate": "TODO: แสดงตัวอย่างการแปลง Observable ให้เป็น computed signal ที่มีการ subscribe เฉพาะเมื่อถูกใช้งานโดย effect\n\nTODO: แสดงตัวอย่างของ computed signal ที่แสดงผลลัพธ์ของ fetch ซึ่งถูกสั่งให้ยกเลิกได้ตาม state\n\n### การสืบค้นสำหรับ SSR\n\nTODO: แสดงตัวอย่างการ serialize กราฟของ signal\n\nTODO: แสดงตัวอย่างการ \"hydrate\" signal จาก state ไปสู่ computed ในภายหลัง โดยใช้ signals เพียงไม่กี่ตัว\n-->\n\n### ตัดออกชั่วคราว\n\nฟีเจอร์เหล่านี้อาจถูกเพิ่มในภายหลัง แต่ยังไม่รวมอยู่ในร่างปัจจุบัน การตัดออกนี้เกิดจากการขาดฉันทามติที่ชัดเจนในพื้นที่ออกแบบระหว่างเฟรมเวิร์กต่าง ๆ ตลอดจนความสามารถที่แสดงให้เห็นแล้วว่าสามารถแก้ปัญหาได้ด้วยกลไกเพิ่มเติมบนแนวคิด Signals ที่อธิบายไว้ในเอกสารนี้ อย่างไรก็ตาม การตัดออกนี้จำกัดศักยภาพของการทำงานร่วมกันระหว่างเฟรมเวิร์กต่าง ๆ ขณะที่ต้นแบบ Signals ที่อธิบายไว้ในเอกสารนี้ถูกสร้างขึ้น จะมีความพยายามในการกลับไปพิจารณาใหม่ว่าการตัดออกเหล่านี้เป็นการตัดสินใจที่เหมาะสมหรือไม่\n\n* **Async**: Signals จะพร้อมให้ประเมินค่าแบบ synchronous เสมอในโมเดลนี้ อย่างไรก็ตาม บ่อยครั้งที่มีประโยชน์ที่จะมี process แบบ asynchronous บางอย่างที่นำไปสู่การเซ็ตค่า signal และเข้าใจว่า signal ยังคงอยู่ในสถานะ \"loading\" วิธีที่ง่ายที่สุดในการจำลองสถานะ loading คือการใช้ exception และพฤติกรรมการ cache exception ของ computed signal ก็สามารถประกอบเข้ากับเทคนิคนี้ได้อย่างสมเหตุสมผล เทคนิคที่ปรับปรุงแล้วมีการพูดถึงใน [Issue #30](https://github.com/proposal-signals/proposal-signals/issues/30)\n* **Transactions**: สำหรับการเปลี่ยนผ่านระหว่าง views มักเป็นประโยชน์ที่จะรักษาสถานะที่ active สำหรับ state ทั้ง \"จาก\" และ \"ไปยัง\" state โดย state \"ไปยัง\" จะ render อยู่เบื้องหลังจนกว่าจะพร้อมสลับ (commit transaction) ขณะที่ state \"จาก\" ยังคง interactive อยู่ การคงทั้งสอง state พร้อมกันต้องมีการ \"fork\" สถานะของกราฟ signal และอาจจำเป็นต้องรองรับการ transition ค้างพร้อมกันหลายรายการด้วย การอภิปรายดูได้ที่ [Issue #73](https://github.com/proposal-signals/proposal-signals/issues/73)\n\n[Convenience methods](https://github.com/proposal-signals/proposal-signals/issues/32) บางรายการก็ถูกตัดออกเช่นกัน\n\n## สถานะและแผนการพัฒนา\n\nข้อเสนอนี้อยู่ในวาระ TC39 เดือนเมษายน 2024 สำหรับ Stage 1 ในปัจจุบันนี้สามารถนับว่าเป็น \"Stage 0\"\n\n[Polyfill](https://github.com/proposal-signals/signal-polyfill) สำหรับข้อเสนอนี้มีให้ใช้งานพร้อมกับชุดทดสอบพื้นฐาน ผู้เขียนเฟรมเวิร์กบางรายได้เริ่มทดลองเปลี่ยนมาใช้ signal implementation นี้แล้ว แต่การใช้งานยังอยู่ในระยะแรกเริ่ม\n\nผู้ร่วมพัฒนา Signal proposal ต้องการดำเนินการอย่าง **ระมัดระวัง** เป็นพิเศษในการผลักดันข้อเสนอนี้ไปข้างหน้า เพื่อหลีกเลี่ยงกับดักในการเผยแพร่สิ่งที่อาจจะทำให้เสียใจภายหลังและไม่ได้ใช้งานจริง แผนของเราคือการทำงานเพิ่มเติมดังต่อไปนี้ ซึ่งไม่ใช่ข้อกำหนดตามกระบวนการของ TC39 เพื่อให้มั่นใจว่าข้อเสนอนี้อยู่ในทิศทางที่ถูกต้อง:\n\nก่อนจะเสนอเข้าสู่ Stage 2 เรามีแผนจะ:\n- พัฒนา polyfill ระดับ production หลายรายการที่มีความเสถียร ทดสอบอย่างดี (เช่น ผ่านการทดสอบจากเฟรมเวิร์กต่าง ๆ รวมถึง test262-style tests) และมีประสิทธิภาพในการทำงาน (พิสูจน์ด้วย signal/framework benchmark อย่างละเอียด)\n- ผสานรวม Signal API ที่เสนอเข้ากับ JS frameworks จำนวนมากที่เราพิจารณาว่าเป็นตัวแทน และแอปพลิเคชันขนาดใหญ่บางรายการนำไปใช้งาน ทดสอบว่าทำงานได้อย่างถูกต้องและมีประสิทธิภาพในบริบทเหล่านี้\n- มีความเข้าใจที่แน่ชัดในพื้นที่ของความเป็นไปได้ในการขยาย API และสรุปแล้วว่าควรเพิ่มอะไร (ถ้ามี) เข้าไปในข้อเสนอนี้\n\n## อัลกอริทึมของ Signal\n\nส่วนนี้จะอธิบาย API แต่ละตัวที่เปิดเผยสู่ JavaScript ในแง่ของอัลกอริทึมที่มันใช้งาน สามารถนับเป็น proto-specification และถูกรวมไว้ในช่วงต้นเพื่อกำหนด semantics ชุดหนึ่งที่เป็นไปได้ ในขณะที่ยังเปิดรับการเปลี่ยนแปลงอยู่\n\nลักษณะบางประการของอัลกอริทึม:\n- ลำดับของการอ่าน Signals ภายใน computed มีความสำคัญ และสามารถสังเกตได้จากลำดับของ callback บางตัว (ที่ `Watcher` ถูกเรียก, `equals`, พารามิเตอร์แรกของ `new Signal.Computed`, และ callback `watched`/`unwatched`) ที่ถูก execute นี่หมายความว่า sources ของ computed Signal ต้องถูกเก็บแบบมีลำดับ\n- Callback ทั้งสี่นี้อาจ throw exception ได้ทั้งหมด และ exception เหล่านี้จะถูก propagate ไปยัง JS code ที่เรียกใช้อย่างสามารถคาดการณ์ได้ Exception เหล่านี้จะ *ไม่* หยุดการทำงานของอัลกอริทึมนี้หรือปล่อยให้กราฟอยู่ในสถานะที่ประมวลผลค้างอยู่ สำหรับ error ที่ throw จาก notify callback ของ Watcher, exception นั้นจะถูกส่งไปที่ `.set()` ที่เป็นตัวเรียกใช้ โดยใช้ AggregateError หากมีหลาย exception ส่วนอื่น ๆ (รวมถึง `watched`/`unwatched`?) จะถูกเก็บในค่าของ Signal เพื่อนำไป throw ซ้ำเมื่ออ่าน และ signal ที่ throw ซ้ำนี้สามารถถูก mark ว่า `~clean~` ได้เหมือนกับ signal ที่มีค่าปกติ\n- มีการระมัดระวังเพื่อหลีกเลี่ยงวงจรในกรณีของ computed signals ที่ไม่ได้ \"watched\" (ไม่ได้ถูกสังเกตโดย Watcher ใด ๆ) เพื่อให้สามารถถูก garbage collect ได้อย่างอิสระจากส่วนอื่นของกราฟ signal ภายในอาจ implement ด้วยระบบ generation number ที่ถูกเก็บเสมอ; ทั้งนี้ implementation ที่ optimized อาจมี generation number ต่อ node ใน local หรือไม่ track บางค่าใน signal ที่ถูก watch แล้วก็ได้\n\n### สถานะ global ที่ซ่อนอยู่\n\nอัลกอริทึมของ Signal จำเป็นต้องอ้างอิงสถานะ global บางรายการ ซึ่งสถานะนี้เป็น global สำหรับทั้ง thread หรือ \"agent\"\n\n- `computing`: computed หรือ effect Signal ที่อยู่ลึกสุดที่กำลังถูก reevaluate จากการเรียก `.get` หรือ `.run` หรือ `null` เริ่มต้นเป็น `null`\n- `frozen`: Boolean แสดงว่าขณะนี้มี callback ที่กำลัง execute ที่ต้องการไม่ให้มีการเปลี่ยนแปลงกราฟหรือไม่ เริ่มต้นเป็น `false`\n- `generation`: เลขจำนวนเต็มที่เพิ่มขึ้นทีละ 1 เริ่มต้นที่ 0 ใช้เพื่อติดตามว่าค่าปัจจุบันใหม่แค่ไหน ในขณะที่หลีกเลี่ยงวงจร\n\n### เนมสเปซ `Signal`\n\n`Signal` เป็น object ปกติที่ทำหน้าที่เป็นเนมสเปซสำหรับคลาสและฟังก์ชันที่เกี่ยวข้องกับ Signal\n\n`Signal.subtle` เป็น object เนมสเปซย่อยคล้ายกัน\n\n### คลาส `Signal.State`\n\n#### ช่อง internal ของ `Signal.State`\n\n- `value`: ค่าปัจจุบันของ state signal\n- `equals`: ฟังก์ชันเปรียบเทียบที่ใช้เมื่อเปลี่ยนค่า\n- `watched`: callback ที่จะถูกเรียกเมื่อ signal นี้ถูกสังเกตโดย effect\n- `unwatched`: callback ที่จะถูกเรียกเมื่อ signal นี้ไม่ถูกสังเกตโดย effect อีกต่อไป\n- `sinks`: เซ็ตของ watched signals ที่ขึ้นกับ signal นี้\n\n#### Constructor: `Signal.State(initialValue, options)`\n\n1. กำหนด `value` ของ Signal นี้เป็น `initialValue`\n1. กำหนด `equals` ของ Signal นี้เป็น options?.equals\n1. กำหนด `watched` ของ Signal นี้เป็น options?.[Signal.subtle.watched]\n1. กำหนด `unwatched` ของ Signal นี้เป็น options?.[Signal.subtle.unwatched]\n1. กำหนด `sinks` ของ Signal นี้เป็นเซ็ตว่าง\n\n#### Method: `Signal.State.prototype.get()`\n\n1. ถ้า `frozen` เป็น true ให้ throw exception\n1. ถ้า `computing` ไม่ใช่ `undefined` ให้เพิ่ม Signal นี้เข้าไปในเซ็ต `sources` ของ `computing`\n1. หมายเหตุ: เรายังไม่เพิ่ม `computing` เข้าไปในเซ็ต `sinks` ของ Signal นี้จนกว่าจะถูก watch โดย Watcher\n1. คืนค่า `value` ของ Signal นี้\n\n#### Method: `Signal.State.prototype.set(newValue)`\n\n1. ถ้า context การทำงานปัจจุบันคือ `frozen` ให้ throw exception\n1. รันอัลกอริทึม \"set Signal value\" โดยใช้ Signal นี้และค่า value ที่เป็นพารามิเตอร์แรก\n1. ถ้าอัลกอริทึมนั้นคืนค่า `~clean~` ให้ return undefined\n1. ตั้งค่า `state` ของ sinks ทั้งหมดของ Signal นี้ (ถ้าเป็น Computed Signal) เป็น `~dirty~` ถ้าเดิมเป็น clean หรือ (ถ้าเป็น Watcher) เป็น `~pending~` ถ้าเดิมเป็น `~watching~`\n1. ตั้งค่า `state` ของ Computed Signal dependencies ของ sinks ทั้งหมด (recursive) เป็น `~checked~` ถ้าเดิมเป็น `~clean~` (หมายถึง ให้คง dirty marking ไว้) หรือสำหรับ Watchers เป็น `~pending~` ถ้าเดิมเป็น `~watching~`\n1. สำหรับ Watcher ที่เคยเป็น `~watching~` ที่พบใน recursive search นั้น ให้ทำตามลำดับ depth-first:\n    1. ตั้งค่า `frozen` เป็น true\n    1. เรียก callback `notify` ของพวกมัน (บันทึก exception ที่ throw ไว้ แต่ไม่สนใจ return value ของ `notify`)\n    1. คืนค่า `frozen` เป็น false\n    1. ตั้งค่า `state` ของ Watcher เป็น `~waiting~`\n1. ถ้ามี exception ถูก throw จาก notify callbacks ใด ๆ ให้ propagate กลับไปยัง caller หลังจาก notify callbacks ทั้งหมดรันจบ ถ้ามีหลาย exception ให้รวมเป็น AggregateError แล้ว throw\n1. คืนค่า undefined\n\n### คลาส `Signal.Computed`\n\n#### สถานะของ `Signal.Computed` (State machine)",
  "status": "ok"
}