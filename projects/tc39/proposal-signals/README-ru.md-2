{
  "id": 2,
  "origin": "\n* **Automatic Dependency Tracking** - A computed Signal automatically discovers any other Signals that it is dependent on, whether those Signals be simple values or other computations.\n* **Lazy Evaluation** - Computations are not eagerly evaluated when they are declared, nor are they immediately evaluated when their dependencies change. They are only evaluated when their value is explicitly requested.\n* **Memoization** - Computed Signals cache their last value so that computations that don't have changes in their dependencies do not need to be re-evaluated, no matter how many times they are accessed.\n\n## Motivation for standardizing Signals\n\n#### Interoperability\n\nEach Signal implementation has its own auto-tracking mechanism, to keep track of the sources encountered when evaluating a computed Signal. This makes it hard to share models, components, and libraries between different frameworks--they tend to come with a false coupling to their view engine (given that Signals are usually implemented as part of JS frameworks).\n\nA goal of this proposal is to fully decouple the reactive model from the rendering view, enabling developers to migrate to new rendering technologies without rewriting their non-UI code, or develop shared reactive models in JS to be deployed in different contexts. Unfortunately, due to versioning and duplication, it has turned out to be impractical to reach a strong level of sharing via JS-level libraries--built-ins offer a stronger sharing guarantee.\n\n#### Performance/Memory usage\n\nIt is always a small potential performance boost to ship less code due to commonly used libraries being built-in, but implementations of Signals are generally pretty small, so we don't expect this effect to be very large.\n\nWe suspect that native C++ implementations of Signal-related data structures and algorithms can be slightly more efficient than what is achievable in JS, by a constant factor. However, no algorithmic changes are anticipated vs. what would be present in a polyfill; engines are not expected to be magic here, and the reactivity algorithms themselves will be well-defined and unambiguous.\n\nThe champion group expects to develop various implementations of Signals, and use these to investigate these performance possibilities.\n\n#### DevTools\n\nWith existing JS-language Signal libraries, it can be difficult to trace things like:\n* The callstack across a chain of computed Signals, showing the causal chain for an error\n* The reference graph among Signals, when one depends on another -- important when debugging memory usage\n\nBuilt-in Signals enable JS runtimes and DevTools to potentially have improved support for inspecting Signals, particularly for debugging or performance analysis, whether this is built into browsers or through a shared extension. Existing tools such as the element inspector, performance snapshot, and memory profilers could be updated to specifically highlight Signals in their presentation of information.\n\n#### Secondary benefits\n\n##### Benefits of a standard library\n\nIn general, JavaScript has had a fairly minimal standard library, but a trend in TC39 has been to make JS more of a \"batteries-included\" language, with a high-quality, built-in set of functionality available. For example, Temporal is replacing moment.js, and a number of small features, e.g., `Array.prototype.flat` and `Object.groupBy` are replacing many lodash use cases. Benefits include smaller bundle sizes, improved stability and quality, less to learn when joining a new project, and a generally common vocabulary across JS developers.\n\n##### HTML/DOM Integration (a future possibility)\n\nCurrent work in W3C and by browser implementors is seeking to bring native templating to HTML ([DOM Parts][wicg-pr-1023] and [Template Instantiation][wicg-propsal-template-instantiation]). Additionally, the W3C Web Components CG is exploring the possibility of extending Web Components to offer a fully declarative HTML API. To accomplish both of these goals, eventually a reactive primitive will be needed by HTML. Additionally, many ergonomic improvements to the DOM through integration of Signals can be imagined and have been asked for by the community.\n\n[wicg-pr-1023]: https://github.com/WICG/webcomponents/pull/1023\n[wicg-propsal-template-instantiation]: https://github.com/WICG/webcomponents/blob/gh-pages/proposals/Template-Instantiation.md\n\n> Note, this integration would be a separate effort to come later, not part of this proposal itself.\n\n##### Ecosystem information exchange (*not* a reason to ship)\n\nStandardization efforts can sometimes be helpful just at the \"community\" level, even without changes in browsers. The Signals effort is bringing together many different framework authors for a deep discussion about the nature of reactivity, algorithms and interoperability. This has already been useful, and does not justify inclusion in JS engines and browsers; Signals should only be added to the JavaScript standard if there are significant benefits *beyond* the ecosystem information exchange enabled.\n\n## Design goals for Signals\n\nIt turns out that existing Signal libraries are not all that different from each other, at their core. This proposal aims to build on their success by implementing the important qualities of many of those libraries.\n\n### Core features\n\n* A Signal type which represents state, i.e. writable Signal. This is a value that others can read.\n* A computed/memo/derived Signal type, which depends on others and is lazily calculated and cached.\n    * Computation is lazy, meaning computed Signals aren't calculated again by default when one of their dependencies changes, but rather only run if someone actually reads them.\n    * Computation is \"[glitch](https://en.wikipedia.org/wiki/Reactive_programming#Glitches)-free\", meaning no unnecessary calculations are ever performed. This implies that, when an application reads a computed Signal, there is a topological sorting of the potentially dirty parts of the graph to run, to eliminate any duplicates.\n    * Computation is cached, meaning that if, after the last time a dependency changes, no dependencies have changed, then the computed Signal is *not* recalculated when accessed.\n    * Custom comparisons are possible for computed Signals as well as state Signals, to note when further computed Signals which depend on them should be updated.\n* Reactions to the condition where a computed Signal has one of its dependencies (or nested dependencies) become \"dirty\" and change, meaning that the Signal's value might be outdated.\n    * This reaction is meant to schedule more significant work to be performed later.\n    * Effects are implemented in terms of these reactions, plus framework-level scheduling.\n    * Computed signals need the ability to react to whether they are registered as a (nested) dependency of one of these reactions.\n* Enable JS frameworks to do their own scheduling. No Promise-style built-in forced-on scheduling.\n    * Synchronous reactions are needed to enable scheduling later work based on framework logic.\n    * Writes are synchronous and immediately take effect (a framework which batches writes can do that on top).\n    * It is possible to separate checking whether an effect may be \"dirty\" from actually running the effect (enabling a two-stage effect scheduler).\n* Ability to read Signals *without* triggering dependencies to be recorded (`untrack`)\n* Enable composition of different codebases which use Signals/reactivity, e.g.,\n    * Using multiple frameworks together as far as tracking/reactivity itself goes (modulo omissions, see below)\n    * Framework-independent reactive data structures (e.g., recursively reactive store proxy, reactive Map and Set and Array, etc.)\n\n### Soundness\n\n* Discourage/prohibit naive misuse of synchronous reactions.\n    * Soundness risk: it may expose \"[glitches](https://en.wikipedia.org/wiki/Reactive_programming#Glitches)\" if improperly used: If rendering is done immediately when a Signal is set, it may expose incomplete application state to the end user. Therefore, this feature should only be used to intelligently schedule work for later, once application logic is finished.\n    * Solution: Disallow reading and writing any Signal from within a synchronous reaction callback\n* Discourage `untrack` and mark its unsound nature\n    * Soundness risk: allows the creation of computed Signals whose value depends on other Signals, but which aren't updated when those Signals change. It should be used when the untracked accesses will not change the result of the computation.\n    * Solution: The API is marked \"unsafe\" in the name.\n* Note: This proposal does allow signals to be both read and written from computed and effect signals, without restricting writes that come after reads, despite the soundness risk. This decision was taken to preserve flexibility and compatibility in integration with frameworks.\n\n### Surface API\n\n* Must be a solid base for multiple frameworks to implement their Signals/reactivity mechanisms.\n    * Should be a good base for recursive store proxies, decorator-based class field reactivity, and both `.value` and `[state, setState]`-style APIs.\n    * The semantics are able to express the valid patterns enabled by different frameworks. For example, it should be possible for these Signals to be the basis of either immediately-reflected writes or writes which are batched and applied later.\n* It would be nice if this API is usable directly by JavaScript developers.\n    * If a feature matches with an ecosystem concept, using common vocabulary is good.\n        * However, it is important to not literally shadow the exact same names!\n    * Tension between \"usability by JS devs\" and \"providing all the hooks to frameworks\"\n        * Idea: Provide all the hooks, but include errors when misused if possible.\n        * Idea: Put subtle APIs in a `subtle` namespace, similar to [`crypto.subtle`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle), to mark the line between APIs which are necessary for more advanced usage like implementing a framework or building dev tools versus more everyday application development usage like instantiating signals for use with a framework.\n* Be implementable and usable with good performance -- the surface API doesn't cause too much overhead\n    * Enable subclassing, so that frameworks can add their own methods and fields, including private fields. This is important to avoid the need for additional allocations at the framework level. See \"Memory management\" below.\n\n### Memory management\n\n* If possible: A computed Signal should be garbage-collectable if nothing live is referencing it for possible future reads, even if it's linked into a broader graph which stays alive (e.g., by reading a state which remains live).",
  "translate": "* **Автоматическое отслеживание зависимостей** — вычисляемый сигнал автоматически обнаруживает все другие сигналы, от которых он зависит, будь то простые значения или другие вычисления.\n* **Ленивая (отложенная) оценка** — вычисления не выполняются немедленно при их объявлении, и также не вычисляются сразу при изменении их зависимостей. Они выполняются только тогда, когда их значение явно запрошено.\n* **Мемоизация** — вычисляемые сигналы кэшируют своё последнее значение, чтобы вычисления с неизменившимися зависимостями не пересчитывались заново, независимо от количества обращений к ним.\n\n## Мотивация стандартизации сигналов\n\n#### Взаимная совместимость\n\nКаждая реализация сигналов использует свой собственный механизм автотрекинга для отслеживания источников, встреченных при вычислении вычисляемого сигнала. Это затрудняет обмен моделями, компонентами и библиотеками между различными фреймворками — они, как правило, оказываются ложным образом связаны со своим движком представления (так как сигналы обычно реализуются как часть JS-фреймворков).\n\nЦель этого предложения — полностью отделить реактивную модель от рендеринга, позволяя разработчикам переходить на новые технологии рендеринга без переписывания не-UI кода или разрабатывать общие реактивные модели на JS для использования в разных контекстах. К сожалению, из-за версионирования и дублирования оказалось непрактично достичь высокого уровня совместного использования через библиотеки на уровне JS — встроенные средства обеспечивают более сильную гарантию совместимости.\n\n#### Производительность/использование памяти\n\nВсегда есть небольшой потенциальный прирост производительности за счёт уменьшения количества доставляемого кода, если часто используемые библиотеки становятся встроенными, но реализации сигналов обычно довольно малы, поэтому этот эффект не ожидается как значительный.\n\nМы предполагаем, что нативные реализации на C++ структур данных и алгоритмов, связанных с сигналами, могут быть немного эффективнее, чем то, что можно реализовать на JS, за счёт постоянного множителя. Однако никаких алгоритмических изменений по сравнению с полифиллом не предполагается; не ожидается, что движки будут \"магическими\", а сами алгоритмы реактивности будут чётко определены и однозначны.\n\nГруппа авторов предложения планирует разработать различные реализации сигналов и использовать их для исследования возможностей по производительности.\n\n#### DevTools\n\nСуществующие JS-библиотеки сигналов затрудняют трассировку таких вещей, как:\n* Стек вызовов по цепочке вычисляемых сигналов, показывающий причинно-следственную цепочку для ошибки\n* Граф ссылок между сигналами, когда один зависит от другого — это важно при отладке использования памяти\n\nВстроенные сигналы позволяют JS-движкам и DevTools потенциально улучшить поддержку инспекции сигналов, особенно при отладке или анализе производительности — будь то встроено в браузеры или реализовано через общее расширение. Существующие инструменты, такие как инспектор элементов, снимки производительности и профилировщики памяти, можно обновить, чтобы они специально выделяли сигналы в своей информации.\n\n#### Вторичные преимущества\n\n##### Преимущества стандартной библиотеки\n\nВ целом, стандартная библиотека JavaScript была довольно минималистичной, но в TC39 наблюдается тенденция делать JS языком \"с батарейками\", с качественным, встроенным набором функциональности. Например, Temporal заменяет moment.js, а ряд небольших возможностей, например, `Array.prototype.flat` и `Object.groupBy` заменяют многие случаи использования lodash. Преимущества: меньший размер бандлов, повышенная стабильность и качество, меньше нового для изучения при переходе на проект, и общий словарь среди JS-разработчиков.\n\n##### Интеграция с HTML/DOM (возможность на будущее)\n\nВ настоящее время в W3C и у разработчиков браузеров ведётся работа по внедрению нативного шаблонирования в HTML ([DOM Parts][wicg-pr-1023] и [Template Instantiation][wicg-propsal-template-instantiation]). Кроме того, W3C Web Components CG исследует возможность расширения Web Components для предоставления полностью декларативного HTML API. Для достижения обеих целей HTML в итоге понадобится реактивный примитив. Также можно представить себе множество эргономичных улучшений DOM за счёт интеграции сигналов, и сообщество уже выражало такой запрос.\n\n[wicg-pr-1023]: https://github.com/WICG/webcomponents/pull/1023\n[wicg-propsal-template-instantiation]: https://github.com/WICG/webcomponents/blob/gh-pages/proposals/Template-Instantiation.md\n\n> Примечание: эта интеграция будет отдельным проектом в будущем, не частью текущего предложения.\n\n##### Обмен информацией в экосистеме (*не* причина для внедрения)\n\nСтандартизация может быть полезна и на уровне \"сообщества\", даже без изменений в браузерах. Работа над сигналами объединяет авторов многих разных фреймворков для глубокого обсуждения природы реактивности, алгоритмов и совместимости. Это уже оказалось полезным, но не оправдывает включение в JS-движки и браузеры; сигналы должны добавляться в стандарт JavaScript только при наличии значительных преимуществ *помимо* обмена знаниями в экосистеме.\n\n## Цели проектирования сигналов\n\nОказалось, что существующие библиотеки сигналов в своей основе не так уж сильно отличаются друг от друга. Это предложение нацелено на развитие их успеха за счёт реализации важных качеств многих из них.\n\n### Основные возможности\n\n* Тип \"сигнал\", представляющий состояние, то есть записываемый сигнал. Это значение, которое могут читать другие.\n* Тип вычисляемого/мемо/производного сигнала, который зависит от других и вычисляется лениво и кэшируется.\n    * Вычисление ленивое, то есть вычисляемые сигналы по умолчанию не пересчитываются при изменении одной из зависимостей, а только если кто-то их реально читает.\n    * Вычисление \"без [глюков](https://en.wikipedia.org/wiki/Reactive_programming#Glitches)\", то есть никогда не выполняются ненужные вычисления. Это подразумевает, что при чтении вычисляемого сигнала приложение производит топологическую сортировку потенциально \"грязных\" частей графа для устранения дубликатов.\n    * Вычисление кэшируется: если после последнего изменения зависимости ни одна из них не изменилась, то вычисляемый сигнал *не* пересчитывается при доступе.\n    * Для вычисляемых сигналов, как и для сигнала-состояния, возможны пользовательские сравнения, чтобы определять, должны ли обновляться дальнейшие вычисляемые сигналы, зависящие от них.\n* Реакции на ситуацию, когда у вычисляемого сигнала одна из зависимостей (или вложенных зависимостей) становится \"грязной\" и меняется, что может означать устаревшее значение сигнала.\n    * Такая реакция предназначена для планирования более значительной работы в будущем.\n    * Эффекты реализуются на основе этих реакций плюс планирования на уровне фреймворка.\n    * Вычисляемым сигналам нужна возможность реагировать на регистрацию в качестве (вложенной) зависимости одной из этих реакций.\n* Позволить JS-фреймворкам выполнять собственное планирование. Не должно быть навязанного Promise-стиля планирования.\n    * Синхронные реакции нужны, чтобы планировать дальнейшую работу на основе логики фреймворка.\n    * Записи происходят синхронно и вступают в силу сразу (фреймворк, который делает батчинг, может реализовать это поверх).\n    * Возможно отделить проверку \"грязности\" эффекта от его фактического выполнения (что позволяет реализовать двухэтапный планировщик эффектов).\n* Возможность читать сигналы *без* записи зависимостей (`untrack`)\n* Возможность композирования различных кодовых баз, использующих сигналы/реактивность, например,\n    * Использование нескольких фреймворков вместе (в части отслеживания/реактивности; с оговорками, см. ниже)\n    * Независимые от фреймворка реактивные структуры данных (например, рекурсивно реактивный стор proxy, реактивные Map, Set и Array и т. д.)\n\n### Корректность (Soundness)\n\n* Предотвращать/запрещать наивное неправильное использование синхронных реакций.\n    * Риск для корректности: это может привести к появлению \"[глюков](https://en.wikipedia.org/wiki/Reactive_programming#Glitches)\", если использовать некорректно: если рендеринг происходит сразу при установке сигнала, это может привести к отображению неполного состояния приложения для пользователя. Поэтому эта функция должна использоваться только для грамотного планирования работы после завершения логики приложения.\n    * Решение: Запретить чтение и запись любого сигнала из синхронного колбэка реакции\n* Предостеречь от использования `untrack` и отметить его некорректность\n    * Риск для корректности: позволяет создавать вычисляемые сигналы, чьё значение зависит от других сигналов, но которые не обновляются при изменении этих сигналов. Следует использовать, только если неотслеживаемые обращения не влияют на результат вычисления.\n    * Решение: API помечен как \"unsafe\" в имени.\n* Примечание: это предложение разрешает чтение и запись сигналов из вычисляемых и эффектовых сигналов без ограничения на записи, следующие за чтением, несмотря на риск для корректности. Это решение принято для сохранения гибкости и совместимости при интеграции с фреймворками.\n\n### Поверхностный API\n\n* Должен быть надёжной основой для различных фреймворков, реализующих свои механизмы сигналов/реактивности.\n    * Должен быть хорошей базой для рекурсивных proxy-хранилищ, реактивности полей класса на основе декораторов, а также для API в стиле `.value` и `[state, setState]`.\n    * Семантика должна позволять реализовать валидные паттерны, используемые разными фреймворками. Например, сигналы могут быть основой как немедленно отражаемых изменений, так и изменений, которые применяются позже батчингом.\n* Было бы хорошо, если бы этот API был пригоден для непосредственного использования разработчиками JavaScript.\n    * Если функция совпадает с концепцией из экосистемы, использование общего словаря — это хорошо.\n        * Однако важно не повторять буквально одни и те же имена!\n    * Напряжённость между \"удобством для JS-разработчиков\" и \"предоставлением всех хуков для фреймворков\"\n        * Идея: предоставить все хуки, но по возможности выдавать ошибки при неправильном использовании.\n        * Идея: вынести тонкие API в пространство имён `subtle`, аналогично [`crypto.subtle`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle), чтобы отметить грань между API, необходимыми для более продвинутого использования (реализация фреймворка, разработка devtools), и более повседневной разработкой приложений (создание сигналов для использования с фреймворком).\n* Должен быть реализуемым и эффективным — поверхностный API не должен вносить значительных накладных расходов\n    * Должна быть возможность наследования, чтобы фреймворки могли добавлять свои методы и поля, включая приватные поля. Это важно для предотвращения дополнительных аллокаций на уровне фреймворка. См. \"Управление памятью\" ниже.\n\n### Управление памятью\n\n* Если возможно: вычисляемый сигнал должен быть удаляемым сборщиком мусора, если на него нет живых ссылок для возможных будущих чтений, даже если он связан с более широким графом, который остаётся живым (например, путём чтения состояния, которое остаётся живым).",
  "status": "ok"
}