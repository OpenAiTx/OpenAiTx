{
  "id": 6,
  "origin": "\nThe `state` of a Computed Signal may be one of the following:\n\n- `~clean~`: The Signal's value is present and known not to be stale.\n- `~checked~`: An (indirect) source of this Signal has changed; this Signal has a value but it _may_ be stale. Whether or it not is stale will be known only when all immediate sources have been evaluated.\n- `~computing~`: This Signal's callback is currently being executed as a side-effect of a `.get()` call.\n- `~dirty~`: Either this Signal has a value which is known to be stale, or it has never been evaluated.\n\nThe transition graph is as follows:\n\n```mermaid\nstateDiagram-v2\n    [*] --> dirty\n    dirty --> computing: [4]\n    computing --> clean: [5]\n    clean --> dirty: [2]\n    clean --> checked: [3]\n    checked --> clean: [6]\n    checked --> dirty: [1]\n```\n\nThe transitions are:\n| Number | From | To | Condition | Algorithm |\n| ------ | ---- | -- | --------- | --------- |\n| 1 | `~checked~` | `~dirty~` | An immediate source of this signal, which is a computed signal, has been evaluated, and its value has changed. | Algorithm: recalculate dirty computed Signal |\n| 2 | `~clean~` | `~dirty~` | An immediate source of this signal, which is a State, has been set, with a value which is not equal to its previous value. | Method: `Signal.State.prototype.set(newValue)` |\n| 3 | `~clean~` | `~checked~` | A recursive, but not immediate, source of this signal, which is a State, has been set, with a value which is not equal to its previous value. | Method: `Signal.State.prototype.set(newValue)` |\n| 4 | `~dirty~` | `~computing~` | We are about to execute the `callback`. | Algorithm: recalculate dirty computed Signal |\n| 5 | `~computing~` | `~clean~` | The `callback` has finished evaluating and either returned a value or thrown an exception. | Algorithm: recalculate dirty computed Signal |\n| 6 | `~checked~` | `~clean~` | All immediate sources of this signal have been evaluated, and all have been discovered unchanged, so we are now known not to be stale. | Algorithm: recalculate dirty computed Signal |\n\n#### `Signal.Computed` Internal slots\n\n- `value`: The previous cached value of the Signal, or `~uninitialized~` for a never-read computed Signal. The value may be an exception which gets rethrown when the value is read. Always `undefined` for effect signals.\n- `state`: May be `~clean~`, `~checked~`, `~computing~`, or `~dirty~`.\n- `sources`: An ordered set of Signals which this Signal depends on.\n- `sinks`: An ordered set of Signals which depend on this Signal.\n- `equals`: The equals method provided in the options.\n- `callback`: The callback which is called to get the computed Signal's value. Set to the first parameter passed to the constructor.\n\n#### `Signal.Computed` Constructor\n\nThe constructor sets\n- `callback` to its first parameter\n- `equals` based on options, defaulting to `Object.is` if absent\n- `state` to `~dirty~`\n- `value` to `~uninitialized~`\n\nWith [AsyncContext](https://github.com/tc39/proposal-async-context), the callback passed to `new Signal.Computed` closes over the snapshot from when the constructor was called, and restores this snapshot during its execution.\n\n#### Method: `Signal.Computed.prototype.get`\n\n1. If the current execution context is `frozen` or if this Signal has the state `~computing~`, or if this signal is a Watcher and `computing` a computed Signal, throw an exception.\n1. If `computing` is not `null`, add this Signal to `computing`'s `sources` set.\n1. NOTE: We do not add `computing` to this Signal's `sinks` set until/unless it becomes watched by a Watcher.\n1. If this Signal's state is `~dirty~` or `~checked~`: Repeat the following steps until this Signal is `~clean~`:\n    1. Recurse up via `sources` to find the deepest, left-most (i.e. earliest observed) recursive source which is a Computed Signal marked `~dirty~` (cutting off search when hitting a `~clean~` Computed Signal, and including this Computed Signal as the last thing to search).\n    1. Perform the \"recalculate dirty computed Signal\" algorithm on that Signal.\n1. At this point, this Signal's state will be `~clean~`, and no recursive sources will be `~dirty~` or `~checked~`. Return the Signal's `value`. If the value is an exception, rethrow that exception.\n\n### The `Signal.subtle.Watcher` class\n\n#### `Signal.subtle.Watcher` State machine\n\nThe `state` of a Watcher may be one of the following:\n\n- `~waiting~`: The `notify` callback has been run, or the Watcher is new, but is not actively watching any signals.\n- `~watching~`: The Watcher is actively watching signals, but no changes have yet happened which would necessitate a `notify` callback.\n- `~pending~`: A dependency of the Watcher has changed, but the `notify` callback has not yet been run.\n\nThe transition graph is as follows:\n\n```mermaid\nstateDiagram-v2\n    [*] --> waiting\n    waiting --> watching: [1]\n    watching --> waiting: [2]\n    watching --> pending: [3]\n    pending --> waiting: [4]\n```\n\nThe transitions are:\n| Number | From | To | Condition | Algorithm |\n| ------ | ---- | -- | --------- | --------- |\n| 1 | `~waiting~` | `~watching~` | The Watcher's `watch` method has been called. | Method: `Signal.subtle.Watcher.prototype.watch(...signals)` |\n| 2 | `~watching~` | `~waiting~` | The Watcher's `unwatch` method has been called, and the last watched signal has been removed. | Method: `Signal.subtle.Watcher.prototype.unwatch(...signals)` |\n| 3 | `~watching~` | `~pending~` | A watched signal may have changed value. | Method: `Signal.State.prototype.set(newValue)` |\n| 4 | `~pending~` | `~waiting~` | The `notify` callback has been run. | Method: `Signal.State.prototype.set(newValue)` |\n\n#### `Signal.subtle.Watcher` internal slots\n\n- `state`: May be `~watching~`, `~pending~` or `~waiting~`\n- `signals`: An ordered set of Signals which this Watcher is watching\n- `notifyCallback`: The callback which is called when something changes. Set to the first parameter passed to the constructor.\n\n#### Constructor: `new Signal.subtle.Watcher(callback)`\n\n1. `state` is set to `~waiting~`.\n1. Initialize `signals` as an empty set.\n1. `notifyCallback` is set to the callback parameter.",
  "translate": "Bir Hesaplanmış Signal'in `state` durumu aşağıdakilerden biri olabilir:\n\n- `~clean~`: Signal'in değeri mevcuttur ve bayat olmadığı biliniyor.\n- `~checked~`: Bu Signal'in (dolaylı) bir kaynağı değişti; bu Signal'in bir değeri var ama _bayat_ olabilir. Bayat olup olmadığı ancak tüm doğrudan kaynaklar değerlendirildiğinde bilinecek.\n- `~computing~`: Bu Signal'in callback'i şu anda bir `.get()` çağrısının yan etkisi olarak yürütülüyor.\n- `~dirty~`: Ya bu Signal'in değeri bayat olduğu biliniyor, ya da hiç değerlendirilmemiş.\n\nGeçiş grafiği aşağıdaki gibidir:\n\n```mermaid\nstateDiagram-v2\n    [*] --> dirty\n    dirty --> computing: [4]\n    computing --> clean: [5]\n    clean --> dirty: [2]\n    clean --> checked: [3]\n    checked --> clean: [6]\n    checked --> dirty: [1]\n```\n\nGeçişler şunlardır:\n| Numara | Nereden | Nereye | Koşul | Algoritma |\n| ------ | ------- | ------ | ----- | --------- |\n| 1 | `~checked~` | `~dirty~` | Bu signal'in doğrudan kaynağı olan bir hesaplanmış signal değerlendirildi ve değeri değişti. | Algoritma: bayat hesaplanmış Signal'i yeniden hesapla |\n| 2 | `~clean~` | `~dirty~` | Bu signal'in doğrudan kaynağı olan bir State ayarlandı ve yeni değer önceki değerden farklı. | Yöntem: `Signal.State.prototype.set(newValue)` |\n| 3 | `~clean~` | `~checked~` | Bu signal'in yinelemeli fakat doğrudan olmayan bir kaynağı olan bir State ayarlandı ve yeni değer önceki değerden farklı. | Yöntem: `Signal.State.prototype.set(newValue)` |\n| 4 | `~dirty~` | `~computing~` | `callback` yürütülmek üzere. | Algoritma: bayat hesaplanmış Signal'i yeniden hesapla |\n| 5 | `~computing~` | `~clean~` | `callback` değerlendirmeyi bitirdi ve ya bir değer döndürdü ya da bir istisna fırlattı. | Algoritma: bayat hesaplanmış Signal'i yeniden hesapla |\n| 6 | `~checked~` | `~clean~` | Bu signal'in tüm doğrudan kaynakları değerlendirildi ve hepsi değişmediği belirlendi, bu yüzden artık bayat olmadığı biliniyor. | Algoritma: bayat hesaplanmış Signal'i yeniden hesapla |\n\n#### `Signal.Computed` İçsel slotları\n\n- `value`: Signal'in önceki önbelleğe alınmış değeri veya hiç okunmamış bir hesaplanmış Signal için `~uninitialized~`. Değer, okunduğunda yeniden fırlatılan bir istisna olabilir. Etki sinyalleri için her zaman `undefined`.\n- `state`: `~clean~`, `~checked~`, `~computing~` veya `~dirty~` olabilir.\n- `sources`: Bu Signal'in bağlı olduğu Signal'lerden oluşan sıralı bir küme.\n- `sinks`: Bu Signal'e bağlı Signal'lerden oluşan sıralı bir küme.\n- `equals`: Seçeneklerde sağlanan eşitlik yöntemi.\n- `callback`: Hesaplanmış Signal'in değerini almak için çağrılan callback. Oluşturucuya geçirilen ilk parametre olarak ayarlanır.\n\n#### `Signal.Computed` Oluşturucu\n\nOluşturucu şunları ayarlar:\n- `callback` ilk parametresine\n- `equals`, seçeneklere göre, yoksa varsayılan olarak `Object.is`\n- `state` `~dirty~` olarak\n- `value` `~uninitialized~` olarak\n\n[AsyncContext](https://github.com/tc39/proposal-async-context) ile, `new Signal.Computed`'a geçirilen callback oluşturucu çağrıldığında alınan snapshot'u kapatır ve yürütülürken bu snapshot'u geri yükler.\n\n#### Yöntem: `Signal.Computed.prototype.get`\n\n1. Geçerli yürütme bağlamı `frozen` ise veya bu Signal'in durumu `~computing~` ise ya da bu signal bir Watcher ise ve bir hesaplanmış Signal `computing` durumundaysa, bir istisna fırlat.\n1. `computing` `null` değilse, bu Signal'i `computing`'in `sources` kümesine ekle.\n1. NOT: Bu Signal'in `sinks` kümesine, bir Watcher tarafından izlenene kadar/eklenene kadar `computing` eklenmez.\n1. Bu Signal'in durumu `~dirty~` veya `~checked~` ise: Bu Signal `~clean~` olana kadar aşağıdaki adımları tekrarla:\n    1. `sources` üzerinden yukarı doğru yineleme yaparak, bir Hesaplanmış Signal olup `~dirty~` olarak işaretlenmiş en derin, soldaki (yani en erken gözlemlenen) yinelemeli kaynağı bul (bir `~clean~` Hesaplanmış Signal'e ulaşınca aramayı kes ve bu Hesaplanmış Signal'i aranacak son şey olarak dahil et).\n    1. O Signal üzerinde \"bayat hesaplanmış Signal'i yeniden hesapla\" algoritmasını uygula.\n1. Bu noktada, bu Signal'in durumu `~clean~` olacaktır ve hiçbir yinelemeli kaynak `~dirty~` veya `~checked~` olmayacaktır. Signal'in `value` değerini döndür. Eğer değer bir istisnaysa, o istisnayı yeniden fırlat.\n\n### `Signal.subtle.Watcher` sınıfı\n\n#### `Signal.subtle.Watcher` Durum makinesi\n\nBir Watcher'ın `state` durumu aşağıdakilerden biri olabilir:\n\n- `~waiting~`: `notify` callback'i çalıştırıldı veya Watcher yenidir fakat aktif olarak hiçbir signal izlemiyor.\n- `~watching~`: Watcher aktif olarak signal izliyor fakat henüz bir değişiklik olmadı ve `notify` callback'inin çağrılması gerekmiyor.\n- `~pending~`: Watcher'ın bir bağımlılığı değişti, fakat `notify` callback'i henüz çalıştırılmadı.\n\nGeçiş grafiği aşağıdaki gibidir:\n\n```mermaid\nstateDiagram-v2\n    [*] --> waiting\n    waiting --> watching: [1]\n    watching --> waiting: [2]\n    watching --> pending: [3]\n    pending --> waiting: [4]\n```\n\nGeçişler şunlardır:\n| Numara | Nereden | Nereye | Koşul | Algoritma |\n| ------ | ------- | ------ | ----- | --------- |\n| 1 | `~waiting~` | `~watching~` | Watcher'ın `watch` yöntemi çağrıldı. | Yöntem: `Signal.subtle.Watcher.prototype.watch(...signals)` |\n| 2 | `~watching~` | `~waiting~` | Watcher'ın `unwatch` yöntemi çağrıldı ve son izlenen signal kaldırıldı. | Yöntem: `Signal.subtle.Watcher.prototype.unwatch(...signals)` |\n| 3 | `~watching~` | `~pending~` | İzlenen bir signal'in değeri değişmiş olabilir. | Yöntem: `Signal.State.prototype.set(newValue)` |\n| 4 | `~pending~` | `~waiting~` | `notify` callback'i çalıştırıldı. | Yöntem: `Signal.State.prototype.set(newValue)` |\n\n#### `Signal.subtle.Watcher` içsel slotları\n\n- `state`: `~watching~`, `~pending~` veya `~waiting~` olabilir\n- `signals`: Bu Watcher'ın izlediği Signal'lerden oluşan sıralı bir küme\n- `notifyCallback`: Bir şey değiştiğinde çağrılan callback. Oluşturucuya geçirilen ilk parametre olarak ayarlanır.\n\n#### Oluşturucu: `new Signal.subtle.Watcher(callback)`\n\n1. `state` `~waiting~` olarak ayarlanır.\n1. `signals` boş bir küme olarak başlatılır.\n1. `notifyCallback` callback parametresine ayarlanır.",
  "status": "ok"
}