{
  "id": 1,
  "origin": "# üö¶ JavaScript Signals standard proposalüö¶\n<img align=right src=\"Signals.svg\" alt=\"Signals logo\" width=100>\n\nStage 1 ([explanation](https://tc39.es/process-document/))\n\nTC39 proposal champions: Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nOriginal authors: Rob Eisenberg and Daniel Ehrenberg\n\nThis document describes an early common direction for signals in JavaScript, similar to the Promises/A+ effort which preceded the Promises standardized by TC39 in ES2015. Try it for yourself, using [a polyfill](https://github.com/proposal-signals/signal-polyfill).\n\nSimilarly to Promises/A+, this effort focuses on aligning the JavaScript ecosystem. If this alignment is successful, then a standard could emerge, based on that experience. Several framework authors are collaborating here on a common model which could back their reactivity core. The current draft is based on design input from the authors/maintainers of [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a), and more‚Ä¶\n\nDifferently from Promises/A+, we're not trying to solve for a common developer-facing surface API, but rather the precise core semantics of the underlying signal graph. This proposal does include a fully concrete API, but the API is not targeted to most application developers. Instead, the signal API here is a better fit for frameworks to build on top of, providing interoperability through common signal graph and auto-tracking mechanism.\n\nThe plan for this proposal is to do significant early prototyping, including integration into several frameworks, before advancing beyond Stage 1. We are only interested in standardizing Signals if they are suitable for use in practice in multiple frameworks, and provide real benefits over framework-provided signals. We hope that significant early prototyping will give us this information. See \"Status and development plan\" below for more details.\n\n## Background: Why Signals?\n\nTo develop a complicated user interface (UI), JavaScript application developers need to store, compute, invalidate, sync, and push state to the application's view layer in an efficient way. UIs commonly involve more than just managing simple values, but often involve rendering computed state which is dependent on a complex tree of other values or state that is also computed itself. The goal of Signals is to provide infrastructure for managing such application state so developers can focus on business logic rather than these repetitive details.\n\nSignal-like constructs have independently been found to be useful in non-UI contexts as well, particularly in build systems to avoid unnecessary rebuilds.\n\nSignals are used in reactive programming to remove the need to manage updating in applications.\n\n> A declarative programming model for updating based on changes to state.\n\nfrom _[What is Reactivity?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### Example - A VanillaJS Counter\n\nGiven a variable, `counter`, you want to render into the DOM whether the counter is even or odd. Whenever the `counter` changes, you want to update the DOM with the latest parity. In Vanilla JS, you might have something like this:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simulate external updates to counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTE]  \n> Globals are used here for demonstration purposes only. Proper state management has many solutions, and the examples in this proposal are meant to be as minimal as possible. This proposal does not encourage global variables.\n\n\nThis has a number of problems...\n\n* The `counter` setup is noisy and boilerplate-heavy.\n* The `counter` state is tightly coupled to the rendering system.\n* If the `counter` changes but `parity` does not (e.g. counter goes from 2 to 4), then we do unnecessary computation of the parity and unnecessary rendering.\n* What if another part of our UI just wants to render when the `counter` updates?\n* What if another part of our UI is dependent on `isEven` or `parity` alone?\n\nEven in this relatively simple scenario, a number of issues arise quickly. We could try to work around these by introducing pub/sub for the `counter`. This would allow additional consumers of the `counter` could subscribe to add their own reactions to state changes.\n\nHowever, we're still stuck with the following problems:\n\n* The render function, which is only dependent on `parity` must instead \"know\" that it actually needs to subscribe to `counter`.\n* It isn't possible to update UI based on either `isEven` or `parity` alone, without directly interacting with `counter`.\n* We've increased our boilerplate. Any time you are using something, it's not just a matter of calling a function or reading a variable, but instead subscribing and doing updates there. Managing unsubscription is also especially complicated.\n\nNow, we could solve a couple issues by adding pub/sub not just to `counter` but also to `isEven` and `parity`. We would then have to subscribe `isEven` to `counter`,  `parity` to `isEven`, and `render` to `parity`. Unfortunately, not only has our boilerplate code exploded, but we're stuck with a ton of bookkeeping of subscriptions, and a potential memory leak disaster if we don't properly clean everything up in the right way. So, we've solved some issues but created a whole new category of problems and a lot of code. To make matters worse, we have to go through this entire process for every piece of state in our system.\n\n### Introducing Signals\n\nData binding abstractions in UIs for the model and view have long been core to UI frameworks across multiple programming languages, despite the absence of any such mechanism built into JS or the web platform. Within JS frameworks and libraries, there has been a large amount of experimentation across different ways to represent this binding, and experience has shown the power of one-way data flow in conjunction with a first-class data type representing a cell of state or computation derived from other data, now often called \"Signals\".\nThis first-class reactive value approach seems to have made its first popular appearance in open-source JavaScript web frameworks with [Knockout](https://knockoutjs.com/) [in 2010](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/). In the years since, many variations and implementations have been created. Within the last 3-4 years, the Signal primitive and related approaches have gained further traction, with nearly every modern JavaScript library or framework having something similar, under one name or another.\n\nTo understand Signals, let's take a look at the above example, re-imagined with a Signal API further articulated below.\n\n#### Example - A Signals Counter\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// A library or framework defines effects based on other Signal primitives\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simulate external updates to counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nThere are a few things we can see right away:\n* We've eliminated the noisy boilerplate around the `counter` variable from our previous example.\n* There is a unified API to handle values, computations, and side effects.\n* There's no circular reference problem or upside down dependencies between `counter` and `render`.\n* There are no manual subscriptions, nor is there any need for bookkeeping.\n* There is a means of controlling side-effect timing/scheduling.\n\nSignals give us much more than what can be seen on the surface of the API though:",
  "translate": "# üö¶ JavaScript Signals Standardvorschlag üö¶\n<img align=right src=\"https://raw.githubusercontent.com/tc39/proposal-signals/main/Signals.svg\" alt=\"Signals logo\" width=100>\n\nStufe 1 ([Erkl√§rung](https://tc39.es/process-document/))\n\nTC39-Proposal-Champions: Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nUrspr√ºngliche Autoren: Rob Eisenberg und Daniel Ehrenberg\n\nDieses Dokument beschreibt eine fr√ºhe gemeinsame Richtung f√ºr Signals in JavaScript, √§hnlich wie die Promises/A+-Initiative, die den von TC39 in ES2015 standardisierten Promises vorausging. Probiere es selbst aus, mit [einem Polyfill](https://github.com/proposal-signals/signal-polyfill).\n\n√Ñhnlich wie bei Promises/A+ konzentriert sich dieser Ansatz darauf, das JavaScript-√ñkosystem abzustimmen. Wenn diese Abstimmung erfolgreich ist, k√∂nnte daraus ein Standard entstehen, basierend auf diesen Erfahrungen. Mehrere Framework-Autoren arbeiten hier an einem gemeinsamen Modell, das den Kern ihrer Reaktivit√§t unterst√ºtzen k√∂nnte. Der aktuelle Entwurf basiert auf Design-Inputs der Autoren/Maintainer von [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a) und weiteren...\n\nAnders als bei Promises/A+ versuchen wir nicht, eine gemeinsame, f√ºr Entwickler sichtbare Oberfl√§chen-API zu l√∂sen, sondern vielmehr die pr√§zisen Kernsemantiken des zugrunde liegenden Signal-Graphen. Dieser Vorschlag beinhaltet zwar eine vollst√§ndig konkrete API, aber die API ist nicht f√ºr die meisten Anwendungsentwickler gedacht. Stattdessen ist die hier vorgestellte Signal-API besser geeignet, um von Frameworks als Basis verwendet zu werden und Interoperabilit√§t durch einen gemeinsamen Signal-Graphen und Auto-Tracking-Mechanismus bereitzustellen.\n\nDer Plan f√ºr diesen Vorschlag ist, zun√§chst umfangreiche fr√ºhe Prototypen zu entwickeln, einschlie√ülich der Integration in mehrere Frameworks, bevor √ºber Stufe 1 hinausgegangen wird. Wir sind nur daran interessiert, Signals zu standardisieren, wenn sie sich in der Praxis in mehreren Frameworks als n√ºtzlich erweisen und echte Vorteile gegen√ºber von Frameworks bereitgestellten Signals bieten. Wir hoffen, dass umfangreiche fr√ºhe Prototypen uns diese Informationen liefern werden. Siehe unten ‚ÄûStatus und Entwicklungsplan‚Äú f√ºr weitere Details.\n\n## Hintergrund: Warum Signals?\n\nUm eine komplexe Benutzeroberfl√§che (UI) zu entwickeln, m√ºssen JavaScript-Anwendungsentwickler den Zustand der Anwendung effizient speichern, berechnen, ung√ºltig machen, synchronisieren und an die Ansichtsschicht weitergeben. UIs beinhalten h√§ufig mehr als nur das Verwalten einfacher Werte, sondern oft das Rendern von berechnetem Zustand, der von einem komplexen Baum anderer Werte oder Zust√§nde abh√§ngt, die selbst wieder berechnet werden. Das Ziel von Signals ist es, Infrastruktur bereitzustellen, um solchen Anwendungszustand zu verwalten, sodass sich Entwickler auf die Gesch√§ftslogik konzentrieren k√∂nnen, anstatt auf diese sich wiederholenden Details.\n\nSignal-√§hnliche Konstrukte haben sich auch unabh√§ngig in Nicht-UI-Kontexten als n√ºtzlich erwiesen, insbesondere in Build-Systemen, um unn√∂tige Neu-Builds zu vermeiden.\n\nSignals werden im reaktiven Programmieren verwendet, um die Notwendigkeit der manuellen Aktualisierungsverwaltung in Anwendungen zu eliminieren.\n\n> Ein deklaratives Programmiermodell f√ºr Aktualisierungen, die auf Zustands√§nderungen basieren.\n\naus _[What is Reactivity?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### Beispiel ‚Äì Ein VanillaJS-Z√§hler\n\nAngenommen, du hast eine Variable `counter` und m√∂chtest im DOM anzeigen, ob der Z√§hler gerade oder ungerade ist. Immer wenn sich der `counter` √§ndert, soll das DOM mit der aktuellen Parit√§t aktualisiert werden. In Vanilla JS k√∂nnte das so aussehen:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simuliere externe Updates am counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!HINWEIS]  \n> Globals werden hier nur zu Demonstrationszwecken verwendet. F√ºr ordentliches Zustandsmanagement gibt es viele L√∂sungen, und die Beispiele in diesem Vorschlag sollen so minimal wie m√∂glich gehalten sein. Dieser Vorschlag empfiehlt keine globalen Variablen.\n\n\nDies hat eine Reihe von Problemen...\n\n* Die Einrichtung von `counter` ist umst√§ndlich und boilerplate-lastig.\n* Der Zustand von `counter` ist eng mit dem Rendering-System gekoppelt.\n* Wenn sich `counter` √§ndert, aber `parity` nicht (z. B. von 2 auf 4), berechnen wir Parit√§t und Rendering unn√∂tig.\n* Was, wenn ein anderer UI-Teil nur beim Update von `counter` rendern m√∂chte?\n* Was, wenn ein anderer UI-Teil nur von `isEven` oder `parity` abh√§ngt?\n\nSelbst in diesem relativ einfachen Szenario treten schnell mehrere Probleme auf. Wir k√∂nnten versuchen, diese zu umgehen, indem wir Pub/Sub f√ºr `counter` einf√ºhren. Dadurch k√∂nnten weitere Konsumenten von `counter` eigene Reaktionen auf Zustands√§nderungen abonnieren.\n\nWir bleiben aber dennoch bei folgenden Problemen stecken:\n\n* Die Renderfunktion, die nur von `parity` abh√§ngt, muss dennoch ‚Äûwissen‚Äú, dass sie eigentlich `counter` abonnieren muss.\n* Es ist nicht m√∂glich, die UI nur auf Basis von `isEven` oder `parity` zu aktualisieren, ohne direkt mit `counter` zu interagieren.\n* Wir haben unseren Boilerplate erh√∂ht. Immer, wenn man etwas verwendet, reicht es nicht, einfach eine Funktion aufzurufen oder eine Variable zu lesen, sondern man muss abonnieren und dort Updates durchf√ºhren. Das Management der Abmeldung ist zudem besonders kompliziert.\n\nNun k√∂nnten wir einige Probleme l√∂sen, indem wir Pub/Sub nicht nur auf `counter`, sondern auch auf `isEven` und `parity` anwenden. Wir m√ºssten dann `isEven` auf `counter`, `parity` auf `isEven` und `render` auf `parity` abonnieren. Leider ist unser Boilerplate-Code dadurch explodiert, und wir haben eine Menge Verwaltungsaufwand bei den Abonnements ‚Äì sowie potenzielle Speicherleck-Probleme, wenn wir nicht alles richtig aufr√§umen. Wir haben also einige Probleme gel√∂st, aber eine ganz neue Kategorie an Problemen und viel zus√§tzlichen Code geschaffen. Schlimmer noch: Wir m√ºssen diesen gesamten Prozess f√ºr jedes einzelne St√ºck Zustand im System wiederholen.\n\n### Einf√ºhrung von Signals\n\nDatenbindungsabstraktionen in UIs f√ºr Modell und Ansicht sind seit Langem Kernbestandteil von UI-Frameworks √ºber viele Programmiersprachen hinweg, obwohl es einen solchen Mechanismus weder in JS noch in der Web-Plattform selbst gibt. Innerhalb von JS-Frameworks und -Bibliotheken gab es viele Experimente mit verschiedenen Wegen, diese Bindung darzustellen, und die Erfahrung hat die St√§rke von Einweg-Datenfl√ºssen gemeinsam mit einem erstklassigen Datentyp gezeigt, der eine Zelle mit Zustand oder Berechnung aus anderen Daten repr√§sentiert ‚Äì heute oft ‚ÄûSignals‚Äú genannt.\n\nDieser erstklassige, reaktive Wertansatz scheint erstmals in popul√§ren Open-Source-JavaScript-Webframeworks mit [Knockout](https://knockoutjs.com/) [im Jahr 2010](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/) aufgetaucht zu sein. In den Jahren danach wurden viele Varianten und Implementierungen geschaffen. In den letzten 3‚Äì4 Jahren hat das Signal-Primitiv und verwandte Ans√§tze weiter an Popularit√§t gewonnen, sodass mittlerweile fast jede moderne JavaScript-Bibliothek oder jedes Framework etwas √Ñhnliches besitzt, unter welchem Namen auch immer.\n\nUm Signals zu verstehen, schauen wir uns das obige Beispiel an, neu gedacht mit einer weiter unten erl√§uterten Signal-API.\n\n#### Beispiel ‚Äì Ein Signals-Z√§hler\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// Eine Bibliothek oder ein Framework definiert Effekte basierend auf anderen Signal-Primitiven\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simuliere externe Updates am counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nEinige Dinge fallen sofort auf:\n* Wir haben das umst√§ndliche Boilerplate rund um die Variable `counter` aus dem vorherigen Beispiel entfernt.\n* Es gibt eine einheitliche API f√ºr Werte, Berechnungen und Seiteneffekte.\n* Es gibt kein Problem mit zirkul√§ren Referenzen oder verkehrten Abh√§ngigkeiten zwischen `counter` und `render`.\n* Es gibt keine manuellen Abonnements und keinen Verwaltungsaufwand.\n* Es gibt eine M√∂glichkeit, das Timing/Scheduling von Seiteneffekten zu steuern.\n\nSignals bieten uns noch viel mehr, als auf den ersten Blick an der API sichtbar ist:",
  "status": "ok"
}