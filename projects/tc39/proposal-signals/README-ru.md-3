{
  "id": 3,
  "origin": "    * Note that most frameworks today require explicit disposal of computed Signals if they have any reference to or from another Signal graph which remains alive.\n    * This ends up not being so bad when their lifetime is tied to the lifetime of a UI component, and effects need to be disposed of anyway.\n    * If it is too expensive to execute with these semantics, then we should add explicit disposal (or \"unlinking\") of computed Signals to the API below, which currently lacks it.\n* A separate related goal: Minimize the number of allocations, e.g.,\n    * to make a writable Signal (avoid two separate closures + array)\n    * to implement effects (avoid a closure for every single reaction)\n    * In the API for observing Signal changes, avoid creating additional temporary data structures\n    * Solution: Class-based API enabling reuse of methods and fields defined in subclasses\n\n## API sketch\n\nAn initial idea of a Signal API is below. Note that this is just an early draft, and we anticipate changes over time. Let's start with the full `.d.ts` to get an idea of the overall shape, and then we'll discuss the details of what it all means.\n\n```ts\ninterface Signal<T> {\n    // Get the value of the signal\n    get(): T;\n}\n\nnamespace Signal {\n    // A read-write Signal\n    class State<T> implements Signal<T> {\n        // Create a state Signal starting with the value t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n\n        // Set the state Signal value to t\n        set(t: T): void;\n    }\n\n    // A Signal which is a formula based on other Signals\n    class Computed<T = unknown> implements Signal<T> {\n        // Create a Signal which evaluates to the value returned by the callback.\n        // Callback is called with this signal as the this value.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n    }\n\n    // This namespace includes \"advanced\" features that are better to\n    // leave for framework authors rather than application developers.\n    // Analogous to `crypto.subtle`\n    namespace subtle {\n        // Run a callback with all tracking disabled\n        function untrack<T>(cb: () => T): T;\n\n        // Get the current computed signal which is tracking any signal reads, if any\n        function currentComputed(): Computed | null;\n\n        // Returns ordered list of all signals which this one referenced\n        // during the last time it was evaluated.\n        // For a Watcher, lists the set of signals which it is watching.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Returns the Watchers that this signal is contained in, plus any\n        // Computed signals which read this signal last time they were evaluated,\n        // if that computed signal is (recursively) watched.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // True if this signal is \"live\", in that it is watched by a Watcher,\n        // or it is read by a Computed signal which is (recursively) live.\n        function hasSinks(s: State | Computed): boolean;\n\n        // True if this element is \"reactive\", in that it depends\n        // on some other signal. A Computed where hasSources is false\n        // will always return the same constant.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // When a (recursive) source of Watcher is written to, call this callback,\n            // if it hasn't already been called since the last `watch` call.\n            // No signals may be read or written during the notify.\n            constructor(notify: (this: Watcher) => void);\n\n            // Add these signals to the Watcher's set, and set the watcher to run its\n            // notify callback next time any signal in the set (or one of its dependencies) changes.\n            // Can be called with no arguments just to reset the \"notified\" state, so that\n            // the notify callback will be invoked again.\n            watch(...s: Signal[]): void;\n\n            // Remove these signals from the watched set (e.g., for an effect which is disposed)\n            unwatch(...s: Signal[]): void;\n\n            // Returns the set of sources in the Watcher's set which are still dirty, or is a computed signal\n            // with a source which is dirty or pending and hasn't yet been re-evaluated\n            getPending(): Signal[];\n        }\n\n        // Hooks to observe being watched or no longer watched\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Custom comparison function between old and new value. Default: Object.is.\n        // The signal is passed in as the this value for context.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "translate": "* Обратите внимание, что большинство современных фреймворков требует явного уничтожения вычисляемых сигналов, если они имеют какую-либо ссылку на другой граф сигналов, который остаётся живым.\n* Это оказывается не такой уж большой проблемой, когда их время жизни связано со временем жизни UI-компонента, и эффекты всё равно нужно уничтожать.\n* Если выполнение с такой семантикой оказывается слишком затратным, то следует добавить явное уничтожение (или «отвязку») вычисляемых сигналов в API ниже, где этого сейчас нет.\n* Отдельная сопутствующая цель: минимизировать количество аллокаций, например,\n    * чтобы сделать записываемый сигнал (избежать двух отдельных замыканий + массива)\n    * чтобы реализовать эффекты (избежать замыкания для каждой отдельной реакции)\n    * в API для отслеживания изменений сигналов избегать создания дополнительных временных структур данных\n    * Решение: API на основе классов, позволяющий переиспользовать методы и поля, определённые в подклассах\n\n## Эскиз API\n\nНиже приведена начальная идея API сигналов. Обратите внимание, что это всего лишь ранний черновик, и мы ожидаем изменений со временем. Давайте начнём с полного `.d.ts`, чтобы получить представление о структуре, а затем обсудим детали.\n\n```ts\ninterface Signal<T> {\n    // Получить значение сигнала\n    get(): T;\n}\n\nnamespace Signal {\n    // Сигнал с возможностью чтения и записи\n    class State<T> implements Signal<T> {\n        // Создать сигнал состояния с начальным значением t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Получить значение сигнала\n        get(): T;\n\n        // Установить значение сигнала состояния в t\n        set(t: T): void;\n    }\n\n    // Сигнал, являющийся формулой на основе других сигналов\n    class Computed<T = unknown> implements Signal<T> {\n        // Создать сигнал, который вычисляется как результат обратного вызова.\n        // Обратный вызов вызывается с этим сигналом в качестве this.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Получить значение сигнала\n        get(): T;\n    }\n\n    // Это пространство имён включает «продвинутые» возможности, которые лучше\n    // оставить авторам фреймворков, а не разработчикам приложений.\n    // Аналогично `crypto.subtle`\n    namespace subtle {\n        // Выполнить обратный вызов с отключённым трекингом\n        function untrack<T>(cb: () => T): T;\n\n        // Получить текущий вычисляемый сигнал, который отслеживает чтения сигналов, если есть такой\n        function currentComputed(): Computed | null;\n\n        // Возвращает упорядоченный список всех сигналов, к которым этот обращался\n        // во время последнего вычисления.\n        // Для Watcher возвращает набор сигналов, за которыми он следит.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Возвращает Watcher'ы, в которые входит этот сигнал, а также все\n        // вычисляемые сигналы, которые читали этот сигнал при последнем вычислении,\n        // если этот вычисляемый сигнал (рекурсивно) наблюдается.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // Истинно, если сигнал «живой», то есть за ним следит Watcher,\n        // или его читает вычисляемый сигнал, который (рекурсивно) жив.\n        function hasSinks(s: State | Computed): boolean;\n\n        // Истинно, если элемент «реактивный», то есть зависит\n        // от какого-либо другого сигнала. Computed с hasSources == false\n        // всегда будет возвращать одну и ту же константу.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // Когда (рекурсивный) источник Watcher изменяется, вызывается этот обратный вызов,\n            // если он ещё не был вызван с момента последнего вызова `watch`.\n            // Во время notify нельзя читать или писать сигналы.\n            constructor(notify: (this: Watcher) => void);\n\n            // Добавить эти сигналы в набор Watcher и установить Watcher для выполнения\n            // notify при следующем изменении любого сигнала в наборе (или его зависимостей).\n            // Можно вызвать без аргументов, чтобы просто сбросить состояние «уведомлено»,\n            // чтобы notify был вызван снова.\n            watch(...s: Signal[]): void;\n\n            // Удалить эти сигналы из набора (например, для эффекта, который уничтожается)\n            unwatch(...s: Signal[]): void;\n\n            // Возвращает набор источников в наборе Watcher, которые всё ещё «грязные», либо вычисляемый сигнал,\n            // у которого источник грязный или ожидает и ещё не был пересчитан\n            getPending(): Signal[];\n        }\n\n        // Хуки для отслеживания момента, когда за сигналом начинают или перестают следить\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Пользовательская функция сравнения между старым и новым значением. По умолчанию: Object.is.\n        // Сигнал передаётся как this для контекста.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "status": "ok"
}