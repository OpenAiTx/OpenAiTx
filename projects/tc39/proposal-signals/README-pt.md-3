{
  "id": 3,
  "origin": "    * Note that most frameworks today require explicit disposal of computed Signals if they have any reference to or from another Signal graph which remains alive.\n    * This ends up not being so bad when their lifetime is tied to the lifetime of a UI component, and effects need to be disposed of anyway.\n    * If it is too expensive to execute with these semantics, then we should add explicit disposal (or \"unlinking\") of computed Signals to the API below, which currently lacks it.\n* A separate related goal: Minimize the number of allocations, e.g.,\n    * to make a writable Signal (avoid two separate closures + array)\n    * to implement effects (avoid a closure for every single reaction)\n    * In the API for observing Signal changes, avoid creating additional temporary data structures\n    * Solution: Class-based API enabling reuse of methods and fields defined in subclasses\n\n## API sketch\n\nAn initial idea of a Signal API is below. Note that this is just an early draft, and we anticipate changes over time. Let's start with the full `.d.ts` to get an idea of the overall shape, and then we'll discuss the details of what it all means.\n\n```ts\ninterface Signal<T> {\n    // Get the value of the signal\n    get(): T;\n}\n\nnamespace Signal {\n    // A read-write Signal\n    class State<T> implements Signal<T> {\n        // Create a state Signal starting with the value t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n\n        // Set the state Signal value to t\n        set(t: T): void;\n    }\n\n    // A Signal which is a formula based on other Signals\n    class Computed<T = unknown> implements Signal<T> {\n        // Create a Signal which evaluates to the value returned by the callback.\n        // Callback is called with this signal as the this value.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n    }\n\n    // This namespace includes \"advanced\" features that are better to\n    // leave for framework authors rather than application developers.\n    // Analogous to `crypto.subtle`\n    namespace subtle {\n        // Run a callback with all tracking disabled\n        function untrack<T>(cb: () => T): T;\n\n        // Get the current computed signal which is tracking any signal reads, if any\n        function currentComputed(): Computed | null;\n\n        // Returns ordered list of all signals which this one referenced\n        // during the last time it was evaluated.\n        // For a Watcher, lists the set of signals which it is watching.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Returns the Watchers that this signal is contained in, plus any\n        // Computed signals which read this signal last time they were evaluated,\n        // if that computed signal is (recursively) watched.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // True if this signal is \"live\", in that it is watched by a Watcher,\n        // or it is read by a Computed signal which is (recursively) live.\n        function hasSinks(s: State | Computed): boolean;\n\n        // True if this element is \"reactive\", in that it depends\n        // on some other signal. A Computed where hasSources is false\n        // will always return the same constant.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // When a (recursive) source of Watcher is written to, call this callback,\n            // if it hasn't already been called since the last `watch` call.\n            // No signals may be read or written during the notify.\n            constructor(notify: (this: Watcher) => void);\n\n            // Add these signals to the Watcher's set, and set the watcher to run its\n            // notify callback next time any signal in the set (or one of its dependencies) changes.\n            // Can be called with no arguments just to reset the \"notified\" state, so that\n            // the notify callback will be invoked again.\n            watch(...s: Signal[]): void;\n\n            // Remove these signals from the watched set (e.g., for an effect which is disposed)\n            unwatch(...s: Signal[]): void;\n\n            // Returns the set of sources in the Watcher's set which are still dirty, or is a computed signal\n            // with a source which is dirty or pending and hasn't yet been re-evaluated\n            getPending(): Signal[];\n        }\n\n        // Hooks to observe being watched or no longer watched\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Custom comparison function between old and new value. Default: Object.is.\n        // The signal is passed in as the this value for context.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "translate": "* Observe que a maioria dos frameworks atualmente exige o descarte explícito de Signals computados se eles tiverem qualquer referência para ou de outro grafo de Signal que permaneça ativo.\n* Isso acaba não sendo tão ruim quando sua vida útil está atrelada à vida útil de um componente de UI, e efeitos precisam ser descartados de qualquer forma.\n* Se for muito caro executar com essa semântica, então devemos adicionar descarte explícito (ou \"desvinculação\") de Signals computados à API abaixo, que atualmente não possui isso.\n* Um objetivo relacionado separado: Minimizar o número de alocações, por exemplo,\n    * para criar um Signal gravável (evitar dois closures separados + array)\n    * para implementar efeitos (evitar um closure para cada reação individual)\n    * Na API para observar mudanças de Signal, evitar a criação de estruturas de dados temporárias adicionais\n    * Solução: API baseada em classes permitindo o reuso de métodos e campos definidos em subclasses\n\n## Esboço da API\n\nUma ideia inicial de uma API de Signal está abaixo. Observe que este é apenas um rascunho inicial e antecipamos mudanças ao longo do tempo. Vamos começar com o `.d.ts` completo para ter uma ideia do formato geral e, em seguida, discutiremos os detalhes do que tudo isso significa.\n\n```ts\ninterface Signal<T> {\n    // Obtém o valor do signal\n    get(): T;\n}\n\nnamespace Signal {\n    // Um Signal de leitura e escrita\n    class State<T> implements Signal<T> {\n        // Cria um Signal de estado iniciando com o valor t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Obtém o valor do signal\n        get(): T;\n\n        // Define o valor do Signal de estado para t\n        set(t: T): void;\n    }\n\n    // Um Signal que é uma fórmula baseada em outros Signals\n    class Computed<T = unknown> implements Signal<T> {\n        // Cria um Signal que avalia para o valor retornado pelo callback.\n        // O callback é chamado com este signal como valor de this.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Obtém o valor do signal\n        get(): T;\n    }\n\n    // Este namespace inclui recursos \"avançados\" que são melhores\n    // deixar para autores de frameworks ao invés de desenvolvedores de aplicações.\n    // Análogo a `crypto.subtle`\n    namespace subtle {\n        // Executa um callback com todo rastreamento desabilitado\n        function untrack<T>(cb: () => T): T;\n\n        // Obtém o signal computado atual que está rastreando leituras de qualquer signal, se houver\n        function currentComputed(): Computed | null;\n\n        // Retorna a lista ordenada de todos os signals que este referenciou\n        // durante a última vez em que foi avaliado.\n        // Para um Watcher, lista o conjunto de signals que ele está observando.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Retorna os Watchers nos quais este signal está contido, além de quaisquer\n        // Signals Computed que leram este signal da última vez em que foram avaliados,\n        // se esse signal computed está (recursivamente) sendo observado.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // Verdadeiro se este signal está \"ativo\", ou seja, está sendo observado por um Watcher,\n        // ou é lido por um signal Computed que está (recursivamente) ativo.\n        function hasSinks(s: State | Computed): boolean;\n\n        // Verdadeiro se este elemento é \"reativo\", ou seja, depende\n        // de algum outro signal. Um Computed onde hasSources é falso\n        // sempre retornará a mesma constante.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // Quando uma fonte (recursiva) do Watcher é escrita, chama este callback,\n            // se ainda não foi chamado desde a última chamada de `watch`.\n            // Nenhum signal pode ser lido ou escrito durante o notify.\n            constructor(notify: (this: Watcher) => void);\n\n            // Adiciona estes signals ao conjunto do Watcher e define o watcher para executar seu\n            // callback notify na próxima vez que qualquer signal do conjunto (ou um de seus dependentes) mudar.\n            // Pode ser chamado sem argumentos apenas para redefinir o estado \"notificado\", para que\n            // o callback notify seja invocado novamente.\n            watch(...s: Signal[]): void;\n\n            // Remove estes signals do conjunto observado (ex.: para um efeito que foi descartado)\n            unwatch(...s: Signal[]): void;\n\n            // Retorna o conjunto de fontes no conjunto do Watcher que ainda estão sujas, ou é um signal computed\n            // com uma fonte que está suja ou pendente e ainda não foi reavaliada\n            getPending(): Signal[];\n        }\n\n        // Hooks para observar quando está sendo observado ou deixou de ser observado\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Função de comparação personalizada entre o valor antigo e o novo. Padrão: Object.is.\n        // O signal é passado como valor de this para contexto.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "status": "ok"
}