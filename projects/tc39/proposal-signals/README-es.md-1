{
  "id": 1,
  "origin": "# üö¶ JavaScript Signals standard proposalüö¶\n<img align=right src=\"Signals.svg\" alt=\"Signals logo\" width=100>\n\nStage 1 ([explanation](https://tc39.es/process-document/))\n\nTC39 proposal champions: Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nOriginal authors: Rob Eisenberg and Daniel Ehrenberg\n\nThis document describes an early common direction for signals in JavaScript, similar to the Promises/A+ effort which preceded the Promises standardized by TC39 in ES2015. Try it for yourself, using [a polyfill](https://github.com/proposal-signals/signal-polyfill).\n\nSimilarly to Promises/A+, this effort focuses on aligning the JavaScript ecosystem. If this alignment is successful, then a standard could emerge, based on that experience. Several framework authors are collaborating here on a common model which could back their reactivity core. The current draft is based on design input from the authors/maintainers of [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a), and more‚Ä¶\n\nDifferently from Promises/A+, we're not trying to solve for a common developer-facing surface API, but rather the precise core semantics of the underlying signal graph. This proposal does include a fully concrete API, but the API is not targeted to most application developers. Instead, the signal API here is a better fit for frameworks to build on top of, providing interoperability through common signal graph and auto-tracking mechanism.\n\nThe plan for this proposal is to do significant early prototyping, including integration into several frameworks, before advancing beyond Stage 1. We are only interested in standardizing Signals if they are suitable for use in practice in multiple frameworks, and provide real benefits over framework-provided signals. We hope that significant early prototyping will give us this information. See \"Status and development plan\" below for more details.\n\n## Background: Why Signals?\n\nTo develop a complicated user interface (UI), JavaScript application developers need to store, compute, invalidate, sync, and push state to the application's view layer in an efficient way. UIs commonly involve more than just managing simple values, but often involve rendering computed state which is dependent on a complex tree of other values or state that is also computed itself. The goal of Signals is to provide infrastructure for managing such application state so developers can focus on business logic rather than these repetitive details.\n\nSignal-like constructs have independently been found to be useful in non-UI contexts as well, particularly in build systems to avoid unnecessary rebuilds.\n\nSignals are used in reactive programming to remove the need to manage updating in applications.\n\n> A declarative programming model for updating based on changes to state.\n\nfrom _[What is Reactivity?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### Example - A VanillaJS Counter\n\nGiven a variable, `counter`, you want to render into the DOM whether the counter is even or odd. Whenever the `counter` changes, you want to update the DOM with the latest parity. In Vanilla JS, you might have something like this:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simulate external updates to counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTE]  \n> Globals are used here for demonstration purposes only. Proper state management has many solutions, and the examples in this proposal are meant to be as minimal as possible. This proposal does not encourage global variables.\n\n\nThis has a number of problems...\n\n* The `counter` setup is noisy and boilerplate-heavy.\n* The `counter` state is tightly coupled to the rendering system.\n* If the `counter` changes but `parity` does not (e.g. counter goes from 2 to 4), then we do unnecessary computation of the parity and unnecessary rendering.\n* What if another part of our UI just wants to render when the `counter` updates?\n* What if another part of our UI is dependent on `isEven` or `parity` alone?\n\nEven in this relatively simple scenario, a number of issues arise quickly. We could try to work around these by introducing pub/sub for the `counter`. This would allow additional consumers of the `counter` could subscribe to add their own reactions to state changes.\n\nHowever, we're still stuck with the following problems:\n\n* The render function, which is only dependent on `parity` must instead \"know\" that it actually needs to subscribe to `counter`.\n* It isn't possible to update UI based on either `isEven` or `parity` alone, without directly interacting with `counter`.\n* We've increased our boilerplate. Any time you are using something, it's not just a matter of calling a function or reading a variable, but instead subscribing and doing updates there. Managing unsubscription is also especially complicated.\n\nNow, we could solve a couple issues by adding pub/sub not just to `counter` but also to `isEven` and `parity`. We would then have to subscribe `isEven` to `counter`,  `parity` to `isEven`, and `render` to `parity`. Unfortunately, not only has our boilerplate code exploded, but we're stuck with a ton of bookkeeping of subscriptions, and a potential memory leak disaster if we don't properly clean everything up in the right way. So, we've solved some issues but created a whole new category of problems and a lot of code. To make matters worse, we have to go through this entire process for every piece of state in our system.\n\n### Introducing Signals\n\nData binding abstractions in UIs for the model and view have long been core to UI frameworks across multiple programming languages, despite the absence of any such mechanism built into JS or the web platform. Within JS frameworks and libraries, there has been a large amount of experimentation across different ways to represent this binding, and experience has shown the power of one-way data flow in conjunction with a first-class data type representing a cell of state or computation derived from other data, now often called \"Signals\".\nThis first-class reactive value approach seems to have made its first popular appearance in open-source JavaScript web frameworks with [Knockout](https://knockoutjs.com/) [in 2010](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/). In the years since, many variations and implementations have been created. Within the last 3-4 years, the Signal primitive and related approaches have gained further traction, with nearly every modern JavaScript library or framework having something similar, under one name or another.\n\nTo understand Signals, let's take a look at the above example, re-imagined with a Signal API further articulated below.\n\n#### Example - A Signals Counter\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// A library or framework defines effects based on other Signal primitives\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simulate external updates to counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nThere are a few things we can see right away:\n* We've eliminated the noisy boilerplate around the `counter` variable from our previous example.\n* There is a unified API to handle values, computations, and side effects.\n* There's no circular reference problem or upside down dependencies between `counter` and `render`.\n* There are no manual subscriptions, nor is there any need for bookkeeping.\n* There is a means of controlling side-effect timing/scheduling.\n\nSignals give us much more than what can be seen on the surface of the API though:",
  "translate": "# üö¶ Propuesta de est√°ndar de Signals en JavaScript üö¶\n<img align=right src=\"https://raw.githubusercontent.com/tc39/proposal-signals/main/Signals.svg\" alt=\"Signals logo\" width=100>\n\nEtapa 1 ([explicaci√≥n](https://tc39.es/process-document/))\n\nChampions de la propuesta TC39: Daniel Ehrenberg, Yehuda Katz, Jatin Ramanathan, Shay Lewis, Kristen Hewell Garrett, Dominic Gannaway, Preston Sego, Milo M, Rob Eisenberg\n\nAutores originales: Rob Eisenberg y Daniel Ehrenberg\n\nEste documento describe una direcci√≥n com√∫n temprana para los signals en JavaScript, similar al esfuerzo Promises/A+ que precedi√≥ a las Promises estandarizadas por TC39 en ES2015. Pru√©balo t√∫ mismo, usando [un polyfill](https://github.com/proposal-signals/signal-polyfill).\n\nDe manera similar a Promises/A+, este esfuerzo se enfoca en alinear el ecosistema de JavaScript. Si esta alineaci√≥n tiene √©xito, entonces podr√≠a surgir un est√°ndar, basado en esa experiencia. Varios autores de frameworks est√°n colaborando aqu√≠ en un modelo com√∫n que podr√≠a respaldar el n√∫cleo de reactividad de sus frameworks. El borrador actual se basa en aportes de dise√±o de los autores/mantenedores de [Angular](https://angular.io/), [Bubble](https://bubble.io/), [Ember](https://emberjs.com/), [FAST](https://www.fast.design/), [MobX](https://mobx.js.org/), [Preact](https://preactjs.com/), [Qwik](https://qwik.dev/), [RxJS](https://rxjs.dev/), [Solid](https://www.solidjs.com/), [Starbeam](https://www.starbeamjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [Wiz](https://blog.angular.io/angular-and-wiz-are-better-together-91e633d8cd5a), y m√°s‚Ä¶\n\nA diferencia de Promises/A+, no estamos tratando de resolver una API com√∫n orientada al desarrollador, sino m√°s bien las sem√°nticas precisas del n√∫cleo del grafo de signals subyacente. Esta propuesta s√≠ incluye una API completamente concreta, pero la API no est√° dirigida a la mayor√≠a de los desarrolladores de aplicaciones. En cambio, la API de signals aqu√≠ es m√°s adecuada para que los frameworks construyan sobre ella, proporcionando interoperabilidad a trav√©s de un grafo de signals com√∫n y un mecanismo de auto-seguimiento.\n\nEl plan para esta propuesta es realizar prototipos tempranos significativos, incluida la integraci√≥n en varios frameworks, antes de avanzar m√°s all√° de la Etapa 1. Solo estamos interesados en estandarizar Signals si son adecuados para su uso pr√°ctico en m√∫ltiples frameworks y proporcionan beneficios reales sobre los signals provistos por los frameworks. Esperamos que una fase de prototipado temprano nos brinde esta informaci√≥n. Consulta \"Estado y plan de desarrollo\" m√°s abajo para m√°s detalles.\n\n## Antecedentes: ¬øPor qu√© Signals?\n\nPara desarrollar una interfaz de usuario (UI) complicada, los desarrolladores de aplicaciones JavaScript necesitan almacenar, computar, invalidar, sincronizar y enviar el estado a la capa de vista de la aplicaci√≥n de manera eficiente. Las UI com√∫nmente implican mucho m√°s que simplemente gestionar valores simples, a menudo implican renderizar un estado computado que depende de un √°rbol complejo de otros valores o estados que tambi√©n son computados. El objetivo de los Signals es proporcionar infraestructura para gestionar este estado de aplicaci√≥n, de modo que los desarrolladores puedan enfocarse en la l√≥gica de negocio en lugar de estos detalles repetitivos.\n\nSe ha descubierto que los constructos tipo signal son √∫tiles de manera independiente tambi√©n en contextos no relacionados con UI, particularmente en sistemas de build para evitar reconstrucciones innecesarias.\n\nLos signals se utilizan en la programaci√≥n reactiva para eliminar la necesidad de gestionar actualizaciones en las aplicaciones.\n\n> Un modelo de programaci√≥n declarativo para actualizar en funci√≥n de cambios en el estado.\n\nde _[¬øQu√© es la reactividad?](https://www.pzuraq.com/blog/what-is-reactivity)_.\n\n#### Ejemplo - Un contador en VanillaJS\n\nDada una variable, `counter`, quieres renderizar en el DOM si el contador es par o impar. Cada vez que `counter` cambie, quieres actualizar el DOM con la √∫ltima paridad. En Vanilla JS, podr√≠as tener algo as√≠:\n\n```js\nlet counter = 0;\nconst setCounter = (value) => {\n  counter = value;\n  render();\n};\n\nconst isEven = () => (counter & 1) == 0;\nconst parity = () => isEven() ? \"even\" : \"odd\";\nconst render = () => element.innerText = parity();\n\n// Simula actualizaciones externas a counter...\nsetInterval(() => setCounter(counter + 1), 1000);\n```\n> [!NOTA]  \n> Se usan variables globales aqu√≠ solo para prop√≥sitos de demostraci√≥n. La gesti√≥n adecuada de estado tiene muchas soluciones, y los ejemplos en esta propuesta buscan ser lo m√°s minimalistas posible. Esta propuesta no fomenta el uso de variables globales.\n\n\nEsto tiene varios problemas...\n\n* La configuraci√≥n de `counter` es ruidosa y con mucho c√≥digo repetitivo.\n* El estado de `counter` est√° fuertemente acoplado al sistema de renderizado.\n* Si `counter` cambia pero `parity` no (por ejemplo, counter pasa de 2 a 4), entonces hacemos un c√°lculo innecesario de la paridad y un renderizado innecesario.\n* ¬øQu√© pasa si otra parte de nuestra UI solo quiere renderizar cuando `counter` se actualiza?\n* ¬øQu√© pasa si otra parte de nuestra UI depende solo de `isEven` o `parity`?\n\nIncluso en este escenario relativamente simple, aparecen varios problemas r√°pidamente. Podr√≠amos intentar solucionar esto introduciendo pub/sub para `counter`. Esto permitir√≠a que consumidores adicionales de `counter` puedan suscribirse para a√±adir sus propias reacciones a los cambios de estado.\n\nSin embargo, a√∫n estamos atascados con los siguientes problemas:\n\n* La funci√≥n de renderizado, que solo depende de `parity`, en su lugar debe \"saber\" que en realidad necesita suscribirse a `counter`.\n* No es posible actualizar la UI en funci√≥n solo de `isEven` o `parity`, sin interactuar directamente con `counter`.\n* Hemos incrementado nuestro c√≥digo repetitivo. Cada vez que usas algo, no es solo cuesti√≥n de llamar una funci√≥n o leer una variable, sino de suscribirse y hacer actualizaciones all√≠. Gestionar la desuscripci√≥n tambi√©n es especialmente complicado.\n\nAhora, podr√≠amos resolver algunos problemas a√±adiendo pub/sub no solo a `counter` sino tambi√©n a `isEven` y `parity`. Entonces tendr√≠amos que suscribir `isEven` a `counter`, `parity` a `isEven`, y `render` a `parity`. Desafortunadamente, no solo nuestro c√≥digo repetitivo ha explotado, sino que estamos atrapados con un mont√≥n de gesti√≥n de suscripciones, y un posible desastre de fugas de memoria si no limpiamos todo correctamente. As√≠ que, hemos resuelto algunos problemas pero creado toda una nueva categor√≠a de problemas y mucho c√≥digo. Para empeorar las cosas, tenemos que pasar por este proceso para cada pieza de estado en nuestro sistema.\n\n### Introducci√≥n a Signals\n\nLas abstracciones de data binding en las UI para el modelo y la vista han sido durante mucho tiempo fundamentales en los frameworks de UI en m√∫ltiples lenguajes de programaci√≥n, a pesar de la ausencia de tal mecanismo en JS o en la plataforma web. Dentro de los frameworks y librer√≠as JS, ha habido mucha experimentaci√≥n sobre diferentes formas de representar este binding, y la experiencia ha demostrado el poder del flujo de datos unidireccional en conjunto con un tipo de dato de primera clase que representa una celda de estado o un c√°lculo derivado de otros datos, ahora llamados a menudo \"Signals\".\nEste enfoque de valor reactivo de primera clase parece haber hecho su primera aparici√≥n popular en frameworks web de JavaScript de c√≥digo abierto con [Knockout](https://knockoutjs.com/) [en 2010](https://blog.stevensanderson.com/2010/07/05/introducing-knockout-a-ui-library-for-javascript/). En los a√±os siguientes, se han creado muchas variaciones e implementaciones. En los √∫ltimos 3-4 a√±os, el primitivo Signal y enfoques relacionados han ganado a√∫n m√°s tracci√≥n, con casi todas las librer√≠as o frameworks modernos de JavaScript teniendo algo similar, bajo uno u otro nombre.\n\nPara entender Signals, echemos un vistazo al ejemplo anterior, reimaginado con una API de Signal m√°s detallada a continuaci√≥n.\n\n#### Ejemplo - Un contador con Signals\n\n```js\nconst counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// Una librer√≠a o framework define efectos en funci√≥n de otros primitivos Signal\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simula actualizaciones externas a counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);\n```\n\nHay algunas cosas que podemos notar de inmediato:\n* Hemos eliminado el c√≥digo repetitivo y ruidoso alrededor de la variable `counter` de nuestro ejemplo anterior.\n* Hay una API unificada para manejar valores, c√°lculos y efectos secundarios.\n* No hay problema de referencias circulares ni dependencias invertidas entre `counter` y `render`.\n* No hay suscripciones manuales, ni necesidad de gesti√≥n de registros.\n* Hay una forma de controlar el momento/la programaci√≥n de los efectos secundarios.\n\nSin embargo, los Signals nos brindan mucho m√°s que lo que se puede ver en la superficie de la API:",
  "status": "ok"
}