{
  "id": 3,
  "origin": "    * Note that most frameworks today require explicit disposal of computed Signals if they have any reference to or from another Signal graph which remains alive.\n    * This ends up not being so bad when their lifetime is tied to the lifetime of a UI component, and effects need to be disposed of anyway.\n    * If it is too expensive to execute with these semantics, then we should add explicit disposal (or \"unlinking\") of computed Signals to the API below, which currently lacks it.\n* A separate related goal: Minimize the number of allocations, e.g.,\n    * to make a writable Signal (avoid two separate closures + array)\n    * to implement effects (avoid a closure for every single reaction)\n    * In the API for observing Signal changes, avoid creating additional temporary data structures\n    * Solution: Class-based API enabling reuse of methods and fields defined in subclasses\n\n## API sketch\n\nAn initial idea of a Signal API is below. Note that this is just an early draft, and we anticipate changes over time. Let's start with the full `.d.ts` to get an idea of the overall shape, and then we'll discuss the details of what it all means.\n\n```ts\ninterface Signal<T> {\n    // Get the value of the signal\n    get(): T;\n}\n\nnamespace Signal {\n    // A read-write Signal\n    class State<T> implements Signal<T> {\n        // Create a state Signal starting with the value t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n\n        // Set the state Signal value to t\n        set(t: T): void;\n    }\n\n    // A Signal which is a formula based on other Signals\n    class Computed<T = unknown> implements Signal<T> {\n        // Create a Signal which evaluates to the value returned by the callback.\n        // Callback is called with this signal as the this value.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n    }\n\n    // This namespace includes \"advanced\" features that are better to\n    // leave for framework authors rather than application developers.\n    // Analogous to `crypto.subtle`\n    namespace subtle {\n        // Run a callback with all tracking disabled\n        function untrack<T>(cb: () => T): T;\n\n        // Get the current computed signal which is tracking any signal reads, if any\n        function currentComputed(): Computed | null;\n\n        // Returns ordered list of all signals which this one referenced\n        // during the last time it was evaluated.\n        // For a Watcher, lists the set of signals which it is watching.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Returns the Watchers that this signal is contained in, plus any\n        // Computed signals which read this signal last time they were evaluated,\n        // if that computed signal is (recursively) watched.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // True if this signal is \"live\", in that it is watched by a Watcher,\n        // or it is read by a Computed signal which is (recursively) live.\n        function hasSinks(s: State | Computed): boolean;\n\n        // True if this element is \"reactive\", in that it depends\n        // on some other signal. A Computed where hasSources is false\n        // will always return the same constant.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // When a (recursive) source of Watcher is written to, call this callback,\n            // if it hasn't already been called since the last `watch` call.\n            // No signals may be read or written during the notify.\n            constructor(notify: (this: Watcher) => void);\n\n            // Add these signals to the Watcher's set, and set the watcher to run its\n            // notify callback next time any signal in the set (or one of its dependencies) changes.\n            // Can be called with no arguments just to reset the \"notified\" state, so that\n            // the notify callback will be invoked again.\n            watch(...s: Signal[]): void;\n\n            // Remove these signals from the watched set (e.g., for an effect which is disposed)\n            unwatch(...s: Signal[]): void;\n\n            // Returns the set of sources in the Watcher's set which are still dirty, or is a computed signal\n            // with a source which is dirty or pending and hasn't yet been re-evaluated\n            getPending(): Signal[];\n        }\n\n        // Hooks to observe being watched or no longer watched\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Custom comparison function between old and new value. Default: Object.is.\n        // The signal is passed in as the this value for context.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "translate": "* Perhatikan bahwa sebagian besar framework saat ini memerlukan pembuangan eksplisit dari Signal terkomputasi jika mereka memiliki referensi ke atau dari grafik Signal lain yang tetap hidup.\n* Ini akhirnya tidak terlalu buruk ketika masa hidupnya terkait dengan masa hidup komponen UI, dan efek memang perlu dibuang.\n* Jika terlalu mahal untuk dijalankan dengan semantik ini, maka kita sebaiknya menambahkan pembuangan eksplisit (atau \"unlinking\") dari Signal terkomputasi ke API di bawah, yang saat ini belum memilikinya.\n* Tujuan terkait yang terpisah: Meminimalkan jumlah alokasi, misalnya,\n    * untuk membuat Signal yang dapat ditulis (menghindari dua closure terpisah + array)\n    * untuk mengimplementasikan efek (menghindari closure untuk setiap reaksi)\n    * Dalam API untuk mengamati perubahan Signal, hindari pembuatan struktur data sementara tambahan\n    * Solusi: API berbasis kelas yang memungkinkan penggunaan ulang metode dan field yang didefinisikan di subclass\n\n## Sketsa API\n\nIde awal dari API Signal terdapat di bawah ini. Perlu dicatat bahwa ini hanyalah draf awal, dan kami memperkirakan akan ada perubahan seiring waktu. Mari mulai dengan file `.d.ts` lengkap untuk mendapatkan gambaran bentuk keseluruhannya, lalu kita akan membahas detail tentang maknanya.\n\n```ts\ninterface Signal<T> {\n    // Mengambil nilai signal\n    get(): T;\n}\n\nnamespace Signal {\n    // Signal baca-tulis\n    class State<T> implements Signal<T> {\n        // Membuat Signal state yang dimulai dengan nilai t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Mengambil nilai signal\n        get(): T;\n\n        // Mengatur nilai Signal state ke t\n        set(t: T): void;\n    }\n\n    // Signal yang merupakan rumus berdasarkan Signal lain\n    class Computed<T = unknown> implements Signal<T> {\n        // Membuat Signal yang mengevaluasi nilai yang dikembalikan oleh callback.\n        // Callback dipanggil dengan signal ini sebagai nilai this.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Mengambil nilai signal\n        get(): T;\n    }\n\n    // Namespace ini mencakup fitur \"lanjutan\" yang lebih baik\n    // diserahkan untuk penulis framework daripada pengembang aplikasi.\n    // Analog dengan `crypto.subtle`\n    namespace subtle {\n        // Menjalankan callback dengan semua pelacakan dinonaktifkan\n        function untrack<T>(cb: () => T): T;\n\n        // Mengambil signal computed saat ini yang sedang melacak pembacaan signal, jika ada\n        function currentComputed(): Computed | null;\n\n        // Mengembalikan daftar berurutan dari semua signal yang dirujuk oleh signal ini\n        // selama terakhir kali dievaluasi.\n        // Untuk Watcher, mencantumkan set signal yang diawasi.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Mengembalikan Watcher yang mencakup signal ini, plus semua\n        // Signal Computed yang membaca signal ini terakhir kali dievaluasi,\n        // jika signal computed tersebut (secara rekursif) diawasi.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // True jika signal ini \"hidup\", yaitu diawasi oleh Watcher,\n        // atau dibaca oleh signal Computed yang (secara rekursif) hidup.\n        function hasSinks(s: State | Computed): boolean;\n\n        // True jika elemen ini \"reaktif\", yaitu bergantung\n        // pada signal lain. Computed di mana hasSources bernilai false\n        // akan selalu mengembalikan nilai konstan yang sama.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // Ketika sumber (rekursif) dari Watcher ditulis, panggil callback ini,\n            // jika belum dipanggil sejak pemanggilan `watch` terakhir.\n            // Tidak ada signal yang boleh dibaca atau ditulis selama notify.\n            constructor(notify: (this: Watcher) => void);\n\n            // Tambahkan signal-signal ini ke dalam set Watcher, dan atur Watcher agar menjalankan\n            // callback notify pada saat berikutnya salah satu signal dalam set (atau salah satu dependensinya) berubah.\n            // Dapat dipanggil tanpa argumen hanya untuk mereset status \"notified\", sehingga\n            // callback notify akan dipanggil lagi.\n            watch(...s: Signal[]): void;\n\n            // Menghapus signal-signal ini dari set yang diawasi (misalnya, untuk efek yang dibuang)\n            unwatch(...s: Signal[]): void;\n\n            // Mengembalikan set sumber dalam set Watcher yang masih dirty, atau merupakan signal computed\n            // dengan sumber yang dirty atau pending dan belum dievaluasi ulang\n            getPending(): Signal[];\n        }\n\n        // Hook untuk mengamati saat mulai diawasi atau tidak lagi diawasi\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Fungsi perbandingan khusus antara nilai lama dan baru. Default: Object.is.\n        // Signal diberikan sebagai nilai this untuk konteks.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;\n```",
  "status": "ok"
}