{
  "id": 8,
  "origin": "\n**Q**: Do Signals work with one-way data flow like React does?\n\n**A**: Yes, Signals are a mechanism for one-way dataflow. Signal-based UI frameworks let you express your view as a function of the model (where the model incorporates Signals). A graph of state and computed Signals is acyclic by construction. It is also possible to recreate React antipatterns within Signals (!), e.g., the Signal equivalent of a `setState` inside of `useEffect` is to use a Watcher to schedule a write to a State signal.\n\n**Q**: How do signals relate to state management systems like Redux? Do signals encourage unstructured state?\n\n**A**: Signals can form an efficient basis for store-like state management abstractions. A common pattern found in multiple frameworks is an object based on a Proxy which internally represents properties using Signals, e.g., [Vue `reactive()`](https://vuejs.org/api/reactivity-core.html#reactive), or [Solid stores](https://docs.solidjs.com/concepts/stores). These systems enable flexible grouping of state at the right level of abstraction for the particular application.\n\n**Q**: What are Signals offering that `Proxy` doesn't currently handle?\n\n**A**: Proxies and Signals are complementary and go well together. Proxies let you intercept shallow object operations and signals coordinate a dependency graph (of cells). Backing a Proxy with Signals is a great way to make a nested reactive structure with great ergonomics.\n\nIn this example, we can use a proxy to make the signal have a getter and setter property instead of using the `get` and `set` methods:\n```js\nconst a = new Signal.State(0);\nconst b = new Proxy(a, {\n  get(target, property, receiver) {\n    if (property === 'value') {\n      return target.get():\n    }\n  }\n  set(target, property, value, receiver) {\n    if (property === 'value') {\n      target.set(value)!\n    }\n  }\n});\n\n// usage in a hypothetical reactive context:\n<template>\n  {b.value}\n\n  <button onclick={() => {\n    b.value++;\n  }}>change</button>\n</template>\n```\nwhen using a renderer that is optimized for fine-grained reactivity, clicking the button will cause the `b.value` cell to be updated.\n\nSee:\n- examples of nested reactive structures created with both Signals and Proxies: [signal-utils](https://github.com/NullVoxPopuli/signal-utils/tree/main/src)\n- example prior implementations showing the relationship between reactive data atd proxies: [tracked-built-ins](https://github.com/tracked-tools/tracked-built-ins/tree/master/addon/src/-private)\n- [discussion](https://github.com/proposal-signals/proposal-signals/issues/101#issuecomment-2029802574).\n\n#### How do Signals work?\n\n**Q**: Are Signals push-based or pull-based?\n\n**A**: Evaluation of computed Signals is pull-based: computed Signals are only evaluated when `.get()` is called, even if the underlying state changed much earlier. At the same time, changing a State signal may immediately trigger a Watcher's callback, \"pushing\" the notification. So Signals may be thought of as a \"push-pull\" construction.\n\n**Q**: Do Signals introduce nondeterminism into JavaScript execution?\n\n**A**: No. For one, all Signal operations have well-defined semantics and ordering, and will not differ among conformant implementations. At a higher level, Signals follow a certain set of invariants, with respect to which they are \"sound\". A computed Signal always observes the Signal graph in a consistent state, and its execution is not interrupted by other Signal-mutating code (except for things it calls itself). See the description above.\n\n**Q**: When I write to a state Signal, when is the update to the computed Signal scheduled?\n\n**A**: It isn't scheduled! The computed Signal will recalculate itself the next time someone reads it. Synchronously, a Watcher's `notify` callback may be called, enabling frameworks to schedule a read at the time that they find appropriate.\n\n**Q**: When do writes to state Signals take effect? Immediately, or are they batched?\n\n**A**: Writes to state Signals are reflected immediately--the next time a computed Signal which depends on the state Signal is read, it will recalculate itself if needed, even if in the immediately following line of code. However, the laziness inherent in this mechanism (that computed Signals are only computed when read) means that, in practice, the calculations may happen in a batched way.\n\n**Q**: What does it mean for Signals to enable \"glitch-free\" execution?\n\n**A**: Earlier push-based models for reactivity faced an issue of redundant computation: If an update to a state Signal causes the computed Signal to eagerly run, ultimately this may push an update to the UI. But this write to the UI may be premature, if there was going to be another change to the originating state Signal before the next frame. Sometimes, inaccurate intermediate values were even shown to end-users due to such [glitches](https://en.wikipedia.org/wiki/Reactive_programming#Glitches). Signals avoid this dynamic by being pull-based, rather than push-based: At the time the framework schedules the rendering of the UI, it will pull the appropriate updates, avoiding wasted work both in computation as well as in writing to the DOM.\n\n**Q**: What does it mean for Signals to be \"lossy\"?\n\n**A**: This is the flipside of glitch-free execution: Signals represent a cell of data--just the immediate current value (which may change), not a stream of data over time. So, if you write to a state Signal twice in a row, without doing anything else, the first write is \"lost\" and never seen by any computed Signals or effects. This is understood to be a feature rather than a bug--other constructs (e.g., async iterables, observables) are more appropriate for streams.\n\n**Q**: Will native Signals be faster than existing JS Signal implementations?\n\n**A**: We hope so (by a small constant factor), but this remains to be proven in code. JS engines aren't magic, and will ultimately need to implement the same kinds of algorithms as JS implementations of Signals. See above section about performance.\n\n#### Why are Signals designed this way?\n\n**Q**: Why doesn't this proposal include an `effect()` function, when effects are necessary for any practical usage of Signals?\n\n**A**: Effects inherently tie into scheduling and disposal, which are managed by frameworks and outside the scope of this proposal. Instead, this proposal includes the basis for implementing effects through the more low-level `Signal.subtle.Watcher` API.\n\n**Q**: Why are subscriptions automatic rather than providing a manual interface?\n\n**A**: Experience has shown that manual subscription interfaces for reactivity are un-ergonomic and error-prone. Automatic tracking is more composable and is a core feature of Signals.\n\n**Q**: Why does the `Watcher`'s callback run synchronously, rather than scheduled in a microtask?\n\n**A**: Because the callback cannot read or write Signals, there is no unsoundness brought on by calling it synchronously. A typical callback will add a Signal to an Array to be read later, or mark a bit somewhere. It is unnecessary and impractically expensive to make a separate microtask for all of these sorts of actions.\n\n**Q**: This API is missing some nice things that my favorite framework provides, which makes it easier to program with Signals. Can that be added to the standard too?\n\n**A**: Maybe. Various extensions are still under consideration. Please file an issue to raise discussion on any missing feature you find to be important.\n\n**Q**: Can this API be reduced in size or complexity?\n\n**A**: It's definitely a goal to keep this API minimal, and we've tried to do so with what's presented above. If you have ideas for more things that can be removed, please file an issue to discuss.\n\n#### How are Signals being standardized?\n\n**Q**: Shouldn't we start standardization work in this area with a more primitive concept, such as observables?",
  "translate": "**В**: Работают ли сигналы с однонаправленным потоком данных, как это делает React?\n\n**О**: Да, сигналы являются механизмом для однонаправленного потока данных. UI-фреймворки на основе сигналов позволяют выразить представление как функцию от модели (где модель включает сигналы). Граф состояний и вычисляемых сигналов по определению ацикличен. Также возможно воспроизвести анти-паттерны React в рамках сигналов (!), например, эквивалент сигнала для `setState` внутри `useEffect` — это использование Watcher для планирования записи в сигнальный State.\n\n**В**: Как сигналы соотносятся с системами управления состоянием, такими как Redux? Поощряют ли сигналы неструктурированное состояние?\n\n**О**: Сигналы могут стать эффективной основой для абстракций управления состоянием, подобных хранилищу. Распространённый паттерн во многих фреймворках — это объект на основе Proxy, который внутренне представляет свойства с помощью сигналов, например, [Vue `reactive()`](https://vuejs.org/api/reactivity-core.html#reactive) или [Solid stores](https://docs.solidjs.com/concepts/stores). Эти системы позволяют гибко группировать состояние на нужном уровне абстракции для конкретного приложения.\n\n**В**: Что предлагают сигналы такого, чего не умеет `Proxy`?\n\n**О**: Proxy и сигналы дополняют друг друга и хорошо работают вместе. Proxy позволяет перехватывать поверхностные операции с объектами, а сигналы координируют граф зависимостей (ячеек). Использовать сигналы в качестве основы для Proxy — отличный способ создать вложенную реактивную структуру с хорошей эргономикой.\n\nВ этом примере мы можем использовать proxy для создания геттера и сеттера у сигнала вместо методов `get` и `set`:\n```js\nconst a = new Signal.State(0);\nconst b = new Proxy(a, {\n  get(target, property, receiver) {\n    if (property === 'value') {\n      return target.get():\n    }\n  }\n  set(target, property, value, receiver) {\n    if (property === 'value') {\n      target.set(value)!\n    }\n  }\n});\n\n// использование в гипотетическом реактивном контексте:\n<template>\n  {b.value}\n\n  <button onclick={() => {\n    b.value++;\n  }}>change</button>\n</template>\n```\nпри использовании рендера, оптимизированного для мелкозернистой реактивности, клик по кнопке вызовет обновление ячейки `b.value`.\n\nСм.:\n- примеры вложенных реактивных структур, созданных с помощью сигналов и Proxy: [signal-utils](https://github.com/NullVoxPopuli/signal-utils/tree/main/src)\n- пример предыдущих реализаций, показывающих связь между реактивными данными и прокси: [tracked-built-ins](https://github.com/tracked-tools/tracked-built-ins/tree/master/addon/src/-private)\n- [обсуждение](https://github.com/proposal-signals/proposal-signals/issues/101#issuecomment-2029802574).\n\n#### Как работают сигналы?\n\n**В**: Сигналы основаны на push- или pull-модели?\n\n**О**: Вычисление вычисляемых сигналов основано на pull-модели: вычисляемые сигналы пересчитываются только при вызове `.get()`, даже если базовое состояние изменилось намного раньше. В то же время, изменение State-сигнала может немедленно вызвать callback Watcher'а, \"проталкивая\" уведомление. Таким образом, сигналы можно рассматривать как конструкцию \"push-pull\".\n\n**В**: Вносят ли сигналы недетерминизм в выполнение JavaScript?\n\n**О**: Нет. Во-первых, все операции с сигналами имеют чётко определённую семантику и порядок, и не будут отличаться между корректными реализациями. На более высоком уровне сигналы следуют определённому набору инвариантов, относительно которых они \"корректны\". Вычисляемый сигнал всегда наблюдает граф сигналов в согласованном состоянии, и его выполнение не прерывается другим кодом, изменяющим сигналы (за исключением вызовов самого себя). См. описание выше.\n\n**В**: Когда я записываю в State-сигнал, когда обновление вычисляемого сигнала планируется?\n\n**О**: Оно не планируется! Вычисляемый сигнал пересчитает себя в следующий раз, когда его кто-то прочитает. Синхронно может быть вызван callback Watcher'а, что позволяет фреймворкам запланировать чтение в подходящий для них момент.\n\n**В**: Когда записи в State-сигналы вступают в силу? Немедленно или пакетно?\n\n**О**: Записи в State-сигналы отражаются немедленно — при следующем чтении вычисляемого сигнала, который зависит от State-сигнала, он пересчитает себя при необходимости, даже если это происходит в следующей строке кода. Однако, присущая механизму ленивость (вычисляемые сигналы вычисляются только при чтении) на практике приводит к тому, что вычисления могут происходить пакетно.\n\n**В**: Что означает, что сигналы обеспечивают \"безглитчевое\" выполнение?\n\n**О**: Более ранние push-модели реактивности сталкивались с проблемой избыточных вычислений: если изменение State-сигнала вызывает немедленный запуск вычисляемого сигнала, в итоге это может привести к обновлению UI. Однако это обновление может быть преждевременным, если до следующего кадра произойдет ещё одно изменение исходного State-сигнала. Иногда из-за таких [глитчей](https://en.wikipedia.org/wiki/Reactive_programming#Glitches) конечным пользователям даже показывались неверные промежуточные значения. Сигналы избегают этой проблемы, будучи основанными на pull-модели, а не push: в момент, когда фреймворк планирует рендеринг UI, он \"вытягивает\" актуальные обновления, избегая напрасной работы как при вычислениях, так и при записи в DOM.\n\n**В**: Что значит, что сигналы \"теряют\" значения (\"lossy\")?\n\n**О**: Это обратная сторона безглитчевого выполнения: сигналы представляют собой ячейку данных — только текущее значение (которое может измениться), а не поток данных во времени. Поэтому, если вы дважды подряд запишете в State-сигнал, не делая больше ничего, первая запись \"теряется\" и не видна ни одному вычисляемому сигналу или эффекту. Это считается достоинством, а не ошибкой — для потоков данных больше подходят другие конструкции (например, асинхронные итераторы, observables).\n\n**В**: Будут ли нативные сигналы быстрее существующих JS-реализаций сигналов?\n\n**О**: Мы надеемся на это (за счёт небольшого постоянного множителя), но это ещё предстоит доказать на практике. JS-движки — не магия, и им в конечном итоге придётся реализовать те же алгоритмы, что и JS-реализации сигналов. См. раздел выше о производительности.\n\n#### Почему сигналы устроены так?\n\n**В**: Почему в этом предложении не включена функция `effect()`, если эффекты необходимы для практического использования сигналов?\n\n**О**: Эффекты по своей природе связаны с планированием и удалением (disposal), которые управляются фреймворками и выходят за рамки этого предложения. Вместо этого в предложении есть основа для реализации эффектов через низкоуровневый API `Signal.subtle.Watcher`.\n\n**В**: Почему подписки происходят автоматически, а не с помощью ручного интерфейса?\n\n**О**: Опыт показал, что ручные интерфейсы подписки для реактивности неудобны и склонны к ошибкам. Автоматическое отслеживание более компонуемо и является ключевой особенностью сигналов.\n\n**В**: Почему callback Watcher'а вызывается синхронно, а не планируется в микротаск?\n\n**О**: Поскольку callback не может читать или писать сигналы, синхронный вызов не нарушает корректность. Типичный callback просто добавляет сигнал в массив для последующего чтения или выставляет где-то бит. Создавать отдельный микротаск для каждого такого действия не только излишне, но и непрактично дорого.\n\n**В**: В этом API не хватает некоторых удобных функций, которые есть в моём любимом фреймворке и которые упрощают работу с сигналами. Можно ли добавить их в стандарт?\n\n**О**: Возможно. Различные расширения всё ещё находятся на рассмотрении. Пожалуйста, заведите issue для обсуждения любой отсутствующей, по вашему мнению, важной функции.\n\n**В**: Можно ли уменьшить размер или сложность этого API?\n\n**О**: Это определённо цель — сделать API минимальным, и мы старались этого добиться в приведённом выше описании. Если у вас есть идеи, что ещё можно убрать, пожалуйста, создайте issue для обсуждения.\n\n#### Как проходит стандартизация сигналов?\n\n**В**: Разве не стоило бы начать работу по стандартизации с более примитивной концепции, такой как observables?",
  "status": "ok"
}