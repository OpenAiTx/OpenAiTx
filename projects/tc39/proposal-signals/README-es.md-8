{
  "id": 8,
  "origin": "\n**Q**: Do Signals work with one-way data flow like React does?\n\n**A**: Yes, Signals are a mechanism for one-way dataflow. Signal-based UI frameworks let you express your view as a function of the model (where the model incorporates Signals). A graph of state and computed Signals is acyclic by construction. It is also possible to recreate React antipatterns within Signals (!), e.g., the Signal equivalent of a `setState` inside of `useEffect` is to use a Watcher to schedule a write to a State signal.\n\n**Q**: How do signals relate to state management systems like Redux? Do signals encourage unstructured state?\n\n**A**: Signals can form an efficient basis for store-like state management abstractions. A common pattern found in multiple frameworks is an object based on a Proxy which internally represents properties using Signals, e.g., [Vue `reactive()`](https://vuejs.org/api/reactivity-core.html#reactive), or [Solid stores](https://docs.solidjs.com/concepts/stores). These systems enable flexible grouping of state at the right level of abstraction for the particular application.\n\n**Q**: What are Signals offering that `Proxy` doesn't currently handle?\n\n**A**: Proxies and Signals are complementary and go well together. Proxies let you intercept shallow object operations and signals coordinate a dependency graph (of cells). Backing a Proxy with Signals is a great way to make a nested reactive structure with great ergonomics.\n\nIn this example, we can use a proxy to make the signal have a getter and setter property instead of using the `get` and `set` methods:\n```js\nconst a = new Signal.State(0);\nconst b = new Proxy(a, {\n  get(target, property, receiver) {\n    if (property === 'value') {\n      return target.get():\n    }\n  }\n  set(target, property, value, receiver) {\n    if (property === 'value') {\n      target.set(value)!\n    }\n  }\n});\n\n// usage in a hypothetical reactive context:\n<template>\n  {b.value}\n\n  <button onclick={() => {\n    b.value++;\n  }}>change</button>\n</template>\n```\nwhen using a renderer that is optimized for fine-grained reactivity, clicking the button will cause the `b.value` cell to be updated.\n\nSee:\n- examples of nested reactive structures created with both Signals and Proxies: [signal-utils](https://github.com/NullVoxPopuli/signal-utils/tree/main/src)\n- example prior implementations showing the relationship between reactive data atd proxies: [tracked-built-ins](https://github.com/tracked-tools/tracked-built-ins/tree/master/addon/src/-private)\n- [discussion](https://github.com/proposal-signals/proposal-signals/issues/101#issuecomment-2029802574).\n\n#### How do Signals work?\n\n**Q**: Are Signals push-based or pull-based?\n\n**A**: Evaluation of computed Signals is pull-based: computed Signals are only evaluated when `.get()` is called, even if the underlying state changed much earlier. At the same time, changing a State signal may immediately trigger a Watcher's callback, \"pushing\" the notification. So Signals may be thought of as a \"push-pull\" construction.\n\n**Q**: Do Signals introduce nondeterminism into JavaScript execution?\n\n**A**: No. For one, all Signal operations have well-defined semantics and ordering, and will not differ among conformant implementations. At a higher level, Signals follow a certain set of invariants, with respect to which they are \"sound\". A computed Signal always observes the Signal graph in a consistent state, and its execution is not interrupted by other Signal-mutating code (except for things it calls itself). See the description above.\n\n**Q**: When I write to a state Signal, when is the update to the computed Signal scheduled?\n\n**A**: It isn't scheduled! The computed Signal will recalculate itself the next time someone reads it. Synchronously, a Watcher's `notify` callback may be called, enabling frameworks to schedule a read at the time that they find appropriate.\n\n**Q**: When do writes to state Signals take effect? Immediately, or are they batched?\n\n**A**: Writes to state Signals are reflected immediately--the next time a computed Signal which depends on the state Signal is read, it will recalculate itself if needed, even if in the immediately following line of code. However, the laziness inherent in this mechanism (that computed Signals are only computed when read) means that, in practice, the calculations may happen in a batched way.\n\n**Q**: What does it mean for Signals to enable \"glitch-free\" execution?\n\n**A**: Earlier push-based models for reactivity faced an issue of redundant computation: If an update to a state Signal causes the computed Signal to eagerly run, ultimately this may push an update to the UI. But this write to the UI may be premature, if there was going to be another change to the originating state Signal before the next frame. Sometimes, inaccurate intermediate values were even shown to end-users due to such [glitches](https://en.wikipedia.org/wiki/Reactive_programming#Glitches). Signals avoid this dynamic by being pull-based, rather than push-based: At the time the framework schedules the rendering of the UI, it will pull the appropriate updates, avoiding wasted work both in computation as well as in writing to the DOM.\n\n**Q**: What does it mean for Signals to be \"lossy\"?\n\n**A**: This is the flipside of glitch-free execution: Signals represent a cell of data--just the immediate current value (which may change), not a stream of data over time. So, if you write to a state Signal twice in a row, without doing anything else, the first write is \"lost\" and never seen by any computed Signals or effects. This is understood to be a feature rather than a bug--other constructs (e.g., async iterables, observables) are more appropriate for streams.\n\n**Q**: Will native Signals be faster than existing JS Signal implementations?\n\n**A**: We hope so (by a small constant factor), but this remains to be proven in code. JS engines aren't magic, and will ultimately need to implement the same kinds of algorithms as JS implementations of Signals. See above section about performance.\n\n#### Why are Signals designed this way?\n\n**Q**: Why doesn't this proposal include an `effect()` function, when effects are necessary for any practical usage of Signals?\n\n**A**: Effects inherently tie into scheduling and disposal, which are managed by frameworks and outside the scope of this proposal. Instead, this proposal includes the basis for implementing effects through the more low-level `Signal.subtle.Watcher` API.\n\n**Q**: Why are subscriptions automatic rather than providing a manual interface?\n\n**A**: Experience has shown that manual subscription interfaces for reactivity are un-ergonomic and error-prone. Automatic tracking is more composable and is a core feature of Signals.\n\n**Q**: Why does the `Watcher`'s callback run synchronously, rather than scheduled in a microtask?\n\n**A**: Because the callback cannot read or write Signals, there is no unsoundness brought on by calling it synchronously. A typical callback will add a Signal to an Array to be read later, or mark a bit somewhere. It is unnecessary and impractically expensive to make a separate microtask for all of these sorts of actions.\n\n**Q**: This API is missing some nice things that my favorite framework provides, which makes it easier to program with Signals. Can that be added to the standard too?\n\n**A**: Maybe. Various extensions are still under consideration. Please file an issue to raise discussion on any missing feature you find to be important.\n\n**Q**: Can this API be reduced in size or complexity?\n\n**A**: It's definitely a goal to keep this API minimal, and we've tried to do so with what's presented above. If you have ideas for more things that can be removed, please file an issue to discuss.\n\n#### How are Signals being standardized?\n\n**Q**: Shouldn't we start standardization work in this area with a more primitive concept, such as observables?",
  "translate": "**P**: ¿Funcionan las Signals con un flujo de datos unidireccional como lo hace React?\n\n**R**: Sí, las Signals son un mecanismo para el flujo de datos unidireccional. Los frameworks de UI basados en Signals te permiten expresar tu vista como una función del modelo (donde el modelo incorpora Signals). Un grafo de estado y Signals computadas es acíclico por construcción. También es posible recrear los anti-patrones de React dentro de Signals (!), por ejemplo, el equivalente a un `setState` dentro de `useEffect` sería usar un Watcher para programar una escritura en una Signal de estado.\n\n**P**: ¿Cómo se relacionan las signals con sistemas de gestión de estado como Redux? ¿Las signals fomentan un estado no estructurado?\n\n**R**: Las Signals pueden formar una base eficiente para abstracciones de gestión de estado similares a un store. Un patrón común en varios frameworks es un objeto basado en un Proxy que internamente representa las propiedades usando Signals, por ejemplo, [Vue `reactive()`](https://vuejs.org/api/reactivity-core.html#reactive), o [Solid stores](https://docs.solidjs.com/concepts/stores). Estos sistemas permiten agrupar el estado de manera flexible al nivel de abstracción adecuado para la aplicación en particular.\n\n**P**: ¿Qué ofrecen las Signals que `Proxy` no maneja actualmente?\n\n**R**: Los Proxies y las Signals son complementarios y funcionan bien juntos. Los Proxies te permiten interceptar operaciones superficiales de objetos y las signals coordinan un grafo de dependencias (de celdas). Respaldar un Proxy con Signals es una excelente manera de crear una estructura reactiva anidada con gran ergonomía.\n\nEn este ejemplo, podemos usar un proxy para hacer que la signal tenga una propiedad getter y setter en lugar de usar los métodos `get` y `set`:\n```js\nconst a = new Signal.State(0);\nconst b = new Proxy(a, {\n  get(target, property, receiver) {\n    if (property === 'value') {\n      return target.get():\n    }\n  }\n  set(target, property, value, receiver) {\n    if (property === 'value') {\n      target.set(value)!\n    }\n  }\n});\n\n// uso en un contexto reactivo hipotético:\n<template>\n  {b.value}\n\n  <button onclick={() => {\n    b.value++;\n  }}>cambiar</button>\n</template>\n```\nal usar un renderizador que esté optimizado para reactividad de grano fino, al hacer clic en el botón se actualizará la celda `b.value`.\n\nVer:\n- ejemplos de estructuras reactivas anidadas creadas con Signals y Proxies: [signal-utils](https://github.com/NullVoxPopuli/signal-utils/tree/main/src)\n- ejemplo de implementaciones anteriores que muestran la relación entre datos reactivos y proxies: [tracked-built-ins](https://github.com/tracked-tools/tracked-built-ins/tree/master/addon/src/-private)\n- [discusión](https://github.com/proposal-signals/proposal-signals/issues/101#issuecomment-2029802574).\n\n#### ¿Cómo funcionan las Signals?\n\n**P**: ¿Las Signals son basadas en push o en pull?\n\n**R**: La evaluación de las Signals computadas es basada en pull: las Signals computadas solo se evalúan cuando se llama a `.get()`, incluso si el estado subyacente cambió mucho antes. Al mismo tiempo, cambiar una Signal de estado puede activar inmediatamente el callback de un Watcher, \"empujando\" la notificación. Así que las Signals pueden considerarse como una construcción \"push-pull\".\n\n**P**: ¿Las Signals introducen no determinismo en la ejecución de JavaScript?\n\n**R**: No. Para empezar, todas las operaciones de Signal tienen semánticas y orden bien definidos, y no variarán entre implementaciones conformes. A un nivel superior, las Signals siguen un conjunto de invariantes con respecto a los cuales son \"correctas\". Una Signal computada siempre observa el grafo de signals en un estado consistente, y su ejecución no es interrumpida por otro código que modifique Signals (excepto por cosas que ella misma llame). Ver la descripción arriba.\n\n**P**: Cuando escribo en una Signal de estado, ¿cuándo se programa la actualización de la Signal computada?\n\n**R**: ¡No se programa! La Signal computada se recalculará la próxima vez que alguien la lea. De manera síncrona, se puede llamar al callback `notify` de un Watcher, permitiendo que los frameworks programen una lectura en el momento que consideren apropiado.\n\n**P**: ¿Cuándo surten efecto las escrituras en Signals de estado? ¿Inmediatamente o se agrupan (batched)?\n\n**R**: Las escrituras a las Signals de estado se reflejan inmediatamente: la próxima vez que se lea una Signal computada que depende de la Signal de estado, se recalculará si es necesario, incluso si es en la línea de código inmediatamente siguiente. Sin embargo, la pereza inherente en este mecanismo (que las Signals computadas solo se calculan cuando se leen) significa que, en la práctica, los cálculos pueden suceder de manera agrupada.\n\n**P**: ¿Qué significa que las Signals permitan una ejecución \"libre de glitches\"?\n\n**R**: Los modelos anteriores basados en push para la reactividad enfrentaban un problema de cálculo redundante: Si una actualización a una Signal de estado hace que la Signal computada se ejecute de inmediato, en última instancia, esto puede empujar una actualización a la UI. Pero esta escritura en la UI puede ser prematura, si iba a haber otro cambio en la Signal de estado original antes del siguiente frame. A veces, incluso se mostraban valores intermedios inexactos a los usuarios finales debido a estos [glitches](https://en.wikipedia.org/wiki/Reactive_programming#Glitches). Las Signals evitan esta dinámica siendo pull-based en vez de push-based: en el momento en que el framework programa el renderizado de la UI, extraerá las actualizaciones apropiadas, evitando trabajo innecesario tanto en el cálculo como en la escritura al DOM.\n\n**P**: ¿Qué significa que las Signals sean \"lossy\" (con pérdida)?\n\n**R**: Este es el reverso de la ejecución libre de glitches: las Signals representan una celda de datos--solo el valor actual inmediato (que puede cambiar), no un flujo de datos en el tiempo. Por lo tanto, si escribes en una Signal de estado dos veces seguidas, sin hacer nada más, la primera escritura se \"pierde\" y nunca será vista por ninguna Signal computada o efecto. Esto se entiende como una característica y no un error; otros constructos (por ejemplo, iterables async, observables) son más apropiados para flujos de datos.\n\n**P**: ¿Las Signals nativas serán más rápidas que las implementaciones JS existentes de Signals?\n\n**R**: Esperamos que sí (por un pequeño factor constante), pero esto aún debe demostrarse en código. Los motores JS no son mágicos y, en última instancia, necesitarán implementar los mismos tipos de algoritmos que las implementaciones JS de Signals. Ver la sección anterior sobre rendimiento.\n\n#### ¿Por qué las Signals están diseñadas de esta manera?\n\n**P**: ¿Por qué esta propuesta no incluye una función `effect()`, si los efectos son necesarios para el uso práctico de Signals?\n\n**R**: Los efectos están inherentemente ligados a la programación y disposición, que son gestionados por los frameworks y están fuera del alcance de esta propuesta. En su lugar, esta propuesta incluye la base para implementar efectos a través de la API de bajo nivel `Signal.subtle.Watcher`.\n\n**P**: ¿Por qué las suscripciones son automáticas en lugar de proveer una interfaz manual?\n\n**R**: La experiencia ha demostrado que las interfaces de suscripción manual para la reactividad no son ergonómicas y son propensas a errores. El rastreo automático es más componible y es una característica central de las Signals.\n\n**P**: ¿Por qué el callback del `Watcher` se ejecuta de forma síncrona en vez de programarse en una microtarea?\n\n**R**: Porque el callback no puede leer ni escribir Signals, no se produce ninguna incoherencia al llamarlo de forma síncrona. Un callback típico añadirá una Signal a un Array para leerla más tarde, o marcará un bit en algún lugar. Es innecesario y poco práctico crear una microtarea separada para todas estas acciones.\n\n**P**: A esta API le faltan algunas cosas útiles que proporciona mi framework favorito, lo que hace que sea más fácil programar con Signals. ¿Eso también se puede agregar al estándar?\n\n**R**: Tal vez. Varias extensiones todavía están bajo consideración. Por favor, abre un issue para iniciar una discusión sobre cualquier característica importante que consideres que falta.\n\n**P**: ¿Se puede reducir el tamaño o la complejidad de esta API?\n\n**R**: Definitivamente es un objetivo mantener esta API mínima, y hemos intentado hacerlo con lo presentado arriba. Si tienes ideas para más cosas que se puedan eliminar, por favor abre un issue para discutirlo.\n\n#### ¿Cómo se están estandarizando las Signals?\n\n**P**: ¿No deberíamos comenzar el trabajo de estandarización en esta área con un concepto más primitivo, como los observables?",
  "status": "ok"
}