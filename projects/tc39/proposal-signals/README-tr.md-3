{
  "id": 3,
  "origin": "    * Note that most frameworks today require explicit disposal of computed Signals if they have any reference to or from another Signal graph which remains alive.\n    * This ends up not being so bad when their lifetime is tied to the lifetime of a UI component, and effects need to be disposed of anyway.\n    * If it is too expensive to execute with these semantics, then we should add explicit disposal (or \"unlinking\") of computed Signals to the API below, which currently lacks it.\n* A separate related goal: Minimize the number of allocations, e.g.,\n    * to make a writable Signal (avoid two separate closures + array)\n    * to implement effects (avoid a closure for every single reaction)\n    * In the API for observing Signal changes, avoid creating additional temporary data structures\n    * Solution: Class-based API enabling reuse of methods and fields defined in subclasses\n\n## API sketch\n\nAn initial idea of a Signal API is below. Note that this is just an early draft, and we anticipate changes over time. Let's start with the full `.d.ts` to get an idea of the overall shape, and then we'll discuss the details of what it all means.\n\n```ts\ninterface Signal<T> {\n    // Get the value of the signal\n    get(): T;\n}\n\nnamespace Signal {\n    // A read-write Signal\n    class State<T> implements Signal<T> {\n        // Create a state Signal starting with the value t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n\n        // Set the state Signal value to t\n        set(t: T): void;\n    }\n\n    // A Signal which is a formula based on other Signals\n    class Computed<T = unknown> implements Signal<T> {\n        // Create a Signal which evaluates to the value returned by the callback.\n        // Callback is called with this signal as the this value.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n    }\n\n    // This namespace includes \"advanced\" features that are better to\n    // leave for framework authors rather than application developers.\n    // Analogous to `crypto.subtle`\n    namespace subtle {\n        // Run a callback with all tracking disabled\n        function untrack<T>(cb: () => T): T;\n\n        // Get the current computed signal which is tracking any signal reads, if any\n        function currentComputed(): Computed | null;\n\n        // Returns ordered list of all signals which this one referenced\n        // during the last time it was evaluated.\n        // For a Watcher, lists the set of signals which it is watching.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Returns the Watchers that this signal is contained in, plus any\n        // Computed signals which read this signal last time they were evaluated,\n        // if that computed signal is (recursively) watched.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // True if this signal is \"live\", in that it is watched by a Watcher,\n        // or it is read by a Computed signal which is (recursively) live.\n        function hasSinks(s: State | Computed): boolean;\n\n        // True if this element is \"reactive\", in that it depends\n        // on some other signal. A Computed where hasSources is false\n        // will always return the same constant.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // When a (recursive) source of Watcher is written to, call this callback,\n            // if it hasn't already been called since the last `watch` call.\n            // No signals may be read or written during the notify.\n            constructor(notify: (this: Watcher) => void);\n\n            // Add these signals to the Watcher's set, and set the watcher to run its\n            // notify callback next time any signal in the set (or one of its dependencies) changes.\n            // Can be called with no arguments just to reset the \"notified\" state, so that\n            // the notify callback will be invoked again.\n            watch(...s: Signal[]): void;\n\n            // Remove these signals from the watched set (e.g., for an effect which is disposed)\n            unwatch(...s: Signal[]): void;\n\n            // Returns the set of sources in the Watcher's set which are still dirty, or is a computed signal\n            // with a source which is dirty or pending and hasn't yet been re-evaluated\n            getPending(): Signal[];\n        }\n\n        // Hooks to observe being watched or no longer watched\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Custom comparison function between old and new value. Default: Object.is.\n        // The signal is passed in as the this value for context.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "translate": "* Bugün çoğu framework'ün, başka bir Signal grafiğine referans veren veya ondan referans alan hesaplanmış Signal’ların açıkça yok edilmesini gerektirdiğini unutmayın; bu grafik hala yaşıyorsa.\n* Bu durum, yaşam ömürleri bir UI bileşeninin yaşam ömrüne bağlı olduğunda o kadar da kötü olmaz, ayrıca efektlerin de zaten yok edilmesi gerekir.\n* Eğer bu anlamlarla çalıştırmak çok maliyetliyse, aşağıdaki API'ye hesaplanmış Signal’ların açıkça yok edilmesi (veya \"bağlantısının kesilmesi\") eklenmelidir; şu anda bu API'de bu eksik.\n* İlgili ayrı bir hedef: Ayırma (allocation) sayısını en aza indirmek, örneğin,\n    * yazılabilir bir Signal oluşturmak için (iki ayrı closure + dizi kullanımını önlemek)\n    * efektleri uygulamak için (her tepki için bir closure oluşturulmasını önlemek)\n    * Signal değişikliklerini gözlemleme API'sinde, ek geçici veri yapıları oluşturmaktan kaçınmak\n    * Çözüm: Alt sınıflarda tanımlanan metot ve alanların yeniden kullanılmasını sağlayan sınıf tabanlı API\n\n## API taslağı\n\nAşağıda bir Signal API’sinin ilk fikri yer almakta. Bunun sadece erken bir taslak olduğunu ve zamanla değişiklikler beklediğimizi unutmayın. Genel yapıyı kavramak için tam `.d.ts` ile başlayalım, ardından tüm bunların ne anlama geldiğini tartışacağız.\n\n```ts\ninterface Signal<T> {\n    // Signal’ın değerini al\n    get(): T;\n}\n\nnamespace Signal {\n    // Okunabilir-yazılabilir bir Signal\n    class State<T> implements Signal<T> {\n        // t değeriyle başlayan bir state Signal’ı oluştur\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Signal’ın değerini al\n        get(): T;\n\n        // State Signal değerini t olarak ayarla\n        set(t: T): void;\n    }\n\n    // Diğer Signal’lara dayalı bir formül olan bir Signal\n    class Computed<T = unknown> implements Signal<T> {\n        // Callback tarafından döndürülen değere sahip bir Signal oluşturur.\n        // Callback, this signal’ı this değeri olarak alır.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Signal’ın değerini al\n        get(): T;\n    }\n\n    // Bu namespace, uygulama geliştiricilerinden çok framework yazarları için uygun olan\n    // “ileri düzey” özellikleri içerir.\n    // `crypto.subtle` ile benzer\n    namespace subtle {\n        // Tüm izleme devre dışı bırakılarak bir callback çalıştır\n        function untrack<T>(cb: () => T): T;\n\n        // Herhangi bir signal okumasını izleyen mevcut hesaplanmış signal’ı al, varsa\n        function currentComputed(): Computed | null;\n\n        // Bu signal’ın en son değerlendirildiği sırada referans verdiği\n        // tüm signal’ların sıralı listesini döndürür.\n        // Bir Watcher için, izlediği signal kümesini listeler.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Bu signal’ın dahil olduğu Watcher’ları ve\n        // en son değerlendirildiğinde bu signal’ı okuyan Computed signal’ları döndürür,\n        // eğer o hesaplanmış signal (yinelemeli olarak) izleniyorsa.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // Bu signal \"canlı\" ise true döndürür, yani bir Watcher tarafından izleniyor\n        // veya (yinelemeli olarak) canlı bir Computed signal tarafından okunuyor.\n        function hasSinks(s: State | Computed): boolean;\n\n        // Bu öğe \"reaktif\" ise true döndürür, yani başka bir signal’a bağımlı.\n        // hasSources false ise bir Computed her zaman aynı sabiti döndürür.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // Watcher’ın (yinelemeli olarak) kaynağı yazıldığında, bu callback’i çağır,\n            // eğer son `watch` çağrısından beri zaten çağrılmadıysa.\n            // Bildirim sırasında hiçbir signal okunamaz veya yazılamaz.\n            constructor(notify: (this: Watcher) => void);\n\n            // Bu signal’ları Watcher’ın kümesine ekle ve izleyiciyi,\n            // kümedeki herhangi bir signal (veya bağımlılıklarından biri) değiştiğinde\n            // bir sonraki sefer notify callback’ini çalıştıracak şekilde ayarla.\n            // Sadece \"bildirildi\" durumunu sıfırlamak için argümansız da çağrılabilir,\n            // böylece notify callback’i tekrar çağrılacaktır.\n            watch(...s: Signal[]): void;\n\n            // Bu signal’ları izlenen kümeden çıkar (ör. yok edilen bir efekt için)\n            unwatch(...s: Signal[]): void;\n\n            // Watcher’ın kümesindeki hala kirli olan kaynakların kümesini döndürür,\n            // veya kaynağı kirli ya da beklemede olan ve henüz yeniden değerlendirilmemiş bir computed signal’ı döndürür\n            getPending(): Signal[];\n        }\n\n        // İzlenmeye başlandığında veya artık izlenmediğinde gözlemlemek için hook’lar\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Eski ve yeni değer arasında özel karşılaştırma fonksiyonu. Varsayılan: Object.is.\n        // Bağlam için signal this olarak iletilir.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;\n```",
  "status": "ok"
}