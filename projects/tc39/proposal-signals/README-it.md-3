{
  "id": 3,
  "origin": "    * Note that most frameworks today require explicit disposal of computed Signals if they have any reference to or from another Signal graph which remains alive.\n    * This ends up not being so bad when their lifetime is tied to the lifetime of a UI component, and effects need to be disposed of anyway.\n    * If it is too expensive to execute with these semantics, then we should add explicit disposal (or \"unlinking\") of computed Signals to the API below, which currently lacks it.\n* A separate related goal: Minimize the number of allocations, e.g.,\n    * to make a writable Signal (avoid two separate closures + array)\n    * to implement effects (avoid a closure for every single reaction)\n    * In the API for observing Signal changes, avoid creating additional temporary data structures\n    * Solution: Class-based API enabling reuse of methods and fields defined in subclasses\n\n## API sketch\n\nAn initial idea of a Signal API is below. Note that this is just an early draft, and we anticipate changes over time. Let's start with the full `.d.ts` to get an idea of the overall shape, and then we'll discuss the details of what it all means.\n\n```ts\ninterface Signal<T> {\n    // Get the value of the signal\n    get(): T;\n}\n\nnamespace Signal {\n    // A read-write Signal\n    class State<T> implements Signal<T> {\n        // Create a state Signal starting with the value t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n\n        // Set the state Signal value to t\n        set(t: T): void;\n    }\n\n    // A Signal which is a formula based on other Signals\n    class Computed<T = unknown> implements Signal<T> {\n        // Create a Signal which evaluates to the value returned by the callback.\n        // Callback is called with this signal as the this value.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n    }\n\n    // This namespace includes \"advanced\" features that are better to\n    // leave for framework authors rather than application developers.\n    // Analogous to `crypto.subtle`\n    namespace subtle {\n        // Run a callback with all tracking disabled\n        function untrack<T>(cb: () => T): T;\n\n        // Get the current computed signal which is tracking any signal reads, if any\n        function currentComputed(): Computed | null;\n\n        // Returns ordered list of all signals which this one referenced\n        // during the last time it was evaluated.\n        // For a Watcher, lists the set of signals which it is watching.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Returns the Watchers that this signal is contained in, plus any\n        // Computed signals which read this signal last time they were evaluated,\n        // if that computed signal is (recursively) watched.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // True if this signal is \"live\", in that it is watched by a Watcher,\n        // or it is read by a Computed signal which is (recursively) live.\n        function hasSinks(s: State | Computed): boolean;\n\n        // True if this element is \"reactive\", in that it depends\n        // on some other signal. A Computed where hasSources is false\n        // will always return the same constant.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // When a (recursive) source of Watcher is written to, call this callback,\n            // if it hasn't already been called since the last `watch` call.\n            // No signals may be read or written during the notify.\n            constructor(notify: (this: Watcher) => void);\n\n            // Add these signals to the Watcher's set, and set the watcher to run its\n            // notify callback next time any signal in the set (or one of its dependencies) changes.\n            // Can be called with no arguments just to reset the \"notified\" state, so that\n            // the notify callback will be invoked again.\n            watch(...s: Signal[]): void;\n\n            // Remove these signals from the watched set (e.g., for an effect which is disposed)\n            unwatch(...s: Signal[]): void;\n\n            // Returns the set of sources in the Watcher's set which are still dirty, or is a computed signal\n            // with a source which is dirty or pending and hasn't yet been re-evaluated\n            getPending(): Signal[];\n        }\n\n        // Hooks to observe being watched or no longer watched\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Custom comparison function between old and new value. Default: Object.is.\n        // The signal is passed in as the this value for context.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "translate": "* Nota che la maggior parte dei framework oggi richiede l'eliminazione esplicita dei Signal computati se essi hanno qualsiasi riferimento a o da un altro grafo di Signal che rimane vivo.\n* Questo alla fine non è così male quando la loro durata è legata alla durata di un componente UI, e gli effetti devono comunque essere eliminati.\n* Se è troppo costoso eseguire con questa semantica, allora dovremmo aggiungere l'eliminazione esplicita (o \"scollegamento\") dei Signal computati all'API sottostante, che attualmente ne è priva.\n* Un obiettivo correlato separato: Minimizzare il numero di allocazioni, ad es.,\n    * per creare un Signal scrivibile (evitare due closure separate + array)\n    * per implementare effetti (evitare una closure per ogni singola reazione)\n    * Nell'API per osservare i cambiamenti dei Signal, evitare la creazione di strutture dati temporanee aggiuntive\n    * Soluzione: API basata su classi che consente il riutilizzo di metodi e campi definiti nelle sottoclassi\n\n## Schema API\n\nDi seguito un'idea iniziale di una API per i Signal. Nota che questa è solo una prima bozza, e prevediamo cambiamenti nel tempo. Iniziamo con il file completo `.d.ts` per avere un'idea della forma generale, poi discuteremo i dettagli di ciò che significa tutto questo.\n\n```ts\ninterface Signal<T> {\n    // Ottieni il valore del signal\n    get(): T;\n}\n\nnamespace Signal {\n    // Un Signal di lettura e scrittura\n    class State<T> implements Signal<T> {\n        // Crea un Signal di stato che parte dal valore t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Ottieni il valore del signal\n        get(): T;\n\n        // Imposta il valore del Signal di stato a t\n        set(t: T): void;\n    }\n\n    // Un Signal che è una formula basata su altri Signal\n    class Computed<T = unknown> implements Signal<T> {\n        // Crea un Signal che valuta il valore restituito dalla callback.\n        // La callback è chiamata con questo signal come valore this.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Ottieni il valore del signal\n        get(): T;\n    }\n\n    // Questo namespace include funzionalità \"avanzate\" che è meglio\n    // lasciare agli autori di framework piuttosto che agli sviluppatori di applicazioni.\n    // Analogo a `crypto.subtle`\n    namespace subtle {\n        // Esegui una callback con tutto il tracciamento disabilitato\n        function untrack<T>(cb: () => T): T;\n\n        // Ottieni il signal computato corrente che sta tracciando eventuali letture di signal, se presente\n        function currentComputed(): Computed | null;\n\n        // Restituisce la lista ordinata di tutti i signal a cui questo ha fatto riferimento\n        // durante l'ultima valutazione.\n        // Per un Watcher, elenca il set di signal che sta osservando.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Restituisce i Watcher in cui questo signal è contenuto, oltre a eventuali\n        // signal Computed che hanno letto questo signal l'ultima volta che sono stati valutati,\n        // se quel signal computato è (ricorsivamente) osservato.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // True se questo signal è \"vivo\", ovvero è osservato da un Watcher,\n        // oppure è letto da un signal Computed che è (ricorsivamente) vivo.\n        function hasSinks(s: State | Computed): boolean;\n\n        // True se questo elemento è \"reattivo\", cioè dipende\n        // da qualche altro signal. Un Computed dove hasSources è false\n        // restituirà sempre la stessa costante.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // Quando una (ricorsiva) sorgente di Watcher viene scritta, chiama questa callback,\n            // se non è già stata chiamata dall'ultima chiamata a `watch`.\n            // Nessun signal può essere letto o scritto durante la notify.\n            constructor(notify: (this: Watcher) => void);\n\n            // Aggiungi questi signal all'insieme del Watcher e imposta il watcher per eseguire la sua\n            // notify callback la prossima volta che un qualsiasi signal dell'insieme (o una delle sue dipendenze) cambia.\n            // Può essere chiamato senza argomenti solo per resettare lo stato \"notified\", così che\n            // la callback notify venga invocata di nuovo.\n            watch(...s: Signal[]): void;\n\n            // Rimuovi questi signal dall'insieme osservato (ad es., per un effetto che viene eliminato)\n            unwatch(...s: Signal[]): void;\n\n            // Restituisce l'insieme delle sorgenti nell'insieme del Watcher che sono ancora dirty, oppure è un signal computato\n            // con una sorgente che è dirty o pending e non è ancora stata rivalutata\n            getPending(): Signal[];\n        }\n\n        // Hook per osservare quando viene osservato o non più osservato\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Funzione di confronto personalizzata tra valore vecchio e nuovo. Default: Object.is.\n        // Il signal è passato come valore this per il contesto.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "status": "ok"
}