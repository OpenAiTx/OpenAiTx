{
  "id": 3,
  "origin": "    * Note that most frameworks today require explicit disposal of computed Signals if they have any reference to or from another Signal graph which remains alive.\n    * This ends up not being so bad when their lifetime is tied to the lifetime of a UI component, and effects need to be disposed of anyway.\n    * If it is too expensive to execute with these semantics, then we should add explicit disposal (or \"unlinking\") of computed Signals to the API below, which currently lacks it.\n* A separate related goal: Minimize the number of allocations, e.g.,\n    * to make a writable Signal (avoid two separate closures + array)\n    * to implement effects (avoid a closure for every single reaction)\n    * In the API for observing Signal changes, avoid creating additional temporary data structures\n    * Solution: Class-based API enabling reuse of methods and fields defined in subclasses\n\n## API sketch\n\nAn initial idea of a Signal API is below. Note that this is just an early draft, and we anticipate changes over time. Let's start with the full `.d.ts` to get an idea of the overall shape, and then we'll discuss the details of what it all means.\n\n```ts\ninterface Signal<T> {\n    // Get the value of the signal\n    get(): T;\n}\n\nnamespace Signal {\n    // A read-write Signal\n    class State<T> implements Signal<T> {\n        // Create a state Signal starting with the value t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n\n        // Set the state Signal value to t\n        set(t: T): void;\n    }\n\n    // A Signal which is a formula based on other Signals\n    class Computed<T = unknown> implements Signal<T> {\n        // Create a Signal which evaluates to the value returned by the callback.\n        // Callback is called with this signal as the this value.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n    }\n\n    // This namespace includes \"advanced\" features that are better to\n    // leave for framework authors rather than application developers.\n    // Analogous to `crypto.subtle`\n    namespace subtle {\n        // Run a callback with all tracking disabled\n        function untrack<T>(cb: () => T): T;\n\n        // Get the current computed signal which is tracking any signal reads, if any\n        function currentComputed(): Computed | null;\n\n        // Returns ordered list of all signals which this one referenced\n        // during the last time it was evaluated.\n        // For a Watcher, lists the set of signals which it is watching.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Returns the Watchers that this signal is contained in, plus any\n        // Computed signals which read this signal last time they were evaluated,\n        // if that computed signal is (recursively) watched.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // True if this signal is \"live\", in that it is watched by a Watcher,\n        // or it is read by a Computed signal which is (recursively) live.\n        function hasSinks(s: State | Computed): boolean;\n\n        // True if this element is \"reactive\", in that it depends\n        // on some other signal. A Computed where hasSources is false\n        // will always return the same constant.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // When a (recursive) source of Watcher is written to, call this callback,\n            // if it hasn't already been called since the last `watch` call.\n            // No signals may be read or written during the notify.\n            constructor(notify: (this: Watcher) => void);\n\n            // Add these signals to the Watcher's set, and set the watcher to run its\n            // notify callback next time any signal in the set (or one of its dependencies) changes.\n            // Can be called with no arguments just to reset the \"notified\" state, so that\n            // the notify callback will be invoked again.\n            watch(...s: Signal[]): void;\n\n            // Remove these signals from the watched set (e.g., for an effect which is disposed)\n            unwatch(...s: Signal[]): void;\n\n            // Returns the set of sources in the Watcher's set which are still dirty, or is a computed signal\n            // with a source which is dirty or pending and hasn't yet been re-evaluated\n            getPending(): Signal[];\n        }\n\n        // Hooks to observe being watched or no longer watched\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Custom comparison function between old and new value. Default: Object.is.\n        // The signal is passed in as the this value for context.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "translate": "* لاحظ أن معظم الأطر الحالية تتطلب التخلص الصريح من الإشارات المحسوبة إذا كان لديها أي مرجع إلى أو من رسم إشارة آخر يبقى حيًا.\n* هذا لا يكون سيئًا جدًا عندما تكون فترة حياتها مرتبطة بفترة حياة مكون واجهة المستخدم، وتحتاج التأثيرات إلى التخلص منها على أي حال.\n* إذا كان تنفيذ ذلك مكلفًا جدًا بهذه الدلالات، فيجب علينا إضافة التخلص الصريح (أو \"فك الارتباط\") من الإشارات المحسوبة إلى الواجهة البرمجية أدناه، والتي تفتقر إليه حاليًا.\n* هدف منفصل ذو صلة: تقليل عدد التخصيصات، مثلاً:\n    * لإنشاء إشارة قابلة للكتابة (تجنب إغلاقين منفصلين + مصفوفة)\n    * لتنفيذ التأثيرات (تجنب إغلاق لكل تفاعل فردي)\n    * في واجهة برمجة التطبيقات لمراقبة تغييرات الإشارة، تجنب إنشاء هياكل بيانات مؤقتة إضافية\n    * الحل: واجهة برمجة تطبيقات قائمة على الأصناف تُمكن من إعادة استخدام الدوال والحقول المعرفة في الأصناف الفرعية\n\n## مخطط واجهة برمجة التطبيقات\n\nفكرة أولية عن واجهة برمجة تطبيقات الإشارة أدناه. لاحظ أن هذا مجرد مسودة أولية، ونتوقع تغييرات مع مرور الوقت. لنبدأ بملف `.d.ts` الكامل للحصول على فكرة عن الشكل العام، ثم سنناقش تفاصيل ما يعنيه كل ذلك.\n\n```ts\ninterface Signal<T> {\n    // الحصول على قيمة الإشارة\n    get(): T;\n}\n\nnamespace Signal {\n    // إشارة للقراءة والكتابة\n    class State<T> implements Signal<T> {\n        // إنشاء إشارة حالة تبدأ بالقيمة t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // الحصول على قيمة الإشارة\n        get(): T;\n\n        // تعيين قيمة إشارة الحالة إلى t\n        set(t: T): void;\n    }\n\n    // إشارة هي عبارة عن صيغة تعتمد على إشارات أخرى\n    class Computed<T = unknown> implements Signal<T> {\n        // إنشاء إشارة يتم تقييمها إلى القيمة التي يتم إرجاعها من قبل رد الاستدعاء.\n        // يتم استدعاء رد الاستدعاء مع هذه الإشارة كقيمة this.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // الحصول على قيمة الإشارة\n        get(): T;\n    }\n\n    // تحتوي هذه المساحة الاسمية على ميزات \"متقدمة\" من الأفضل\n    // تركها لمؤلفي الأطر بدلاً من مطوري التطبيقات.\n    // مماثلة لـ `crypto.subtle`\n    namespace subtle {\n        // تنفيذ رد استدعاء مع تعطيل جميع التتبع\n        function untrack<T>(cb: () => T): T;\n\n        // الحصول على إشارة محسوبة حالية تتتبع أي قراءات إشارة، إذا وجدت\n        function currentComputed(): Computed | null;\n\n        // إرجاع قائمة مرتبة بجميع الإشارات التي تمت الإشارة إليها بواسطة هذه الإشارة\n        // خلال آخر مرة تم تقييمها فيها.\n        // بالنسبة للمراقب Watcher، يسرد مجموعة الإشارات التي يراقبها.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // إرجاع المراقبين Watchers الذين تحتويهم هذه الإشارة، بالإضافة إلى أي\n        // إشارات محسوبة قرأت هذه الإشارة آخر مرة تم تقييمها،\n        // إذا كانت تلك الإشارة المحسوبة (بشكل متكرر) مراقبة.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // صحيح إذا كانت هذه الإشارة \"حية\"، أي تتم مراقبتها بواسطة مراقب Watcher،\n        // أو تتم قراءتها بواسطة إشارة محسوبة (بشكل متكرر) حية.\n        function hasSinks(s: State | Computed): boolean;\n\n        // صحيح إذا كان هذا العنصر \"تفاعليًا\"، أي يعتمد\n        // على إشارة أخرى. الإشارة المحسوبة التي يكون فيها hasSources خاطئًا\n        // ستُرجع دائمًا نفس القيمة الثابتة.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // عند كتابة مصدر (بشكل متكرر) للمراقب Watcher، يتم استدعاء رد الاستدعاء هذا،\n            // إذا لم يكن قد تم استدعاؤه بالفعل منذ آخر استدعاء لـ `watch`.\n            // لا يمكن قراءة أو كتابة أي إشارات أثناء الإخطار.\n            constructor(notify: (this: Watcher) => void);\n\n            // إضافة هذه الإشارات إلى مجموعة المراقب، وتعيين المراقب لتشغيل\n            // رد الاستدعاء للإخطار في المرة القادمة التي تتغير فيها أي إشارة في المجموعة (أو أحد تبعياتها).\n            // يمكن استدعاؤها بدون معاملات فقط لإعادة تعيين حالة \"تم الإخطار\"، بحيث يتم استدعاء\n            // رد الاستدعاء للإخطار مرة أخرى.\n            watch(...s: Signal[]): void;\n\n            // إزالة هذه الإشارات من المجموعة المراقبة (مثلاً، لتأثير تم التخلص منه)\n            unwatch(...s: Signal[]): void;\n\n            // إرجاع مجموعة المصادر في مجموعة المراقب التي لا تزال قيد التحديث، أو هي إشارة محسوبة\n            // تحتوي على مصدر قيد التحديث أو قيد الانتظار ولم يتم إعادة تقييمه بعد\n            getPending(): Signal[];\n        }\n\n        // خطافات لمراقبة البدء أو التوقف عن المراقبة\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // دالة مقارنة مخصصة بين القيمة القديمة والجديدة. الافتراضي: Object.is.\n        // يتم تمرير الإشارة كقيمة this للسياق.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;\n```",
  "status": "ok"
}