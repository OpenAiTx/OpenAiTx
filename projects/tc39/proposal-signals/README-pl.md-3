{
  "id": 3,
  "origin": "    * Note that most frameworks today require explicit disposal of computed Signals if they have any reference to or from another Signal graph which remains alive.\n    * This ends up not being so bad when their lifetime is tied to the lifetime of a UI component, and effects need to be disposed of anyway.\n    * If it is too expensive to execute with these semantics, then we should add explicit disposal (or \"unlinking\") of computed Signals to the API below, which currently lacks it.\n* A separate related goal: Minimize the number of allocations, e.g.,\n    * to make a writable Signal (avoid two separate closures + array)\n    * to implement effects (avoid a closure for every single reaction)\n    * In the API for observing Signal changes, avoid creating additional temporary data structures\n    * Solution: Class-based API enabling reuse of methods and fields defined in subclasses\n\n## API sketch\n\nAn initial idea of a Signal API is below. Note that this is just an early draft, and we anticipate changes over time. Let's start with the full `.d.ts` to get an idea of the overall shape, and then we'll discuss the details of what it all means.\n\n```ts\ninterface Signal<T> {\n    // Get the value of the signal\n    get(): T;\n}\n\nnamespace Signal {\n    // A read-write Signal\n    class State<T> implements Signal<T> {\n        // Create a state Signal starting with the value t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n\n        // Set the state Signal value to t\n        set(t: T): void;\n    }\n\n    // A Signal which is a formula based on other Signals\n    class Computed<T = unknown> implements Signal<T> {\n        // Create a Signal which evaluates to the value returned by the callback.\n        // Callback is called with this signal as the this value.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Get the value of the signal\n        get(): T;\n    }\n\n    // This namespace includes \"advanced\" features that are better to\n    // leave for framework authors rather than application developers.\n    // Analogous to `crypto.subtle`\n    namespace subtle {\n        // Run a callback with all tracking disabled\n        function untrack<T>(cb: () => T): T;\n\n        // Get the current computed signal which is tracking any signal reads, if any\n        function currentComputed(): Computed | null;\n\n        // Returns ordered list of all signals which this one referenced\n        // during the last time it was evaluated.\n        // For a Watcher, lists the set of signals which it is watching.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Returns the Watchers that this signal is contained in, plus any\n        // Computed signals which read this signal last time they were evaluated,\n        // if that computed signal is (recursively) watched.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // True if this signal is \"live\", in that it is watched by a Watcher,\n        // or it is read by a Computed signal which is (recursively) live.\n        function hasSinks(s: State | Computed): boolean;\n\n        // True if this element is \"reactive\", in that it depends\n        // on some other signal. A Computed where hasSources is false\n        // will always return the same constant.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // When a (recursive) source of Watcher is written to, call this callback,\n            // if it hasn't already been called since the last `watch` call.\n            // No signals may be read or written during the notify.\n            constructor(notify: (this: Watcher) => void);\n\n            // Add these signals to the Watcher's set, and set the watcher to run its\n            // notify callback next time any signal in the set (or one of its dependencies) changes.\n            // Can be called with no arguments just to reset the \"notified\" state, so that\n            // the notify callback will be invoked again.\n            watch(...s: Signal[]): void;\n\n            // Remove these signals from the watched set (e.g., for an effect which is disposed)\n            unwatch(...s: Signal[]): void;\n\n            // Returns the set of sources in the Watcher's set which are still dirty, or is a computed signal\n            // with a source which is dirty or pending and hasn't yet been re-evaluated\n            getPending(): Signal[];\n        }\n\n        // Hooks to observe being watched or no longer watched\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Custom comparison function between old and new value. Default: Object.is.\n        // The signal is passed in as the this value for context.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "translate": "* Zauważ, że większość frameworków obecnie wymaga jawnego usuwania obliczanych Sygnałów, jeśli mają one jakiekolwiek odniesienia do lub z innego grafu Sygnałów, który pozostaje aktywny.\n* Nie jest to aż tak uciążliwe, gdy ich cykl życia jest powiązany z cyklem życia komponentu UI, a efekty i tak muszą być usuwane.\n* Jeśli wykonanie tych operacji z tymi semantykami jest zbyt kosztowne, powinniśmy dodać do poniższego API jawne usuwanie (lub „odłączanie”) obliczanych Sygnałów, którego obecnie brakuje.\n* Oddzielny, powiązany cel: Minimalizacja liczby alokacji, np.:\n    * dla utworzenia zapisywalnego Sygnału (uniknięcie dwóch oddzielnych domknięć + tablicy)\n    * dla implementacji efektów (uniknięcie domknięcia dla każdej pojedynczej reakcji)\n    * W API do obserwowania zmian Sygnałów unikać tworzenia dodatkowych tymczasowych struktur danych\n    * Rozwiązanie: API oparte na klasach umożliwiające ponowne użycie metod i pól zdefiniowanych w podklasach\n\n## Szkic API\n\nPoniżej przedstawiono wstępny pomysł na API Sygnału. Należy pamiętać, że jest to jedynie wczesny szkic i spodziewamy się zmian w przyszłości. Zacznijmy od pełnego `.d.ts`, aby uzyskać wyobrażenie o ogólnym kształcie, a następnie omówimy szczegóły, co to wszystko oznacza.\n\n```ts\ninterface Signal<T> {\n    // Pobiera wartość sygnału\n    get(): T;\n}\n\nnamespace Signal {\n    // Sygnał do odczytu i zapisu\n    class State<T> implements Signal<T> {\n        // Tworzy Sygnał stanu z początkową wartością t\n        constructor(t: T, options?: SignalOptions<T>);\n\n        // Pobiera wartość sygnału\n        get(): T;\n\n        // Ustawia wartość Sygnału stanu na t\n        set(t: T): void;\n    }\n\n    // Sygnał, który jest formułą opartą na innych Sygnałach\n    class Computed<T = unknown> implements Signal<T> {\n        // Tworzy Sygnał, który ocenia wartość zwracaną przez callback.\n        // Callback wywoływany jest z tym sygnałem jako wartością this.\n        constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);\n\n        // Pobiera wartość sygnału\n        get(): T;\n    }\n\n    // Ta przestrzeń nazw zawiera „zaawansowane” funkcje,\n    // które lepiej pozostawić autorom frameworków niż deweloperom aplikacji.\n    // Analogicznie do `crypto.subtle`\n    namespace subtle {\n        // Uruchamia callback z całkowicie wyłączonym śledzeniem\n        function untrack<T>(cb: () => T): T;\n\n        // Pobiera bieżący obliczany sygnał, który śledzi odczyty sygnałów, jeśli taki istnieje\n        function currentComputed(): Computed | null;\n\n        // Zwraca uporządkowaną listę wszystkich sygnałów, do których ten się odwołał\n        // podczas ostatniej ewaluacji.\n        // Dla Watchera, zwraca zestaw sygnałów, które obserwuje.\n        function introspectSources(s: Computed | Watcher): (State | Computed)[];\n\n        // Zwraca Watchery, w których ten sygnał się znajduje, oraz wszystkie\n        // Sygnały Computed, które odczytywały ten sygnał podczas ostatniej ewaluacji,\n        // jeśli ten sygnał Computed jest (rekursywnie) obserwowany.\n        function introspectSinks(s: State | Computed): (Computed | Watcher)[];\n\n        // True, jeśli ten sygnał jest „aktywny” — jest obserwowany przez Watchera,\n        // lub jest odczytywany przez sygnał Computed, który jest (rekursywnie) aktywny.\n        function hasSinks(s: State | Computed): boolean;\n\n        // True, jeśli ten element jest „reaktywny” — zależy\n        // od innego sygnału. Computed, dla którego hasSources jest false,\n        // zawsze zwróci tę samą stałą.\n        function hasSources(s: Computed | Watcher): boolean;\n\n        class Watcher {\n            // Gdy (rekursyjne) źródło Watchera zostanie zapisane, wywołaj ten callback,\n            // jeśli nie został już wywołany od ostatniego wywołania `watch`.\n            // Podczas notify nie można odczytywać ani zapisywać sygnałów.\n            constructor(notify: (this: Watcher) => void);\n\n            // Dodaje te sygnały do zestawu Watchera i ustawia watcher,\n            // aby uruchomić callback notify przy następnej zmianie któregokolwiek sygnału z zestawu (lub jego zależności).\n            // Może być wywołane bez argumentów tylko w celu zresetowania stanu „notified”,\n            // aby callback notify został ponownie wywołany.\n            watch(...s: Signal[]): void;\n\n            // Usuwa te sygnały z zestawu obserwowanych (np. dla efektu, który jest usuwany)\n            unwatch(...s: Signal[]): void;\n\n            // Zwraca zestaw źródeł w zestawie Watchera, które są nadal „brudne”, lub jest to sygnał computed,\n            // którego źródło jest „brudne” lub oczekujące i nie zostało jeszcze ponownie ocenione\n            getPending(): Signal[];\n        }\n\n        // Hooki do obserwowania bycia obserwowanym lub nieobserwowanym\n        var watched: Symbol;\n        var unwatched: Symbol;\n    }\n\n    interface SignalOptions<T> {\n        // Niestandardowa funkcja porównująca starą i nową wartość. Domyślnie: Object.is.\n        // Sygnał przekazywany jest jako this dla kontekstu.\n        equals?: (this: Signal<T>, t: T, t2: T) => boolean;",
  "status": "ok"
}