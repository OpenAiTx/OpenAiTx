{
  "id": 7,
  "origin": "\nWith [AsyncContext](https://github.com/tc39/proposal-async-context), the callback passed to `new Signal.subtle.Watcher` does *not* close over the snapshot from when the constructor was called, so that contextual information around the write is visible.\n\n#### Method: `Signal.subtle.Watcher.prototype.watch(...signals)`\n\n1. If `frozen` is true, throw an exception.\n1. If any of the arguments is not a signal, throw an exception.\n1. Append all arguments to the end of this object's `signals`.\n1. For each newly-watched signal, in left-to-right order,\n    1. Add this watcher as a `sink` to that signal.\n    1. If this was the first sink, then recurse up to sources to add that signal as a sink.\n    1. Set `frozen` to true.\n    1. Call the `watched` callback if it exists.\n    1. Restore `frozen` to false.\n1. If the Signal's `state` is `~waiting~`, then set it to `~watching~`.\n\n#### Method: `Signal.subtle.Watcher.prototype.unwatch(...signals)`\n\n1. If `frozen` is true, throw an exception.\n1. If any of the arguments is not a signal, or is not being watched by this watcher, throw an exception.\n1. For each signal in the arguments, in left-to-right order,\n    1. Remove that signal from this Watcher's `signals` set.\n    1. Remove this Watcher from that Signal's `sink` set.\n    1. If that Signal's `sink` set has become empty, remove that Signal as a sink from each of its sources.\n    1. Set `frozen` to true.\n    1. Call the `unwatched` callback if it exists.\n    1. Restore `frozen` to false.\n1. If the watcher now has no `signals`, and its `state` is `~watching~`, then set it to `~waiting~`.\n\n#### Method: `Signal.subtle.Watcher.prototype.getPending()`\n\n1. Return an Array containing the subset of `signals` which are Computed Signals in the states `~dirty~` or `~pending~`.\n\n### Method: `Signal.subtle.untrack(cb)`\n\n1. Let `c` be the execution context's current `computing` state.\n1. Set `computing` to null.\n1. Call `cb`.\n1. Restore `computing` to `c` (even if `cb` threw an exception).\n1. Return the return value of `cb` (rethrowing any exception).\n\nNote: untrack doesn't get you out of the `frozen` state, which is maintained strictly.\n\n### Method: `Signal.subtle.currentComputed()`\n\n1. Return the current `computing` value.\n\n### Common algorithms\n\n##### Algorithm: recalculate dirty computed Signal\n\n1. Clear out this Signal's `sources` set, and remove it from those sources' `sinks` sets.\n1. Save the previous `computing` value and set `computing` to this Signal.\n1. Set this Signal's state to `~computing~`.\n1. Run this computed Signal's callback, using this Signal as the this value. Save the return value, and if the callback threw an exception, store that for rethrowing.\n1. Restore the previous `computing` value.\n1. Apply the \"set Signal value\" algorithm to the callback's return value.\n2. Set this Signal's state to `~clean~`.\n1. If that algorithm returned `~dirty~`: mark all sinks of this Signal as `~dirty~` (previously, the sinks may have been a mix of checked and dirty). (Or, if this is unwatched, then adopt a new generation number to indicate dirtiness, or something like that.)\n1. Otherwise, that algorithm returned `~clean~`: In this case, for each `~checked~` sink of this Signal, if all of that Signal's sources are now clean, then mark that Signal as `~clean~` as well. Apply this cleanup step to further sinks recursively, to any newly clean Signals which have checked sinks. (Or, if this is unwatched, somehow indicate the same, so that the cleanup can proceed lazily.)\n\n##### Set Signal value algorithm\n\n1. If this algorithm was passed a value (as opposed to an exception for rethrowing, from the recalculate dirty computed Signal algorithm):\n    1. Call this Signal's `equals` function, passing as parameters the current `value`, the new value, and this Signal. If an exception is thrown, save that exception (for rethrowing when read) as the value of the Signal and continue as if the callback had returned false.\n    1. If that function returned true, return `~clean~`.\n1. Set the `value` of this Signal to the parameter.\n1. Return `~dirty~`\n\n## FAQ\n\n**Q**: Isn't it a little soon to be standardizing something related to Signals, when they just started to be the hot new thing in 2022? Shouldn't we give them more time to evolve and stabilize?\n\n**A**: The current state of Signals in web frameworks is the result of more than 10 years of continuous development. As investment steps up, as it has in recent years, almost all of the web frameworks are approaching a very similar core model of Signals. This proposal is the result of a shared design exercise between a large number of current leaders in web frameworks, and it will not be pushed forward to standardization without the validation of that group of domain experts in various contexts.\n\n#### How are Signals used?\n\n**Q**: Can built-in Signals even be used by frameworks, given their tight integration with rendering and ownership?\n\n**A**: The parts which are more framework-specific tend to be in the area of effects, scheduling, and ownership/disposal, which this proposal does not attempt to solve. Our first priority with prototyping standards-track Signals is to validate that they can sit \"underneath\" existing frameworks compatibly and with good performance.\n\n**Q**: Is the Signal API meant to be used directly by application developers, or wrapped by frameworks?\n\n**A**: While this API could be used directly by application developers (at least the part which is not within the `Signal.subtle` namespace), it is not designed to be especially ergonomic. Instead, the needs of library/framework authors are priorities. Most frameworks are expected to wrap even the basic `Signal.State` and `Signal.Computed` APIs with something expressing their ergonomic slant. In practice, it's typically best to use Signals via a framework, which manages trickier features (e.g., Watcher, `untrack`), as well as managing ownership and disposal (e.g., figuring out when signals should be added to and removed from watchers), and scheduling rendering to DOM--this proposal doesn't attempt to solve those problems.\n\n**Q**: Do I have to tear down Signals related to a widget when that widget is destroyed? What is the API for that?\n\n**A**: The relevant teardown operation here is `Signal.subtle.Watcher.prototype.unwatch`. Only watched Signals need to be cleaned up (by unwatching them), while unwatched Signals can be garbage-collected automatically.\n\n**Q**: Do Signals work with VDOM, or directly with the underlying HTML DOM?\n\n**A**: Yes! Signals are independent of rendering technology. Existing JavaScript frameworks which use Signal-like constructs integrate with VDOM (e.g., Preact), the native DOM (e.g., Solid) and a combination (e.g., Vue). The same will be possible with built-in Signals.\n\n**Q**: Is it going to be ergonomic to use Signals in the context of class-based frameworks like Angular and Lit? What about compiler-based frameworks like Svelte?\n\n**A**: Class fields can be made Signal-based with a simple accessor decorator, as shown in [the Signal polyfill readme](https://github.com/proposal-signals/signal-polyfill#combining-signals-and-decorators). Signals are very closely aligned to Svelte 5's Runes--it is simple for a compiler to transform runes to the Signal API defined here, and in fact this is what Svelte 5 does internally (but with its own Signals library).\n\n**Q**: Do Signals work with SSR? Hydration? Resumability?\n\n**A**: Yes. Qwik uses Signals to good effect with both of these properties, and other frameworks have other well-developed approaches to hydration with Signals with different tradeoffs. We think that it is possible to model Qwik's resumable Signals using a State and Computed signal hooked together, and plan to prove this out in code.",
  "translate": "ด้วย [AsyncContext](https://github.com/tc39/proposal-async-context) คอลแบ็กที่ถูกส่งเข้าไปใน `new Signal.subtle.Watcher` จะ *ไม่* ปิดทับ snapshot จากตอนที่ constructor ถูกเรียก ดังนั้นข้อมูลเชิงบริบทที่อยู่รอบๆ การเขียนจะสามารถมองเห็นได้\n\n#### เมธอด: `Signal.subtle.Watcher.prototype.watch(...signals)`\n\n1. หาก `frozen` เป็น true ให้โยนข้อยกเว้น\n1. หากอาร์กิวเมนต์ใดไม่ใช่ signal ให้โยนข้อยกเว้น\n1. เพิ่มอาร์กิวเมนต์ทั้งหมดต่อท้าย `signals` ของอ็อบเจ็กต์นี้\n1. สำหรับแต่ละ signal ที่ถูกเฝ้าดูใหม่ โดยเรียงจากซ้ายไปขวา,\n    1. เพิ่ม watcher นี้เป็น `sink` ให้กับ signal นั้น\n    1. หากนี่คือ sink ตัวแรก ให้ไล่ขึ้นไปยัง source เพื่อตั้ง signal นั้นเป็น sink\n    1. ตั้งค่า `frozen` เป็น true\n    1. เรียกคอลแบ็ก `watched` หากมี\n    1. คืนค่า `frozen` กลับเป็น false\n1. หาก `state` ของ Signal เป็น `~waiting~` ให้ตั้งเป็น `~watching~`\n\n#### เมธอด: `Signal.subtle.Watcher.prototype.unwatch(...signals)`\n\n1. หาก `frozen` เป็น true ให้โยนข้อยกเว้น\n1. หากอาร์กิวเมนต์ใดไม่ใช่ signal หรือ signal นั้นไม่ได้ถูก watcher นี้ดูอยู่ ให้โยนข้อยกเว้น\n1. สำหรับแต่ละ signal ในอาร์กิวเมนต์ โดยเรียงจากซ้ายไปขวา,\n    1. ลบ signal นั้นออกจากเซต `signals` ของ Watcher นี้\n    1. ลบ Watcher นี้ออกจากเซต `sink` ของ Signal นั้น\n    1. หากเซต `sink` ของ Signal นั้นว่างเปล่า ให้ลบ Signal นั้นออกจาก sink ของ source แต่ละตัว\n    1. ตั้งค่า `frozen` เป็น true\n    1. เรียกคอลแบ็ก `unwatched` หากมี\n    1. คืนค่า `frozen` กลับเป็น false\n1. หาก watcher นี้ไม่มี `signals` แล้วและ `state` เป็น `~watching~` ให้ตั้งเป็น `~waiting~`\n\n#### เมธอด: `Signal.subtle.Watcher.prototype.getPending()`\n\n1. คืนค่า Array ที่มี subset ของ `signals` ซึ่งเป็น Computed Signals ที่อยู่ในสถานะ `~dirty~` หรือ `~pending~`\n\n### เมธอด: `Signal.subtle.untrack(cb)`\n\n1. กำหนด `c` ให้เป็น state `computing` ปัจจุบันของ execution context\n1. ตั้ง `computing` เป็น null\n1. เรียก `cb`\n1. คืนค่า `computing` เป็น `c` (แม้ว่า `cb` จะโยนข้อยกเว้น)\n1. คืนค่าผลลัพธ์ของ `cb` (หากมีข้อยกเว้นให้โยนซ้ำ)\n\nหมายเหตุ: untrack จะไม่ทำให้คุณออกจาก state `frozen` ซึ่งจะถูกควบคุมไว้อย่างเข้มงวด\n\n### เมธอด: `Signal.subtle.currentComputed()`\n\n1. คืนค่า `computing` ปัจจุบัน\n\n### อัลกอริทึมร่วม\n\n##### อัลกอริทึม: คำนวณใหม่ dirty computed Signal\n\n1. ล้างเซต `sources` ของ Signal นี้ และลบ Signal นี้ออกจากเซต `sinks` ของ sources เหล่านั้น\n1. บันทึกค่า `computing` ก่อนหน้าและตั้ง `computing` เป็น Signal นี้\n1. ตั้งสถานะ Signal นี้เป็น `~computing~`\n1. รันคอลแบ็กของ computed Signal นี้ โดยใช้ Signal นี้เป็นค่า this บันทึกค่าที่คืนกลับมา และหากคอลแบ็กโยนข้อยกเว้น ให้เก็บข้อยกเว้นนั้นเพื่อโยนซ้ำ\n1. คืนค่า `computing` เป็นค่าก่อนหน้า\n1. ใช้อัลกอริทึม \"set Signal value\" กับค่าที่ return จากคอลแบ็ก\n2. ตั้งสถานะของ Signal นี้เป็น `~clean~`\n1. หากอัลกอริทึมนั้นคืนค่า `~dirty~`: ให้ mark sink ทั้งหมดของ Signal นี้เป็น `~dirty~` (ก่อนหน้านี้ sink อาจเป็นการผสมระหว่าง checked และ dirty) (หรือหาก Signal นี้ไม่ถูก watch ให้เปลี่ยน generation number ใหม่เพื่อบ่งบอกความ dirty หรืออย่างอื่นที่คล้ายกัน)\n1. หากอัลกอริทึมนั้นคืนค่า `~clean~`: ในกรณีนี้ สำหรับแต่ละ sink สถานะ `~checked~` ของ Signal นี้ หากทุก source ของ Signal นั้นสะอาดแล้ว ให้ mark Signal นั้นเป็น `~clean~` ด้วย ทำขั้นตอน clean-up นี้ต่อไปยัง sink ที่เกี่ยวข้องแบบ recursive สำหรับ Signals ที่เพิ่ง clean และมี checked sinks (หรือถ้าไม่ได้ถูก watch ให้บ่งบอกเช่นเดียวกันเพื่อให้ clean-up ทำงานแบบ lazy ได้)\n\n##### อัลกอริทึม Set Signal value\n\n1. หากอัลกอริทึมนี้รับค่ามา (ไม่ใช่ exception สำหรับโยนซ้ำจากอัลกอริทึม recalculate dirty computed Signal):\n    1. เรียกฟังก์ชัน `equals` ของ Signal นี้ โดยส่งค่า `value` ปัจจุบัน, ค่าใหม่ และ Signal นี้เป็นพารามิเตอร์ หากเกิด exception ให้บันทึก exception นั้น (เพื่อโยนซ้ำเมื่ออ่าน) เป็นค่าของ Signal และทำต่อเหมือนคอลแบ็กคืนค่า false\n    1. หากฟังก์ชันนั้นคืนค่า true ให้ return `~clean~`\n1. ตั้งค่า `value` ของ Signal นี้เป็นค่าพารามิเตอร์\n1. return `~dirty~`\n\n## FAQ\n\n**ถาม**: มันเร็วไปไหมที่จะมาตรฐานบางอย่างที่เกี่ยวข้องกับ Signals ทั้งที่เพิ่งกลายเป็นกระแสใหม่ในปี 2022? ควรให้เวลามันพัฒนามากกว่านี้ไหมเพื่อให้เสถียร?\n\n**ตอบ**: สถานะปัจจุบันของ Signals ในเว็บเฟรมเวิร์กต่างๆ เกิดจากการพัฒนาอย่างต่อเนื่องมากกว่า 10 ปี เมื่อการลงทุนเพิ่มขึ้นในช่วงไม่กี่ปีที่ผ่านมา เฟรมเวิร์กเว็บเกือบทั้งหมดกำลังเข้าใกล้โมเดล core ของ Signals ที่คล้ายกันมาก ข้อเสนอนี้เกิดจากการออกแบบร่วมกันระหว่างผู้นำในวงการเว็บเฟรมเวิร์กจำนวนมาก และจะไม่ถูกผลักดันเข้าสู่มาตรฐานโดยไม่มีการยืนยันจากกลุ่มผู้เชี่ยวชาญในหลากหลายบริบท\n\n#### Signals ถูกใช้อย่างไร?\n\n**ถาม**: Signals ที่ถูก build-in สามารถนำไปใช้กับ framework ได้จริงหรือ ในเมื่อมันผูกกับการเรนเดอร์และการเป็นเจ้าของอย่างแน่นแฟ้น?\n\n**ตอบ**: ส่วนที่เฉพาะของ framework มากกว่าจะอยู่ในเรื่องของเอฟเฟกต์, การ scheduling, และการเป็นเจ้าของ/การทำลายทิ้ง ซึ่งข้อเสนอนี้ไม่ได้พยายามจะแก้ปัญหา จุดประสงค์แรกของเรากับการ prototyping Signals ที่จะเข้าสู่มาตรฐาน คือพิสูจน์ว่ามันสามารถ \"รองรับ\" อยู่ใต้ framework ที่มีอยู่แล้วได้อย่างเข้ากันได้และมีประสิทธิภาพ\n\n**ถาม**: Signal API ถูกออกแบบมาให้ใช้โดยตรงกับนักพัฒนาแอปพลิเคชัน หรือควรให้ framework มาครอบอีกที?\n\n**ตอบ**: แม้ API นี้จะสามารถถูกใช้โดยตรงกับนักพัฒนาแอปพลิเคชัน (อย่างน้อยส่วนที่ไม่อยู่ใน namespace `Signal.subtle`) แต่มันไม่ได้ถูกออกแบบมาให้ใช้งานสะดวกเป็นพิเศษ ความต้องการของผู้เขียนไลบรารี/เฟรมเวิร์กเป็นสิ่งสำคัญ Framework ส่วนใหญ่คาดว่าจะครอบแม้แต่ API พื้นฐานอย่าง `Signal.State` และ `Signal.Computed` ด้วย abstraction ที่สะท้อนสไตล์ของ framework เอง ในทางปฏิบัติ มักจะดีที่สุดถ้าใช้ Signals ผ่าน framework ซึ่งจะจัดการฟีเจอร์ที่ซับซ้อนกว่า (เช่น Watcher, `untrack`) รวมถึงการจัดการ ownership และ disposal (เช่น การคำนวณว่า signal ใดควรถูกเพิ่มหรือลบออกจาก watcher) และการ scheduling การเรนเดอร์ไปยัง DOM — ข้อเสนอนี้ไม่ได้พยายามแก้ปัญหาเหล่านั้น\n\n**ถาม**: ต้อง tear down Signals ที่เกี่ยวข้องกับวิดเจ็ตเมื่อวิดเจ็ตนั้นถูกทำลายไหม? API สำหรับสิ่งนี้คืออะไร?\n\n**ตอบ**: การ teardown ที่เกี่ยวข้องคือ `Signal.subtle.Watcher.prototype.unwatch` เฉพาะ Signals ที่ถูก watch เท่านั้นที่ต้อง cleanup (โดยการ unwatch) ส่วน Signals ที่ไม่ได้ถูก watch จะถูกเก็บกวาดโดย garbage collector โดยอัตโนมัติ\n\n**ถาม**: Signals ใช้กับ VDOM หรือใช้งานตรงกับ HTML DOM ได้หรือไม่?\n\n**ตอบ**: ได้! Signals เป็นอิสระจากเทคโนโลยีเรนเดอร์ Framework JavaScript ที่มีอยู่ซึ่งใช้ construct ลักษณะ Signal สามารถทำงานร่วมกับ VDOM (เช่น Preact), native DOM (เช่น Solid) และแบบผสม (เช่น Vue) ได้เช่นกัน สิ่งเดียวกันนี้จะเป็นไปได้กับ Signals ที่ถูก build-in\n\n**ถาม**: การใช้ Signals ใน context ของ framework ที่เป็น class-based เช่น Angular และ Lit จะ ergonomic ไหม? แล้ว framework ที่ใช้ compiler อย่าง Svelte ล่ะ?\n\n**ตอบ**: ฟิลด์ของคลาสสามารถทำให้เป็น Signal-based ได้ด้วย accessor decorator ง่ายๆ ตามตัวอย่างใน [Signal polyfill readme](https://github.com/proposal-signals/signal-polyfill#combining-signals-and-decorators) Signals สอดคล้องกับ Svelte 5's Runes อย่างใกล้ชิด — compiler สามารถแปลง runes ไปเป็น Signal API ตามที่นิยามไว้ที่นี่ได้ง่าย และในความเป็นจริง Svelte 5 ก็ทำแบบนั้นภายใน (แต่ใช้ Signals library ของตัวเอง)\n\n**ถาม**: Signals ใช้กับ SSR ได้หรือไม่? Hydration? Resumability?\n\n**ตอบ**: ได้ Qwik ใช้ Signals ได้อย่างมีประสิทธิภาพกับคุณสมบัติทั้งสองนี้ และ framework อื่นๆ ก็มีแนวทางที่พัฒนาแล้วสำหรับ hydration ด้วย Signals พร้อมข้อแลกเปลี่ยนที่แตกต่างกัน เราคิดว่าสามารถจำลอง Signals แบบ resumable ของ Qwik ได้โดยใช้ State และ Computed signal ที่เชื่อมกัน และเราวางแผนจะพิสูจน์สิ่งนี้ในโค้ด",
  "status": "ok"
}