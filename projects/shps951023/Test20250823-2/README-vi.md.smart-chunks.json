[
  {
    "Id": 1,
    "Content": "<!-- translated by https://openaitx.com please don't remove this remark, system needs this to check project status -->\n<div align=\"right\">\n  <details>\n    <summary >üåê Language</summary>\n    <div>\n      <div align=\"center\">\n        <a href=\"./translate/README.en.md\">English</a>\n        | <a href=\"./translate/README.zh-CN.md\">ÁÆÄ‰Ωì‰∏≠Êñá</a>\n        | <a href=\"./translate/README.zh-TW.md\">ÁπÅÈ´î‰∏≠Êñá</a>\n        | <a href=\"./translate/README.ja.md\">Êó•Êú¨Ë™û</a>\n        | <a href=\"./translate/README.ko.md\">ÌïúÍµ≠Ïñ¥</a>\n        | <a href=\"./translate/README.hi.md\">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä</a>\n        | <a href=\"./translate/README.th.md\">‡πÑ‡∏ó‡∏¢</a>\n        | <a href=\"./translate/README.fr.md\">Fran√ßais</a>\n        | <a href=\"./translate/README.de.md\">Deutsch</a>\n        | <a href=\"./translate/README.es.md\">Espa√±ol</a>\n        | <a href=\"./translate/README.it.md\">Italiano</a>\n        | <a href=\"./translate/README.ru.md\">–†—É—Å—Å–∫–∏–π</a>\n        | <a href=\"./translate/README.pt.md\">Portugu√™s</a>\n        | <a href=\"./translate/README.nl.md\">Nederlands</a>\n        | <a href=\"./translate/README.pl.md\">Polski</a>\n        | <a href=\"./translate/README.ar.md\">ÿßŸÑÿπÿ±ÿ®Ÿäÿ©</a>\n        | <a href=\"./translate/README.fa.md\">ŸÅÿßÿ±ÿ≥€å</a>\n        | <a href=\"./translate/README.tr.md\">T√ºrk√ße</a>\n        | <a href=\"./translate/README.vi.md\">Ti·∫øng Vi·ªát</a>\n        | <a href=\"./translate/README.id.md\">Bahasa Indonesia</a>\n        | <a href=\"./translate/README.as.md\">‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ</a>\n      </div>\n    </div>\n  </details>\n</div>\n\n# Test20250823-2\n\nHello\n\nWelcome  \n\n\nIs there a shutdown function when using Microsoft.AspNet.Server.Kestrel? ASP.NET Core (formerly ASP.NET vNext) clearly has a Startup sequence, but no mention of shutdown sequence and how to handle clean closure.",
    "ContentSha": "kG+UEdhaixbfAchYXhwyCm6y+Tq2Pjf9UqboE1Xlk2A=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<!-- translated by https://openaitx.com please don't remove this remark, system needs this to check project status -->\n<div align=\"right\">\n  <details>\n    <summary >üåê Ng√¥n ng·ªØ</summary>\n    <div>\n      <div align=\"center\">\n        <a href=\"./translate/README.en.md\">English</a>\n        | <a href=\"./translate/README.zh-CN.md\">ÁÆÄ‰Ωì‰∏≠Êñá</a>\n        | <a href=\"./translate/README.zh-TW.md\">ÁπÅÈ´î‰∏≠Êñá</a>\n        | <a href=\"./translate/README.ja.md\">Êó•Êú¨Ë™û</a>\n        | <a href=\"./translate/README.ko.md\">ÌïúÍµ≠Ïñ¥</a>\n        | <a href=\"./translate/README.hi.md\">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä</a>\n        | <a href=\"./translate/README.th.md\">‡πÑ‡∏ó‡∏¢</a>\n        | <a href=\"./translate/README.fr.md\">Fran√ßais</a>\n        | <a href=\"./translate/README.de.md\">Deutsch</a>\n        | <a href=\"./translate/README.es.md\">Espa√±ol</a>\n        | <a href=\"./translate/README.it.md\">Italiano</a>\n        | <a href=\"./translate/README.ru.md\">–†—É—Å—Å–∫–∏–π</a>\n        | <a href=\"./translate/README.pt.md\">Portugu√™s</a>\n        | <a href=\"./translate/README.nl.md\">Nederlands</a>\n        | <a href=\"./translate/README.pl.md\">Polski</a>\n        | <a href=\"./translate/README.ar.md\">ÿßŸÑÿπÿ±ÿ®Ÿäÿ©</a>\n        | <a href=\"./translate/README.fa.md\">ŸÅÿßÿ±ÿ≥€å</a>\n        | <a href=\"./translate/README.tr.md\">T√ºrk√ße</a>\n        | <a href=\"./translate/README.vi.md\">Ti·∫øng Vi·ªát</a>\n        | <a href=\"./translate/README.id.md\">Bahasa Indonesia</a>\n        | <a href=\"./translate/README.as.md\">‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ</a>\n      </div>\n    </div>\n  </details>\n</div>\n\n# Test20250823-2\n\nXin ch√†o\n\nCh√†o m·ª´ng  \n\n\nC√≥ ch·ª©c nƒÉng t·∫Øt m√°y khi s·ª≠ d·ª•ng Microsoft.AspNet.Server.Kestrel kh√¥ng? ASP.NET Core (tr∆∞·ªõc ƒë√¢y l√† ASP.NET vNext) r√µ r√†ng c√≥ tr√¨nh t·ª± kh·ªüi ƒë·ªông, nh∆∞ng kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn tr√¨nh t·ª± t·∫Øt m√°y v√† c√°ch x·ª≠ l√Ω vi·ªác ƒë√≥ng ·ª©ng d·ª•ng m·ªôt c√°ch s·∫°ch s·∫Ω.",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "\n\n   \nIt begins fine, however only the top portion of image is actually converted and in the string is followed by thousands of repeating \"A\". Reconstructing the image just shows the top portion of the image. What am I doing wrong?\n\nCurrently I had not uploaded and redownloaded the string, it is all local until I can figure out what is wrong. I am using the imageString for the image source. I am using .net 6.0.\n\n\n\nI have defined a model configuration to register `EntitySet` and `EntityTypes` for OData:\n",
    "ContentSha": "w9WBu/JXdgW1FVKXVorLNQ16WtL8NQo/8bbY0dglXJU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n\n   \nIt begins fine, however only the top portion of image is actually converted and in the string is followed by thousands of repeating \"A\". Reconstructing the image just shows the top portion of the image. What am I doing wrong?\n\nCurrently I had not uploaded and redownloaded the string, it is all local until I can figure out what is wrong. I am using the imageString for the image source. I am using .net 6.0.\n\n\n\nI have defined a model configuration to register `EntitySet` and `EntityTypes` for OData:\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 3,
    "Content": "```\npublic class NotificationEntryModelConfiguration : IModelConfiguration\n{\n    /// <inheritdoc />\n    public void Apply(ODataModelBuilder builder, ApiVersion apiVersion, string routePrefix)\n    {\n        builder.Namespace = \"NotificationService.Api\";\n        builder.EntitySet<NotificationEntryDto>(\"NotificationEntry\")\n            .EntityType\n            .HasKey(p => p.Id);\n        ConfigureAlertDto(builder);\n        builder.EntityType<NotificationEntryDto>()\n            .Collection\n            .Action(\"UpdateRead\")\n            .Parameter<NotificationReadRequestDto>(\"body\");\n        builder.EntityType<NotificationEntryDto>()\n            .Collection\n            .Action(\"DeleteBulk\")\n            .Parameter<NotificationBulkDeleteRequestDto>(\"body\");\n    }\n\n    private static void ConfigureAlertDto(ODataModelBuilder builder)\n    {\n        builder.AddEnumType(typeof(NotificationComponent));\n        builder.AddEnumType(typeof(NotificationSeverity));\n        builder.AddEnumType(typeof(UserNotificationState));\n\n        var entityType = builder.EntitySet<AlertDto>(\"Alerts\").EntityType;\n        entityType.HasKey(p => p.Id);\n        entityType.Property(p => p.Id).Name = \"Id\";\n        entityType.Property(p => p.NotificationName).Name = \"NotificationName\";\n        entityType.Property(p => p.Data).Name = \"Data\";\n        entityType.EnumProperty(p => p.Component).Name = \"Component\";\n        entityType.EnumProperty(p => p.Severity).Name = \"Severity\";\n        entityType.Property(p => p.CreationTime).Name = \"CreationTime\";\n        entityType.EnumProperty(p => p.State).Name = \"State\";\n        entityType.Property(p => p.UserNotificationId).Name = \"UserNotificationId\";\n        entityType.Property(p => p.DeepLinkRelativeUrl).Name = \"DeepLinkRelativeUrl\";\n    }\n}\n```",
    "ContentSha": "/SuVeKw7mYvAIiqovfe7BPACDTTHO+/RAK0z5zaWbRA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\npublic class NotificationEntryModelConfiguration : IModelConfiguration\n{\n    /// <inheritdoc />\n    public void Apply(ODataModelBuilder builder, ApiVersion apiVersion, string routePrefix)\n    {\n        builder.Namespace = \"NotificationService.Api\";\n        builder.EntitySet<NotificationEntryDto>(\"NotificationEntry\")\n            .EntityType\n            .HasKey(p => p.Id);\n        ConfigureAlertDto(builder);\n        builder.EntityType<NotificationEntryDto>()\n            .Collection\n            .Action(\"UpdateRead\")\n            .Parameter<NotificationReadRequestDto>(\"body\");\n        builder.EntityType<NotificationEntryDto>()\n            .Collection\n            .Action(\"DeleteBulk\")\n            .Parameter<NotificationBulkDeleteRequestDto>(\"body\");\n    }\n\n    private static void ConfigureAlertDto(ODataModelBuilder builder)\n    {\n        builder.AddEnumType(typeof(NotificationComponent));\n        builder.AddEnumType(typeof(NotificationSeverity));\n        builder.AddEnumType(typeof(UserNotificationState));\n\n        var entityType = builder.EntitySet<AlertDto>(\"Alerts\").EntityType;\n        entityType.HasKey(p => p.Id);\n        entityType.Property(p => p.Id).Name = \"Id\";\n        entityType.Property(p => p.NotificationName).Name = \"NotificationName\";\n        entityType.Property(p => p.Data).Name = \"Data\";\n        entityType.EnumProperty(p => p.Component).Name = \"Component\";\n        entityType.EnumProperty(p => p.Severity).Name = \"Severity\";\n        entityType.Property(p => p.CreationTime).Name = \"CreationTime\";\n        entityType.EnumProperty(p => p.State).Name = \"State\";\n        entityType.Property(p => p.UserNotificationId).Name = \"UserNotificationId\";\n        entityType.Property(p => p.DeepLinkRelativeUrl).Name = \"DeepLinkRelativeUrl\";\n    }\n}\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 4,
    "Content": "\nIn my `Startup` file, I'm registering OData service, building the models and adding route components. Assume that `ConfigureCommonServices` function is being called from `Startup`:\n",
    "ContentSha": "052fGVBLuuBQ450RY93PXL7GkLAdtzXEzHHDxBCu3gk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nTrong t·ªáp `Startup` c·ªßa t√¥i, t√¥i ƒëang ƒëƒÉng k√Ω d·ªãch v·ª• OData, x√¢y d·ª±ng c√°c m√¥ h√¨nh v√† th√™m c√°c th√†nh ph·∫ßn tuy·∫øn ƒë∆∞·ªùng. Gi·∫£ s·ª≠ r·∫±ng h√†m `ConfigureCommonServices` ƒëang ƒë∆∞·ª£c g·ªçi t·ª´ `Startup`:\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 5,
    "Content": "```\nprotected override void ConfigureCommonServices<TStartup>(IServiceCollection services) where TStartup : class\n{\n    base.ConfigureCommonServices<TStartup>(services);\n    services.AddCustomHealthCheck(Configuration);\n    services.AddCustomCors(Configuration);\n\n    // Discover local OData model configurations if any\n    var startupAssembly = typeof(TStartup).Assembly;\n    var modelConfigTypes = startupAssembly\n        .GetTypes()\n        .Where(t => typeof(IModelConfiguration).IsAssignableFrom(t) && t.IsClass && !t.IsAbstract)\n        .ToArray();\n\n    var controllersBuilder = services.AddControllers(options => options.Filters.Add(typeof(ValidatorActionFilter)))\n            .AddNewtonsoftJson(options =>\n            {\n                options.SerializerSettings.Converters.Add(new StringEnumConverter());\n                options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;\n            });\n\n    // Always add API versioning (Swagger depends on IApiVersionDescriptionProvider)\n    services.AddCustomVersioning();\n\n    if (modelConfigTypes.Length > 0)\n    {\n        // Enable OData features\n        controllersBuilder.AddOData(opt =>\n        {\n            opt.Select().Expand().Filter().OrderBy().SetMaxTop(1000).Count();\n            opt.EnableQueryFeatures();\n        });\n\n        // Add OData integration to versioning now that controllersBuilder OData is registered\n        services.AddODataApiVersioning();\n\n        // Build versioned EDM models and register route components using discovered configurations\n        services.AddOptions<Microsoft.AspNetCore.OData.ODataOptions>()\n            .Configure<IODataApiVersionCollectionProvider>((options, versionProvider) =>\n            {\n                var configs = new List<IModelConfiguration>(modelConfigTypes.Length);\n                foreach (var t in modelConfigTypes)\n                {\n                    if (Activator.CreateInstance(t) is IModelConfiguration cfg)\n                    {\n                        configs.Add(cfg);\n                    }\n                }\n                var builder = new VersionedODataModelBuilder(versionProvider, configs);\n                var models = builder.GetEdmModels();\n                foreach (var model in models)\n                {\n                    options.AddRouteComponents(\"odata/v{version:apiVersion}\", model);\n                }\n            });\n\n        // Keep case-insensitive enum resolver\n        services.AddSingleton<ODataUriResolver>(sp => new StringAsEnumResolver { EnableCaseInsensitive = true });\n    }\n\n    services.AddSwagger<TStartup>();\n    services.AddAppInsightsTelemetry(Configuration);\n    services.CisAuthentication(Configuration);\n}\n```",
    "ContentSha": "Cb4s3AZ8shVurwbosfN+oPdasnbfe18B+lgTsAdO364=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nprotected override void ConfigureCommonServices<TStartup>(IServiceCollection services) where TStartup : class\n{\n    base.ConfigureCommonServices<TStartup>(services);\n    services.AddCustomHealthCheck(Configuration);\n    services.AddCustomCors(Configuration);\n\n    // Discover local OData model configurations if any\n    var startupAssembly = typeof(TStartup).Assembly;\n    var modelConfigTypes = startupAssembly\n        .GetTypes()\n        .Where(t => typeof(IModelConfiguration).IsAssignableFrom(t) && t.IsClass && !t.IsAbstract)\n        .ToArray();\n\n    var controllersBuilder = services.AddControllers(options => options.Filters.Add(typeof(ValidatorActionFilter)))\n            .AddNewtonsoftJson(options =>\n            {\n                options.SerializerSettings.Converters.Add(new StringEnumConverter());\n                options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;\n            });\n\n    // Always add API versioning (Swagger depends on IApiVersionDescriptionProvider)\n    services.AddCustomVersioning();\n\n    if (modelConfigTypes.Length > 0)\n    {\n        // Enable OData features\n        controllersBuilder.AddOData(opt =>\n        {\n            opt.Select().Expand().Filter().OrderBy().SetMaxTop(1000).Count();\n            opt.EnableQueryFeatures();\n        });\n\n        // Add OData integration to versioning now that controllersBuilder OData is registered\n        services.AddODataApiVersioning();\n\n        // Build versioned EDM models and register route components using discovered configurations\n        services.AddOptions<Microsoft.AspNetCore.OData.ODataOptions>()\n            .Configure<IODataApiVersionCollectionProvider>((options, versionProvider) =>\n            {\n                var configs = new List<IModelConfiguration>(modelConfigTypes.Length);\n                foreach (var t in modelConfigTypes)\n                {\n                    if (Activator.CreateInstance(t) is IModelConfiguration cfg)\n                    {\n                        configs.Add(cfg);\n                    }\n                }\n                var builder = new VersionedODataModelBuilder(versionProvider, configs);\n                var models = builder.GetEdmModels();\n                foreach (var model in models)\n                {\n                    options.AddRouteComponents(\"odata/v{version:apiVersion}\", model);\n                }\n            });\n\n        // Keep case-insensitive enum resolver\n        services.AddSingleton<ODataUriResolver>(sp => new StringAsEnumResolver { EnableCaseInsensitive = true });\n    }\n\n    services.AddSwagger<TStartup>();\n    services.AddAppInsightsTelemetry(Configuration);\n    services.CisAuthentication(Configuration);\n}\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 6,
    "Content": "\nThe OData controller is defined like this:\n",
    "ContentSha": "aWM06larlE3v6wo+n1826BFzJCOg4kl7M7jBibp8snQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nB·ªô ƒëi·ªÅu khi·ªÉn OData ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a nh∆∞ sau:\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 7,
    "Content": "```\npublic class NotificationEntryController : ODataController\n{\n    private readonly IMediator mediator;\n\n    public NotificationEntryController(IMediator mediator)\n    {\n        this.mediator = mediator;\n    }\n\n    /// <summary>\n    /// Retrieves all inAppNotifications.\n    /// </summary>\n    /// <returns>All available products.</returns>\n    /// <response code=\"200\">Products successfully retrieved.</response>\n    [UiPathAuthorize(Policy = Policies.UserContext)]\n    // [DormantEnableQuery]\n    [Produces(\"application/json\")]\n    [ProducesResponseType(typeof(ODataValue<IEnumerable<NotificationEntryDto>>), Status200OK)]\n    [ProducesResponseType((int)HttpStatusCode.BadRequest)]\n    [EndpointSeverity(EndpointSeverity.CRITICAL)]\n    public async Task<ActionResult<PageResult<NotificationEntryDto>>> Get(ODataQueryOptions<NotificationEntryDto> queryOptions)\n    {\n        if (!(queryOptions.Count == null || bool.TryParse(queryOptions.Count.RawValue, out _)))\n        {\n            return this.BuildErrorResponse(string.Format(NotificationServiceConstants.InvalidCountQueryOption, queryOptions.Count.RawValue), (int)HttpStatusCode.BadRequest);\n        }\n\n        var res = await mediator.Send(new NotificationQueryOption(queryOptions));\n\n        return this.BuildGetPaginatedApiResponse(res);\n    }\n\n    /// <summary>\n    /// Marks the passed notifications as read/unread.\n    /// </summary>\n    /// <param name=\"body\">NotificationReadRequestDto object</param>\n    /// <returns>NoContentResult</returns>\n    [HttpPost]\n    [ProducesDefaultResponseType]\n    [ProducesResponseType((int)HttpStatusCode.BadRequest)]\n    [ProducesResponseType((int)HttpStatusCode.OK)]\n    [UiPathAuthorize(Policy = Policies.UserContext)]\n    [EndpointSeverity(EndpointSeverity.HIGH)]\n    public async Task<IActionResult> UpdateRead([FromBody] NotificationReadRequestDto body)\n    {\n        var res = await mediator.Send(body);\n        return this.BuildPostApiResponse(res);\n    }\n\n    /// <summary>\n    /// Deletes the notification entry\n    /// </summary>\n    /// <param name=\"body\">Collection of notification ids</param>\n    /// <returns>NoContentResult</returns>\n    [HttpPost]\n    [ProducesDefaultResponseType]\n    [ProducesResponseType((int)HttpStatusCode.BadRequest)]\n    [ProducesResponseType((int)HttpStatusCode.OK)]\n    [UiPathAuthorize(Policy = Policies.UserContext)]\n    [EndpointSeverity(EndpointSeverity.MEDIUM)]\n    public async Task<IActionResult> DeleteBulkAsync([FromBody] NotificationBulkDeleteRequestDto body)\n    {\n        var ids = body.NotifcationIds;\n        if (!ids.Any() && !body.DeleteAll)\n        {\n            return this.BuildErrorResponse(NotificationServiceConstants.InvalidBulkdDeleteRequest, (int)HttpStatusCode.BadRequest);\n        }\n        var res = await mediator.Send(body);\n        return this.BuildPostApiResponse(res);\n    }\n}\n```",
    "ContentSha": "W3l4rJtMS3ryI647vgjwuwlvlw2yuPLc4Ud0q0e5zu8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\npublic class NotificationEntryController : ODataController\n{\n    private readonly IMediator mediator;\n\n    public NotificationEntryController(IMediator mediator)\n    {\n        this.mediator = mediator;\n    }\n\n    /// <summary>\n    /// Retrieves all inAppNotifications.\n    /// </summary>\n    /// <returns>All available products.</returns>\n    /// <response code=\"200\">Products successfully retrieved.</response>\n    [UiPathAuthorize(Policy = Policies.UserContext)]\n    // [DormantEnableQuery]\n    [Produces(\"application/json\")]\n    [ProducesResponseType(typeof(ODataValue<IEnumerable<NotificationEntryDto>>), Status200OK)]\n    [ProducesResponseType((int)HttpStatusCode.BadRequest)]\n    [EndpointSeverity(EndpointSeverity.CRITICAL)]\n    public async Task<ActionResult<PageResult<NotificationEntryDto>>> Get(ODataQueryOptions<NotificationEntryDto> queryOptions)\n    {\n        if (!(queryOptions.Count == null || bool.TryParse(queryOptions.Count.RawValue, out _)))\n        {\n            return this.BuildErrorResponse(string.Format(NotificationServiceConstants.InvalidCountQueryOption, queryOptions.Count.RawValue), (int)HttpStatusCode.BadRequest);\n        }\n\n        var res = await mediator.Send(new NotificationQueryOption(queryOptions));\n\n        return this.BuildGetPaginatedApiResponse(res);\n    }\n\n    /// <summary>\n    /// Marks the passed notifications as read/unread.\n    /// </summary>\n    /// <param name=\"body\">NotificationReadRequestDto object</param>\n    /// <returns>NoContentResult</returns>\n    [HttpPost]\n    [ProducesDefaultResponseType]\n    [ProducesResponseType((int)HttpStatusCode.BadRequest)]\n    [ProducesResponseType((int)HttpStatusCode.OK)]\n    [UiPathAuthorize(Policy = Policies.UserContext)]\n    [EndpointSeverity(EndpointSeverity.HIGH)]\n    public async Task<IActionResult> UpdateRead([FromBody] NotificationReadRequestDto body)\n    {\n        var res = await mediator.Send(body);\n        return this.BuildPostApiResponse(res);\n    }\n\n    /// <summary>\n    /// Deletes the notification entry\n    /// </summary>\n    /// <param name=\"body\">Collection of notification ids</param>\n    /// <returns>NoContentResult</returns>\n    [HttpPost]\n    [ProducesDefaultResponseType]\n    [ProducesResponseType((int)HttpStatusCode.BadRequest)]\n    [ProducesResponseType((int)HttpStatusCode.OK)]\n    [UiPathAuthorize(Policy = Policies.UserContext)]\n    [EndpointSeverity(EndpointSeverity.MEDIUM)]\n    public async Task<IActionResult> DeleteBulkAsync([FromBody] NotificationBulkDeleteRequestDto body)\n    {\n        var ids = body.NotifcationIds;\n        if (!ids.Any() && !body.DeleteAll)\n        {\n            return this.BuildErrorResponse(NotificationServiceConstants.InvalidBulkdDeleteRequest, (int)HttpStatusCode.BadRequest);\n        }\n        var res = await mediator.Send(body);\n        return this.BuildPostApiResponse(res);\n    }\n}\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 8,
    "Content": "\nEven though `odata/v1/$metadata` shows `UpdateRead` and `DeleteBulk` registered as Actions, when I hit the POST url `.../odata/v1/NotificationEntry/NotificationService.Api.UpdateRead` or for `DeleteBulk` it throws 404. \n\nThis was previously implemented for .net6 and after upgrading to .net8 I added lot of changes to handle OData routing for which I have added the code.\n\nI tried enabling `RoutingAttributes` option but it didn't help.\n",
    "ContentSha": "c49tkICIbAicGmKDlaIB5ITxfy0YchGNGObmmcUAdnE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "M·∫∑c d√π `odata/v1/$metadata` hi·ªÉn th·ªã `UpdateRead` v√† `DeleteBulk` ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω d∆∞·ªõi d·∫°ng Actions, nh∆∞ng khi t√¥i g·ªçi url POST `.../odata/v1/NotificationEntry/NotificationService.Api.UpdateRead` ho·∫∑c ƒë·ªëi v·ªõi `DeleteBulk` th√¨ n√≥ tr·∫£ v·ªÅ l·ªói 404.\n\nƒêi·ªÅu n√†y tr∆∞·ªõc ƒë√¢y ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai cho .net6 v√† sau khi n√¢ng c·∫•p l√™n .net8 t√¥i ƒë√£ th√™m r·∫•t nhi·ªÅu thay ƒë·ªïi ƒë·ªÉ x·ª≠ l√Ω ƒë·ªãnh tuy·∫øn OData, cho vi·ªác ƒë√≥ t√¥i ƒë√£ th√™m m√£ ngu·ªìn.\n\nT√¥i ƒë√£ th·ª≠ b·∫≠t t√πy ch·ªçn `RoutingAttributes` nh∆∞ng kh√¥ng hi·ªáu qu·∫£.\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  }
]