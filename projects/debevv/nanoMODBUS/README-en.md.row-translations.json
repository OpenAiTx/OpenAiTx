[
  {
    "row": 1,
    "rowsha": "SQ5Dqu3acJgXCDEhg7tiiBBGP17sd3f0NA6kHVLqdFE=",
    "originContent": "# nanoMODBUS - A compact MODBUS RTU/TCP C library for embedded/microcontrollers",
    "translatedContent": "<translate-content># nanoMODBUS - A compact MODBUS RTU/TCP C library for embedded/microcontrollers"
  },
  {
    "row": 2,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 3,
    "rowsha": "q29H5TedUvkqIa3PS2pnwbuRh+mvhkqcac1+AxgC5/U=",
    "originContent": "**If you found this library useful, buy me a coffee on**",
    "translatedContent": "**If you found this library useful, buy me a coffee on**"
  },
  {
    "row": 4,
    "rowsha": "Hhl9/gDT3/hWSZZG6PVmRyPsx3xchkkW1LN02nnarVQ=",
    "originContent": "[<img src='https://storage.ko-fi.com/cdn/brandasset/logo_white_stroke.png' width='80'>](https://ko-fi.com/B0B2LK779)",
    "translatedContent": "[<img src='https://storage.ko-fi.com/cdn/brandasset/logo_white_stroke.png' width='80'>](https://ko-fi.com/B0B2LK779)"
  },
  {
    "row": 5,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 6,
    "rowsha": "4ec2HYurDpng7IKOqXJEKFTxTRyVPHK+Sk/77+tIWek=",
    "originContent": "nanoMODBUS is a small C library that implements the Modbus protocol. It is especially useful in embedded and",
    "translatedContent": "nanoMODBUS is a small C library that implements the Modbus protocol. It is especially useful in embedded and"
  },
  {
    "row": 7,
    "rowsha": "ZQR8lrtv2CfRfKkTjX6Og3xuV9KBIsXZRNkI/bU1+q4=",
    "originContent": "resource-constrained systems like microcontrollers.  ",
    "translatedContent": "resource-constrained systems like microcontrollers.  "
  },
  {
    "row": 8,
    "rowsha": "Cm14uZ/D5IGzDUVRsFJSHoIUicUljOAO0pwDJc71IHQ=",
    "originContent": "Its main features are:",
    "translatedContent": "Its main features are:"
  },
  {
    "row": 9,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 10,
    "rowsha": "pw4FZbzv0vskAyd8hoQVLEIpRTwqaA7T2Xj8DDCfChs=",
    "originContent": "- Compact size",
    "translatedContent": "- Compact size"
  },
  {
    "row": 11,
    "rowsha": "S9MuQWhF84fWiE6hC2NYwoBSj8znx1tg2vmOpvzUeYQ=",
    "originContent": "    - Only ~2000 lines of code",
    "translatedContent": "    - Only ~2000 lines of code"
  },
  {
    "row": 12,
    "rowsha": "zVRWMqpAGeXggJdJKbXJIADsP76xXpefyZS1ApO0VKI=",
    "originContent": "    - Client and server code can be disabled, if not needed",
    "translatedContent": "    - Client and server code can be disabled, if not needed"
  },
  {
    "row": 13,
    "rowsha": "Fond6rbZfzPktYlgf0R+DgC06N6pUvonbJ5NO4bjU5M=",
    "originContent": "- No dynamic memory allocations",
    "translatedContent": "- No dynamic memory allocations"
  },
  {
    "row": 14,
    "rowsha": "b4W7RXgnIKdupxB7Rs/hk1zgQrSYoDWXRDPhjOIU9hM=",
    "originContent": "- Transports:",
    "translatedContent": "- Transports:"
  },
  {
    "row": 15,
    "rowsha": "8toO0YWDb+LOeQf/CkzNTH5oMUtZzVtt6+ZWPUCvA9M=",
    "originContent": "    - RTU",
    "translatedContent": "    - RTU"
  },
  {
    "row": 16,
    "rowsha": "tJRlE25L6dCU4LN7Pf1QcH7inM31UL92Z3LLSMy0MLE=",
    "originContent": "    - TCP",
    "translatedContent": "    - TCP"
  },
  {
    "row": 17,
    "rowsha": "xQmmrG64qyPsGOIHN9N10yk2D/ZwbZht+FSBRwWYmis=",
    "originContent": "- Roles:",
    "translatedContent": "- Roles:"
  },
  {
    "row": 18,
    "rowsha": "Bu0Q/EYMSS3+DYwDdNn9OKsyAKfFwPUkIMlvfQjCL98=",
    "originContent": "    - Client",
    "translatedContent": "    - Client"
  },
  {
    "row": 19,
    "rowsha": "3p4XPZFXX4cwge3knk1qPZhR2rPwoFWFjme3G8oA4V8=",
    "originContent": "    - Server",
    "translatedContent": "    - Server"
  },
  {
    "row": 20,
    "rowsha": "yipN5pgGbZq1i1rWEcPNX79xWbaFnoOH8dUZ2Ohod/k=",
    "originContent": "- Function codes:",
    "translatedContent": "- Function codes:"
  },
  {
    "row": 21,
    "rowsha": "GpJo9PwRCh3Z8ubxkqpcA5W2zhWiuUIP4KPgF+1Jkcc=",
    "originContent": "    - 01 (0x01) Read Coils",
    "translatedContent": "    - 01 (0x01) Read Coils"
  },
  {
    "row": 22,
    "rowsha": "PKJ8RPm6BWl0rDg3hmDeAOdegEnUWw0WNOBa5foDtP8=",
    "originContent": "    - 02 (0x02) Read Discrete Inputs",
    "translatedContent": "    - 02 (0x02) Read Discrete Inputs"
  },
  {
    "row": 23,
    "rowsha": "iAXlKczjzYLHTQAER8GK7bnjmRm1iVEBGSRcB5gU4oY=",
    "originContent": "    - 03 (0x03) Read Holding Registers",
    "translatedContent": "    - 03 (0x03) Read Holding Registers"
  },
  {
    "row": 24,
    "rowsha": "zKZA/xN2v0XVQfU5FtNhTmtyNndwK/oa7IZXB0SOcrw=",
    "originContent": "    - 04 (0x04) Read Input Registers",
    "translatedContent": "    - 04 (0x04) Read Input Registers"
  },
  {
    "row": 25,
    "rowsha": "taikb+lCjNYWRuVA7r1D/xBFuY2FpOlSWypX7lw5/wE=",
    "originContent": "    - 05 (0x05) Write Single Coil",
    "translatedContent": "    - 05 (0x05) Write Single Coil"
  },
  {
    "row": 26,
    "rowsha": "BnMlcCchHio+YOALsagTaiTBPWb6CmESQjnZ3rcvbQg=",
    "originContent": "    - 06 (0x06) Write Single Register",
    "translatedContent": "    - 06 (0x06) Write Single Register"
  },
  {
    "row": 27,
    "rowsha": "SymDsLnZimkhjNG0eBEaY431qXk2m7AH6hixJI2IbNI=",
    "originContent": "    - 15 (0x0F) Write Multiple Coils",
    "translatedContent": "    - 15 (0x0F) Write Multiple Coils"
  },
  {
    "row": 28,
    "rowsha": "w/yluIyPdYC5ZuMo9IzcIgDfF3t+FE8eTfdDxd4A+jY=",
    "originContent": "    - 16 (0x10) Write Multiple registers",
    "translatedContent": "    - 16 (0x10) Write Multiple registers"
  },
  {
    "row": 29,
    "rowsha": "4Rc0VHUtd2v8JkBf+un8OBXhTv+tVcrs8yE+Gu+bcG0=",
    "originContent": "    - 20 (0x14) Read File Record",
    "translatedContent": "    - 20 (0x14) Read File Record"
  },
  {
    "row": 30,
    "rowsha": "sjce1HAx5GxEv1G6p6HUhco1t/0uJLDbU3QPKeqti3I=",
    "originContent": "    - 21 (0x15) Write File Record",
    "translatedContent": "    - 21 (0x15) Write File Record"
  },
  {
    "row": 31,
    "rowsha": "DF4NuUKXfF/DsAK65ZVl6zYnRFXfgy841j78THNmCuM=",
    "originContent": "    - 23 (0x17) Read/Write Multiple registers",
    "translatedContent": "    - 23 (0x17) Read/Write Multiple registers"
  },
  {
    "row": 32,
    "rowsha": "9L6eIgR5w61JMtByYIpUX7gAquhaJYETP46sTCDDFJo=",
    "originContent": "    - 43/14 (0x2B/0x0E) Read Device Identification",
    "translatedContent": "    - 43/14 (0x2B/0x0E) Read Device Identification"
  },
  {
    "row": 33,
    "rowsha": "QM263UdoxiQtvtMgp2n9ctad5KnAk4L8hvGHT8hcnCQ=",
    "originContent": "- Platform-agnostic",
    "translatedContent": "- Platform-agnostic"
  },
  {
    "row": 34,
    "rowsha": "qO5pftfU92kDyuzdFh/g4GbwlmkRwdfxqcPm5u5E5+E=",
    "originContent": "    - Requires only C99 and its standard library",
    "translatedContent": "    - Requires only C99 and its standard library"
  },
  {
    "row": 35,
    "rowsha": "R/qSIAcpB4EokDkwzXR5nd85jfTxaJvDZdwLjYsjLTE=",
    "originContent": "    - Data transport read/write functions are implemented by the user",
    "translatedContent": "    - Data transport read/write functions are implemented by the user"
  },
  {
    "row": 36,
    "rowsha": "E9YoroAnGaQweXM0OE9/PKA1dy/CyQKJCa2PB2Dt/Ps=",
    "originContent": "- User-definable CRC function for better performance",
    "translatedContent": "- User-definable CRC function for better performance"
  },
  {
    "row": 37,
    "rowsha": "PvLn3rxUfGPli7/fP1zgaAI06UhNGnH+BvQT4bPpA1w=",
    "originContent": "- Broadcast requests and responses",
    "translatedContent": "- Broadcast requests and responses"
  },
  {
    "row": 38,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 39,
    "rowsha": "1QFag4yX5vPb3ir+STHwqAQeykwQx4OwUmT3HMzrMAs=",
    "originContent": "## At a glance",
    "translatedContent": "## At a glance"
  },
  {
    "row": 40,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 41,
    "rowsha": "HJAT3LC2oOIvzk2XOKsKclL/l5Flx3BMOS4um1Bhqho=",
    "originContent": "```C",
    "translatedContent": "```C"
  },
  {
    "row": 42,
    "rowsha": "HoOeMmhdUl1MGWX5upkmdYK7Viy7HZ66lLHIBYzeLy4=",
    "originContent": "#include <stdio.h>",
    "translatedContent": "#include <stdio.h>"
  },
  {
    "row": 43,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 44,
    "rowsha": "kVxel+8+lrap99tRghoIqyGvupjOCrHj5ygUWX10y/A=",
    "originContent": "#include \"nanomodbus.h\"",
    "translatedContent": "#include \"nanomodbus.h\""
  },
  {
    "row": 45,
    "rowsha": "gO3Vb9H5uRzP30rbTSdbof3RB5oni4JHY+dmlWyddi4=",
    "originContent": "#include \"my_platform_stuff.h\"",
    "translatedContent": "#include \"my_platform_stuff.h\""
  },
  {
    "row": 46,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 47,
    "rowsha": "U4QxgqoMBW/nyA98JtORS2p1JiS7kI+61V0CcgE75Z0=",
    "originContent": "int main(int argc, char* argv[]) {",
    "translatedContent": "int main(int argc, char* argv[]) {"
  },
  {
    "row": 48,
    "rowsha": "QHwhIwES76lk+7hGYat9Q+rZcZfL+sPQG3uEPQIov/k=",
    "originContent": "    // Set up the TCP connection",
    "translatedContent": "    // Set up the TCP connection"
  },
  {
    "row": 49,
    "rowsha": "JYPaLktIAP6ExyBp9rA8onEVTwUQSYQ52oBaTptq8/I=",
    "originContent": "    void* conn = my_connect_tcp(argv[1], argv[2]);",
    "translatedContent": "    void* conn = my_connect_tcp(argv[1], argv[2]);"
  },
  {
    "row": 50,
    "rowsha": "Oqdq4SivX/Kwv8Orqx20Ut/mAtkYfKBvyFc8FFy8Nqw=",
    "originContent": "    if (!conn) {",
    "translatedContent": "    if (!conn) {"
  },
  {
    "row": 51,
    "rowsha": "w3s61MWeoXLwQrB7WEbg17Hsa9UfD+LxCBDP8z7YJ70=",
    "originContent": "        fprintf(stderr, \"Error connecting to server\\n\");",
    "translatedContent": "        fprintf(stderr, \"Error connecting to server\\n\");"
  },
  {
    "row": 52,
    "rowsha": "o8zr4dGQtO098OL/QTAI/Vxj/sReSOIkx4wA8Dvb6P0=",
    "originContent": "        return 1;",
    "translatedContent": "        return 1;"
  },
  {
    "row": 53,
    "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
    "originContent": "    }",
    "translatedContent": "    }"
  },
  {
    "row": 54,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 55,
    "rowsha": "acKxt5s7ROEXIPsIkPVR7vPaKMOUNNLC2w2FvzGLRA0=",
    "originContent": "    // my_transport_read() and my_transport_write() are implemented by the user ",
    "translatedContent": "    // my_transport_read() and my_transport_write() are implemented by the user "
  },
  {
    "row": 56,
    "rowsha": "j3sqvMn2BlLeiC2ibRxv8M/QKzWnzD254onZL/urqvs=",
    "originContent": "    nmbs_platform_conf platform_conf;",
    "translatedContent": "    nmbs_platform_conf platform_conf;"
  },
  {
    "row": 57,
    "rowsha": "N9XDPoIp9QYTzNiT29o/yo7n1EUrQi7t1JSGEnSgIjM=",
    "originContent": "    nmbs_platform_conf_create(&platform_conf);",
    "translatedContent": "    nmbs_platform_conf_create(&platform_conf);"
  },
  {
    "row": 58,
    "rowsha": "LyfyXaZxDOz3319HORbFw8Lov69gqsTXbZ+/vuwp0pg=",
    "originContent": "    platform_conf.transport = NMBS_TRANSPORT_TCP;",
    "translatedContent": "    platform_conf.transport = NMBS_TRANSPORT_TCP;"
  },
  {
    "row": 59,
    "rowsha": "GK4IUcpOqRaXHsANzkb9frhZCr/ixSeUf6v3R2fQAZQ=",
    "originContent": "    platform_conf.read = my_transport_read;",
    "translatedContent": "    platform_conf.read = my_transport_read;"
  },
  {
    "row": 60,
    "rowsha": "1SPzIsoXxNI/XnetfM02noWbBABwypd+01Z7zIWrLWY=",
    "originContent": "    platform_conf.write = my_transport_write;",
    "translatedContent": "    platform_conf.write = my_transport_write;"
  },
  {
    "row": 61,
    "rowsha": "EZFaOKgEp4Ia9xhbuM4iCy3Qpm/WzPLHkkXJhrx2B04=",
    "originContent": "    platform_conf.arg = conn;    // Passing our TCP connection handle to the read/write functions",
    "translatedContent": "    platform_conf.arg = conn;    // Passing our TCP connection handle to the read/write functions"
  },
  {
    "row": 62,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 63,
    "rowsha": "UhBHxDFk4hgx8aqvI3RiywBqTF66PURleaNdzFc4A2Q=",
    "originContent": "    // Create the modbus client",
    "translatedContent": "    // Create the modbus client"
  },
  {
    "row": 64,
    "rowsha": "w7+CbF6IUCD4sVoKn1BPxHs8vbDAXBMG8nVRsuanwJs=",
    "originContent": "    nmbs_t nmbs;",
    "translatedContent": "    nmbs_t nmbs;"
  },
  {
    "row": 65,
    "rowsha": "XmkHwLY63h7CYNNQp9uj1tstQtvxFvnYLhDHZFyfZ68=",
    "originContent": "    nmbs_error err = nmbs_client_create(&nmbs, &platform_conf);",
    "translatedContent": "    nmbs_error err = nmbs_client_create(&nmbs, &platform_conf);"
  },
  {
    "row": 66,
    "rowsha": "g7uAZNm7v6WmbSALoSgCh351uUoEW97YlmIV0nVwd+c=",
    "originContent": "    if (err != NMBS_ERROR_NONE) {",
    "translatedContent": "    if (err != NMBS_ERROR_NONE) {"
  },
  {
    "row": 67,
    "rowsha": "dAO/6hwK7kJo04U5ZI9RDMfD8NOFKRZeOv0LNYiCVCo=",
    "originContent": "        fprintf(stderr, \"Error creating modbus client\\n\");",
    "translatedContent": "        fprintf(stderr, \"Error creating modbus client\\n\");"
  },
  {
    "row": 68,
    "rowsha": "o8zr4dGQtO098OL/QTAI/Vxj/sReSOIkx4wA8Dvb6P0=",
    "originContent": "        return 1;",
    "translatedContent": "        return 1;"
  },
  {
    "row": 69,
    "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
    "originContent": "    }",
    "translatedContent": "    }"
  },
  {
    "row": 70,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 71,
    "rowsha": "UXWOGZK1oHeOYTQD6TkpCa8GTsbYO8Mefs98dBzWO1A=",
    "originContent": "    // Set only the response timeout. Byte timeout will be handled by the TCP connection",
    "translatedContent": "    // Set only the response timeout. Byte timeout will be handled by the TCP connection"
  },
  {
    "row": 72,
    "rowsha": "mGJf8TBtSFTalnjt1XtRHjWgASYyFHR7l/iRGyMtNfo=",
    "originContent": "    nmbs_set_read_timeout(&nmbs, 1000);",
    "translatedContent": "    nmbs_set_read_timeout(&nmbs, 1000);"
  },
  {
    "row": 73,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 74,
    "rowsha": "0EPvn/eS7VUVFQa2pDv9GTCCEU+8qOi4/H69ELdY9KM=",
    "originContent": "    // Write 2 holding registers at address 26",
    "translatedContent": "    // Write 2 holding registers at address 26"
  },
  {
    "row": 75,
    "rowsha": "FNppQEcGSkD63IHkbsKW6noRZ6zAUu+7ICWvsVG0GWg=",
    "originContent": "    uint16_t w_regs[2] = {123, 124};",
    "translatedContent": "    uint16_t w_regs[2] = {123, 124};"
  },
  {
    "row": 76,
    "rowsha": "lOglaqqkfq3I/77x1WgxV0uNLNU+o/kXMl71BkW1pk0=",
    "originContent": "    err = nmbs_write_multiple_registers(&nmbs, 26, 2, w_regs);",
    "translatedContent": "    err = nmbs_write_multiple_registers(&nmbs, 26, 2, w_regs);"
  },
  {
    "row": 77,
    "rowsha": "g7uAZNm7v6WmbSALoSgCh351uUoEW97YlmIV0nVwd+c=",
    "originContent": "    if (err != NMBS_ERROR_NONE) {",
    "translatedContent": "    if (err != NMBS_ERROR_NONE) {"
  },
  {
    "row": 78,
    "rowsha": "xio408H6agmOdPlZwOSCOMqiWxnLLS8keu+4iqRj+4g=",
    "originContent": "        fprintf(stderr, \"Error writing register at address 26 - %s\", nmbs_strerror(err));",
    "translatedContent": "        fprintf(stderr, \"Error writing register at address 26 - %s\", nmbs_strerror(err));"
  },
  {
    "row": 79,
    "rowsha": "o8zr4dGQtO098OL/QTAI/Vxj/sReSOIkx4wA8Dvb6P0=",
    "originContent": "        return 1;",
    "translatedContent": "        return 1;"
  },
  {
    "row": 80,
    "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
    "originContent": "    }",
    "translatedContent": "    }"
  },
  {
    "row": 81,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 82,
    "rowsha": "cQ/wLbgL3fCdrJ9z28xSLDHfolibYrzMdazDlzlzxlQ=",
    "originContent": "    // Read 2 holding registers from address 26",
    "translatedContent": "    // Read 2 holding registers from address 26"
  },
  {
    "row": 83,
    "rowsha": "w60i8uwM5BE2n9D7SIbgJOrDlZytcL5MiQ3E633Gs4A=",
    "originContent": "    uint16_t r_regs[2];",
    "translatedContent": "    uint16_t r_regs[2];"
  },
  {
    "row": 84,
    "rowsha": "AE9/UYYn9h8/4A0OrjHwv8mkuhqO9/rTsyJYQSI7u3U=",
    "originContent": "    err = nmbs_read_holding_registers(&nmbs, 26, 2, r_regs);",
    "translatedContent": "    err = nmbs_read_holding_registers(&nmbs, 26, 2, r_regs);"
  },
  {
    "row": 85,
    "rowsha": "g7uAZNm7v6WmbSALoSgCh351uUoEW97YlmIV0nVwd+c=",
    "originContent": "    if (err != NMBS_ERROR_NONE) {",
    "translatedContent": "    if (err != NMBS_ERROR_NONE) {"
  },
  {
    "row": 86,
    "rowsha": "sb1gElCakPRS/3GR4wq0nk0Uzrm/MO+xC0UNejEeZbs=",
    "originContent": "        fprintf(stderr, \"Error reading 2 holding registers at address 26 - %s\\n\", nmbs_strerror(err));",
    "translatedContent": "        fprintf(stderr, \"Error reading 2 holding registers at address 26 - %s\\n\", nmbs_strerror(err));"
  },
  {
    "row": 87,
    "rowsha": "o8zr4dGQtO098OL/QTAI/Vxj/sReSOIkx4wA8Dvb6P0=",
    "originContent": "        return 1;",
    "translatedContent": "        return 1;"
  },
  {
    "row": 88,
    "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
    "originContent": "    }",
    "translatedContent": "    }"
  },
  {
    "row": 89,
    "rowsha": "Gg9WTdxgOUV7L7JrPWoxbBXrogqIZEmEfDIQw1ghppM=",
    "originContent": "    ",
    "translatedContent": "    "
  },
  {
    "row": 90,
    "rowsha": "zEq/vCeGC6JC1vfLVurRMArdyxo/uSqeuXrF4SGyA/k=",
    "originContent": "    // Close the TCP connection",
    "translatedContent": "    // Close the TCP connection"
  },
  {
    "row": 91,
    "rowsha": "ys3BMvrV1ecVjx/ovM4RVTKxsZg2OYE85mX3nHqH10I=",
    "originContent": "    my_disconnect(conn);",
    "translatedContent": "    my_disconnect(conn);"
  },
  {
    "row": 92,
    "rowsha": "Gg9WTdxgOUV7L7JrPWoxbBXrogqIZEmEfDIQw1ghppM=",
    "originContent": "    ",
    "translatedContent": "    "
  },
  {
    "row": 93,
    "rowsha": "8pHc/FvRZDBIWcWWwH1A5WovfJ9PNWM+KWmFZTQ5CMc=",
    "originContent": "    return 0;",
    "translatedContent": "    return 0;"
  },
  {
    "row": 94,
    "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
    "originContent": "}",
    "translatedContent": "}"
  },
  {
    "row": 95,
    "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
    "originContent": "```",
    "translatedContent": "```"
  },
  {
    "row": 96,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "## Installation"
  },
  {
    "row": 97,
    "rowsha": "oV0SUDvwD2VN8Gi9nlr2JZ2xcDrASmE2W5kc5SVX5eo=",
    "originContent": "## Installation",
    "translatedContent": ""
  },
  {
    "row": 98,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "### Manual"
  },
  {
    "row": 99,
    "rowsha": "9OG0gmh7hn/goGKXiq1OEJ97bhWCg/x49US2cADdZYc=",
    "originContent": "### Manual",
    "translatedContent": ""
  },
  {
    "row": 100,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "Just copy `nanomodbus.c` and `nanomodbus.h` inside your application codebase."
  },
  {
    "row": 101,
    "rowsha": "LmpBXqbdySXmUlHYN3VYBKdKt5Y6m+74vVIxoPHp24Q=",
    "originContent": "Just copy `nanomodbus.c` and `nanomodbus.h` inside your application codebase.",
    "translatedContent": ""
  },
  {
    "row": 102,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "### CMake project"
  },
  {
    "row": 103,
    "rowsha": "52wrgLwHrMO5XPAN3d/05hOsM/DU/gOXeEEk9ltNvYU=",
    "originContent": "### CMake project",
    "translatedContent": ""
  },
  {
    "row": 104,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "nanomodbus supports library linking by using CMake."
  },
  {
    "row": 105,
    "rowsha": "dAquRKiWYv/xYMxkP8F8O6Re9oVpXuKOjKOXPBdeFA0=",
    "originContent": "nanomodbus supports library linking by using CMake.",
    "translatedContent": ""
  },
  {
    "row": 106,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 107,
    "rowsha": "W+63107Hl+0X81S5ZFRqZTkxe8HKRP2Gy4902QKz6jo=",
    "originContent": "```cmake",
    "translatedContent": "```cmake"
  },
  {
    "row": 108,
    "rowsha": "ISJ8pKXlZjJrx9raVh4j6FUjlHghsgG9uCzwMUtJbpI=",
    "originContent": "FetchContent_Declare(",
    "translatedContent": "FetchContent_Declare("
  },
  {
    "row": 109,
    "rowsha": "DHQUhGq5XJ1Mkvkd+CBHT9oLXqfWCkmABktwMOVKnpk=",
    "originContent": "        nanomodbus",
    "translatedContent": "        nanomodbus"
  },
  {
    "row": 110,
    "rowsha": "VTQcV8h6anHkbpoWtxSrMl+UQlaUMbdd5XELfOfHvrk=",
    "originContent": "        GIT_REPOSITORY https://github.com/debevv/nanoMODBUS",
    "translatedContent": "        GIT_REPOSITORY https://github.com/debevv/nanoMODBUS"
  },
  {
    "row": 111,
    "rowsha": "yFv3CeTfrKX+4gFwArdgY5l94KOjgFy2FKCtxBTO2bo=",
    "originContent": "        GIT_TAG master # or the version you want",
    "translatedContent": "        GIT_TAG master # or the version you want"
  },
  {
    "row": 112,
    "rowsha": "N+BUgwhosNQG4lzgw8oswShZ28Kvuk8F3vgqpCRfLgc=",
    "originContent": "        GIT_SHALLOW TRUE",
    "translatedContent": "        GIT_SHALLOW TRUE"
  },
  {
    "row": 113,
    "rowsha": "ul7FHQekrA6VFghwRDHVmgKyGk6VGswQUFqNxAfFAe4=",
    "originContent": ")",
    "translatedContent": ")"
  },
  {
    "row": 114,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 115,
    "rowsha": "5GC38dvgIWLVklMO3bxdCFzLh88NcKqWWZPfCfRbO8Y=",
    "originContent": "FetchContent_MakeAvailable(nanomodbus)",
    "translatedContent": "FetchContent_MakeAvailable(nanomodbus)"
  },
  {
    "row": 116,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 117,
    "rowsha": "ZJfMdXb+ObSx5VZ6wiiUl8b1nzTTLjXdCQdrY0VtYVY=",
    "originContent": "#...",
    "translatedContent": "#..."
  },
  {
    "row": 118,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 119,
    "rowsha": "gV2cn99njL4NsJn3/fmeTf9OIcsLHlzQ2RIYvhYQ5w4=",
    "originContent": "add_executable(your_program source_codes)",
    "translatedContent": "add_executable(your_program source_codes)"
  },
  {
    "row": 120,
    "rowsha": "jq4kd3gZkji8j8mDFfdBp+GrgxG5mzFfvybjpUEUL+s=",
    "originContent": "target_link_libraries(your_program nanomodbus)",
    "translatedContent": "target_link_libraries(your_program nanomodbus)"
  },
  {
    "row": 121,
    "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
    "originContent": "```",
    "translatedContent": "```"
  },
  {
    "row": 122,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "## API reference"
  },
  {
    "row": 123,
    "rowsha": "ytzNsUSnjKDluY5AI5VcWEEWsr2RCjDj2xW7AMsNbvo=",
    "originContent": "## API reference",
    "translatedContent": ""
  },
  {
    "row": 124,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "API reference is available in the repository's [GitHub Pages](https://debevv.github.io/nanoMODBUS/nanomodbus_8h.html)."
  },
  {
    "row": 125,
    "rowsha": "KNw6F9Z605lJCpHWXKPbtn1eGpyrCr+WRsWsVqZJBow=",
    "originContent": "API reference is available in the repository's [GitHub Pages](https://debevv.github.io/nanoMODBUS/nanomodbus_8h.html).",
    "translatedContent": ""
  },
  {
    "row": 126,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "## Platform functions"
  },
  {
    "row": 127,
    "rowsha": "Uc0+IAB8SkAOttZtfzTywnQb7tv8ki5uNsaWwpXtNcM=",
    "originContent": "## Platform functions",
    "translatedContent": ""
  },
  {
    "row": 128,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "nanoMODBUS requires the implementation of 2 platform-specific functions, defined as function pointers when creating a"
  },
  {
    "row": 129,
    "rowsha": "nh1uNSNDTg2RC80YNqTO4PrmZK13Ga81hXaJlGXs9b0=",
    "originContent": "nanoMODBUS requires the implementation of 2 platform-specific functions, defined as function pointers when creating a",
    "translatedContent": "client/server instance."
  },
  {
    "row": 130,
    "rowsha": "7lzZC76f5Ki/Xh23Fv0JpiNXRh6+1Xt4LpT9Q0r0Vb0=",
    "originContent": "client/server instance.",
    "translatedContent": ""
  },
  {
    "row": 131,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "### Transport read/write"
  },
  {
    "row": 132,
    "rowsha": "4xZPbCtVi1P8iLFWmDXKlLgAj8jq/sKDjL0HHWEQhXc=",
    "originContent": "### Transport read/write",
    "translatedContent": ""
  },
  {
    "row": 133,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 134,
    "rowsha": "HJAT3LC2oOIvzk2XOKsKclL/l5Flx3BMOS4um1Bhqho=",
    "originContent": "```C",
    "translatedContent": "```C"
  },
  {
    "row": 135,
    "rowsha": "syTBTcArwtJTt0jliIJGC0e0XwfC/IFzV6FZRH6Xd98=",
    "originContent": "int32_t read(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg);",
    "translatedContent": "int32_t read(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg);"
  },
  {
    "row": 136,
    "rowsha": "ZSgqHTpJCYgF4Xv6ZB6EwjB1jrlXkYzWLPq9aLbV9kg=",
    "originContent": "int32_t write(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg);",
    "translatedContent": "int32_t write(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg);"
  },
  {
    "row": 137,
    "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
    "originContent": "```",
    "translatedContent": "```"
  },
  {
    "row": 138,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "These are your platform-specific functions that read/write data to/from a serial port or a TCP connection.  "
  },
  {
    "row": 139,
    "rowsha": "UwoneFPYUbtOo2FlxugAVIyl7u2U3LfD4VIpGLwOLLI=",
    "originContent": "These are your platform-specific functions that read/write data to/from a serial port or a TCP connection.  ",
    "translatedContent": "Both methods should block until either:"
  },
  {
    "row": 140,
    "rowsha": "GlHQPEuCasl7x2vq32eL8B3uCDZiLTFy7pFb/tNkoc8=",
    "originContent": "Both methods should block until either:",
    "translatedContent": ""
  },
  {
    "row": 141,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "- `count` bytes of data are read/written"
  },
  {
    "row": 142,
    "rowsha": "Mt2/4Kf8Bgr3YVQ6wO0bOn7IZYeWQdrbE6s4kf0Vr9Q=",
    "originContent": "- `count` bytes of data are read/written",
    "translatedContent": "- the byte timeout, with `byte_timeout_ms >= 0`, expires"
  },
  {
    "row": 143,
    "rowsha": "U946ujWm0ce78PmXP2b1sW2KH9E8edZFYB9ehwkZGg4=",
    "originContent": "- the byte timeout, with `byte_timeout_ms >= 0`, expires",
    "translatedContent": ""
  },
  {
    "row": 144,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "A value `< 0` for `byte_timeout_ms` means infinite timeout.  "
  },
  {
    "row": 145,
    "rowsha": "8B6wp8LR9MefTh7y2HpRnED84d/c0+t8YpOB53eR20Q=",
    "originContent": "A value `< 0` for `byte_timeout_ms` means infinite timeout.  ",
    "translatedContent": "With a value `== 0` for `byte_timeout_ms`, the method should read/write once in a non-blocking fashion and return"
  },
  {
    "row": 146,
    "rowsha": "L2s2uwrY8p43oNd8oIgilfX6GzRa6evAsY2H/QEToJI=",
    "originContent": "With a value `== 0` for `byte_timeout_ms`, the method should read/write once in a non-blocking fashion and return",
    "translatedContent": "immediately."
  },
  {
    "row": 147,
    "rowsha": "uUIHcDkCnricwLm4PMh6o7+o/LTq6IYBiTTeN6I/G8w=",
    "originContent": "immediately.",
    "translatedContent": ""
  },
  {
    "row": 148,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "Their return value should be the number of bytes actually read/written, or `< 0` in case of error.  "
  },
  {
    "row": 149,
    "rowsha": "remzs+ekCOkqHYRIfNXVP9bb1HJODh7aGbcAFnQQsZM=",
    "originContent": "Their return value should be the number of bytes actually read/written, or `< 0` in case of error.  ",
    "translatedContent": "A return value between `0` and `count - 1` will be treated as if a timeout occurred on the transport side. All other"
  },
  {
    "row": 150,
    "rowsha": "HfD+A16dvrbeIwq314WyEwvETuMbq+kVlKa9BWCY2xs=",
    "originContent": "A return value between `0` and `count - 1` will be treated as if a timeout occurred on the transport side. All other",
    "translatedContent": "values will be treated as transport errors."
  },
  {
    "row": 151,
    "rowsha": "pRDRJfAdrvP6jNYCITdIyhj+0nTE5OoihiWGyk7BniI=",
    "originContent": "values will be treated as transport errors.",
    "translatedContent": ""
  },
  {
    "row": 152,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "### Callbacks and platform functions arguments"
  },
  {
    "row": 153,
    "rowsha": "uN5JPJc5n5z7qnroluMI8I/+eqA5Gb7dmX9Us1mkw0k=",
    "originContent": "### Callbacks and platform functions arguments",
    "translatedContent": ""
  },
  {
    "row": 154,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "Server callbacks and platform functions can access arbitrary user data through their `void* arg` argument. The argument"
  },
  {
    "row": 155,
    "rowsha": "4/zmQvUF6Gj3jLDELfab9mqMembyWx7/9DORmtUSkwk=",
    "originContent": "Server callbacks and platform functions can access arbitrary user data through their `void* arg` argument. The argument",
    "translatedContent": "is useful, for example, to pass the connection a function should operate on.  "
  },
  {
    "row": 156,
    "rowsha": "QS0WGdWb/qYohIRgwz28GUMwJkDqZckzsptzq/SnLag=",
    "originContent": "is useful, for example, to pass the connection a function should operate on.  ",
    "translatedContent": "Their initial values can be set via the `nmbs_set_callbacks_arg` and `nmbs_set_platform_arg` API methods."
  },
  {
    "row": 157,
    "rowsha": "AzK7c/Irwc9SFvzJ13jNvQs/wVgE/iqccQ8RofaAKOQ=",
    "originContent": "Their initial values can be set via the `nmbs_set_callbacks_arg` and `nmbs_set_platform_arg` API methods.",
    "translatedContent": ""
  },
  {
    "row": 158,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "## Tests and examples"
  },
  {
    "row": 159,
    "rowsha": "jb/zgqoDtzC27OTu6zbsj0rb7Txv/sdwNX4NofHs6DQ=",
    "originContent": "## Tests and examples",
    "translatedContent": ""
  },
  {
    "row": 160,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "Tests and examples can be built and run on Linux with CMake:"
  },
  {
    "row": 161,
    "rowsha": "ycDZl8rO/x1bbkG3zmmFyYWamkuIbhZ5qYiDMenpEww=",
    "originContent": "Tests and examples can be built and run on Linux with CMake:",
    "translatedContent": ""
  },
  {
    "row": 162,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  },
  {
    "row": 163,
    "rowsha": "ivgYKrHo9QnPgZYRA645sKpipVpw39MbuUN0CN9LfCA=",
    "originContent": "```sh",
    "translatedContent": "```sh"
  },
  {
    "row": 164,
    "rowsha": "/ij4nXADubLfmHtzOAT6hQUJOJtaNpy3lGYNFT5zcdc=",
    "originContent": "mkdir build && cd build",
    "translatedContent": "mkdir build && cd build"
  },
  {
    "row": 165,
    "rowsha": "V0mtka5lCsTxBGRpE4a14WQSlTI4WajbzQahr8N2sKQ=",
    "originContent": "cmake ..",
    "translatedContent": "cmake .."
  },
  {
    "row": 166,
    "rowsha": "0FqioV+zxA7+6wO+xEU5PwAHRITPAcj7LakMpmlaVTE=",
    "originContent": "make",
    "translatedContent": "make"
  },
  {
    "row": 167,
    "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
    "originContent": "```",
    "translatedContent": "```"
  },
  {
    "row": 168,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "Please refer to `examples/arduino/README.md` for more info about building and running Arduino examples."
  },
  {
    "row": 169,
    "rowsha": "3g06K0qSMCT4yb/FGCWM0EwULFldcCWFm4HiXTJOxJg=",
    "originContent": "Please refer to `examples/arduino/README.md` for more info about building and running Arduino examples.",
    "translatedContent": ""
  },
  {
    "row": 170,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "## Misc"
  },
  {
    "row": 171,
    "rowsha": "IDl7IVTeldq+zk09MQBtmdLtaugodLNVSOpRc2CwBAI=",
    "originContent": "## Misc",
    "translatedContent": ""
  },
  {
    "row": 172,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": "- To reduce code size, you can define the following `#define`s:"
  },
  {
    "row": 173,
    "rowsha": "9zoRvUmLbKxzm/K+td9LEuZ6Z4cgN9wkFwjez3jQq/c=",
    "originContent": "- To reduce code size, you can define the following `#define`s:",
    "translatedContent": "    - `NMBS_CLIENT_DISABLED` to disable all client code"
  },
  {
    "row": 174,
    "rowsha": "Ww++aF1/DaECxeYr9jSud+dSECDs2iSo2J5xPwSWyaM=",
    "originContent": "    - `NMBS_CLIENT_DISABLED` to disable all client code",
    "translatedContent": "    - `NMBS_SERVER_DISABLED` to disable all server code"
  },
  {
    "row": 175,
    "rowsha": "RXNi13tebjlcCUOU9h0OgasUYxHFmBi2Z/QIKAbPi30=",
    "originContent": "    - `NMBS_SERVER_DISABLED` to disable all server code",
    "translatedContent": "    - To disable individual server callbacks, define the following:"
  },
  {
    "row": 176,
    "rowsha": "fjKY6G+x7/NHHP1mjpcTCRWd3dC1dMRcyu+DPCJMyRE=",
    "originContent": "    - To disable individual server callbacks, define the following:",
    "translatedContent": "        - `NMBS_SERVER_READ_COILS_DISABLED`"
  },
  {
    "row": 177,
    "rowsha": "H03buPIYTGPnC1Zf9iRNXWSiRNIaKL4AdsL/tM6pid8=",
    "originContent": "        - `NMBS_SERVER_READ_COILS_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED`"
  },
  {
    "row": 178,
    "rowsha": "xa+00FSXQFdFVqASZUUHTv+yVE+uRuJYXN3gOvpLCVw=",
    "originContent": "        - `NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED`"
  },
  {
    "row": 179,
    "rowsha": "KF47WkfWL1wlwOJr0inF4upKDtShURxXAmBuezP4Dtg=",
    "originContent": "        - `NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED`"
  },
  {
    "row": 180,
    "rowsha": "hf+PrfbkOfxNBLCTL60YX0ed2jdaYhWliVvjmd+XVx4=",
    "originContent": "        - `NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED`"
  },
  {
    "row": 181,
    "rowsha": "8clx/JF4Uj7GrYhmlkx7CH7fubVzeuVfysljTx+GXaE=",
    "originContent": "        - `NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED`"
  },
  {
    "row": 182,
    "rowsha": "/nGVEpuk0PGszfLAz7f+XmYPGTl4cBV6rAirFsJlSfM=",
    "originContent": "        - `NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED`"
  },
  {
    "row": 183,
    "rowsha": "Tl1N/iVZtHphSedMitky97MI6bonWbcnX4Aw0Ybdyxc=",
    "originContent": "        - `NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED`"
  },
  {
    "row": 184,
    "rowsha": "BxM9OUmVGJxUbkm2i7kUTs97Dr2Dhu6Ua6jLS9kvEak=",
    "originContent": "        - `NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_READ_FILE_RECORD_DISABLED`"
  },
  {
    "row": 185,
    "rowsha": "zuaS9w4K1qQ0vKDyDocjlYFtPq844qNASxWQ92Gy1cM=",
    "originContent": "        - `NMBS_SERVER_READ_FILE_RECORD_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_WRITE_FILE_RECORD_DISABLED`"
  },
  {
    "row": 186,
    "rowsha": "pbnFsdlhmYvoyXglD0m3RzaYiSN4rmA94bQuSJJ8HPY=",
    "originContent": "        - `NMBS_SERVER_WRITE_FILE_RECORD_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_READ_WRITE_REGISTERS_DISABLED`"
  },
  {
    "row": 187,
    "rowsha": "Q2U8SwJkqUjhfP9Pg4A1QyhkP/qCbNx7IXe0hZuO5Ko=",
    "originContent": "        - `NMBS_SERVER_READ_WRITE_REGISTERS_DISABLED`",
    "translatedContent": "        - `NMBS_SERVER_READ_DEVICE_IDENTIFICATION_DISABLED`"
  },
  {
    "row": 188,
    "rowsha": "fWVvXMP4dwrSmeY1DewIAhm3PZ8Fffw0I+cw4uEQcfM=",
    "originContent": "        - `NMBS_SERVER_READ_DEVICE_IDENTIFICATION_DISABLED`",
    "translatedContent": "    - `NMBS_STRERROR_DISABLED` to disable the code that converts `nmbs_error`s to strings"
  },
  {
    "row": 189,
    "rowsha": "EYmsNyFwccV9gNY8rasapekJmGRNfCMBOIoTHmTCsT8=",
    "originContent": "    - `NMBS_STRERROR_DISABLED` to disable the code that converts `nmbs_error`s to strings",
    "translatedContent": "    - `NMBS_BITFIELD_MAX` to set the size of the `nmbs_bitfield` type, used to store coil values (default is `2000`)"
  },
  {
    "row": 190,
    "rowsha": "wYekoLDPobWH0SxYcp/0ruK+UR0/ZomSxAggN+xWnl8=",
    "originContent": "    - `NMBS_BITFIELD_MAX` to set the size of the `nmbs_bitfield` type, used to store coil values (default is `2000`)",
    "translatedContent": "- Debug prints about received and sent messages can be enabled by defining `NMBS_DEBUG`"
  },
  {
    "row": 191,
    "rowsha": "rz4zxF0ktaBHRkzqoOoSUM/+KYzNJY0N/yDFfA3bDgc=",
    "originContent": "- Debug prints about received and sent messages can be enabled by defining `NMBS_DEBUG`",
    "translatedContent": ""
  },
  {
    "row": 192,
    "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "originContent": "",
    "translatedContent": ""
  }
]