[
  {
    "Id": 1,
    "Content": "# Sord\n\n## Overview\n\nSord is a [**So**rbet](https://sorbet.org) and [YA**RD**](https://yardoc.org/)\ncrossover. It can **automatically generate RBI and RBS type signature files** by\nlooking at the **types specified in YARD documentation** comments.\n\nIf your project is already YARD documented, then this can generate most of the\ntype signatures you need!\n\nSord is the perfect way to jump-start the adoption of types in your project,\nwhether you plan to use Sorbet's RBI format or Ruby 3/Steep's RBS format.\n\n**Try Sord online at: [sord.aaronc.cc](https://sord.aaronc.cc)**\n\nSord has the following features:\n  - Automatically generates signatures for modules, classes and methods\n  - Support for multiple parameter or return types (`T.any`/`|`)\n  - Gracefully handles missing YARD types (`T.untyped`/`untyped`)\n  - Can infer setter parameter type from the corresponding getter's return type\n  - Recognises mixins (`include` and `extend`)\n  - Support for generic types such as `Array<T>` and `Hash<K, V>`\n  - Can infer namespaced classes (`[Bar]` can become `GemName::Foo::Bar`)\n  - Handles return types which can be `nil` (`T.nilable`/`untyped`)\n  - Handles duck types (`T.untyped`/`untyped`)\n  - Support for ordered list types (`[Array(Integer, Symbol)]` becomes `[Integer, Symbol]`)\n  - Support for boolean types (`[true, false]` becomes `T::Boolean`/`bool`)\n  - Support for `&block` parameters documented with `@yieldparam` and `@yieldreturn`\n\n## Usage\n\nInstall Sord with `gem install sord`.\n\nSord is a command line tool. To use it, open a terminal in the root directory\nof your project and invoke `sord`, passing a path where you'd like to save your\nfile (this file will be overwritten):\n",
    "ContentSha": "MNTVAu9U/U6bR5xnrhtlf7J9jqKUrgjbp7JexjSQj0I=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# Sord\n\n## 概述\n\nSord 是一个 [**So**rbet](https://sorbet.org) 和 [YA**RD**](https://yardoc.org/) 的\n跨界工具。它可以通过查看 **YARD 文档注释中指定的类型**，**自动生成 RBI 和 RBS 类型签名文件**。\n\n如果你的项目已经有 YARD 文档，那么它可以生成你所需的大部分类型签名！\n\nSord 是在项目中快速采用类型的完美方式，无论你计划使用 Sorbet 的 RBI 格式还是 Ruby 3/Steep 的 RBS 格式。\n\n**在线试用 Sord： [sord.aaronc.cc](https://sord.aaronc.cc)**\n\nSord 具有以下功能：\n  - 自动为模块、类和方法生成签名\n  - 支持多参数或返回类型（`T.any`/`|`）\n  - 优雅处理缺失的 YARD 类型（`T.untyped`/`untyped`）\n  - 可从对应的 getter 返回类型推断 setter 参数类型\n  - 识别 mixin（`include` 和 `extend`）\n  - 支持泛型类型，如 `Array<T>` 和 `Hash<K, V>`\n  - 可推断命名空间类（`[Bar]` 可变为 `GemName::Foo::Bar`）\n  - 处理可能为 `nil` 的返回类型（`T.nilable`/`untyped`）\n  - 处理鸭子类型（`T.untyped`/`untyped`）\n  - 支持有序列表类型（`[Array(Integer, Symbol)]` 变为 `[Integer, Symbol]`）\n  - 支持布尔类型（`[true, false]` 变为 `T::Boolean`/`bool`）\n  - 支持使用 `@yieldparam` 和 `@yieldreturn` 注释的 `&block` 参数\n\n## 使用方法\n\n使用命令 `gem install sord` 安装 Sord。\n\nSord 是一个命令行工具。使用时，在项目根目录打开终端，\n执行 `sord`，并传入你希望保存文件的路径（该文件将被覆盖）：\n\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "vV0ULeAdhKgYgXqmhiR4fVacrGgQnl8I+IGqgcNQ6ZI=",
        "originContent": "# Sord",
        "translatedContent": "# Sord"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "czfz0Kop6agrjxZQt0Opju+QeUYx+nY6MZaG5pxUaCE=",
        "originContent": "## Overview",
        "translatedContent": "## 概述"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "otGEbFc7TQDTJ+okt1Gz84Wdb9WaeyzKBYPCoUjNoJY=",
        "originContent": "Sord is a [**So**rbet](https://sorbet.org) and [YA**RD**](https://yardoc.org/)",
        "translatedContent": "Sord 是一个 [**So**rbet](https://sorbet.org) 和 [YA**RD**](https://yardoc.org/) 的"
      },
      {
        "row": 6,
        "rowsha": "4Z4GlQL5XRt15nmdmZVpBkHIqv5XWR5qxi13si+lZqY=",
        "originContent": "crossover. It can **automatically generate RBI and RBS type signature files** by",
        "translatedContent": "跨界工具。它可以通过查看 **YARD 文档注释中指定的类型**，**自动生成 RBI 和 RBS 类型签名文件**。"
      },
      {
        "row": 7,
        "rowsha": "ylGlRBU1fJtPcGBRNbgOGGfsDoFJC0LfRZJnhUKJCSQ=",
        "originContent": "looking at the **types specified in YARD documentation** comments.",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "如果你的项目已经有 YARD 文档，那么它可以生成你所需的大部分类型签名！"
      },
      {
        "row": 9,
        "rowsha": "SHI7rynJJvQihsObss17aB0yy6We8pf7jxz8jVjNHss=",
        "originContent": "If your project is already YARD documented, then this can generate most of the",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "TgW7mKlWgX1KftP+kFwm7+28jBH/dtNqcpwg5YGLJTg=",
        "originContent": "type signatures you need!",
        "translatedContent": "Sord 是在项目中快速采用类型的完美方式，无论你计划使用 Sorbet 的 RBI 格式还是 Ruby 3/Steep 的 RBS 格式。"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "yVqBM99zi5wIxH+4ICrZ/Tr3EamtE82ttVoeBTBlm9w=",
        "originContent": "Sord is the perfect way to jump-start the adoption of types in your project,",
        "translatedContent": "**在线试用 Sord： [sord.aaronc.cc](https://sord.aaronc.cc)**"
      },
      {
        "row": 13,
        "rowsha": "pHe/pjv8IwX+JtEzW0TX3Tn6vc9PFpK0rZimPxcZqVQ=",
        "originContent": "whether you plan to use Sorbet's RBI format or Ruby 3/Steep's RBS format.",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Sord 具有以下功能："
      },
      {
        "row": 15,
        "rowsha": "LOmE+3PG5do/8waRPCs4MeAe7jyjXRDV6Rjdm9Ev8qc=",
        "originContent": "**Try Sord online at: [sord.aaronc.cc](https://sord.aaronc.cc)**",
        "translatedContent": "  - 自动为模块、类和方法生成签名"
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "  - 支持多参数或返回类型（`T.any`/`|`）"
      },
      {
        "row": 17,
        "rowsha": "qgn1qoJVTbZGjDpa6aju/5r6r3u84BQSWzJ7ZXhHT70=",
        "originContent": "Sord has the following features:",
        "translatedContent": "  - 优雅处理缺失的 YARD 类型（`T.untyped`/`untyped`）"
      },
      {
        "row": 18,
        "rowsha": "wBmiji3LUhAQx0mccoVV1/O9TOjy06h6tKUNVhW2zkU=",
        "originContent": "  - Automatically generates signatures for modules, classes and methods",
        "translatedContent": "  - 可从对应的 getter 返回类型推断 setter 参数类型"
      },
      {
        "row": 19,
        "rowsha": "fxvfIivlOpxXlzHYbK1ZfQNhg8bdmaeW1SWwqSD6+6w=",
        "originContent": "  - Support for multiple parameter or return types (`T.any`/`|`)",
        "translatedContent": "  - 识别 mixin（`include` 和 `extend`）"
      },
      {
        "row": 20,
        "rowsha": "IJK2g7AsLoyATCG2uVtF3l1xLnr9Wm26PfuefIJyD5w=",
        "originContent": "  - Gracefully handles missing YARD types (`T.untyped`/`untyped`)",
        "translatedContent": "  - 支持泛型类型，如 `Array<T>` 和 `Hash<K, V>`"
      },
      {
        "row": 21,
        "rowsha": "4+HCWcVoIO11qjM3KjeUWw9qpeKBrtvDwI0ZD5B9rzs=",
        "originContent": "  - Can infer setter parameter type from the corresponding getter's return type",
        "translatedContent": "  - 可推断命名空间类（`[Bar]` 可变为 `GemName::Foo::Bar`）"
      },
      {
        "row": 22,
        "rowsha": "vmU09CQez7P9hmI23oWBdXaK2TloYOqnRtnW4CZTPF0=",
        "originContent": "  - Recognises mixins (`include` and `extend`)",
        "translatedContent": "  - 处理可能为 `nil` 的返回类型（`T.nilable`/`untyped`）"
      },
      {
        "row": 23,
        "rowsha": "vyDytTG+UbT8/T7MA0PeBGN92pzl08qMBJ+7F2jhF38=",
        "originContent": "  - Support for generic types such as `Array<T>` and `Hash<K, V>`",
        "translatedContent": "  - 处理鸭子类型（`T.untyped`/`untyped`）"
      },
      {
        "row": 24,
        "rowsha": "zuaRUA5hujmCSYQTdtXicykap03jYgtERfsjwVJr95o=",
        "originContent": "  - Can infer namespaced classes (`[Bar]` can become `GemName::Foo::Bar`)",
        "translatedContent": "  - 支持有序列表类型（`[Array(Integer, Symbol)]` 变为 `[Integer, Symbol]`）"
      },
      {
        "row": 25,
        "rowsha": "3EsD501X7AGPPGbVSZQaN9cwL+6aqCqwpem2/I1IcEw=",
        "originContent": "  - Handles return types which can be `nil` (`T.nilable`/`untyped`)",
        "translatedContent": "  - 支持布尔类型（`[true, false]` 变为 `T::Boolean`/`bool`）"
      },
      {
        "row": 26,
        "rowsha": "yRlKAT1mxots48VYl0ybmFrPUADwYea5X1q5uMhgJmE=",
        "originContent": "  - Handles duck types (`T.untyped`/`untyped`)",
        "translatedContent": "  - 支持使用 `@yieldparam` 和 `@yieldreturn` 注释的 `&block` 参数"
      },
      {
        "row": 27,
        "rowsha": "g2PgrIFIGTrOegC3peNZmpvttCi/2xSFYWJzo8VXMTE=",
        "originContent": "  - Support for ordered list types (`[Array(Integer, Symbol)]` becomes `[Integer, Symbol]`)",
        "translatedContent": ""
      },
      {
        "row": 28,
        "rowsha": "kNbZGGH28GzkuC3nRyfAAqpiuJjpMbvDo360mwWfWRk=",
        "originContent": "  - Support for boolean types (`[true, false]` becomes `T::Boolean`/`bool`)",
        "translatedContent": "## 使用方法"
      },
      {
        "row": 29,
        "rowsha": "0/dVNwTprEu2p6NI/ksVfRs6YDbByLjcoaml9Hml5sI=",
        "originContent": "  - Support for `&block` parameters documented with `@yieldparam` and `@yieldreturn`",
        "translatedContent": ""
      },
      {
        "row": 30,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "使用命令 `gem install sord` 安装 Sord。"
      },
      {
        "row": 31,
        "rowsha": "Y7/WGgVhslWiyqCi463Qkcp+Mn8voGpAfLsv80G4WNg=",
        "originContent": "## Usage",
        "translatedContent": ""
      },
      {
        "row": 32,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Sord 是一个命令行工具。使用时，在项目根目录打开终端，"
      },
      {
        "row": 33,
        "rowsha": "4EhwMuKS+5cJLeJk7J9q6mkj1sQOSCn3FwNMIC7Gl8Y=",
        "originContent": "Install Sord with `gem install sord`.",
        "translatedContent": "执行 `sord`，并传入你希望保存文件的路径（该文件将被覆盖）："
      },
      {
        "row": 34,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 35,
        "rowsha": "Lq4GX3u3IbMWcgunguhP1afEVtKKZ6IvEVGb8qRxeH0=",
        "originContent": "Sord is a command line tool. To use it, open a terminal in the root directory",
        "translatedContent": ""
      },
      {
        "row": 36,
        "rowsha": "lX1eBLtJXL8doEkN9tI+gc1qaC24BpgGYLFE9gfBN8c=",
        "originContent": "of your project and invoke `sord`, passing a path where you'd like to save your",
        "translatedContent": ""
      },
      {
        "row": 37,
        "rowsha": "+bh+McAjzaUOuGhz5cJndmWrKo1X5Ruf2iMbspuXZm8=",
        "originContent": "file (this file will be overwritten):",
        "translatedContent": ""
      },
      {
        "row": 38,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "```\nsord defs.rbi\n```",
    "ContentSha": "IEMuCkXWBlH/iHxyO8wgbsXEhIbBStEniEuqvrS8Ey0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nsord defs.rbi\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      },
      {
        "row": 2,
        "rowsha": "Rzy4vIYfC+oxrnOOkTWtf1C/Qms8DrRSL4p5WiUEUgo=",
        "originContent": "sord defs.rbi",
        "translatedContent": "sord defs.rbi"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 3,
    "Content": "\nSord will generate YARD docs and then print information about what it's inferred\nas it runs. It is best to fix any issues in the YARD documentation, as any edits\nmade to the resulting file will be replaced if you re-run Sord.\n\nThe output type is inferred by the file extension you use, but you can also\nspecify it explicitly with `--rbi` or `--rbs`.\n\n## Shipping RBI Types\n\nRBI files generated by Sord can be used in two main ways:\n\n- [Shipped in the gem itself](https://sorbet.org/docs/rbi#rbis-within-gems).\n- Contributed to [sorbet-typed](https://github.com/sorbet/sorbet-typed).\n\nGenerally, you should ship the type signatures with your gem if possible.\nsorbet-typed is meant to be a place for gems that are no longer updated or\nwhere the maintainer is unwilling to ship type signatures with the gem itself.\n\n### Flags\n\nSord also takes some flags to alter the generated file:\n\n  - `--rbi`/`--rbs`: Override the output format inferred from the file\n    extension.\n  - `--no-sord-comments`: Generates the file without any Sord comments about\n    warnings/inferences/errors. (The original file's comments will still be\n    included.)\n  - `--no-regenerate`: By default, Sord will regenerate a repository's YARD\n    docs for you. This option skips regenerating the YARD docs.\n  - `--break-params`: Determines how many parameters are necessary before\n    the signature is changed from a single-line to a multi-line block.\n    (Default: 4)\n  - `--replace-errors-with-untyped`: Uses `T.untyped` instead of `SORD_ERROR_*`\n    constants.\n  - `--replace-unresolved-with-untyped`: Uses `T.untyped` when Sord is unable to\n    resolve a constant.\n  - `--include-messages` and `--exclude-messages`: Used to filter the logging\n    messages given by Sord. `--include-messages` acts as a whitelist, printing\n    only messages of the specified logging kinds, whereas `--exclude-messages`",
    "ContentSha": "6P/3DlBoP9WPCzPN35ClyCf09wUGKbwgRJS/dC+WSgA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Sord 将生成 YARD 文档，然后在运行时打印其推断的信息。最好修复任何 YARD 文档中的问题，因为对生成文件所做的任何编辑在重新运行 Sord 时都会被替换。\n\n输出类型由您使用的文件扩展名推断，但您也可以使用 `--rbi` 或 `--rbs` 明确指定。\n\n## 发送 RBI 类型\n\nSord 生成的 RBI 文件主要有两种使用方式：\n\n- [随 gem 本身一起发布](https://sorbet.org/docs/rbi#rbis-within-gems)。\n- 贡献给 [sorbet-typed](https://github.com/sorbet/sorbet-typed)。\n\n通常，如果可能的话，您应该随 gem 一起发布类型签名。  \nsorbet-typed 是为那些不再更新的 gem 或维护者不愿随 gem 本身发布类型签名的 gem 提供的地方。\n\n### 标志\n\nSord 还接受一些标志来修改生成的文件：\n\n  - `--rbi`/`--rbs`：覆盖从文件扩展名推断的输出格式。\n  - `--no-sord-comments`：生成的文件中不包含任何关于警告/推断/错误的 Sord 注释。（原始文件的注释仍会被包含。）\n  - `--no-regenerate`：默认情况下，Sord 会为您重新生成代码库的 YARD 文档。此选项跳过重新生成 YARD 文档。\n  - `--break-params`：确定需要多少个参数后，签名从单行变为多行块。（默认值：4）\n  - `--replace-errors-with-untyped`：使用 `T.untyped` 替代 `SORD_ERROR_*` 常量。\n  - `--replace-unresolved-with-untyped`：当 Sord 无法解析常量时，使用 `T.untyped`。\n  - `--include-messages` 和 `--exclude-messages`：用于过滤 Sord 给出的日志消息。`--include-messages` 作为白名单，仅打印指定日志类型的消息，而 `--exclude-messages`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Sord 将生成 YARD 文档，然后在运行时打印其推断的信息。最好修复任何 YARD 文档中的问题，因为对生成文件所做的任何编辑在重新运行 Sord 时都会被替换。"
      },
      {
        "row": 2,
        "rowsha": "GSmwHjblgB0ANHcfRYTkmgeiE6CUbPPKbfE/kbi30DI=",
        "originContent": "Sord will generate YARD docs and then print information about what it's inferred",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "+g7ZPgT57H5oslVHhSxOEk5LVvyez8JRrrDlhP/r+qE=",
        "originContent": "as it runs. It is best to fix any issues in the YARD documentation, as any edits",
        "translatedContent": "输出类型由您使用的文件扩展名推断，但您也可以使用 `--rbi` 或 `--rbs` 明确指定。"
      },
      {
        "row": 4,
        "rowsha": "imSHijqEoKWtHqEgFkQlbkeM7yCJLw65x8Tn0KW1YRM=",
        "originContent": "made to the resulting file will be replaced if you re-run Sord.",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## 发送 RBI 类型"
      },
      {
        "row": 6,
        "rowsha": "MasU3tzSvUIN1n+KaHITTb7EM+CSCsGZBva+uHHpFeQ=",
        "originContent": "The output type is inferred by the file extension you use, but you can also",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "Li58R+c9w/rQBtX8Mmc7fWZzQ2LKd1EL4GxS1RtZyPA=",
        "originContent": "specify it explicitly with `--rbi` or `--rbs`.",
        "translatedContent": "Sord 生成的 RBI 文件主要有两种使用方式："
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "KgeeYFhTEQgs6kqnt7buVblvRqujdiUKCx0I6Bhf7pk=",
        "originContent": "## Shipping RBI Types",
        "translatedContent": "- [随 gem 本身一起发布](https://sorbet.org/docs/rbi#rbis-within-gems)。"
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- 贡献给 [sorbet-typed](https://github.com/sorbet/sorbet-typed)。"
      },
      {
        "row": 11,
        "rowsha": "YgvMBZH4o4ERIIDSeEDNfVM0hV7qTdkNmA9EL4F67TY=",
        "originContent": "RBI files generated by Sord can be used in two main ways:",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "通常，如果可能的话，您应该随 gem 一起发布类型签名。  "
      },
      {
        "row": 13,
        "rowsha": "TZ9kVRw96fM/RMoIUCDqBbMTliT22ojn4/yY5rZE6eU=",
        "originContent": "- [Shipped in the gem itself](https://sorbet.org/docs/rbi#rbis-within-gems).",
        "translatedContent": "sorbet-typed 是为那些不再更新的 gem 或维护者不愿随 gem 本身发布类型签名的 gem 提供的地方。"
      },
      {
        "row": 14,
        "rowsha": "Sw/mSIoDr7aBRzSVRt8cgnAdKGW+1dm2jdYsWPndd+w=",
        "originContent": "- Contributed to [sorbet-typed](https://github.com/sorbet/sorbet-typed).",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### 标志"
      },
      {
        "row": 16,
        "rowsha": "URih2+zxu5WnMPhQPpg33hySA1zMZzNKOeXpNtLwqjY=",
        "originContent": "Generally, you should ship the type signatures with your gem if possible.",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "eEPa9wib6L7SbDzahRuMdyane135mFqnRpTMcO2Da44=",
        "originContent": "sorbet-typed is meant to be a place for gems that are no longer updated or",
        "translatedContent": "Sord 还接受一些标志来修改生成的文件："
      },
      {
        "row": 18,
        "rowsha": "z+rbc364ZFOgQ8td5oHEsCepnP/0amoSemKzMcjuaDc=",
        "originContent": "where the maintainer is unwilling to ship type signatures with the gem itself.",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "  - `--rbi`/`--rbs`：覆盖从文件扩展名推断的输出格式。"
      },
      {
        "row": 20,
        "rowsha": "LPEupsbznSW+3iLlBHcHjrsNcyIcJru6qLxNNG302rw=",
        "originContent": "### Flags",
        "translatedContent": "  - `--no-sord-comments`：生成的文件中不包含任何关于警告/推断/错误的 Sord 注释。（原始文件的注释仍会被包含。）"
      },
      {
        "row": 21,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "  - `--no-regenerate`：默认情况下，Sord 会为您重新生成代码库的 YARD 文档。此选项跳过重新生成 YARD 文档。"
      },
      {
        "row": 22,
        "rowsha": "HksxjcN2sV5hSFaQF1ciSsRVFmheGqd304wId4iPbwY=",
        "originContent": "Sord also takes some flags to alter the generated file:",
        "translatedContent": "  - `--break-params`：确定需要多少个参数后，签名从单行变为多行块。（默认值：4）"
      },
      {
        "row": 23,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "  - `--replace-errors-with-untyped`：使用 `T.untyped` 替代 `SORD_ERROR_*` 常量。"
      },
      {
        "row": 24,
        "rowsha": "rrAC6mPks3EOvP2js9mEkEmeEiHnPGN0MhdEASnlLOk=",
        "originContent": "  - `--rbi`/`--rbs`: Override the output format inferred from the file",
        "translatedContent": "  - `--replace-unresolved-with-untyped`：当 Sord 无法解析常量时，使用 `T.untyped`。"
      },
      {
        "row": 25,
        "rowsha": "9g420qVxnsRohZVD5UsmlT6u0SnEpQr7VuyTimBSzX8=",
        "originContent": "    extension.",
        "translatedContent": "  - `--include-messages` 和 `--exclude-messages`：用于过滤 Sord 给出的日志消息。`--include-messages` 作为白名单，仅打印指定日志类型的消息，而 `--exclude-messages`"
      },
      {
        "row": 26,
        "rowsha": "CiJyRgXOuCr0L+rVAY0aTydSTeI12Z3XnFicBOH34C4=",
        "originContent": "  - `--no-sord-comments`: Generates the file without any Sord comments about",
        "translatedContent": ""
      },
      {
        "row": 27,
        "rowsha": "k2LVckL1Ax1xDgtvXEXv3O0FgCoUb7EZIWJv50UZJtk=",
        "originContent": "    warnings/inferences/errors. (The original file's comments will still be",
        "translatedContent": ""
      },
      {
        "row": 28,
        "rowsha": "9/nKSray1GdzZtPtWGZoqDdB0KL5z1hW6rmso7flZbk=",
        "originContent": "    included.)",
        "translatedContent": ""
      },
      {
        "row": 29,
        "rowsha": "oJ6a1AHOHWn5Dfih0uJn3r8PlIsbOsH0KayzVr2xBQQ=",
        "originContent": "  - `--no-regenerate`: By default, Sord will regenerate a repository's YARD",
        "translatedContent": ""
      },
      {
        "row": 30,
        "rowsha": "LL2nzrrl5mtdy3YE4OYvNrzDR9NKgrgSQfZrHrDT8iM=",
        "originContent": "    docs for you. This option skips regenerating the YARD docs.",
        "translatedContent": ""
      },
      {
        "row": 31,
        "rowsha": "k7mXMBkc3DJ2pa3Ppt7O7SxwjuXD8pkbNcYjq/qXUdQ=",
        "originContent": "  - `--break-params`: Determines how many parameters are necessary before",
        "translatedContent": ""
      },
      {
        "row": 32,
        "rowsha": "YF6Qo2x5kDzAmGgCwGI2/4s3XAqsw99dm4Sb57h8KSQ=",
        "originContent": "    the signature is changed from a single-line to a multi-line block.",
        "translatedContent": ""
      },
      {
        "row": 33,
        "rowsha": "07If0NCLte4nSxuDhIr3KI3wMNYzq5w6mx2AEFtWm64=",
        "originContent": "    (Default: 4)",
        "translatedContent": ""
      },
      {
        "row": 34,
        "rowsha": "5qp6jR1m6c4GtICsAsLu7yp1RgLe8zoImMe95kx8hso=",
        "originContent": "  - `--replace-errors-with-untyped`: Uses `T.untyped` instead of `SORD_ERROR_*`",
        "translatedContent": ""
      },
      {
        "row": 35,
        "rowsha": "zUAhCzOpO3HDIkqXpJxbp9ia6RNb4nBAPEQmHiekJNY=",
        "originContent": "    constants.",
        "translatedContent": ""
      },
      {
        "row": 36,
        "rowsha": "57H54oyh4hGU2BBQTU3D4LYfQs/e+A+7gWrL4p8N04U=",
        "originContent": "  - `--replace-unresolved-with-untyped`: Uses `T.untyped` when Sord is unable to",
        "translatedContent": ""
      },
      {
        "row": 37,
        "rowsha": "wVtLkFnJxXm0JZ8raNq3ZEODstqYHbnXdLl50JDNQVo=",
        "originContent": "    resolve a constant.",
        "translatedContent": ""
      },
      {
        "row": 38,
        "rowsha": "TRFo2kfcmV1xQkFFm7H1CFybcpQ/VeybEEx6POw+ngA=",
        "originContent": "  - `--include-messages` and `--exclude-messages`: Used to filter the logging",
        "translatedContent": ""
      },
      {
        "row": 39,
        "rowsha": "kheElsPHpVYgZEFD/xB4RICWjE0qoZP4ANfaXSvjX3M=",
        "originContent": "    messages given by Sord. `--include-messages` acts as a whitelist, printing",
        "translatedContent": ""
      },
      {
        "row": 40,
        "rowsha": "ST/miKilgxPKKP2121Nwj9CBI4qqdp/w7AysFDq7rac=",
        "originContent": "    only messages of the specified logging kinds, whereas `--exclude-messages`",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 4,
    "Content": "    acts as a blacklist and suppresses the specified logging kinds. Both flags\n    take a comma-separated list of logging kinds, for example `omit,infer`.\n    When using `--include-messages`, the `done` kind is included by default.\n    (You cannot specify both `--include-messages` and `--exclude-messages`.)\n  - `--exclude-untyped`: Exclude methods and attributes with untyped return\n    values.\n  - `--tags TAGS`: Provide a list of comma-separated tags as understood by the\n    `yard` command. E.g. `--tags 'mytag:My Description,mytag2:My New Description'\n\n## Example\n\nSay we have this file, called `test.rb`:\n",
    "ContentSha": "XqNpqRU+TSHGRNxX2h6AP5M60YGIn/R/RqWYdpYwtfI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "    作为黑名单并抑制指定的日志类型。两个标志都接受用逗号分隔的日志类型列表，例如 `omit,infer`。\n    使用 `--include-messages` 时，默认包含 `done` 类型。\n    （不能同时指定 `--include-messages` 和 `--exclude-messages`。）\n  - `--exclude-untyped`：排除返回值未指定类型的方法和属性。\n  - `--tags TAGS`：提供由 `yard` 命令理解的逗号分隔标签列表。例如 `--tags 'mytag:My Description,mytag2:My New Description'`\n\n## 示例\n\n假设我们有这个文件，名为 `test.rb`：\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "/eI6LW9yt8oYZYAJ3iKIHXGqEVAWKcv8jrWa2JoQtOc=",
        "originContent": "    acts as a blacklist and suppresses the specified logging kinds. Both flags",
        "translatedContent": "    作为黑名单并抑制指定的日志类型。两个标志都接受用逗号分隔的日志类型列表，例如 `omit,infer`。"
      },
      {
        "row": 2,
        "rowsha": "dDIZcvgBlts88ezTJfA2tfgYCybA8Nd0BcJU8jiWiBU=",
        "originContent": "    take a comma-separated list of logging kinds, for example `omit,infer`.",
        "translatedContent": "    使用 `--include-messages` 时，默认包含 `done` 类型。"
      },
      {
        "row": 3,
        "rowsha": "1SaYTcjWd3rGocrJQFdxdFPzKqJdkxfomSoVu/QklZ0=",
        "originContent": "    When using `--include-messages`, the `done` kind is included by default.",
        "translatedContent": "    （不能同时指定 `--include-messages` 和 `--exclude-messages`。）"
      },
      {
        "row": 4,
        "rowsha": "2t3qW/0tpUpvNIVg/oPfhf2rrMKYru8hSrqvAy5a1ws=",
        "originContent": "    (You cannot specify both `--include-messages` and `--exclude-messages`.)",
        "translatedContent": "  - `--exclude-untyped`：排除返回值未指定类型的方法和属性。"
      },
      {
        "row": 5,
        "rowsha": "SI9L82l3P56bibXMto/Rb5Np3P1NtQ+HRLJvfOrZ4SE=",
        "originContent": "  - `--exclude-untyped`: Exclude methods and attributes with untyped return",
        "translatedContent": "  - `--tags TAGS`：提供由 `yard` 命令理解的逗号分隔标签列表。例如 `--tags 'mytag:My Description,mytag2:My New Description'`"
      },
      {
        "row": 6,
        "rowsha": "oejrLWwf4509EGv8H2RDj5kbV4ic2S0PUrTU1prDFng=",
        "originContent": "    values.",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "vdquEwMHwlvEySputZ/CJLhb2AFdBRSDFS6LtcweKI4=",
        "originContent": "  - `--tags TAGS`: Provide a list of comma-separated tags as understood by the",
        "translatedContent": "## 示例"
      },
      {
        "row": 8,
        "rowsha": "GqW34V8jEZ3oxg2QcD2B55P1Cpgozx+eeqBXAd3aO0w=",
        "originContent": "    `yard` command. E.g. `--tags 'mytag:My Description,mytag2:My New Description'",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "假设我们有这个文件，名为 `test.rb`："
      },
      {
        "row": 10,
        "rowsha": "m/NPRMnRNx9O2lad+gT/eDCv+Bz6gWRuaAzvCHcUzcE=",
        "originContent": "## Example",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "G5it7el6IhI0yZ8mrf4v72EeCSTWrixQZCHY45YcdD4=",
        "originContent": "Say we have this file, called `test.rb`:",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 5,
    "Content": "```ruby\nmodule Example\n  class Person\n    # @param name [String] The name of the Person to create.\n    # @param age [Integer] The age of the Person to create.\n    # @return [Example::Person]\n    def initialize(name, age)\n      @name = name\n      @age = age\n    end\n\n    # @return [String]\n    attr_accessor :name\n\n    # @return [Integer]\n    attr_accessor :age\n\n    # @param possible_names [Array<String>] An array of potential names to choose from.\n    # @param possible_ages [Array<Integer>] An array of potential ages to choose from.\n    # @return [Example::Person]\n    def self.construct_randomly(possible_names, possible_ages)\n      Person.new(possible_names.sample, possible_ages.sample)\n    end\n  end\nend\n```",
    "ContentSha": "Pjic17bxRc4lNsf6+HcoUgvR/hYFDGOCbv+7O3pTQyg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ruby\nmodule Example\n  class Person\n    # @param name [String] The name of the Person to create.\n    # @param age [Integer] The age of the Person to create.\n    # @return [Example::Person]\n    def initialize(name, age)\n      @name = name\n      @age = age\n    end\n\n    # @return [String]\n    attr_accessor :name\n\n    # @return [Integer]\n    attr_accessor :age\n\n    # @param possible_names [Array<String>] An array of potential names to choose from.\n    # @param possible_ages [Array<Integer>] An array of potential ages to choose from.\n    # @return [Example::Person]\n    def self.construct_randomly(possible_names, possible_ages)\n      Person.new(possible_names.sample, possible_ages.sample)\n    end\n  end\nend\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "/ak/5P5X1yYFQIWcydcj8nX7wGjkDDeQY41Yfh1fIdA=",
        "originContent": "```ruby",
        "translatedContent": "```ruby"
      },
      {
        "row": 2,
        "rowsha": "6SDMEa8Ux7HruvFLNikdy/lhszC7yhAGkNoEiv+ZXGU=",
        "originContent": "module Example",
        "translatedContent": "module Example"
      },
      {
        "row": 3,
        "rowsha": "bnsv0EasPSFpdTdPgiV9uQDs50lGfxOETHUnP7DLRzU=",
        "originContent": "  class Person",
        "translatedContent": "  class Person"
      },
      {
        "row": 4,
        "rowsha": "V1x5Jr6KP0Gx/sQc8MfEy09HMxL/kMCPnaeDiIlS+k0=",
        "originContent": "    # @param name [String] The name of the Person to create.",
        "translatedContent": "    # @param name [String] The name of the Person to create."
      },
      {
        "row": 5,
        "rowsha": "hM3jmEDD7jPMjLoriTbNPaFT1cwJbcK+U5qwtT9mjz4=",
        "originContent": "    # @param age [Integer] The age of the Person to create.",
        "translatedContent": "    # @param age [Integer] The age of the Person to create."
      },
      {
        "row": 6,
        "rowsha": "GLViXXxmCCEFfTx3IMYgejROA3UIAzs+/jDQBC4BtYk=",
        "originContent": "    # @return [Example::Person]",
        "translatedContent": "    # @return [Example::Person]"
      },
      {
        "row": 7,
        "rowsha": "oWrvxbsq1AOxoDZLImybhxtPP3lVKwKVcy41yW5yGzs=",
        "originContent": "    def initialize(name, age)",
        "translatedContent": "    def initialize(name, age)"
      },
      {
        "row": 8,
        "rowsha": "n665Jw7Qgph7cF/vtBrMI+pMxChFbHbnLg8oR/bz1cQ=",
        "originContent": "      @name = name",
        "translatedContent": "      @name = name"
      },
      {
        "row": 9,
        "rowsha": "LPTnTo2FzVZ+U/3cRrA/2GdQ+yG09SrtQ5V6AsBbiEs=",
        "originContent": "      @age = age",
        "translatedContent": "      @age = age"
      },
      {
        "row": 10,
        "rowsha": "gvoVxHL5c5ZCFTBleU4mILUDJKIFcP+s+BQjx5nYXiw=",
        "originContent": "    end",
        "translatedContent": "    end"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "gi70iUwKHP/6Mp+BV4Yde8SrQNipCO/0v+j73hDFwAc=",
        "originContent": "    # @return [String]",
        "translatedContent": "    # @return [String]"
      },
      {
        "row": 13,
        "rowsha": "fzjjOyCOrD+qQ/vtDHLeVSGMWif4P/RKqPXvJ/FdQO8=",
        "originContent": "    attr_accessor :name",
        "translatedContent": "    attr_accessor :name"
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "bvyM0LqisNqMIWon1FPosJVWEPTW28FnWIlFnizNq1I=",
        "originContent": "    # @return [Integer]",
        "translatedContent": "    # @return [Integer]"
      },
      {
        "row": 16,
        "rowsha": "YL/mQyqkcTrp8zGMblYbmAJQN2JabTkzN9i01G5bA/k=",
        "originContent": "    attr_accessor :age",
        "translatedContent": "    attr_accessor :age"
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "zHc9Yk4xN+CcUZXsl5d+1FlQ59STN889Z6i9TEmEa1k=",
        "originContent": "    # @param possible_names [Array<String>] An array of potential names to choose from.",
        "translatedContent": "    # @param possible_names [Array<String>] An array of potential names to choose from."
      },
      {
        "row": 19,
        "rowsha": "axRm6I4+NCXxmIOkmb/QnEO+NwIGsKnVFPYPQP+xZ0Q=",
        "originContent": "    # @param possible_ages [Array<Integer>] An array of potential ages to choose from.",
        "translatedContent": "    # @param possible_ages [Array<Integer>] An array of potential ages to choose from."
      },
      {
        "row": 20,
        "rowsha": "GLViXXxmCCEFfTx3IMYgejROA3UIAzs+/jDQBC4BtYk=",
        "originContent": "    # @return [Example::Person]",
        "translatedContent": "    # @return [Example::Person]"
      },
      {
        "row": 21,
        "rowsha": "krRSGCDEmn1X0z5QsR6AWOG2Ok15xmCtJwLkW056wS8=",
        "originContent": "    def self.construct_randomly(possible_names, possible_ages)",
        "translatedContent": "    def self.construct_randomly(possible_names, possible_ages)"
      },
      {
        "row": 22,
        "rowsha": "olIoO4R3j2E3kF6N6vMOSCT5fZ7P8IbZ0erBEIg/2aw=",
        "originContent": "      Person.new(possible_names.sample, possible_ages.sample)",
        "translatedContent": "      Person.new(possible_names.sample, possible_ages.sample)"
      },
      {
        "row": 23,
        "rowsha": "gvoVxHL5c5ZCFTBleU4mILUDJKIFcP+s+BQjx5nYXiw=",
        "originContent": "    end",
        "translatedContent": "    end"
      },
      {
        "row": 24,
        "rowsha": "SNNEvL0VmogGoy/zRyjZEOiUaGkA2VqmSA26jTm2p+o=",
        "originContent": "  end",
        "translatedContent": "  end"
      },
      {
        "row": 25,
        "rowsha": "Nh5I0DCPIOMtul+1Yyi68Y1y7wzLQ7hPXCYtKmofxsg=",
        "originContent": "end",
        "translatedContent": "end"
      },
      {
        "row": 26,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 6,
    "Content": "\nFirst, generate a YARD registry by running `yardoc test.rb`. Then, we can run\n`sord test.rbi` to generate the RBI file. (Careful not to overwrite your code\nfiles! Note the `.rbi` file extension.) In doing this, Sord prints:\n",
    "ContentSha": "pydHhq4Nw7PtSy/0Hq5t7HGPbjJ/IMAxh28Rps1JgW8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "首先，通过运行 `yardoc test.rb` 生成一个 YARD 注册表。然后，我们可以运行  \n`sord test.rbi` 来生成 RBI 文件。（注意不要覆盖你的代码文件！注意 `.rbi` 文件扩展名。）  \n在执行此操作时，Sord 会打印：\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "首先，通过运行 `yardoc test.rb` 生成一个 YARD 注册表。然后，我们可以运行  "
      },
      {
        "row": 2,
        "rowsha": "K/syAAFrb42TYL1aUw8heZhV0nZdP10dQuTqjK2lVoM=",
        "originContent": "First, generate a YARD registry by running `yardoc test.rb`. Then, we can run",
        "translatedContent": "`sord test.rbi` 来生成 RBI 文件。（注意不要覆盖你的代码文件！注意 `.rbi` 文件扩展名。）  "
      },
      {
        "row": 3,
        "rowsha": "4cv6TZxmck/cLsFNNrodFtCWLPHVmu06h0wEJkxJepI=",
        "originContent": "`sord test.rbi` to generate the RBI file. (Careful not to overwrite your code",
        "translatedContent": "在执行此操作时，Sord 会打印："
      },
      {
        "row": 4,
        "rowsha": "3bQxzAzZh8EQf68+5N6JEGn6ims8+6zjkdltZoZ/qDg=",
        "originContent": "files! Note the `.rbi` file extension.) In doing this, Sord prints:",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 7,
    "Content": "```\n[INFER] Assuming from filename you wish to generate in RBI format\n[DONE ] Processed 8 objects (2 namespaces and 6 methods)\n```",
    "ContentSha": "XRGmUaIVo7YJ3v6fKNH8a64SpoVbWCMtVNjWhqJI/nM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\n[INFER] Assuming from filename you wish to generate in RBI format\n[DONE ] Processed 8 objects (2 namespaces and 6 methods)\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      },
      {
        "row": 2,
        "rowsha": "qHeYrvpJxQgIuyQG9dTpBvsrIaXDLbpvmWCllSWdHmc=",
        "originContent": "[INFER] Assuming from filename you wish to generate in RBI format",
        "translatedContent": "[INFER] Assuming from filename you wish to generate in RBI format"
      },
      {
        "row": 3,
        "rowsha": "yo9tApqn+GmATWihiQLqgEGFqAY77AHhmmCH2/TsA9s=",
        "originContent": "[DONE ] Processed 8 objects (2 namespaces and 6 methods)",
        "translatedContent": "[DONE ] Processed 8 objects (2 namespaces and 6 methods)"
      },
      {
        "row": 4,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 8,
    "Content": "\nThe `test.rbi` file then contains a complete RBI file for `test.rb`:\n",
    "ContentSha": "f8d7UmSdMpGHTOSZGrAr7eOXmzq5395k/yeB7FXVCZ0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n`test.rbi` 文件随后包含了 `test.rb` 的完整 RBI 文件：\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "FnkHSKpv9TWaQ6rPizoFri/iHHnLNwI+V8nZDxmRR4U=",
        "originContent": "The `test.rbi` file then contains a complete RBI file for `test.rb`:",
        "translatedContent": "`test.rbi` 文件随后包含了 `test.rb` 的完整 RBI 文件："
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 9,
    "Content": "```ruby\n# typed: strong\nmodule Example\n  class Person\n    # _@param_ `name` — The name of the Person to create.\n    # \n    # _@param_ `age` — The age of the Person to create.\n    sig { params(name: String, age: Integer).void }\n    def initialize(name, age); end\n\n    # _@param_ `possible_names` — An array of potential names to choose from.\n    # \n    # _@param_ `possible_ages` — An array of potential ages to choose from.\n    sig { params(possible_names: T::Array[String], possible_ages: T::Array[Integer]).returns(Example::Person) }\n    def self.construct_randomly(possible_names, possible_ages); end\n\n    sig { returns(String) }\n    attr_accessor :name\n\n    sig { returns(Integer) }\n    attr_accessor :age\n  end\nend\n```",
    "ContentSha": "Le11NtCZEkpwsqT6bZ4d+hWTFLtshS9MbZSY2ClQAKg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ruby\n# typed: strong\nmodule Example\n  class Person\n    # _@param_ `name` — The name of the Person to create.\n    # \n    # _@param_ `age` — The age of the Person to create.\n    sig { params(name: String, age: Integer).void }\n    def initialize(name, age); end\n\n    # _@param_ `possible_names` — An array of potential names to choose from.\n    # \n    # _@param_ `possible_ages` — An array of potential ages to choose from.\n    sig { params(possible_names: T::Array[String], possible_ages: T::Array[Integer]).returns(Example::Person) }\n    def self.construct_randomly(possible_names, possible_ages); end\n\n    sig { returns(String) }\n    attr_accessor :name\n\n    sig { returns(Integer) }\n    attr_accessor :age\n  end\nend\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "/ak/5P5X1yYFQIWcydcj8nX7wGjkDDeQY41Yfh1fIdA=",
        "originContent": "```ruby",
        "translatedContent": "```ruby"
      },
      {
        "row": 2,
        "rowsha": "BsnwHLq1NirueiYYqLyXo7CUX1m5aTaow9dYX/E1ZnQ=",
        "originContent": "# typed: strong",
        "translatedContent": "# typed: strong"
      },
      {
        "row": 3,
        "rowsha": "6SDMEa8Ux7HruvFLNikdy/lhszC7yhAGkNoEiv+ZXGU=",
        "originContent": "module Example",
        "translatedContent": "module Example"
      },
      {
        "row": 4,
        "rowsha": "bnsv0EasPSFpdTdPgiV9uQDs50lGfxOETHUnP7DLRzU=",
        "originContent": "  class Person",
        "translatedContent": "  class Person"
      },
      {
        "row": 5,
        "rowsha": "BmwkLdszyZdmiq50yZImNgpnfhnQdFYh4qruMYPInkM=",
        "originContent": "    # _@param_ `name` — The name of the Person to create.",
        "translatedContent": "    # _@param_ `name` — The name of the Person to create."
      },
      {
        "row": 6,
        "rowsha": "VpK639xh/ICE3r9xZmMph71JO08lDWBi2bvNofg+NkQ=",
        "originContent": "    # ",
        "translatedContent": "    # "
      },
      {
        "row": 7,
        "rowsha": "/p1/SuLLeiOdUSb8tmoML++eXr8VoBLcsvn34moAQK4=",
        "originContent": "    # _@param_ `age` — The age of the Person to create.",
        "translatedContent": "    # _@param_ `age` — The age of the Person to create."
      },
      {
        "row": 8,
        "rowsha": "55XpjLcLZrlCyN4aom1PFtfEPQo6vZnB+nCUTb+cw3g=",
        "originContent": "    sig { params(name: String, age: Integer).void }",
        "translatedContent": "    sig { params(name: String, age: Integer).void }"
      },
      {
        "row": 9,
        "rowsha": "K/+SysMsdAs2YmBrZ5GXlYbRWkVFpiHWq2c8ZijZPyg=",
        "originContent": "    def initialize(name, age); end",
        "translatedContent": "    def initialize(name, age); end"
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "9vrmEOrBLY3M9Q+AkYpigpJVZArQiDywkSwCgA10sNM=",
        "originContent": "    # _@param_ `possible_names` — An array of potential names to choose from.",
        "translatedContent": "    # _@param_ `possible_names` — An array of potential names to choose from."
      },
      {
        "row": 12,
        "rowsha": "VpK639xh/ICE3r9xZmMph71JO08lDWBi2bvNofg+NkQ=",
        "originContent": "    # ",
        "translatedContent": "    # "
      },
      {
        "row": 13,
        "rowsha": "D/X4qTEoSDOKBJWQtF7vO6RXeLWQZS8+22CnWhZUETI=",
        "originContent": "    # _@param_ `possible_ages` — An array of potential ages to choose from.",
        "translatedContent": "    # _@param_ `possible_ages` — An array of potential ages to choose from."
      },
      {
        "row": 14,
        "rowsha": "Mf1ZD76xColTm6Ek1d3V3bH280/LeTX8GW+OYWcOUq4=",
        "originContent": "    sig { params(possible_names: T::Array[String], possible_ages: T::Array[Integer]).returns(Example::Person) }",
        "translatedContent": "    sig { params(possible_names: T::Array[String], possible_ages: T::Array[Integer]).returns(Example::Person) }"
      },
      {
        "row": 15,
        "rowsha": "n1fWxh0Qv08MVZBN9KP+m0XRHg9hHJHVU2L3KJNyNYA=",
        "originContent": "    def self.construct_randomly(possible_names, possible_ages); end",
        "translatedContent": "    def self.construct_randomly(possible_names, possible_ages); end"
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "hQ3j79fuCR68jvuGiywvoYPeXNObNx03RHlc8gfXABQ=",
        "originContent": "    sig { returns(String) }",
        "translatedContent": "    sig { returns(String) }"
      },
      {
        "row": 18,
        "rowsha": "fzjjOyCOrD+qQ/vtDHLeVSGMWif4P/RKqPXvJ/FdQO8=",
        "originContent": "    attr_accessor :name",
        "translatedContent": "    attr_accessor :name"
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 20,
        "rowsha": "9rLD99qipJDukA5VepvGdwFUe1nI6/t8owvijo1rRzo=",
        "originContent": "    sig { returns(Integer) }",
        "translatedContent": "    sig { returns(Integer) }"
      },
      {
        "row": 21,
        "rowsha": "YL/mQyqkcTrp8zGMblYbmAJQN2JabTkzN9i01G5bA/k=",
        "originContent": "    attr_accessor :age",
        "translatedContent": "    attr_accessor :age"
      },
      {
        "row": 22,
        "rowsha": "SNNEvL0VmogGoy/zRyjZEOiUaGkA2VqmSA26jTm2p+o=",
        "originContent": "  end",
        "translatedContent": "  end"
      },
      {
        "row": 23,
        "rowsha": "Nh5I0DCPIOMtul+1Yyi68Y1y7wzLQ7hPXCYtKmofxsg=",
        "originContent": "end",
        "translatedContent": "end"
      },
      {
        "row": 24,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 10,
    "Content": "\nIf we had instead generated `test.rbs`, we would get this file in RBS format:\n",
    "ContentSha": "v0e/GiohYxL+O1KvDgz+ftl80Wa3FuJBQ8X2M6xcRqI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "如果我们生成的是 `test.rbs`，我们将得到以下 RBS 格式的文件：\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "如果我们生成的是 `test.rbs`，我们将得到以下 RBS 格式的文件："
      },
      {
        "row": 2,
        "rowsha": "gB600NPuorvNUMHwMjpaJG+iTw/5+9CvY0ZkTc1hshY=",
        "originContent": "If we had instead generated `test.rbs`, we would get this file in RBS format:",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 11,
    "Content": "```ruby\nmodule Example\n  class Person\n    # _@param_ `name` — The name of the Person to create.\n    # \n    # _@param_ `age` — The age of the Person to create.\n    def initialize: (String name, Integer age) -> void\n\n    # _@param_ `possible_names` — An array of potential names to choose from.\n    # \n    # _@param_ `possible_ages` — An array of potential ages to choose from.\n    def self.construct_randomly: (Array[String] possible_names, Array[Integer] possible_ages) -> Example::Person\n\n    attr_accessor name: String\n\n    attr_accessor age: Integer\n  end\nend\n```",
    "ContentSha": "9WtVYviXix1q0mXQYSLlk024iVxOisvx0QZuuaWk1aw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ruby\nmodule Example\n  class Person\n    # _@param_ `name` — The name of the Person to create.\n    # \n    # _@param_ `age` — The age of the Person to create.\n    def initialize: (String name, Integer age) -> void\n\n    # _@param_ `possible_names` — An array of potential names to choose from.\n    # \n    # _@param_ `possible_ages` — An array of potential ages to choose from.\n    def self.construct_randomly: (Array[String] possible_names, Array[Integer] possible_ages) -> Example::Person\n\n    attr_accessor name: String\n\n    attr_accessor age: Integer\n  end\nend\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "/ak/5P5X1yYFQIWcydcj8nX7wGjkDDeQY41Yfh1fIdA=",
        "originContent": "```ruby",
        "translatedContent": "```ruby"
      },
      {
        "row": 2,
        "rowsha": "6SDMEa8Ux7HruvFLNikdy/lhszC7yhAGkNoEiv+ZXGU=",
        "originContent": "module Example",
        "translatedContent": "module Example"
      },
      {
        "row": 3,
        "rowsha": "bnsv0EasPSFpdTdPgiV9uQDs50lGfxOETHUnP7DLRzU=",
        "originContent": "  class Person",
        "translatedContent": "  class Person"
      },
      {
        "row": 4,
        "rowsha": "BmwkLdszyZdmiq50yZImNgpnfhnQdFYh4qruMYPInkM=",
        "originContent": "    # _@param_ `name` — The name of the Person to create.",
        "translatedContent": "    # _@param_ `name` — The name of the Person to create."
      },
      {
        "row": 5,
        "rowsha": "VpK639xh/ICE3r9xZmMph71JO08lDWBi2bvNofg+NkQ=",
        "originContent": "    # ",
        "translatedContent": "    # "
      },
      {
        "row": 6,
        "rowsha": "/p1/SuLLeiOdUSb8tmoML++eXr8VoBLcsvn34moAQK4=",
        "originContent": "    # _@param_ `age` — The age of the Person to create.",
        "translatedContent": "    # _@param_ `age` — The age of the Person to create."
      },
      {
        "row": 7,
        "rowsha": "0OGmsg9Sd9V7YSN+kfjHwB4HDs774fyBMsAojhm68jg=",
        "originContent": "    def initialize: (String name, Integer age) -> void",
        "translatedContent": "    def initialize: (String name, Integer age) -> void"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "9vrmEOrBLY3M9Q+AkYpigpJVZArQiDywkSwCgA10sNM=",
        "originContent": "    # _@param_ `possible_names` — An array of potential names to choose from.",
        "translatedContent": "    # _@param_ `possible_names` — An array of potential names to choose from."
      },
      {
        "row": 10,
        "rowsha": "VpK639xh/ICE3r9xZmMph71JO08lDWBi2bvNofg+NkQ=",
        "originContent": "    # ",
        "translatedContent": "    # "
      },
      {
        "row": 11,
        "rowsha": "D/X4qTEoSDOKBJWQtF7vO6RXeLWQZS8+22CnWhZUETI=",
        "originContent": "    # _@param_ `possible_ages` — An array of potential ages to choose from.",
        "translatedContent": "    # _@param_ `possible_ages` — An array of potential ages to choose from."
      },
      {
        "row": 12,
        "rowsha": "oCGJsgzBw3XSI2DNS4dE39HSq/RbRcPv8ATGrNKpb8M=",
        "originContent": "    def self.construct_randomly: (Array[String] possible_names, Array[Integer] possible_ages) -> Example::Person",
        "translatedContent": "    def self.construct_randomly: (Array[String] possible_names, Array[Integer] possible_ages) -> Example::Person"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "PpBMBfMXFzvasV7qu0E8HcCTL999vXG/qsfGjGu1bxw=",
        "originContent": "    attr_accessor name: String",
        "translatedContent": "    attr_accessor name: String"
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "rvXCyot5lk5xK9DtkrpWpFwo3gX0UulF99QKyNxaiBM=",
        "originContent": "    attr_accessor age: Integer",
        "translatedContent": "    attr_accessor age: Integer"
      },
      {
        "row": 17,
        "rowsha": "SNNEvL0VmogGoy/zRyjZEOiUaGkA2VqmSA26jTm2p+o=",
        "originContent": "  end",
        "translatedContent": "  end"
      },
      {
        "row": 18,
        "rowsha": "Nh5I0DCPIOMtul+1Yyi68Y1y7wzLQ7hPXCYtKmofxsg=",
        "originContent": "end",
        "translatedContent": "end"
      },
      {
        "row": 19,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 12,
    "Content": "\n## Things to be aware of\n\nThe general rule of thumb for type conversions is:\n\n  - If Sord understands the YARD type, then it is converted into the RBI or RBS\n    type.\n  - If the YARD type is missing, Sord fills in `T.untyped`.\n  - If the YARD type can't be understood, Sord creates an undefined Ruby constant\n    with a similar name to the unknown YARD type. For example, the obviously\n    invalid YARD type `A%B` will become a constant called `SORD_ERROR_AB`.\n    You should search through your resulting file to find and fix and \n    `SORD_ERROR`s.\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/AaronC81/sord. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.\n\nWhile contributing, if you want to see the results of your changes to Sord you\ncan use the `examples:seed` Rake task. The task uses Sord to generate types for\na number of open source Ruby gems, including Bundler, Haml, Rouge, and RSpec.\n`rake examples:seed` (and `rake examples:reseed` to regenerate the files) will\nclone the repositories of these gems into `sord_examples/` and then generate the\nfiles into the same directory.\n\n## License\n\nThe gem is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).\n\n## Code of Conduct\n\nEveryone interacting in the Sord project’s codebases, issue trackers, chat rooms and mailing lists is expected to follow the [code of conduct](https://github.com/AaronC81/sord/blob/master/CODE_OF_CONDUCT.md).\n",
    "ContentSha": "6LrD7WypS6IqJ7I6OzITtaElp1MrhEttzYj5FtfK+Xw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n## 需注意事项\n\n类型转换的一般规则是：\n\n  - 如果 Sord 理解 YARD 类型，则将其转换为 RBI 或 RBS 类型。\n  - 如果缺少 YARD 类型，Sord 会填充 `T.untyped`。\n  - 如果无法理解 YARD 类型，Sord 会创建一个与未知 YARD 类型名称相似的未定义 Ruby 常量。\n    例如，明显无效的 YARD 类型 `A%B` 会变成名为 `SORD_ERROR_AB` 的常量。\n    你应该在生成的文件中搜索并修复所有 `SORD_ERROR`。\n\n## 贡献\n\n欢迎在 GitHub 上提交错误报告和拉取请求，地址：https://github.com/AaronC81/sord。该项目旨在成为一个安全、友好的协作空间，贡献者需遵守 [贡献者公约](http://contributor-covenant.org) 行为准则。\n\n贡献时，如果想查看对 Sord 所做更改的效果，可以使用 `examples:seed` Rake 任务。\n该任务使用 Sord 为多个开源 Ruby gem（包括 Bundler、Haml、Rouge 和 RSpec）生成类型。\n运行 `rake examples:seed`（以及 `rake examples:reseed` 以重新生成文件）会将这些 gem 的代码仓库克隆到 `sord_examples/` 目录，\n然后在同一目录中生成相应文件。\n\n## 许可协议\n\n该 gem 作为开源项目，遵循 [MIT 许可证](https://opensource.org/licenses/MIT) 许可条款。\n\n## 行为准则\n\n所有在 Sord 项目的代码库、问题追踪器、聊天室和邮件列表中互动的人员，\n都应遵守 [行为准则](https://github.com/AaronC81/sord/blob/master/CODE_OF_CONDUCT.md)。\n\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "4VcLDTbvmEwfjXzw+HmIL44Em4UR4KXmcuc1UO5MHvU=",
        "originContent": "## Things to be aware of",
        "translatedContent": "## 需注意事项"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "QkWD6/3OkYF30JsDhyhOmTYZt8aTfqP95c3TPUxYX3c=",
        "originContent": "The general rule of thumb for type conversions is:",
        "translatedContent": "类型转换的一般规则是："
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "YjVzWw2E5zh+xXYSYmXfIaPnOJfDfJPMGGqZcsrPw+c=",
        "originContent": "  - If Sord understands the YARD type, then it is converted into the RBI or RBS",
        "translatedContent": "  - 如果 Sord 理解 YARD 类型，则将其转换为 RBI 或 RBS 类型。"
      },
      {
        "row": 7,
        "rowsha": "vK2+551dO9zOFPPhIEtCdCgUjyx0Fk3yHh/qfaUdUhg=",
        "originContent": "    type.",
        "translatedContent": "  - 如果缺少 YARD 类型，Sord 会填充 `T.untyped`。"
      },
      {
        "row": 8,
        "rowsha": "37m8TVjZOtQrVDkuJNRKGQ8rKVMH2Qd+pGhSXrYnf1g=",
        "originContent": "  - If the YARD type is missing, Sord fills in `T.untyped`.",
        "translatedContent": "  - 如果无法理解 YARD 类型，Sord 会创建一个与未知 YARD 类型名称相似的未定义 Ruby 常量。"
      },
      {
        "row": 9,
        "rowsha": "OdLfCfnHcFjZVwRiShJjacQ+m/7mXM3jY/8SearV7DE=",
        "originContent": "  - If the YARD type can't be understood, Sord creates an undefined Ruby constant",
        "translatedContent": "    例如，明显无效的 YARD 类型 `A%B` 会变成名为 `SORD_ERROR_AB` 的常量。"
      },
      {
        "row": 10,
        "rowsha": "YoWUUNGTwb7hdyUlfEujP0gdSz+QHaUlfnPlkVnTpF4=",
        "originContent": "    with a similar name to the unknown YARD type. For example, the obviously",
        "translatedContent": "    你应该在生成的文件中搜索并修复所有 `SORD_ERROR`。"
      },
      {
        "row": 11,
        "rowsha": "Nwsu2NwnYeK9gvzbciIYcLsGq3eUkI3KeedJ8HYgS5M=",
        "originContent": "    invalid YARD type `A%B` will become a constant called `SORD_ERROR_AB`.",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "gN1gmHYVhWvOHifWhw0slHsVRgZ2PrVjdFGggQPhW/E=",
        "originContent": "    You should search through your resulting file to find and fix and ",
        "translatedContent": "## 贡献"
      },
      {
        "row": 13,
        "rowsha": "q9PJXItHZzFTBeoqymomyIe1Rx2CTBvg9UE1rYzdfrc=",
        "originContent": "    `SORD_ERROR`s.",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "欢迎在 GitHub 上提交错误报告和拉取请求，地址：https://github.com/AaronC81/sord。该项目旨在成为一个安全、友好的协作空间，贡献者需遵守 [贡献者公约](http://contributor-covenant.org) 行为准则。"
      },
      {
        "row": 15,
        "rowsha": "R5ZPLZ4vkE9tjX5qe8QB7AkTfWZsuNTGFLFKMp2KUzM=",
        "originContent": "## Contributing",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "贡献时，如果想查看对 Sord 所做更改的效果，可以使用 `examples:seed` Rake 任务。"
      },
      {
        "row": 17,
        "rowsha": "FBajwnqHajo/Y6rU65ESJBdRC7g0cbBneBFZEGzuuKA=",
        "originContent": "Bug reports and pull requests are welcome on GitHub at https://github.com/AaronC81/sord. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.",
        "translatedContent": "该任务使用 Sord 为多个开源 Ruby gem（包括 Bundler、Haml、Rouge 和 RSpec）生成类型。"
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "运行 `rake examples:seed`（以及 `rake examples:reseed` 以重新生成文件）会将这些 gem 的代码仓库克隆到 `sord_examples/` 目录，"
      },
      {
        "row": 19,
        "rowsha": "PykfBKIiHHdpAGZ2CzJPQGgcYZeoLXVtWAId4OlKbVc=",
        "originContent": "While contributing, if you want to see the results of your changes to Sord you",
        "translatedContent": "然后在同一目录中生成相应文件。"
      },
      {
        "row": 20,
        "rowsha": "rZz8BIud1j0z4AoVlWyatQrD1sibBZRBboX7uV9b2kw=",
        "originContent": "can use the `examples:seed` Rake task. The task uses Sord to generate types for",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "E9iioGKOI7WrX9g59xUWZkuKVFC8AkRppg/rr79KZpM=",
        "originContent": "a number of open source Ruby gems, including Bundler, Haml, Rouge, and RSpec.",
        "translatedContent": "## 许可协议"
      },
      {
        "row": 22,
        "rowsha": "0W4JlzC2E4IGgXOIGn0vC8IXkQIcIVY+JxOwfWnpA6s=",
        "originContent": "`rake examples:seed` (and `rake examples:reseed` to regenerate the files) will",
        "translatedContent": ""
      },
      {
        "row": 23,
        "rowsha": "2FCuWW0eSXbJFKK+xMaLgyk+EmwRAKsnovb0NcN2Aso=",
        "originContent": "clone the repositories of these gems into `sord_examples/` and then generate the",
        "translatedContent": "该 gem 作为开源项目，遵循 [MIT 许可证](https://opensource.org/licenses/MIT) 许可条款。"
      },
      {
        "row": 24,
        "rowsha": "zolnCSdW4OjAc5ns5COMwPWFQFKFmbUvNHIOPuqEGSQ=",
        "originContent": "files into the same directory.",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## 行为准则"
      },
      {
        "row": 26,
        "rowsha": "bFSaVtsB4CHySNjaeCiaMZfT24b+DTbTM4HQ38cR6Lw=",
        "originContent": "## License",
        "translatedContent": ""
      },
      {
        "row": 27,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "所有在 Sord 项目的代码库、问题追踪器、聊天室和邮件列表中互动的人员，"
      },
      {
        "row": 28,
        "rowsha": "XAehVsKk2bNFEHLgcUIa10t2JjIrMEEFCr8gk8FvIhc=",
        "originContent": "The gem is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).",
        "translatedContent": "都应遵守 [行为准则](https://github.com/AaronC81/sord/blob/master/CODE_OF_CONDUCT.md)。"
      },
      {
        "row": 29,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 30,
        "rowsha": "a2NKwVCedKLDuP9rtxwV5qmQmdm5DK2nFoQfOTn/ZT0=",
        "originContent": "## Code of Conduct",
        "translatedContent": ""
      },
      {
        "row": 31,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 32,
        "rowsha": "1ivGHI9EC1TjMDh+W5XHaNjsf3yqlzYsUhmuQ6nyN/4=",
        "originContent": "Everyone interacting in the Sord project’s codebases, issue trackers, chat rooms and mailing lists is expected to follow the [code of conduct](https://github.com/AaronC81/sord/blob/master/CODE_OF_CONDUCT.md).",
        "translatedContent": ""
      },
      {
        "row": 33,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  }
]