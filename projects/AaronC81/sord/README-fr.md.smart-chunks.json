[
  {
    "Id": 1,
    "Content": "# Sord\n\n## Overview\n\nSord is a [**So**rbet](https://sorbet.org) and [YA**RD**](https://yardoc.org/)\ncrossover. It can **automatically generate RBI and RBS type signature files** by\nlooking at the **types specified in YARD documentation** comments.\n\nIf your project is already YARD documented, then this can generate most of the\ntype signatures you need!\n\nSord is the perfect way to jump-start the adoption of types in your project,\nwhether you plan to use Sorbet's RBI format or Ruby 3/Steep's RBS format.\n\n**Try Sord online at: [sord.aaronc.cc](https://sord.aaronc.cc)**\n\nSord has the following features:\n  - Automatically generates signatures for modules, classes and methods\n  - Support for multiple parameter or return types (`T.any`/`|`)\n  - Gracefully handles missing YARD types (`T.untyped`/`untyped`)\n  - Can infer setter parameter type from the corresponding getter's return type\n  - Recognises mixins (`include` and `extend`)\n  - Support for generic types such as `Array<T>` and `Hash<K, V>`\n  - Can infer namespaced classes (`[Bar]` can become `GemName::Foo::Bar`)\n  - Handles return types which can be `nil` (`T.nilable`/`untyped`)\n  - Handles duck types (`T.untyped`/`untyped`)\n  - Support for ordered list types (`[Array(Integer, Symbol)]` becomes `[Integer, Symbol]`)\n  - Support for boolean types (`[true, false]` becomes `T::Boolean`/`bool`)\n  - Support for `&block` parameters documented with `@yieldparam` and `@yieldreturn`\n\n## Usage\n\nInstall Sord with `gem install sord`.\n\nSord is a command line tool. To use it, open a terminal in the root directory\nof your project and invoke `sord`, passing a path where you'd like to save your\nfile (this file will be overwritten):\n",
    "ContentSha": "MNTVAu9U/U6bR5xnrhtlf7J9jqKUrgjbp7JexjSQj0I=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# Sord\n\n## Aperçu\n\nSord est un crossover entre [**So**rbet](https://sorbet.org) et [YA**RD**](https://yardoc.org/).  \nIl peut **générer automatiquement des fichiers de signatures de types RBI et RBS** en  \nregardant les **types spécifiés dans les commentaires de documentation YARD**.\n\nSi votre projet est déjà documenté avec YARD, alors cela peut générer la plupart des  \nsignatures de types dont vous avez besoin !\n\nSord est le moyen parfait pour démarrer l'adoption des types dans votre projet,  \nque vous prévoyiez d'utiliser le format RBI de Sorbet ou le format RBS de Ruby 3/Steep.\n\n**Essayez Sord en ligne sur : [sord.aaronc.cc](https://sord.aaronc.cc)**\n\nSord offre les fonctionnalités suivantes :  \n  - Génération automatique des signatures pour modules, classes et méthodes  \n  - Support pour plusieurs types de paramètres ou de retour (`T.any`/`|`)  \n  - Gestion élégante des types YARD manquants (`T.untyped`/`untyped`)  \n  - Peut inférer le type du paramètre setter à partir du type de retour du getter correspondant  \n  - Reconnaît les mixins (`include` et `extend`)  \n  - Support des types génériques tels que `Array<T>` et `Hash<K, V>`  \n  - Peut inférer les classes dans un namespace (`[Bar]` peut devenir `GemName::Foo::Bar`)  \n  - Gère les types de retour pouvant être `nil` (`T.nilable`/`untyped`)  \n  - Gère les types duck (`T.untyped`/`untyped`)  \n  - Support des types de listes ordonnées (`[Array(Integer, Symbol)]` devient `[Integer, Symbol]`)  \n  - Support des types booléens (`[true, false]` devient `T::Boolean`/`bool`)  \n  - Support des paramètres `&block` documentés avec `@yieldparam` et `@yieldreturn`\n\n## Utilisation\n\nInstallez Sord avec `gem install sord`.\n\nSord est un outil en ligne de commande. Pour l’utiliser, ouvrez un terminal à la racine  \nde votre projet et lancez `sord`, en passant un chemin où vous souhaitez sauvegarder votre  \nfichier (ce fichier sera écrasé) :\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "vV0ULeAdhKgYgXqmhiR4fVacrGgQnl8I+IGqgcNQ6ZI=",
        "originContent": "# Sord",
        "translatedContent": "# Sord"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "czfz0Kop6agrjxZQt0Opju+QeUYx+nY6MZaG5pxUaCE=",
        "originContent": "## Overview",
        "translatedContent": "## Aperçu"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "otGEbFc7TQDTJ+okt1Gz84Wdb9WaeyzKBYPCoUjNoJY=",
        "originContent": "Sord is a [**So**rbet](https://sorbet.org) and [YA**RD**](https://yardoc.org/)",
        "translatedContent": "Sord est un crossover entre [**So**rbet](https://sorbet.org) et [YA**RD**](https://yardoc.org/).  "
      },
      {
        "row": 6,
        "rowsha": "4Z4GlQL5XRt15nmdmZVpBkHIqv5XWR5qxi13si+lZqY=",
        "originContent": "crossover. It can **automatically generate RBI and RBS type signature files** by",
        "translatedContent": "Il peut **générer automatiquement des fichiers de signatures de types RBI et RBS** en  "
      },
      {
        "row": 7,
        "rowsha": "ylGlRBU1fJtPcGBRNbgOGGfsDoFJC0LfRZJnhUKJCSQ=",
        "originContent": "looking at the **types specified in YARD documentation** comments.",
        "translatedContent": "regardant les **types spécifiés dans les commentaires de documentation YARD**."
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "SHI7rynJJvQihsObss17aB0yy6We8pf7jxz8jVjNHss=",
        "originContent": "If your project is already YARD documented, then this can generate most of the",
        "translatedContent": "Si votre projet est déjà documenté avec YARD, alors cela peut générer la plupart des  "
      },
      {
        "row": 10,
        "rowsha": "TgW7mKlWgX1KftP+kFwm7+28jBH/dtNqcpwg5YGLJTg=",
        "originContent": "type signatures you need!",
        "translatedContent": "signatures de types dont vous avez besoin !"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "yVqBM99zi5wIxH+4ICrZ/Tr3EamtE82ttVoeBTBlm9w=",
        "originContent": "Sord is the perfect way to jump-start the adoption of types in your project,",
        "translatedContent": "Sord est le moyen parfait pour démarrer l'adoption des types dans votre projet,  "
      },
      {
        "row": 13,
        "rowsha": "pHe/pjv8IwX+JtEzW0TX3Tn6vc9PFpK0rZimPxcZqVQ=",
        "originContent": "whether you plan to use Sorbet's RBI format or Ruby 3/Steep's RBS format.",
        "translatedContent": "que vous prévoyiez d'utiliser le format RBI de Sorbet ou le format RBS de Ruby 3/Steep."
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "LOmE+3PG5do/8waRPCs4MeAe7jyjXRDV6Rjdm9Ev8qc=",
        "originContent": "**Try Sord online at: [sord.aaronc.cc](https://sord.aaronc.cc)**",
        "translatedContent": "**Essayez Sord en ligne sur : [sord.aaronc.cc](https://sord.aaronc.cc)**"
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "qgn1qoJVTbZGjDpa6aju/5r6r3u84BQSWzJ7ZXhHT70=",
        "originContent": "Sord has the following features:",
        "translatedContent": "Sord offre les fonctionnalités suivantes :  "
      },
      {
        "row": 18,
        "rowsha": "wBmiji3LUhAQx0mccoVV1/O9TOjy06h6tKUNVhW2zkU=",
        "originContent": "  - Automatically generates signatures for modules, classes and methods",
        "translatedContent": "  - Génération automatique des signatures pour modules, classes et méthodes  "
      },
      {
        "row": 19,
        "rowsha": "fxvfIivlOpxXlzHYbK1ZfQNhg8bdmaeW1SWwqSD6+6w=",
        "originContent": "  - Support for multiple parameter or return types (`T.any`/`|`)",
        "translatedContent": "  - Support pour plusieurs types de paramètres ou de retour (`T.any`/`|`)  "
      },
      {
        "row": 20,
        "rowsha": "IJK2g7AsLoyATCG2uVtF3l1xLnr9Wm26PfuefIJyD5w=",
        "originContent": "  - Gracefully handles missing YARD types (`T.untyped`/`untyped`)",
        "translatedContent": "  - Gestion élégante des types YARD manquants (`T.untyped`/`untyped`)  "
      },
      {
        "row": 21,
        "rowsha": "4+HCWcVoIO11qjM3KjeUWw9qpeKBrtvDwI0ZD5B9rzs=",
        "originContent": "  - Can infer setter parameter type from the corresponding getter's return type",
        "translatedContent": "  - Peut inférer le type du paramètre setter à partir du type de retour du getter correspondant  "
      },
      {
        "row": 22,
        "rowsha": "vmU09CQez7P9hmI23oWBdXaK2TloYOqnRtnW4CZTPF0=",
        "originContent": "  - Recognises mixins (`include` and `extend`)",
        "translatedContent": "  - Reconnaît les mixins (`include` et `extend`)  "
      },
      {
        "row": 23,
        "rowsha": "vyDytTG+UbT8/T7MA0PeBGN92pzl08qMBJ+7F2jhF38=",
        "originContent": "  - Support for generic types such as `Array<T>` and `Hash<K, V>`",
        "translatedContent": "  - Support des types génériques tels que `Array<T>` et `Hash<K, V>`  "
      },
      {
        "row": 24,
        "rowsha": "zuaRUA5hujmCSYQTdtXicykap03jYgtERfsjwVJr95o=",
        "originContent": "  - Can infer namespaced classes (`[Bar]` can become `GemName::Foo::Bar`)",
        "translatedContent": "  - Peut inférer les classes dans un namespace (`[Bar]` peut devenir `GemName::Foo::Bar`)  "
      },
      {
        "row": 25,
        "rowsha": "3EsD501X7AGPPGbVSZQaN9cwL+6aqCqwpem2/I1IcEw=",
        "originContent": "  - Handles return types which can be `nil` (`T.nilable`/`untyped`)",
        "translatedContent": "  - Gère les types de retour pouvant être `nil` (`T.nilable`/`untyped`)  "
      },
      {
        "row": 26,
        "rowsha": "yRlKAT1mxots48VYl0ybmFrPUADwYea5X1q5uMhgJmE=",
        "originContent": "  - Handles duck types (`T.untyped`/`untyped`)",
        "translatedContent": "  - Gère les types duck (`T.untyped`/`untyped`)  "
      },
      {
        "row": 27,
        "rowsha": "g2PgrIFIGTrOegC3peNZmpvttCi/2xSFYWJzo8VXMTE=",
        "originContent": "  - Support for ordered list types (`[Array(Integer, Symbol)]` becomes `[Integer, Symbol]`)",
        "translatedContent": "  - Support des types de listes ordonnées (`[Array(Integer, Symbol)]` devient `[Integer, Symbol]`)  "
      },
      {
        "row": 28,
        "rowsha": "kNbZGGH28GzkuC3nRyfAAqpiuJjpMbvDo360mwWfWRk=",
        "originContent": "  - Support for boolean types (`[true, false]` becomes `T::Boolean`/`bool`)",
        "translatedContent": "  - Support des types booléens (`[true, false]` devient `T::Boolean`/`bool`)  "
      },
      {
        "row": 29,
        "rowsha": "0/dVNwTprEu2p6NI/ksVfRs6YDbByLjcoaml9Hml5sI=",
        "originContent": "  - Support for `&block` parameters documented with `@yieldparam` and `@yieldreturn`",
        "translatedContent": "  - Support des paramètres `&block` documentés avec `@yieldparam` et `@yieldreturn`"
      },
      {
        "row": 30,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 31,
        "rowsha": "Y7/WGgVhslWiyqCi463Qkcp+Mn8voGpAfLsv80G4WNg=",
        "originContent": "## Usage",
        "translatedContent": "## Utilisation"
      },
      {
        "row": 32,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 33,
        "rowsha": "4EhwMuKS+5cJLeJk7J9q6mkj1sQOSCn3FwNMIC7Gl8Y=",
        "originContent": "Install Sord with `gem install sord`.",
        "translatedContent": "Installez Sord avec `gem install sord`."
      },
      {
        "row": 34,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 35,
        "rowsha": "Lq4GX3u3IbMWcgunguhP1afEVtKKZ6IvEVGb8qRxeH0=",
        "originContent": "Sord is a command line tool. To use it, open a terminal in the root directory",
        "translatedContent": "Sord est un outil en ligne de commande. Pour l’utiliser, ouvrez un terminal à la racine  "
      },
      {
        "row": 36,
        "rowsha": "lX1eBLtJXL8doEkN9tI+gc1qaC24BpgGYLFE9gfBN8c=",
        "originContent": "of your project and invoke `sord`, passing a path where you'd like to save your",
        "translatedContent": "de votre projet et lancez `sord`, en passant un chemin où vous souhaitez sauvegarder votre  "
      },
      {
        "row": 37,
        "rowsha": "+bh+McAjzaUOuGhz5cJndmWrKo1X5Ruf2iMbspuXZm8=",
        "originContent": "file (this file will be overwritten):",
        "translatedContent": "fichier (ce fichier sera écrasé) :"
      },
      {
        "row": 38,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "```\nsord defs.rbi\n```",
    "ContentSha": "IEMuCkXWBlH/iHxyO8wgbsXEhIbBStEniEuqvrS8Ey0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nsord defs.rbi\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      },
      {
        "row": 2,
        "rowsha": "Rzy4vIYfC+oxrnOOkTWtf1C/Qms8DrRSL4p5WiUEUgo=",
        "originContent": "sord defs.rbi",
        "translatedContent": "sord defs.rbi"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 3,
    "Content": "\nSord will generate YARD docs and then print information about what it's inferred\nas it runs. It is best to fix any issues in the YARD documentation, as any edits\nmade to the resulting file will be replaced if you re-run Sord.\n\nThe output type is inferred by the file extension you use, but you can also\nspecify it explicitly with `--rbi` or `--rbs`.\n\n## Shipping RBI Types\n\nRBI files generated by Sord can be used in two main ways:\n\n- [Shipped in the gem itself](https://sorbet.org/docs/rbi#rbis-within-gems).\n- Contributed to [sorbet-typed](https://github.com/sorbet/sorbet-typed).\n\nGenerally, you should ship the type signatures with your gem if possible.\nsorbet-typed is meant to be a place for gems that are no longer updated or\nwhere the maintainer is unwilling to ship type signatures with the gem itself.\n\n### Flags\n\nSord also takes some flags to alter the generated file:\n\n  - `--rbi`/`--rbs`: Override the output format inferred from the file\n    extension.\n  - `--no-sord-comments`: Generates the file without any Sord comments about\n    warnings/inferences/errors. (The original file's comments will still be\n    included.)\n  - `--no-regenerate`: By default, Sord will regenerate a repository's YARD\n    docs for you. This option skips regenerating the YARD docs.\n  - `--break-params`: Determines how many parameters are necessary before\n    the signature is changed from a single-line to a multi-line block.\n    (Default: 4)\n  - `--replace-errors-with-untyped`: Uses `T.untyped` instead of `SORD_ERROR_*`\n    constants.\n  - `--replace-unresolved-with-untyped`: Uses `T.untyped` when Sord is unable to\n    resolve a constant.\n  - `--include-messages` and `--exclude-messages`: Used to filter the logging\n    messages given by Sord. `--include-messages` acts as a whitelist, printing\n    only messages of the specified logging kinds, whereas `--exclude-messages`",
    "ContentSha": "6P/3DlBoP9WPCzPN35ClyCf09wUGKbwgRJS/dC+WSgA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Sord générera la documentation YARD puis affichera des informations sur ce qu’il a déduit  \npendant son exécution. Il est préférable de corriger les problèmes dans la documentation YARD,  \ncar toute modification apportée au fichier résultant sera remplacée si vous relancez Sord.  \n\nLe type de sortie est déduit par l’extension de fichier utilisée, mais vous pouvez aussi  \nle spécifier explicitement avec `--rbi` ou `--rbs`.  \n\n## Distribution des types RBI  \n\nLes fichiers RBI générés par Sord peuvent être utilisés de deux manières principales :  \n\n- [Distribués dans la gem elle-même](https://sorbet.org/docs/rbi#rbis-within-gems).  \n- Contribués à [sorbet-typed](https://github.com/sorbet/sorbet-typed).  \n\nEn général, vous devriez livrer les signatures de type avec votre gem si possible.  \nsorbet-typed est destiné à être un endroit pour les gems qui ne sont plus maintenues ou  \noù le mainteneur ne souhaite pas livrer les signatures de type avec la gem elle-même.  \n\n### Options  \n\nSord accepte également des options pour modifier le fichier généré :  \n\n  - `--rbi`/`--rbs` : Remplace le format de sortie déduit de l’extension de fichier.  \n  - `--no-sord-comments` : Génère le fichier sans aucun commentaire Sord concernant  \n    les avertissements/déductions/erreurs. (Les commentaires du fichier original seront toujours  \n    inclus.)  \n  - `--no-regenerate` : Par défaut, Sord régénère la documentation YARD d’un dépôt pour vous.  \n    Cette option évite la régénération de la documentation YARD.  \n  - `--break-params` : Détermine le nombre de paramètres nécessaire avant que  \n    la signature ne passe d’une ligne unique à un bloc multi-lignes.  \n    (Par défaut : 4)  \n  - `--replace-errors-with-untyped` : Utilise `T.untyped` au lieu des constantes `SORD_ERROR_*`.  \n  - `--replace-unresolved-with-untyped` : Utilise `T.untyped` lorsque Sord ne peut pas  \n    résoudre une constante.  \n  - `--include-messages` et `--exclude-messages` : Utilisés pour filtrer les messages de  \n    journalisation fournis par Sord. `--include-messages` agit comme une liste blanche,  \n    affichant uniquement les messages des types de journalisation spécifiés, tandis que `--exclude-messages`\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Sord générera la documentation YARD puis affichera des informations sur ce qu’il a déduit  "
      },
      {
        "row": 2,
        "rowsha": "GSmwHjblgB0ANHcfRYTkmgeiE6CUbPPKbfE/kbi30DI=",
        "originContent": "Sord will generate YARD docs and then print information about what it's inferred",
        "translatedContent": "pendant son exécution. Il est préférable de corriger les problèmes dans la documentation YARD,  "
      },
      {
        "row": 3,
        "rowsha": "+g7ZPgT57H5oslVHhSxOEk5LVvyez8JRrrDlhP/r+qE=",
        "originContent": "as it runs. It is best to fix any issues in the YARD documentation, as any edits",
        "translatedContent": "car toute modification apportée au fichier résultant sera remplacée si vous relancez Sord.  "
      },
      {
        "row": 4,
        "rowsha": "imSHijqEoKWtHqEgFkQlbkeM7yCJLw65x8Tn0KW1YRM=",
        "originContent": "made to the resulting file will be replaced if you re-run Sord.",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Le type de sortie est déduit par l’extension de fichier utilisée, mais vous pouvez aussi  "
      },
      {
        "row": 6,
        "rowsha": "MasU3tzSvUIN1n+KaHITTb7EM+CSCsGZBva+uHHpFeQ=",
        "originContent": "The output type is inferred by the file extension you use, but you can also",
        "translatedContent": "le spécifier explicitement avec `--rbi` ou `--rbs`.  "
      },
      {
        "row": 7,
        "rowsha": "Li58R+c9w/rQBtX8Mmc7fWZzQ2LKd1EL4GxS1RtZyPA=",
        "originContent": "specify it explicitly with `--rbi` or `--rbs`.",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## Distribution des types RBI  "
      },
      {
        "row": 9,
        "rowsha": "KgeeYFhTEQgs6kqnt7buVblvRqujdiUKCx0I6Bhf7pk=",
        "originContent": "## Shipping RBI Types",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Les fichiers RBI générés par Sord peuvent être utilisés de deux manières principales :  "
      },
      {
        "row": 11,
        "rowsha": "YgvMBZH4o4ERIIDSeEDNfVM0hV7qTdkNmA9EL4F67TY=",
        "originContent": "RBI files generated by Sord can be used in two main ways:",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- [Distribués dans la gem elle-même](https://sorbet.org/docs/rbi#rbis-within-gems).  "
      },
      {
        "row": 13,
        "rowsha": "TZ9kVRw96fM/RMoIUCDqBbMTliT22ojn4/yY5rZE6eU=",
        "originContent": "- [Shipped in the gem itself](https://sorbet.org/docs/rbi#rbis-within-gems).",
        "translatedContent": "- Contribués à [sorbet-typed](https://github.com/sorbet/sorbet-typed).  "
      },
      {
        "row": 14,
        "rowsha": "Sw/mSIoDr7aBRzSVRt8cgnAdKGW+1dm2jdYsWPndd+w=",
        "originContent": "- Contributed to [sorbet-typed](https://github.com/sorbet/sorbet-typed).",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "En général, vous devriez livrer les signatures de type avec votre gem si possible.  "
      },
      {
        "row": 16,
        "rowsha": "URih2+zxu5WnMPhQPpg33hySA1zMZzNKOeXpNtLwqjY=",
        "originContent": "Generally, you should ship the type signatures with your gem if possible.",
        "translatedContent": "sorbet-typed est destiné à être un endroit pour les gems qui ne sont plus maintenues ou  "
      },
      {
        "row": 17,
        "rowsha": "eEPa9wib6L7SbDzahRuMdyane135mFqnRpTMcO2Da44=",
        "originContent": "sorbet-typed is meant to be a place for gems that are no longer updated or",
        "translatedContent": "où le mainteneur ne souhaite pas livrer les signatures de type avec la gem elle-même.  "
      },
      {
        "row": 18,
        "rowsha": "z+rbc364ZFOgQ8td5oHEsCepnP/0amoSemKzMcjuaDc=",
        "originContent": "where the maintainer is unwilling to ship type signatures with the gem itself.",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Options  "
      },
      {
        "row": 20,
        "rowsha": "LPEupsbznSW+3iLlBHcHjrsNcyIcJru6qLxNNG302rw=",
        "originContent": "### Flags",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Sord accepte également des options pour modifier le fichier généré :  "
      },
      {
        "row": 22,
        "rowsha": "HksxjcN2sV5hSFaQF1ciSsRVFmheGqd304wId4iPbwY=",
        "originContent": "Sord also takes some flags to alter the generated file:",
        "translatedContent": ""
      },
      {
        "row": 23,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "  - `--rbi`/`--rbs` : Remplace le format de sortie déduit de l’extension de fichier.  "
      },
      {
        "row": 24,
        "rowsha": "rrAC6mPks3EOvP2js9mEkEmeEiHnPGN0MhdEASnlLOk=",
        "originContent": "  - `--rbi`/`--rbs`: Override the output format inferred from the file",
        "translatedContent": "  - `--no-sord-comments` : Génère le fichier sans aucun commentaire Sord concernant  "
      },
      {
        "row": 25,
        "rowsha": "9g420qVxnsRohZVD5UsmlT6u0SnEpQr7VuyTimBSzX8=",
        "originContent": "    extension.",
        "translatedContent": "    les avertissements/déductions/erreurs. (Les commentaires du fichier original seront toujours  "
      },
      {
        "row": 26,
        "rowsha": "CiJyRgXOuCr0L+rVAY0aTydSTeI12Z3XnFicBOH34C4=",
        "originContent": "  - `--no-sord-comments`: Generates the file without any Sord comments about",
        "translatedContent": "    inclus.)  "
      },
      {
        "row": 27,
        "rowsha": "k2LVckL1Ax1xDgtvXEXv3O0FgCoUb7EZIWJv50UZJtk=",
        "originContent": "    warnings/inferences/errors. (The original file's comments will still be",
        "translatedContent": "  - `--no-regenerate` : Par défaut, Sord régénère la documentation YARD d’un dépôt pour vous.  "
      },
      {
        "row": 28,
        "rowsha": "9/nKSray1GdzZtPtWGZoqDdB0KL5z1hW6rmso7flZbk=",
        "originContent": "    included.)",
        "translatedContent": "    Cette option évite la régénération de la documentation YARD.  "
      },
      {
        "row": 29,
        "rowsha": "oJ6a1AHOHWn5Dfih0uJn3r8PlIsbOsH0KayzVr2xBQQ=",
        "originContent": "  - `--no-regenerate`: By default, Sord will regenerate a repository's YARD",
        "translatedContent": "  - `--break-params` : Détermine le nombre de paramètres nécessaire avant que  "
      },
      {
        "row": 30,
        "rowsha": "LL2nzrrl5mtdy3YE4OYvNrzDR9NKgrgSQfZrHrDT8iM=",
        "originContent": "    docs for you. This option skips regenerating the YARD docs.",
        "translatedContent": "    la signature ne passe d’une ligne unique à un bloc multi-lignes.  "
      },
      {
        "row": 31,
        "rowsha": "k7mXMBkc3DJ2pa3Ppt7O7SxwjuXD8pkbNcYjq/qXUdQ=",
        "originContent": "  - `--break-params`: Determines how many parameters are necessary before",
        "translatedContent": "    (Par défaut : 4)  "
      },
      {
        "row": 32,
        "rowsha": "YF6Qo2x5kDzAmGgCwGI2/4s3XAqsw99dm4Sb57h8KSQ=",
        "originContent": "    the signature is changed from a single-line to a multi-line block.",
        "translatedContent": "  - `--replace-errors-with-untyped` : Utilise `T.untyped` au lieu des constantes `SORD_ERROR_*`.  "
      },
      {
        "row": 33,
        "rowsha": "07If0NCLte4nSxuDhIr3KI3wMNYzq5w6mx2AEFtWm64=",
        "originContent": "    (Default: 4)",
        "translatedContent": "  - `--replace-unresolved-with-untyped` : Utilise `T.untyped` lorsque Sord ne peut pas  "
      },
      {
        "row": 34,
        "rowsha": "5qp6jR1m6c4GtICsAsLu7yp1RgLe8zoImMe95kx8hso=",
        "originContent": "  - `--replace-errors-with-untyped`: Uses `T.untyped` instead of `SORD_ERROR_*`",
        "translatedContent": "    résoudre une constante.  "
      },
      {
        "row": 35,
        "rowsha": "zUAhCzOpO3HDIkqXpJxbp9ia6RNb4nBAPEQmHiekJNY=",
        "originContent": "    constants.",
        "translatedContent": "  - `--include-messages` et `--exclude-messages` : Utilisés pour filtrer les messages de  "
      },
      {
        "row": 36,
        "rowsha": "57H54oyh4hGU2BBQTU3D4LYfQs/e+A+7gWrL4p8N04U=",
        "originContent": "  - `--replace-unresolved-with-untyped`: Uses `T.untyped` when Sord is unable to",
        "translatedContent": "    journalisation fournis par Sord. `--include-messages` agit comme une liste blanche,  "
      },
      {
        "row": 37,
        "rowsha": "wVtLkFnJxXm0JZ8raNq3ZEODstqYHbnXdLl50JDNQVo=",
        "originContent": "    resolve a constant.",
        "translatedContent": "    affichant uniquement les messages des types de journalisation spécifiés, tandis que `--exclude-messages`"
      },
      {
        "row": 38,
        "rowsha": "TRFo2kfcmV1xQkFFm7H1CFybcpQ/VeybEEx6POw+ngA=",
        "originContent": "  - `--include-messages` and `--exclude-messages`: Used to filter the logging",
        "translatedContent": ""
      },
      {
        "row": 39,
        "rowsha": "kheElsPHpVYgZEFD/xB4RICWjE0qoZP4ANfaXSvjX3M=",
        "originContent": "    messages given by Sord. `--include-messages` acts as a whitelist, printing",
        "translatedContent": ""
      },
      {
        "row": 40,
        "rowsha": "ST/miKilgxPKKP2121Nwj9CBI4qqdp/w7AysFDq7rac=",
        "originContent": "    only messages of the specified logging kinds, whereas `--exclude-messages`",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 4,
    "Content": "    acts as a blacklist and suppresses the specified logging kinds. Both flags\n    take a comma-separated list of logging kinds, for example `omit,infer`.\n    When using `--include-messages`, the `done` kind is included by default.\n    (You cannot specify both `--include-messages` and `--exclude-messages`.)\n  - `--exclude-untyped`: Exclude methods and attributes with untyped return\n    values.\n  - `--tags TAGS`: Provide a list of comma-separated tags as understood by the\n    `yard` command. E.g. `--tags 'mytag:My Description,mytag2:My New Description'\n\n## Example\n\nSay we have this file, called `test.rb`:\n",
    "ContentSha": "XqNpqRU+TSHGRNxX2h6AP5M60YGIn/R/RqWYdpYwtfI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "    agit comme une liste noire et supprime les types de journalisation spécifiés. Les deux options\n    prennent une liste de types de journalisation séparés par des virgules, par exemple `omit,infer`.\n    Lors de l'utilisation de `--include-messages`, le type `done` est inclus par défaut.\n    (Vous ne pouvez pas spécifier à la fois `--include-messages` et `--exclude-messages`.)\n  - `--exclude-untyped` : Exclut les méthodes et attributs avec des valeurs de retour non typées.\n  - `--tags TAGS` : Fournit une liste de tags séparés par des virgules tels que compris par la commande\n    `yard`. Par exemple, `--tags 'mytag:My Description,mytag2:My New Description'\n\n## Exemple\n\nDisons que nous avons ce fichier, appelé `test.rb` :\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "/eI6LW9yt8oYZYAJ3iKIHXGqEVAWKcv8jrWa2JoQtOc=",
        "originContent": "    acts as a blacklist and suppresses the specified logging kinds. Both flags",
        "translatedContent": "    agit comme une liste noire et supprime les types de journalisation spécifiés. Les deux options"
      },
      {
        "row": 2,
        "rowsha": "dDIZcvgBlts88ezTJfA2tfgYCybA8Nd0BcJU8jiWiBU=",
        "originContent": "    take a comma-separated list of logging kinds, for example `omit,infer`.",
        "translatedContent": "    prennent une liste de types de journalisation séparés par des virgules, par exemple `omit,infer`."
      },
      {
        "row": 3,
        "rowsha": "1SaYTcjWd3rGocrJQFdxdFPzKqJdkxfomSoVu/QklZ0=",
        "originContent": "    When using `--include-messages`, the `done` kind is included by default.",
        "translatedContent": "    Lors de l'utilisation de `--include-messages`, le type `done` est inclus par défaut."
      },
      {
        "row": 4,
        "rowsha": "2t3qW/0tpUpvNIVg/oPfhf2rrMKYru8hSrqvAy5a1ws=",
        "originContent": "    (You cannot specify both `--include-messages` and `--exclude-messages`.)",
        "translatedContent": "    (Vous ne pouvez pas spécifier à la fois `--include-messages` et `--exclude-messages`.)"
      },
      {
        "row": 5,
        "rowsha": "SI9L82l3P56bibXMto/Rb5Np3P1NtQ+HRLJvfOrZ4SE=",
        "originContent": "  - `--exclude-untyped`: Exclude methods and attributes with untyped return",
        "translatedContent": "  - `--exclude-untyped` : Exclut les méthodes et attributs avec des valeurs de retour non typées."
      },
      {
        "row": 6,
        "rowsha": "oejrLWwf4509EGv8H2RDj5kbV4ic2S0PUrTU1prDFng=",
        "originContent": "    values.",
        "translatedContent": "  - `--tags TAGS` : Fournit une liste de tags séparés par des virgules tels que compris par la commande"
      },
      {
        "row": 7,
        "rowsha": "vdquEwMHwlvEySputZ/CJLhb2AFdBRSDFS6LtcweKI4=",
        "originContent": "  - `--tags TAGS`: Provide a list of comma-separated tags as understood by the",
        "translatedContent": "    `yard`. Par exemple, `--tags 'mytag:My Description,mytag2:My New Description'"
      },
      {
        "row": 8,
        "rowsha": "GqW34V8jEZ3oxg2QcD2B55P1Cpgozx+eeqBXAd3aO0w=",
        "originContent": "    `yard` command. E.g. `--tags 'mytag:My Description,mytag2:My New Description'",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## Exemple"
      },
      {
        "row": 10,
        "rowsha": "m/NPRMnRNx9O2lad+gT/eDCv+Bz6gWRuaAzvCHcUzcE=",
        "originContent": "## Example",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Disons que nous avons ce fichier, appelé `test.rb` :"
      },
      {
        "row": 12,
        "rowsha": "G5it7el6IhI0yZ8mrf4v72EeCSTWrixQZCHY45YcdD4=",
        "originContent": "Say we have this file, called `test.rb`:",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 5,
    "Content": "```ruby\nmodule Example\n  class Person\n    # @param name [String] The name of the Person to create.\n    # @param age [Integer] The age of the Person to create.\n    # @return [Example::Person]\n    def initialize(name, age)\n      @name = name\n      @age = age\n    end\n\n    # @return [String]\n    attr_accessor :name\n\n    # @return [Integer]\n    attr_accessor :age\n\n    # @param possible_names [Array<String>] An array of potential names to choose from.\n    # @param possible_ages [Array<Integer>] An array of potential ages to choose from.\n    # @return [Example::Person]\n    def self.construct_randomly(possible_names, possible_ages)\n      Person.new(possible_names.sample, possible_ages.sample)\n    end\n  end\nend\n```",
    "ContentSha": "Pjic17bxRc4lNsf6+HcoUgvR/hYFDGOCbv+7O3pTQyg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ruby\nmodule Example\n  class Person\n    # @param name [String] The name of the Person to create.\n    # @param age [Integer] The age of the Person to create.\n    # @return [Example::Person]\n    def initialize(name, age)\n      @name = name\n      @age = age\n    end\n\n    # @return [String]\n    attr_accessor :name\n\n    # @return [Integer]\n    attr_accessor :age\n\n    # @param possible_names [Array<String>] An array of potential names to choose from.\n    # @param possible_ages [Array<Integer>] An array of potential ages to choose from.\n    # @return [Example::Person]\n    def self.construct_randomly(possible_names, possible_ages)\n      Person.new(possible_names.sample, possible_ages.sample)\n    end\n  end\nend\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "/ak/5P5X1yYFQIWcydcj8nX7wGjkDDeQY41Yfh1fIdA=",
        "originContent": "```ruby",
        "translatedContent": "```ruby"
      },
      {
        "row": 2,
        "rowsha": "6SDMEa8Ux7HruvFLNikdy/lhszC7yhAGkNoEiv+ZXGU=",
        "originContent": "module Example",
        "translatedContent": "module Example"
      },
      {
        "row": 3,
        "rowsha": "bnsv0EasPSFpdTdPgiV9uQDs50lGfxOETHUnP7DLRzU=",
        "originContent": "  class Person",
        "translatedContent": "  class Person"
      },
      {
        "row": 4,
        "rowsha": "V1x5Jr6KP0Gx/sQc8MfEy09HMxL/kMCPnaeDiIlS+k0=",
        "originContent": "    # @param name [String] The name of the Person to create.",
        "translatedContent": "    # @param name [String] The name of the Person to create."
      },
      {
        "row": 5,
        "rowsha": "hM3jmEDD7jPMjLoriTbNPaFT1cwJbcK+U5qwtT9mjz4=",
        "originContent": "    # @param age [Integer] The age of the Person to create.",
        "translatedContent": "    # @param age [Integer] The age of the Person to create."
      },
      {
        "row": 6,
        "rowsha": "GLViXXxmCCEFfTx3IMYgejROA3UIAzs+/jDQBC4BtYk=",
        "originContent": "    # @return [Example::Person]",
        "translatedContent": "    # @return [Example::Person]"
      },
      {
        "row": 7,
        "rowsha": "oWrvxbsq1AOxoDZLImybhxtPP3lVKwKVcy41yW5yGzs=",
        "originContent": "    def initialize(name, age)",
        "translatedContent": "    def initialize(name, age)"
      },
      {
        "row": 8,
        "rowsha": "n665Jw7Qgph7cF/vtBrMI+pMxChFbHbnLg8oR/bz1cQ=",
        "originContent": "      @name = name",
        "translatedContent": "      @name = name"
      },
      {
        "row": 9,
        "rowsha": "LPTnTo2FzVZ+U/3cRrA/2GdQ+yG09SrtQ5V6AsBbiEs=",
        "originContent": "      @age = age",
        "translatedContent": "      @age = age"
      },
      {
        "row": 10,
        "rowsha": "gvoVxHL5c5ZCFTBleU4mILUDJKIFcP+s+BQjx5nYXiw=",
        "originContent": "    end",
        "translatedContent": "    end"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "gi70iUwKHP/6Mp+BV4Yde8SrQNipCO/0v+j73hDFwAc=",
        "originContent": "    # @return [String]",
        "translatedContent": "    # @return [String]"
      },
      {
        "row": 13,
        "rowsha": "fzjjOyCOrD+qQ/vtDHLeVSGMWif4P/RKqPXvJ/FdQO8=",
        "originContent": "    attr_accessor :name",
        "translatedContent": "    attr_accessor :name"
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "bvyM0LqisNqMIWon1FPosJVWEPTW28FnWIlFnizNq1I=",
        "originContent": "    # @return [Integer]",
        "translatedContent": "    # @return [Integer]"
      },
      {
        "row": 16,
        "rowsha": "YL/mQyqkcTrp8zGMblYbmAJQN2JabTkzN9i01G5bA/k=",
        "originContent": "    attr_accessor :age",
        "translatedContent": "    attr_accessor :age"
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "zHc9Yk4xN+CcUZXsl5d+1FlQ59STN889Z6i9TEmEa1k=",
        "originContent": "    # @param possible_names [Array<String>] An array of potential names to choose from.",
        "translatedContent": "    # @param possible_names [Array<String>] An array of potential names to choose from."
      },
      {
        "row": 19,
        "rowsha": "axRm6I4+NCXxmIOkmb/QnEO+NwIGsKnVFPYPQP+xZ0Q=",
        "originContent": "    # @param possible_ages [Array<Integer>] An array of potential ages to choose from.",
        "translatedContent": "    # @param possible_ages [Array<Integer>] An array of potential ages to choose from."
      },
      {
        "row": 20,
        "rowsha": "GLViXXxmCCEFfTx3IMYgejROA3UIAzs+/jDQBC4BtYk=",
        "originContent": "    # @return [Example::Person]",
        "translatedContent": "    # @return [Example::Person]"
      },
      {
        "row": 21,
        "rowsha": "krRSGCDEmn1X0z5QsR6AWOG2Ok15xmCtJwLkW056wS8=",
        "originContent": "    def self.construct_randomly(possible_names, possible_ages)",
        "translatedContent": "    def self.construct_randomly(possible_names, possible_ages)"
      },
      {
        "row": 22,
        "rowsha": "olIoO4R3j2E3kF6N6vMOSCT5fZ7P8IbZ0erBEIg/2aw=",
        "originContent": "      Person.new(possible_names.sample, possible_ages.sample)",
        "translatedContent": "      Person.new(possible_names.sample, possible_ages.sample)"
      },
      {
        "row": 23,
        "rowsha": "gvoVxHL5c5ZCFTBleU4mILUDJKIFcP+s+BQjx5nYXiw=",
        "originContent": "    end",
        "translatedContent": "    end"
      },
      {
        "row": 24,
        "rowsha": "SNNEvL0VmogGoy/zRyjZEOiUaGkA2VqmSA26jTm2p+o=",
        "originContent": "  end",
        "translatedContent": "  end"
      },
      {
        "row": 25,
        "rowsha": "Nh5I0DCPIOMtul+1Yyi68Y1y7wzLQ7hPXCYtKmofxsg=",
        "originContent": "end",
        "translatedContent": "end"
      },
      {
        "row": 26,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 6,
    "Content": "\nFirst, generate a YARD registry by running `yardoc test.rb`. Then, we can run\n`sord test.rbi` to generate the RBI file. (Careful not to overwrite your code\nfiles! Note the `.rbi` file extension.) In doing this, Sord prints:\n",
    "ContentSha": "pydHhq4Nw7PtSy/0Hq5t7HGPbjJ/IMAxh28Rps1JgW8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nTout d'abord, générez un registre YARD en exécutant `yardoc test.rb`. Ensuite, nous pouvons exécuter\n`sord test.rbi` pour générer le fichier RBI. (Attention à ne pas écraser vos fichiers\nde code ! Notez l'extension de fichier `.rbi`.) En faisant cela, Sord affiche :\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "K/syAAFrb42TYL1aUw8heZhV0nZdP10dQuTqjK2lVoM=",
        "originContent": "First, generate a YARD registry by running `yardoc test.rb`. Then, we can run",
        "translatedContent": "Tout d'abord, générez un registre YARD en exécutant `yardoc test.rb`. Ensuite, nous pouvons exécuter"
      },
      {
        "row": 3,
        "rowsha": "4cv6TZxmck/cLsFNNrodFtCWLPHVmu06h0wEJkxJepI=",
        "originContent": "`sord test.rbi` to generate the RBI file. (Careful not to overwrite your code",
        "translatedContent": "`sord test.rbi` pour générer le fichier RBI. (Attention à ne pas écraser vos fichiers"
      },
      {
        "row": 4,
        "rowsha": "3bQxzAzZh8EQf68+5N6JEGn6ims8+6zjkdltZoZ/qDg=",
        "originContent": "files! Note the `.rbi` file extension.) In doing this, Sord prints:",
        "translatedContent": "de code ! Notez l'extension de fichier `.rbi`.) En faisant cela, Sord affiche :"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 7,
    "Content": "```\n[INFER] Assuming from filename you wish to generate in RBI format\n[DONE ] Processed 8 objects (2 namespaces and 6 methods)\n```",
    "ContentSha": "XRGmUaIVo7YJ3v6fKNH8a64SpoVbWCMtVNjWhqJI/nM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\n[INFER] Assuming from filename you wish to generate in RBI format\n[DONE ] Processed 8 objects (2 namespaces and 6 methods)\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      },
      {
        "row": 2,
        "rowsha": "qHeYrvpJxQgIuyQG9dTpBvsrIaXDLbpvmWCllSWdHmc=",
        "originContent": "[INFER] Assuming from filename you wish to generate in RBI format",
        "translatedContent": "[INFER] Assuming from filename you wish to generate in RBI format"
      },
      {
        "row": 3,
        "rowsha": "yo9tApqn+GmATWihiQLqgEGFqAY77AHhmmCH2/TsA9s=",
        "originContent": "[DONE ] Processed 8 objects (2 namespaces and 6 methods)",
        "translatedContent": "[DONE ] Processed 8 objects (2 namespaces and 6 methods)"
      },
      {
        "row": 4,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 8,
    "Content": "\nThe `test.rbi` file then contains a complete RBI file for `test.rb`:\n",
    "ContentSha": "f8d7UmSdMpGHTOSZGrAr7eOXmzq5395k/yeB7FXVCZ0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nLe fichier `test.rbi` contient alors un fichier RBI complet pour `test.rb` :\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "FnkHSKpv9TWaQ6rPizoFri/iHHnLNwI+V8nZDxmRR4U=",
        "originContent": "The `test.rbi` file then contains a complete RBI file for `test.rb`:",
        "translatedContent": "Le fichier `test.rbi` contient alors un fichier RBI complet pour `test.rb` :"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 9,
    "Content": "```ruby\n# typed: strong\nmodule Example\n  class Person\n    # _@param_ `name` — The name of the Person to create.\n    # \n    # _@param_ `age` — The age of the Person to create.\n    sig { params(name: String, age: Integer).void }\n    def initialize(name, age); end\n\n    # _@param_ `possible_names` — An array of potential names to choose from.\n    # \n    # _@param_ `possible_ages` — An array of potential ages to choose from.\n    sig { params(possible_names: T::Array[String], possible_ages: T::Array[Integer]).returns(Example::Person) }\n    def self.construct_randomly(possible_names, possible_ages); end\n\n    sig { returns(String) }\n    attr_accessor :name\n\n    sig { returns(Integer) }\n    attr_accessor :age\n  end\nend\n```",
    "ContentSha": "Le11NtCZEkpwsqT6bZ4d+hWTFLtshS9MbZSY2ClQAKg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ruby\n# typed: strong\nmodule Example\n  class Person\n    # _@param_ `name` — The name of the Person to create.\n    # \n    # _@param_ `age` — The age of the Person to create.\n    sig { params(name: String, age: Integer).void }\n    def initialize(name, age); end\n\n    # _@param_ `possible_names` — An array of potential names to choose from.\n    # \n    # _@param_ `possible_ages` — An array of potential ages to choose from.\n    sig { params(possible_names: T::Array[String], possible_ages: T::Array[Integer]).returns(Example::Person) }\n    def self.construct_randomly(possible_names, possible_ages); end\n\n    sig { returns(String) }\n    attr_accessor :name\n\n    sig { returns(Integer) }\n    attr_accessor :age\n  end\nend\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "/ak/5P5X1yYFQIWcydcj8nX7wGjkDDeQY41Yfh1fIdA=",
        "originContent": "```ruby",
        "translatedContent": "```ruby"
      },
      {
        "row": 2,
        "rowsha": "BsnwHLq1NirueiYYqLyXo7CUX1m5aTaow9dYX/E1ZnQ=",
        "originContent": "# typed: strong",
        "translatedContent": "# typed: strong"
      },
      {
        "row": 3,
        "rowsha": "6SDMEa8Ux7HruvFLNikdy/lhszC7yhAGkNoEiv+ZXGU=",
        "originContent": "module Example",
        "translatedContent": "module Example"
      },
      {
        "row": 4,
        "rowsha": "bnsv0EasPSFpdTdPgiV9uQDs50lGfxOETHUnP7DLRzU=",
        "originContent": "  class Person",
        "translatedContent": "  class Person"
      },
      {
        "row": 5,
        "rowsha": "BmwkLdszyZdmiq50yZImNgpnfhnQdFYh4qruMYPInkM=",
        "originContent": "    # _@param_ `name` — The name of the Person to create.",
        "translatedContent": "    # _@param_ `name` — The name of the Person to create."
      },
      {
        "row": 6,
        "rowsha": "VpK639xh/ICE3r9xZmMph71JO08lDWBi2bvNofg+NkQ=",
        "originContent": "    # ",
        "translatedContent": "    # "
      },
      {
        "row": 7,
        "rowsha": "/p1/SuLLeiOdUSb8tmoML++eXr8VoBLcsvn34moAQK4=",
        "originContent": "    # _@param_ `age` — The age of the Person to create.",
        "translatedContent": "    # _@param_ `age` — The age of the Person to create."
      },
      {
        "row": 8,
        "rowsha": "55XpjLcLZrlCyN4aom1PFtfEPQo6vZnB+nCUTb+cw3g=",
        "originContent": "    sig { params(name: String, age: Integer).void }",
        "translatedContent": "    sig { params(name: String, age: Integer).void }"
      },
      {
        "row": 9,
        "rowsha": "K/+SysMsdAs2YmBrZ5GXlYbRWkVFpiHWq2c8ZijZPyg=",
        "originContent": "    def initialize(name, age); end",
        "translatedContent": "    def initialize(name, age); end"
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "9vrmEOrBLY3M9Q+AkYpigpJVZArQiDywkSwCgA10sNM=",
        "originContent": "    # _@param_ `possible_names` — An array of potential names to choose from.",
        "translatedContent": "    # _@param_ `possible_names` — An array of potential names to choose from."
      },
      {
        "row": 12,
        "rowsha": "VpK639xh/ICE3r9xZmMph71JO08lDWBi2bvNofg+NkQ=",
        "originContent": "    # ",
        "translatedContent": "    # "
      },
      {
        "row": 13,
        "rowsha": "D/X4qTEoSDOKBJWQtF7vO6RXeLWQZS8+22CnWhZUETI=",
        "originContent": "    # _@param_ `possible_ages` — An array of potential ages to choose from.",
        "translatedContent": "    # _@param_ `possible_ages` — An array of potential ages to choose from."
      },
      {
        "row": 14,
        "rowsha": "Mf1ZD76xColTm6Ek1d3V3bH280/LeTX8GW+OYWcOUq4=",
        "originContent": "    sig { params(possible_names: T::Array[String], possible_ages: T::Array[Integer]).returns(Example::Person) }",
        "translatedContent": "    sig { params(possible_names: T::Array[String], possible_ages: T::Array[Integer]).returns(Example::Person) }"
      },
      {
        "row": 15,
        "rowsha": "n1fWxh0Qv08MVZBN9KP+m0XRHg9hHJHVU2L3KJNyNYA=",
        "originContent": "    def self.construct_randomly(possible_names, possible_ages); end",
        "translatedContent": "    def self.construct_randomly(possible_names, possible_ages); end"
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "hQ3j79fuCR68jvuGiywvoYPeXNObNx03RHlc8gfXABQ=",
        "originContent": "    sig { returns(String) }",
        "translatedContent": "    sig { returns(String) }"
      },
      {
        "row": 18,
        "rowsha": "fzjjOyCOrD+qQ/vtDHLeVSGMWif4P/RKqPXvJ/FdQO8=",
        "originContent": "    attr_accessor :name",
        "translatedContent": "    attr_accessor :name"
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 20,
        "rowsha": "9rLD99qipJDukA5VepvGdwFUe1nI6/t8owvijo1rRzo=",
        "originContent": "    sig { returns(Integer) }",
        "translatedContent": "    sig { returns(Integer) }"
      },
      {
        "row": 21,
        "rowsha": "YL/mQyqkcTrp8zGMblYbmAJQN2JabTkzN9i01G5bA/k=",
        "originContent": "    attr_accessor :age",
        "translatedContent": "    attr_accessor :age"
      },
      {
        "row": 22,
        "rowsha": "SNNEvL0VmogGoy/zRyjZEOiUaGkA2VqmSA26jTm2p+o=",
        "originContent": "  end",
        "translatedContent": "  end"
      },
      {
        "row": 23,
        "rowsha": "Nh5I0DCPIOMtul+1Yyi68Y1y7wzLQ7hPXCYtKmofxsg=",
        "originContent": "end",
        "translatedContent": "end"
      },
      {
        "row": 24,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 10,
    "Content": "\nIf we had instead generated `test.rbs`, we would get this file in RBS format:\n",
    "ContentSha": "v0e/GiohYxL+O1KvDgz+ftl80Wa3FuJBQ8X2M6xcRqI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\nSi nous avions plutôt généré `test.rbs`, nous obtiendrions ce fichier au format RBS :\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "gB600NPuorvNUMHwMjpaJG+iTw/5+9CvY0ZkTc1hshY=",
        "originContent": "If we had instead generated `test.rbs`, we would get this file in RBS format:",
        "translatedContent": "Si nous avions plutôt généré `test.rbs`, nous obtiendrions ce fichier au format RBS :"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 11,
    "Content": "```ruby\nmodule Example\n  class Person\n    # _@param_ `name` — The name of the Person to create.\n    # \n    # _@param_ `age` — The age of the Person to create.\n    def initialize: (String name, Integer age) -> void\n\n    # _@param_ `possible_names` — An array of potential names to choose from.\n    # \n    # _@param_ `possible_ages` — An array of potential ages to choose from.\n    def self.construct_randomly: (Array[String] possible_names, Array[Integer] possible_ages) -> Example::Person\n\n    attr_accessor name: String\n\n    attr_accessor age: Integer\n  end\nend\n```",
    "ContentSha": "9WtVYviXix1q0mXQYSLlk024iVxOisvx0QZuuaWk1aw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```ruby\nmodule Example\n  class Person\n    # _@param_ `name` — The name of the Person to create.\n    # \n    # _@param_ `age` — The age of the Person to create.\n    def initialize: (String name, Integer age) -> void\n\n    # _@param_ `possible_names` — An array of potential names to choose from.\n    # \n    # _@param_ `possible_ages` — An array of potential ages to choose from.\n    def self.construct_randomly: (Array[String] possible_names, Array[Integer] possible_ages) -> Example::Person\n\n    attr_accessor name: String\n\n    attr_accessor age: Integer\n  end\nend\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "/ak/5P5X1yYFQIWcydcj8nX7wGjkDDeQY41Yfh1fIdA=",
        "originContent": "```ruby",
        "translatedContent": "```ruby"
      },
      {
        "row": 2,
        "rowsha": "6SDMEa8Ux7HruvFLNikdy/lhszC7yhAGkNoEiv+ZXGU=",
        "originContent": "module Example",
        "translatedContent": "module Example"
      },
      {
        "row": 3,
        "rowsha": "bnsv0EasPSFpdTdPgiV9uQDs50lGfxOETHUnP7DLRzU=",
        "originContent": "  class Person",
        "translatedContent": "  class Person"
      },
      {
        "row": 4,
        "rowsha": "BmwkLdszyZdmiq50yZImNgpnfhnQdFYh4qruMYPInkM=",
        "originContent": "    # _@param_ `name` — The name of the Person to create.",
        "translatedContent": "    # _@param_ `name` — The name of the Person to create."
      },
      {
        "row": 5,
        "rowsha": "VpK639xh/ICE3r9xZmMph71JO08lDWBi2bvNofg+NkQ=",
        "originContent": "    # ",
        "translatedContent": "    # "
      },
      {
        "row": 6,
        "rowsha": "/p1/SuLLeiOdUSb8tmoML++eXr8VoBLcsvn34moAQK4=",
        "originContent": "    # _@param_ `age` — The age of the Person to create.",
        "translatedContent": "    # _@param_ `age` — The age of the Person to create."
      },
      {
        "row": 7,
        "rowsha": "0OGmsg9Sd9V7YSN+kfjHwB4HDs774fyBMsAojhm68jg=",
        "originContent": "    def initialize: (String name, Integer age) -> void",
        "translatedContent": "    def initialize: (String name, Integer age) -> void"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "9vrmEOrBLY3M9Q+AkYpigpJVZArQiDywkSwCgA10sNM=",
        "originContent": "    # _@param_ `possible_names` — An array of potential names to choose from.",
        "translatedContent": "    # _@param_ `possible_names` — An array of potential names to choose from."
      },
      {
        "row": 10,
        "rowsha": "VpK639xh/ICE3r9xZmMph71JO08lDWBi2bvNofg+NkQ=",
        "originContent": "    # ",
        "translatedContent": "    # "
      },
      {
        "row": 11,
        "rowsha": "D/X4qTEoSDOKBJWQtF7vO6RXeLWQZS8+22CnWhZUETI=",
        "originContent": "    # _@param_ `possible_ages` — An array of potential ages to choose from.",
        "translatedContent": "    # _@param_ `possible_ages` — An array of potential ages to choose from."
      },
      {
        "row": 12,
        "rowsha": "oCGJsgzBw3XSI2DNS4dE39HSq/RbRcPv8ATGrNKpb8M=",
        "originContent": "    def self.construct_randomly: (Array[String] possible_names, Array[Integer] possible_ages) -> Example::Person",
        "translatedContent": "    def self.construct_randomly: (Array[String] possible_names, Array[Integer] possible_ages) -> Example::Person"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "PpBMBfMXFzvasV7qu0E8HcCTL999vXG/qsfGjGu1bxw=",
        "originContent": "    attr_accessor name: String",
        "translatedContent": "    attr_accessor name: String"
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "rvXCyot5lk5xK9DtkrpWpFwo3gX0UulF99QKyNxaiBM=",
        "originContent": "    attr_accessor age: Integer",
        "translatedContent": "    attr_accessor age: Integer"
      },
      {
        "row": 17,
        "rowsha": "SNNEvL0VmogGoy/zRyjZEOiUaGkA2VqmSA26jTm2p+o=",
        "originContent": "  end",
        "translatedContent": "  end"
      },
      {
        "row": 18,
        "rowsha": "Nh5I0DCPIOMtul+1Yyi68Y1y7wzLQ7hPXCYtKmofxsg=",
        "originContent": "end",
        "translatedContent": "end"
      },
      {
        "row": 19,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 12,
    "Content": "\n## Things to be aware of\n\nThe general rule of thumb for type conversions is:\n\n  - If Sord understands the YARD type, then it is converted into the RBI or RBS\n    type.\n  - If the YARD type is missing, Sord fills in `T.untyped`.\n  - If the YARD type can't be understood, Sord creates an undefined Ruby constant\n    with a similar name to the unknown YARD type. For example, the obviously\n    invalid YARD type `A%B` will become a constant called `SORD_ERROR_AB`.\n    You should search through your resulting file to find and fix and \n    `SORD_ERROR`s.\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/AaronC81/sord. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.\n\nWhile contributing, if you want to see the results of your changes to Sord you\ncan use the `examples:seed` Rake task. The task uses Sord to generate types for\na number of open source Ruby gems, including Bundler, Haml, Rouge, and RSpec.\n`rake examples:seed` (and `rake examples:reseed` to regenerate the files) will\nclone the repositories of these gems into `sord_examples/` and then generate the\nfiles into the same directory.\n\n## License\n\nThe gem is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).\n\n## Code of Conduct\n\nEveryone interacting in the Sord project’s codebases, issue trackers, chat rooms and mailing lists is expected to follow the [code of conduct](https://github.com/AaronC81/sord/blob/master/CODE_OF_CONDUCT.md).\n",
    "ContentSha": "6LrD7WypS6IqJ7I6OzITtaElp1MrhEttzYj5FtfK+Xw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n## Choses à savoir\n\nLa règle générale pour les conversions de type est la suivante :\n\n  - Si Sord comprend le type YARD, alors il est converti en type RBI ou RBS.\n  - Si le type YARD est manquant, Sord remplit avec `T.untyped`.\n  - Si le type YARD ne peut pas être compris, Sord crée une constante Ruby indéfinie\n    avec un nom similaire au type YARD inconnu. Par exemple, le type YARD\n    manifestement invalide `A%B` deviendra une constante appelée `SORD_ERROR_AB`.\n    Vous devriez rechercher dans votre fichier résultant tous les \n    `SORD_ERROR` pour les trouver et les corriger.\n\n## Contribution\n\nLes rapports de bugs et les pull requests sont les bienvenus sur GitHub à l’adresse https://github.com/AaronC81/sord. Ce projet se veut un espace sûr et accueillant pour la collaboration, et les contributeurs sont censés respecter le code de conduite [Contributor Covenant](http://contributor-covenant.org).\n\nLors de votre contribution, si vous souhaitez voir les résultats de vos modifications sur Sord, vous pouvez utiliser la tâche Rake `examples:seed`. Cette tâche utilise Sord pour générer les types de plusieurs gems Ruby open source, y compris Bundler, Haml, Rouge et RSpec. `rake examples:seed` (et `rake examples:reseed` pour régénérer les fichiers) clonera les dépôts de ces gems dans `sord_examples/` puis générera les fichiers dans ce même répertoire.\n\n## Licence\n\nLa gem est disponible en open source sous les termes de la [Licence MIT](https://opensource.org/licenses/MIT).\n\n## Code de conduite\n\nToute personne interagissant avec les bases de code, les traqueurs de problèmes, les salons de discussion et les listes de diffusion du projet Sord est tenue de suivre le [code de conduite](https://github.com/AaronC81/sord/blob/master/CODE_OF_CONDUCT.md).\n\n\n\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "4VcLDTbvmEwfjXzw+HmIL44Em4UR4KXmcuc1UO5MHvU=",
        "originContent": "## Things to be aware of",
        "translatedContent": "## Choses à savoir"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "QkWD6/3OkYF30JsDhyhOmTYZt8aTfqP95c3TPUxYX3c=",
        "originContent": "The general rule of thumb for type conversions is:",
        "translatedContent": "La règle générale pour les conversions de type est la suivante :"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "YjVzWw2E5zh+xXYSYmXfIaPnOJfDfJPMGGqZcsrPw+c=",
        "originContent": "  - If Sord understands the YARD type, then it is converted into the RBI or RBS",
        "translatedContent": "  - Si Sord comprend le type YARD, alors il est converti en type RBI ou RBS."
      },
      {
        "row": 7,
        "rowsha": "vK2+551dO9zOFPPhIEtCdCgUjyx0Fk3yHh/qfaUdUhg=",
        "originContent": "    type.",
        "translatedContent": "  - Si le type YARD est manquant, Sord remplit avec `T.untyped`."
      },
      {
        "row": 8,
        "rowsha": "37m8TVjZOtQrVDkuJNRKGQ8rKVMH2Qd+pGhSXrYnf1g=",
        "originContent": "  - If the YARD type is missing, Sord fills in `T.untyped`.",
        "translatedContent": "  - Si le type YARD ne peut pas être compris, Sord crée une constante Ruby indéfinie"
      },
      {
        "row": 9,
        "rowsha": "OdLfCfnHcFjZVwRiShJjacQ+m/7mXM3jY/8SearV7DE=",
        "originContent": "  - If the YARD type can't be understood, Sord creates an undefined Ruby constant",
        "translatedContent": "    avec un nom similaire au type YARD inconnu. Par exemple, le type YARD"
      },
      {
        "row": 10,
        "rowsha": "YoWUUNGTwb7hdyUlfEujP0gdSz+QHaUlfnPlkVnTpF4=",
        "originContent": "    with a similar name to the unknown YARD type. For example, the obviously",
        "translatedContent": "    manifestement invalide `A%B` deviendra une constante appelée `SORD_ERROR_AB`."
      },
      {
        "row": 11,
        "rowsha": "Nwsu2NwnYeK9gvzbciIYcLsGq3eUkI3KeedJ8HYgS5M=",
        "originContent": "    invalid YARD type `A%B` will become a constant called `SORD_ERROR_AB`.",
        "translatedContent": "    Vous devriez rechercher dans votre fichier résultant tous les "
      },
      {
        "row": 12,
        "rowsha": "gN1gmHYVhWvOHifWhw0slHsVRgZ2PrVjdFGggQPhW/E=",
        "originContent": "    You should search through your resulting file to find and fix and ",
        "translatedContent": "    `SORD_ERROR` pour les trouver et les corriger."
      },
      {
        "row": 13,
        "rowsha": "q9PJXItHZzFTBeoqymomyIe1Rx2CTBvg9UE1rYzdfrc=",
        "originContent": "    `SORD_ERROR`s.",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## Contribution"
      },
      {
        "row": 15,
        "rowsha": "R5ZPLZ4vkE9tjX5qe8QB7AkTfWZsuNTGFLFKMp2KUzM=",
        "originContent": "## Contributing",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Les rapports de bugs et les pull requests sont les bienvenus sur GitHub à l’adresse https://github.com/AaronC81/sord. Ce projet se veut un espace sûr et accueillant pour la collaboration, et les contributeurs sont censés respecter le code de conduite [Contributor Covenant](http://contributor-covenant.org)."
      },
      {
        "row": 17,
        "rowsha": "FBajwnqHajo/Y6rU65ESJBdRC7g0cbBneBFZEGzuuKA=",
        "originContent": "Bug reports and pull requests are welcome on GitHub at https://github.com/AaronC81/sord. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Lors de votre contribution, si vous souhaitez voir les résultats de vos modifications sur Sord, vous pouvez utiliser la tâche Rake `examples:seed`. Cette tâche utilise Sord pour générer les types de plusieurs gems Ruby open source, y compris Bundler, Haml, Rouge et RSpec. `rake examples:seed` (et `rake examples:reseed` pour régénérer les fichiers) clonera les dépôts de ces gems dans `sord_examples/` puis générera les fichiers dans ce même répertoire."
      },
      {
        "row": 19,
        "rowsha": "PykfBKIiHHdpAGZ2CzJPQGgcYZeoLXVtWAId4OlKbVc=",
        "originContent": "While contributing, if you want to see the results of your changes to Sord you",
        "translatedContent": ""
      },
      {
        "row": 20,
        "rowsha": "rZz8BIud1j0z4AoVlWyatQrD1sibBZRBboX7uV9b2kw=",
        "originContent": "can use the `examples:seed` Rake task. The task uses Sord to generate types for",
        "translatedContent": "## Licence"
      },
      {
        "row": 21,
        "rowsha": "E9iioGKOI7WrX9g59xUWZkuKVFC8AkRppg/rr79KZpM=",
        "originContent": "a number of open source Ruby gems, including Bundler, Haml, Rouge, and RSpec.",
        "translatedContent": ""
      },
      {
        "row": 22,
        "rowsha": "0W4JlzC2E4IGgXOIGn0vC8IXkQIcIVY+JxOwfWnpA6s=",
        "originContent": "`rake examples:seed` (and `rake examples:reseed` to regenerate the files) will",
        "translatedContent": "La gem est disponible en open source sous les termes de la [Licence MIT](https://opensource.org/licenses/MIT)."
      },
      {
        "row": 23,
        "rowsha": "2FCuWW0eSXbJFKK+xMaLgyk+EmwRAKsnovb0NcN2Aso=",
        "originContent": "clone the repositories of these gems into `sord_examples/` and then generate the",
        "translatedContent": ""
      },
      {
        "row": 24,
        "rowsha": "zolnCSdW4OjAc5ns5COMwPWFQFKFmbUvNHIOPuqEGSQ=",
        "originContent": "files into the same directory.",
        "translatedContent": "## Code de conduite"
      },
      {
        "row": 25,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 26,
        "rowsha": "bFSaVtsB4CHySNjaeCiaMZfT24b+DTbTM4HQ38cR6Lw=",
        "originContent": "## License",
        "translatedContent": "Toute personne interagissant avec les bases de code, les traqueurs de problèmes, les salons de discussion et les listes de diffusion du projet Sord est tenue de suivre le [code de conduite](https://github.com/AaronC81/sord/blob/master/CODE_OF_CONDUCT.md)."
      },
      {
        "row": 27,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 28,
        "rowsha": "XAehVsKk2bNFEHLgcUIa10t2JjIrMEEFCr8gk8FvIhc=",
        "originContent": "The gem is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).",
        "translatedContent": ""
      },
      {
        "row": 29,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 30,
        "rowsha": "a2NKwVCedKLDuP9rtxwV5qmQmdm5DK2nFoQfOTn/ZT0=",
        "originContent": "## Code of Conduct",
        "translatedContent": ""
      },
      {
        "row": 31,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 32,
        "rowsha": "1ivGHI9EC1TjMDh+W5XHaNjsf3yqlzYsUhmuQ6nyN/4=",
        "originContent": "Everyone interacting in the Sord project’s codebases, issue trackers, chat rooms and mailing lists is expected to follow the [code of conduct](https://github.com/AaronC81/sord/blob/master/CODE_OF_CONDUCT.md).",
        "translatedContent": ""
      },
      {
        "row": 33,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  }
]