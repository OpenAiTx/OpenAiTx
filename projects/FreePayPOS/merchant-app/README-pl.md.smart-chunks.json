[
  {
    "Id": 1,
    "Content": "# NFC Payment Terminal\n\nA multi-chain NFC payment terminal that processes cryptocurrency payments across 5 blockchain networks with real-time transaction monitoring and comprehensive history tracking.\n\n## 🌐 Supported Networks\n\n- **Ethereum**\n- **Base** \n- **Arbitrum** \n- **Optimism** \n- **Polygon** \n\n### 🎯 **Smart Payment Priority**\n\nRather than negotiate a chain / token combo with the merchant, the payment terminal handles it automatically. First it figures out a chain the merchant supports that you also have funds on, then sends a transaction with ETH or an ERC-20 token with this priority:\n\n```\nL2 Stablecoin > L2 Other > L2 ETH > L1 Stablecoin > L1 Other > L1 ETH\n```\n",
    "ContentSha": "pdIyU9KX6ZphRLpxoyda1sRftUwWiV0igELr5zBYMGE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# Terminal Płatniczy NFC\n\nWielosieciowy terminal płatniczy NFC, który obsługuje płatności kryptowalutowe na 5 sieciach blockchain z monitorowaniem transakcji w czasie rzeczywistym oraz kompleksowym śledzeniem historii.\n\n## 🌐 Obsługiwane Sieci\n\n- **Ethereum**\n- **Base**\n- **Arbitrum**\n- **Optimism**\n- **Polygon**\n\n### 🎯 **Priorytet Inteligentnych Płatności**\n\nZamiast negocjować z akceptantem kombinację sieci / tokena, terminal płatniczy obsługuje to automatycznie. Najpierw znajduje sieć, którą obsługuje akceptant i na której masz środki, a następnie wysyła transakcję w ETH lub tokenie ERC-20 zgodnie z następującym priorytetem:\n\n```\nL2 Stablecoin > L2 Inne > L2 ETH > L1 Stablecoin > L1 Inne > L1 ETH\n```",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "## 🚀 Quick Start\n\n1. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n2. **Environment setup:**\n   ```bash\n   echo \"ALCHEMY_API_KEY=your_alchemy_api_key_here\" > .env\n   ```\n\n3. **Run the terminal:**\n   ```bash\n   npm start\n   ```\n\n4. **Open the interface:**\n   Navigate to `http://localhost:3000`\n",
    "ContentSha": "Zi/hDUmVO5J5r0t5RPo1wkWQhfLFV+cY4pN8Y6VAVX0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🚀 Szybki start\n\n1. **Zainstaluj zależności:**\n   ```bash\n   npm install\n   ```\n\n2. **Konfiguracja środowiska:**\n   ```bash\n   echo \"ALCHEMY_API_KEY=twoj_klucz_api_alchemy_tutaj\" > .env\n   ```\n\n3. **Uruchom terminal:**\n   ```bash\n   npm start\n   ```\n\n4. **Otwórz interfejs:**\n   Przejdź do `http://localhost:3000`\n",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "## 🏗️ Architecture\n\n```\nsrc/\n├── server.ts                   # Express server & WebSocket handler\n├── app.ts                     # Main application orchestrator\n├── web/index.html             # Payment terminal UI\n├── config/index.ts            # Multi-chain configuration\n└── services/\n    ├── nfcService.ts          # NFC reader & wallet scanning\n    ├── alchemyService.ts      # Multi-chain balance & monitoring\n    ├── paymentService.ts      # Payment selection & EIP-681 generation\n    ├── ethereumService.ts     # Address validation utilities\n    └── addressProcessor.ts    # Duplicate processing prevention\nscripts/\n└── rpi-deploy/\n    ├── setup-build-environment.sh  # Install dependencies to allow building a Raspberry Pi image\n    └── build-pi-image-osx.sh       # Build a Raspberry Pi image\n```\n",
    "ContentSha": "g4uwm9UnsnRyY1+SOvBPNyQsRnRkAcLl+l3LqQCo880=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🏗️ Architektura\n\n```\nsrc/\n├── server.ts                   # Serwer Express & obsługa WebSocket\n├── app.ts                      # Główny orkiestrator aplikacji\n├── web/index.html              # Interfejs terminala płatniczego\n├── config/index.ts             # Konfiguracja multi-chain\n└── services/\n    ├── nfcService.ts           # Czytnik NFC & skanowanie portfela\n    ├── alchemyService.ts       # Saldo multi-chain & monitorowanie\n    ├── paymentService.ts       # Wybór płatności & generowanie EIP-681\n    ├── ethereumService.ts      # Narzędzia do walidacji adresów\n    └── addressProcessor.ts     # Zapobieganie duplikowanemu przetwarzaniu\nscripts/\n└── rpi-deploy/\n    ├── setup-build-environment.sh  # Instalacja zależności do budowy obrazu Raspberry Pi\n    └── build-pi-image-osx.sh       # Budowanie obrazu Raspberry Pi\n```",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "## 💡 Usage\n\n### **Processing Payments**\n1. Enter amount using the keypad (cents-based: \"150\" = $1.50)\n2. Tap \"Charge\" to initiate payment\n3. Customer taps NFC device to send payment\n4. Real-time monitoring confirms transaction\n5. \"Approved\" message with block explorer link\n\n### **Transaction History**\n1. Tap the 📜 history button on the keypad\n2. View all transactions or scan a wallet for specific history\n3. Tap \"📱 Scan Wallet for History\" and have customer tap their device\n4. Browse filtered transactions for that specific wallet\n\n\n## 🔄 Payment Flow\n\n1. **NFC Detection** → Customer taps device\n2. **Multi-Chain Fetching** → Portfolio analysis across all 6 chains\n3. **Smart Selection** → Optimal payment token based on priority system\n4. **EIP-681 Generation** → Payment request with chain ID\n5. **Real-Time Monitoring** → WebSocket/polling for transaction confirmation\n6. **History Logging** → Transaction stored with full metadata\n",
    "ContentSha": "J+WGDWPeAjl7sIlurfkYZDcwzRuMaTiHoAD9A+uQ8K0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 💡 Użytkowanie\n\n### **Przetwarzanie płatności**\n1. Wprowadź kwotę za pomocą klawiatury (w centach: \"150\" = 1,50 USD)\n2. Naciśnij \"Obciąż\" aby rozpocząć płatność\n3. Klient przykłada urządzenie NFC, aby przesłać płatność\n4. Monitorowanie w czasie rzeczywistym potwierdza transakcję\n5. Komunikat \"Zatwierdzono\" z linkiem do eksploratora bloków\n\n### **Historia transakcji**\n1. Naciśnij przycisk 📜 historii na klawiaturze\n2. Przeglądaj wszystkie transakcje lub zeskanuj portfel, aby zobaczyć konkretną historię\n3. Naciśnij \"📱 Skanuj portfel po historię\" i poproś klienta o przyłożenie urządzenia\n4. Przeglądaj przefiltrowane transakcje dla tego konkretnego portfela\n\n\n## 🔄 Przepływ płatności\n\n1. **Wykrycie NFC** → Klient przykłada urządzenie\n2. **Pobieranie Multi-Chain** → Analiza portfela na wszystkich 6 łańcuchach\n3. **Inteligentny wybór** → Optymalny token płatności na podstawie systemu priorytetów\n4. **Generowanie EIP-681** → Żądanie płatności z ID łańcucha\n5. **Monitorowanie w czasie rzeczywistym** → WebSocket/polling dla potwierdzenia transakcji\n6. **Rejestrowanie historii** → Transakcja zapisana z pełnymi metadanymi",
    "Status": "ok"
  },
  {
    "Id": 5,
    "Content": "## 🛡️ Transaction Monitoring\n\n- **WebSocket monitoring** for Ethereum, Base, Arbitrum, Optimism, Polygon\n- **Polling-based monitoring** fallback\n- **Automatic timeout** after 5 minutes\n- **Block explorer integration** for transaction verification\n- **Status tracking**: detected → confirmed → failed\n\n## 🍓 Raspberry Pi Deployment\n\nThis NFC payment terminal can be deployed as a **plug-and-play kiosk** on Raspberry Pi hardware for production use.\n\n### **Hardware Requirements**\n- Raspberry Pi 4B (4GB+ RAM recommended)\n- 7\" Official Raspberry Pi Touchscreen \n- **ACR1252U-M1 NFC Reader** (specifically supported)\n- 32GB+ MicroSD card\n\n### **Deployment Features**\n- **One-command build** creates bootable SD card image\n- **Pre-configured WiFi** and API credentials\n- **Automatic startup** with fullscreen kiosk mode\n- **Safety validation** prevents deployment with test addresses\n- **macOS and Linux** build support\n",
    "ContentSha": "XdVLIkLEQWeuUPlp6VBY6ilx0Ub2e+rAJocpc3rs/o0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🛡️ Monitorowanie transakcji\n\n- **Monitorowanie WebSocket** dla Ethereum, Base, Arbitrum, Optimism, Polygon\n- **Monitorowanie oparte na polling** jako alternatywa\n- **Automatyczny timeout** po 5 minutach\n- **Integracja z eksploratorem bloków** do weryfikacji transakcji\n- **Śledzenie statusu**: wykryto → potwierdzono → niepowodzenie\n\n## 🍓 Wdrażanie na Raspberry Pi\n\nTen terminal płatności NFC może być wdrożony jako **kiosk plug-and-play** na sprzęcie Raspberry Pi do zastosowań produkcyjnych.\n\n### **Wymagania sprzętowe**\n- Raspberry Pi 4B (zalecane 4GB+ RAM)\n- 7\" Oficjalny ekran dotykowy Raspberry Pi \n- **Czytnik NFC ACR1252U-M1** (obsługiwany specjalnie)\n- Karta MicroSD 32GB lub większa\n\n### **Funkcje wdrożeniowe**\n- **Budowa jednym poleceniem** tworzy rozruchowy obraz karty SD\n- **Wstępnie skonfigurowane WiFi** i dane uwierzytelniające API\n- **Automatyczny start** w trybie pełnoekranowego kiosku\n- **Weryfikacja bezpieczeństwa** uniemożliwia wdrożenie z adresami testowymi\n- Wsparcie budowania dla **macOS i Linux**",
    "Status": "ok"
  },
  {
    "Id": 6,
    "Content": "### **Quick Deploy**\n```bash\n# Navigate to deployment scripts\ncd scripts/rpi-deploy\n\n# Configure your deployment\ncp build-config.env.template build-config.env\n# Edit build-config.env with your WiFi, API key, and merchant address\n\n# Build bootable image (macOS)\n./build-pi-image-osx.sh\n\n# Flash the generated nfc-terminal-<date>.img.gz file to SD card using Raspberry Pi Imager and boot!\n```\n\n📖 **[Complete Deployment Guide](https://raw.githubusercontent.com/FreePayPOS/merchant-app/main/README-DEPLOYMENT.md)**",
    "ContentSha": "Z2ZdzeK6yogXFBnJoxqX4X4pfTcqnhfaN2ORjo58Gz4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### **Szybkie wdrożenie**\n```bash\n# Przejdź do skryptów wdrożeniowych\ncd scripts/rpi-deploy\n\n# Skonfiguruj swoje wdrożenie\ncp build-config.env.template build-config.env\n# Edytuj build-config.env, wpisując swoje dane WiFi, klucz API i adres punktu handlowego\n\n# Zbuduj obraz startowy (macOS)\n./build-pi-image-osx.sh\n\n# Wgraj wygenerowany plik nfc-terminal-<date>.img.gz na kartę SD za pomocą Raspberry Pi Imager i uruchom!\n```\n\n📖 **[Kompletny przewodnik wdrożeniowy](https://raw.githubusercontent.com/FreePayPOS/merchant-app/main/README-DEPLOYMENT.md)**",
    "Status": "ok"
  }
]