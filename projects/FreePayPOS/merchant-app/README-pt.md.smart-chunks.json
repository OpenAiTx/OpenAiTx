[
  {
    "Id": 1,
    "Content": "# NFC Payment Terminal\n\nA multi-chain NFC payment terminal that processes cryptocurrency payments across 5 blockchain networks with real-time transaction monitoring and comprehensive history tracking.\n\n## 🌐 Supported Networks\n\n- **Ethereum**\n- **Base** \n- **Arbitrum** \n- **Optimism** \n- **Polygon** \n\n### 🎯 **Smart Payment Priority**\n\nRather than negotiate a chain / token combo with the merchant, the payment terminal handles it automatically. First it figures out a chain the merchant supports that you also have funds on, then sends a transaction with ETH or an ERC-20 token with this priority:\n\n```\nL2 Stablecoin > L2 Other > L2 ETH > L1 Stablecoin > L1 Other > L1 ETH\n```\n",
    "ContentSha": "pdIyU9KX6ZphRLpxoyda1sRftUwWiV0igELr5zBYMGE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# Terminal de Pagamento NFC\n\nUm terminal de pagamento NFC multi-chain que processa pagamentos em criptomoedas através de 5 redes blockchain com monitoramento de transações em tempo real e rastreamento histórico abrangente.\n\n## 🌐 Redes Suportadas\n\n- **Ethereum**\n- **Base**\n- **Arbitrum**\n- **Optimism**\n- **Polygon**\n\n### 🎯 **Prioridade Inteligente de Pagamento**\n\nEm vez de negociar uma combinação de rede/token com o comerciante, o terminal de pagamento lida com isso automaticamente. Primeiro, ele identifica uma rede suportada pelo comerciante na qual você também possui fundos e, em seguida, envia uma transação com ETH ou um token ERC-20 seguindo esta prioridade:\n\n```\nStablecoin em L2 > Outros em L2 > ETH em L2 > Stablecoin em L1 > Outros em L1 > ETH em L1\n```",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "## 🚀 Quick Start\n\n1. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n2. **Environment setup:**\n   ```bash\n   echo \"ALCHEMY_API_KEY=your_alchemy_api_key_here\" > .env\n   ```\n\n3. **Run the terminal:**\n   ```bash\n   npm start\n   ```\n\n4. **Open the interface:**\n   Navigate to `http://localhost:3000`\n",
    "ContentSha": "Zi/hDUmVO5J5r0t5RPo1wkWQhfLFV+cY4pN8Y6VAVX0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🚀 Início Rápido\n\n1. **Instale as dependências:**\n   ```bash\n   npm install\n   ```\n\n2. **Configuração do ambiente:**\n   ```bash\n   echo \"ALCHEMY_API_KEY=your_alchemy_api_key_here\" > .env\n   ```\n\n3. **Execute o terminal:**\n   ```bash\n   npm start\n   ```\n\n4. **Abra a interface:**\n   Navegue até `http://localhost:3000`\n",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "## 🏗️ Architecture\n\n```\nsrc/\n├── server.ts                   # Express server & WebSocket handler\n├── app.ts                     # Main application orchestrator\n├── web/index.html             # Payment terminal UI\n├── config/index.ts            # Multi-chain configuration\n└── services/\n    ├── nfcService.ts          # NFC reader & wallet scanning\n    ├── alchemyService.ts      # Multi-chain balance & monitoring\n    ├── paymentService.ts      # Payment selection & EIP-681 generation\n    ├── ethereumService.ts     # Address validation utilities\n    └── addressProcessor.ts    # Duplicate processing prevention\nscripts/\n└── rpi-deploy/\n    ├── setup-build-environment.sh  # Install dependencies to allow building a Raspberry Pi image\n    └── build-pi-image-osx.sh       # Build a Raspberry Pi image\n```\n",
    "ContentSha": "g4uwm9UnsnRyY1+SOvBPNyQsRnRkAcLl+l3LqQCo880=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🏗️ Arquitetura\n\n```\nsrc/\n├── server.ts                   # Servidor Express & manipulador WebSocket\n├── app.ts                      # Orquestrador principal da aplicação\n├── web/index.html              # Interface do terminal de pagamento\n├── config/index.ts             # Configuração multi-chain\n└── services/\n    ├── nfcService.ts           # Leitor NFC & leitura de carteira\n    ├── alchemyService.ts       # Saldo multi-chain & monitoramento\n    ├── paymentService.ts       # Seleção de pagamento & geração EIP-681\n    ├── ethereumService.ts      # Utilitários de validação de endereço\n    └── addressProcessor.ts     # Prevenção de processamento duplicado\nscripts/\n└── rpi-deploy/\n    ├── setup-build-environment.sh  # Instala dependências para permitir a construção de uma imagem do Raspberry Pi\n    └── build-pi-image-osx.sh       # Constrói uma imagem do Raspberry Pi\n```",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "## 💡 Usage\n\n### **Processing Payments**\n1. Enter amount using the keypad (cents-based: \"150\" = $1.50)\n2. Tap \"Charge\" to initiate payment\n3. Customer taps NFC device to send payment\n4. Real-time monitoring confirms transaction\n5. \"Approved\" message with block explorer link\n\n### **Transaction History**\n1. Tap the 📜 history button on the keypad\n2. View all transactions or scan a wallet for specific history\n3. Tap \"📱 Scan Wallet for History\" and have customer tap their device\n4. Browse filtered transactions for that specific wallet\n\n\n## 🔄 Payment Flow\n\n1. **NFC Detection** → Customer taps device\n2. **Multi-Chain Fetching** → Portfolio analysis across all 6 chains\n3. **Smart Selection** → Optimal payment token based on priority system\n4. **EIP-681 Generation** → Payment request with chain ID\n5. **Real-Time Monitoring** → WebSocket/polling for transaction confirmation\n6. **History Logging** → Transaction stored with full metadata\n",
    "ContentSha": "J+WGDWPeAjl7sIlurfkYZDcwzRuMaTiHoAD9A+uQ8K0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 💡 Uso\n\n### **Processamento de Pagamentos**\n1. Digite o valor usando o teclado (base em centavos: \"150\" = R$1,50)\n2. Toque em \"Cobrar\" para iniciar o pagamento\n3. O cliente aproxima o dispositivo NFC para enviar o pagamento\n4. Monitoramento em tempo real confirma a transação\n5. Mensagem \"Aprovado\" com link para o explorador de blocos\n\n### **Histórico de Transações**\n1. Toque no botão 📜 de histórico no teclado\n2. Veja todas as transações ou escaneie uma carteira para histórico específico\n3. Toque em \"📱 Escanear Carteira para Histórico\" e peça para o cliente aproximar o dispositivo\n4. Navegue pelas transações filtradas para essa carteira específica\n\n\n## 🔄 Fluxo de Pagamento\n\n1. **Detecção NFC** → Cliente aproxima o dispositivo\n2. **Busca Multi-Chain** → Análise de portfólio em todas as 6 redes\n3. **Seleção Inteligente** → Token de pagamento ideal com base no sistema de prioridade\n4. **Geração EIP-681** → Solicitação de pagamento com ID da rede\n5. **Monitoramento em Tempo Real** → WebSocket/polling para confirmação da transação\n6. **Registro no Histórico** → Transação armazenada com metadados completos",
    "Status": "ok"
  },
  {
    "Id": 5,
    "Content": "## 🛡️ Transaction Monitoring\n\n- **WebSocket monitoring** for Ethereum, Base, Arbitrum, Optimism, Polygon\n- **Polling-based monitoring** fallback\n- **Automatic timeout** after 5 minutes\n- **Block explorer integration** for transaction verification\n- **Status tracking**: detected → confirmed → failed\n\n## 🍓 Raspberry Pi Deployment\n\nThis NFC payment terminal can be deployed as a **plug-and-play kiosk** on Raspberry Pi hardware for production use.\n\n### **Hardware Requirements**\n- Raspberry Pi 4B (4GB+ RAM recommended)\n- 7\" Official Raspberry Pi Touchscreen \n- **ACR1252U-M1 NFC Reader** (specifically supported)\n- 32GB+ MicroSD card\n\n### **Deployment Features**\n- **One-command build** creates bootable SD card image\n- **Pre-configured WiFi** and API credentials\n- **Automatic startup** with fullscreen kiosk mode\n- **Safety validation** prevents deployment with test addresses\n- **macOS and Linux** build support\n",
    "ContentSha": "XdVLIkLEQWeuUPlp6VBY6ilx0Ub2e+rAJocpc3rs/o0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🛡️ Monitoramento de Transações\n\n- **Monitoramento via WebSocket** para Ethereum, Base, Arbitrum, Optimism, Polygon\n- **Monitoramento baseado em polling** como alternativa\n- **Timeout automático** após 5 minutos\n- **Integração com explorador de blocos** para verificação de transações\n- **Rastreamento de status**: detectada → confirmada → falhou\n\n## 🍓 Implantação no Raspberry Pi\n\nEste terminal de pagamento NFC pode ser implantado como um **quiosque plug-and-play** em hardware Raspberry Pi para uso em produção.\n\n### **Requisitos de Hardware**\n- Raspberry Pi 4B (recomendado 4GB+ RAM)\n- Tela sensível ao toque oficial de 7\" do Raspberry Pi \n- **Leitor NFC ACR1252U-M1** (especificamente suportado)\n- Cartão MicroSD de 32GB ou mais\n\n### **Recursos de Implantação**\n- **Build com um comando** cria uma imagem de cartão SD inicializável\n- **WiFi pré-configurado** e credenciais de API\n- **Inicialização automática** com modo quiosque em tela cheia\n- **Validação de segurança** impede implantação com endereços de teste\n- Suporte a build em **macOS e Linux**",
    "Status": "ok"
  },
  {
    "Id": 6,
    "Content": "### **Quick Deploy**\n```bash\n# Navigate to deployment scripts\ncd scripts/rpi-deploy\n\n# Configure your deployment\ncp build-config.env.template build-config.env\n# Edit build-config.env with your WiFi, API key, and merchant address\n\n# Build bootable image (macOS)\n./build-pi-image-osx.sh\n\n# Flash the generated nfc-terminal-<date>.img.gz file to SD card using Raspberry Pi Imager and boot!\n```\n\n📖 **[Complete Deployment Guide](https://raw.githubusercontent.com/FreePayPOS/merchant-app/main/README-DEPLOYMENT.md)**",
    "ContentSha": "Z2ZdzeK6yogXFBnJoxqX4X4pfTcqnhfaN2ORjo58Gz4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### **Implantação Rápida**\n```bash\n# Navegue até os scripts de implantação\ncd scripts/rpi-deploy\n\n# Configure sua implantação\ncp build-config.env.template build-config.env\n# Edite o build-config.env com seu WiFi, chave de API e endereço do comerciante\n\n# Construa a imagem inicializável (macOS)\n./build-pi-image-osx.sh\n\n# Grave o arquivo gerado nfc-terminal-<date>.img.gz no cartão SD usando o Raspberry Pi Imager e inicialize!\n```\n\n📖 **[Guia Completo de Implantação](https://raw.githubusercontent.com/FreePayPOS/merchant-app/main/README-DEPLOYMENT.md)**",
    "Status": "ok"
  }
]