[
  {
    "Id": 1,
    "Content": "# NFC Payment Terminal\n\nA multi-chain NFC payment terminal that processes cryptocurrency payments across 5 blockchain networks with real-time transaction monitoring and comprehensive history tracking.\n\n## 🌐 Supported Networks\n\n- **Ethereum**\n- **Base** \n- **Arbitrum** \n- **Optimism** \n- **Polygon** \n\n### 🎯 **Smart Payment Priority**\n\nRather than negotiate a chain / token combo with the merchant, the payment terminal handles it automatically. First it figures out a chain the merchant supports that you also have funds on, then sends a transaction with ETH or an ERC-20 token with this priority:\n\n```\nL2 Stablecoin > L2 Other > L2 ETH > L1 Stablecoin > L1 Other > L1 ETH\n```\n",
    "ContentSha": "pdIyU9KX6ZphRLpxoyda1sRftUwWiV0igELr5zBYMGE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# NFC支付终端\n\n一个多链NFC支付终端，可处理5个区块链网络的加密货币支付，具备实时交易监控和全面历史追踪功能。\n\n## 🌐 支持的网络\n\n- **以太坊（Ethereum）**\n- **Base** \n- **Arbitrum** \n- **Optimism** \n- **Polygon** \n\n### 🎯 **智能支付优先级**\n\n无需与商户协商链/代币组合，支付终端会自动处理。它会首先确定一个商户支持且你也有资金的链，然后按照以下优先级用ETH或ERC-20代币发起交易：\n\n```\nL2 稳定币 > L2 其他 > L2 ETH > L1 稳定币 > L1 其他 > L1 ETH\n```",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "## 🚀 Quick Start\n\n1. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n2. **Environment setup:**\n   ```bash\n   echo \"ALCHEMY_API_KEY=your_alchemy_api_key_here\" > .env\n   ```\n\n3. **Run the terminal:**\n   ```bash\n   npm start\n   ```\n\n4. **Open the interface:**\n   Navigate to `http://localhost:3000`\n",
    "ContentSha": "Zi/hDUmVO5J5r0t5RPo1wkWQhfLFV+cY4pN8Y6VAVX0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🚀 快速开始\n\n1. **安装依赖：**\n   ```bash\n   npm install\n   ```\n\n2. **环境配置：**\n   ```bash\n   echo \"ALCHEMY_API_KEY=your_alchemy_api_key_here\" > .env\n   ```\n\n3. **运行终端：**\n   ```bash\n   npm start\n   ```\n\n4. **打开界面：**\n   访问 `http://localhost:3000`\n",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "## 🏗️ Architecture\n\n```\nsrc/\n├── server.ts                   # Express server & WebSocket handler\n├── app.ts                     # Main application orchestrator\n├── web/index.html             # Payment terminal UI\n├── config/index.ts            # Multi-chain configuration\n└── services/\n    ├── nfcService.ts          # NFC reader & wallet scanning\n    ├── alchemyService.ts      # Multi-chain balance & monitoring\n    ├── paymentService.ts      # Payment selection & EIP-681 generation\n    ├── ethereumService.ts     # Address validation utilities\n    └── addressProcessor.ts    # Duplicate processing prevention\nscripts/\n└── rpi-deploy/\n    ├── setup-build-environment.sh  # Install dependencies to allow building a Raspberry Pi image\n    └── build-pi-image-osx.sh       # Build a Raspberry Pi image\n```\n",
    "ContentSha": "g4uwm9UnsnRyY1+SOvBPNyQsRnRkAcLl+l3LqQCo880=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🏗️ 架构\n\n```\nsrc/\n├── server.ts                   # Express 服务器 & WebSocket 处理器\n├── app.ts                      # 主应用程序协调器\n├── web/index.html              # 支付终端界面\n├── config/index.ts             # 多链配置\n└── services/\n    ├── nfcService.ts           # NFC 读卡器 & 钱包扫描\n    ├── alchemyService.ts       # 多链余额 & 监控\n    ├── paymentService.ts       # 支付选择 & EIP-681 生成\n    ├── ethereumService.ts      # 地址验证工具\n    └── addressProcessor.ts     # 防止重复处理\nscripts/\n└── rpi-deploy/\n    ├── setup-build-environment.sh  # 安装依赖以支持构建树莓派镜像\n    └── build-pi-image-osx.sh       # 构建树莓派镜像\n```\n",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "## 💡 Usage\n\n### **Processing Payments**\n1. Enter amount using the keypad (cents-based: \"150\" = $1.50)\n2. Tap \"Charge\" to initiate payment\n3. Customer taps NFC device to send payment\n4. Real-time monitoring confirms transaction\n5. \"Approved\" message with block explorer link\n\n### **Transaction History**\n1. Tap the 📜 history button on the keypad\n2. View all transactions or scan a wallet for specific history\n3. Tap \"📱 Scan Wallet for History\" and have customer tap their device\n4. Browse filtered transactions for that specific wallet\n\n\n## 🔄 Payment Flow\n\n1. **NFC Detection** → Customer taps device\n2. **Multi-Chain Fetching** → Portfolio analysis across all 6 chains\n3. **Smart Selection** → Optimal payment token based on priority system\n4. **EIP-681 Generation** → Payment request with chain ID\n5. **Real-Time Monitoring** → WebSocket/polling for transaction confirmation\n6. **History Logging** → Transaction stored with full metadata\n",
    "ContentSha": "J+WGDWPeAjl7sIlurfkYZDcwzRuMaTiHoAD9A+uQ8K0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 💡 使用方法\n\n### **处理支付**\n1. 使用键盘输入金额（以分为单位：\"150\" = ¥1.50）\n2. 点击“收款”以发起支付\n3. 顾客将NFC设备轻触以发送支付\n4. 实时监控确认交易\n5. 显示“已批准”消息并附带区块浏览器链接\n\n### **交易历史**\n1. 在键盘上点击📜历史按钮\n2. 查看所有交易，或扫描钱包以获取特定历史记录\n3. 点击“📱扫描钱包查看历史”，让顾客轻触他们的设备\n4. 浏览该特定钱包的筛选交易记录\n\n\n## 🔄 支付流程\n\n1. **NFC检测** → 顾客轻触设备\n2. **多链查询** → 跨6条链的资产组合分析\n3. **智能选择** → 基于优先级系统的最优支付代币\n4. **EIP-681生成** → 带链ID的支付请求\n5. **实时监控** → 通过WebSocket/轮询方式确认交易\n6. **历史记录** → 交易及全部元数据被保存",
    "Status": "ok"
  },
  {
    "Id": 5,
    "Content": "## 🛡️ Transaction Monitoring\n\n- **WebSocket monitoring** for Ethereum, Base, Arbitrum, Optimism, Polygon\n- **Polling-based monitoring** fallback\n- **Automatic timeout** after 5 minutes\n- **Block explorer integration** for transaction verification\n- **Status tracking**: detected → confirmed → failed\n\n## 🍓 Raspberry Pi Deployment\n\nThis NFC payment terminal can be deployed as a **plug-and-play kiosk** on Raspberry Pi hardware for production use.\n\n### **Hardware Requirements**\n- Raspberry Pi 4B (4GB+ RAM recommended)\n- 7\" Official Raspberry Pi Touchscreen \n- **ACR1252U-M1 NFC Reader** (specifically supported)\n- 32GB+ MicroSD card\n\n### **Deployment Features**\n- **One-command build** creates bootable SD card image\n- **Pre-configured WiFi** and API credentials\n- **Automatic startup** with fullscreen kiosk mode\n- **Safety validation** prevents deployment with test addresses\n- **macOS and Linux** build support\n",
    "ContentSha": "XdVLIkLEQWeuUPlp6VBY6ilx0Ub2e+rAJocpc3rs/o0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🛡️ 交易监控\n\n- 针对 Ethereum、Base、Arbitrum、Optimism、Polygon 的 **WebSocket 监控**\n- **基于轮询的监控** 作为备选\n- **自动超时**，5 分钟后触发\n- **区块浏览器集成** 用于交易验证\n- **状态跟踪**：已检测 → 已确认 → 失败\n\n## 🍓 树莓派部署\n\n该 NFC 支付终端可作为**即插即用自助机**在树莓派硬件上进行生产部署。\n\n### **硬件要求**\n- 树莓派 4B（推荐 4GB 及以上内存）\n- 7 英寸官方树莓派触摸屏\n- **ACR1252U-M1 NFC 读卡器**（专门支持）\n- 32GB 及以上 MicroSD 卡\n\n### **部署特性**\n- **一键构建**，生成可启动的 SD 卡镜像\n- **预配置 WiFi** 和 API 凭证\n- **自动启动**，全屏自助机模式\n- **安全验证**，防止使用测试地址部署\n- **支持 macOS 和 Linux** 构建",
    "Status": "ok"
  },
  {
    "Id": 6,
    "Content": "### **Quick Deploy**\n```bash\n# Navigate to deployment scripts\ncd scripts/rpi-deploy\n\n# Configure your deployment\ncp build-config.env.template build-config.env\n# Edit build-config.env with your WiFi, API key, and merchant address\n\n# Build bootable image (macOS)\n./build-pi-image-osx.sh\n\n# Flash the generated nfc-terminal-<date>.img.gz file to SD card using Raspberry Pi Imager and boot!\n```\n\n📖 **[Complete Deployment Guide](https://raw.githubusercontent.com/FreePayPOS/merchant-app/main/README-DEPLOYMENT.md)**",
    "ContentSha": "Z2ZdzeK6yogXFBnJoxqX4X4pfTcqnhfaN2ORjo58Gz4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### **快速部署**\n```bash\n# 进入部署脚本目录\ncd scripts/rpi-deploy\n\n# 配置你的部署环境\ncp build-config.env.template build-config.env\n# 用你的 WiFi、API 密钥和商户地址编辑 build-config.env 文件\n\n# 构建可启动镜像（macOS）\n./build-pi-image-osx.sh\n\n# 使用 Raspberry Pi Imager 将生成的 nfc-terminal-<date>.img.gz 文件写入 SD 卡并启动！\n```\n\n📖 **[完整部署指南](https://raw.githubusercontent.com/FreePayPOS/merchant-app/main/README-DEPLOYMENT.md)**",
    "Status": "ok"
  }
]