[
  {
    "Id": 1,
    "Content": "# NFC Payment Terminal\n\nA multi-chain NFC payment terminal that processes cryptocurrency payments across 5 blockchain networks with real-time transaction monitoring and comprehensive history tracking.\n\n## 🌐 Supported Networks\n\n- **Ethereum**\n- **Base** \n- **Arbitrum** \n- **Optimism** \n- **Polygon** \n\n### 🎯 **Smart Payment Priority**\n\nRather than negotiate a chain / token combo with the merchant, the payment terminal handles it automatically. First it figures out a chain the merchant supports that you also have funds on, then sends a transaction with ETH or an ERC-20 token with this priority:\n\n```\nL2 Stablecoin > L2 Other > L2 ETH > L1 Stablecoin > L1 Other > L1 ETH\n```\n",
    "ContentSha": "pdIyU9KX6ZphRLpxoyda1sRftUwWiV0igELr5zBYMGE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# Terminal de Paiement NFC\n\nUn terminal de paiement NFC multi-chaînes qui traite les paiements en cryptomonnaies sur 5 réseaux blockchain avec une surveillance des transactions en temps réel et un suivi complet de l’historique.\n\n## 🌐 Réseaux Pris en Charge\n\n- **Ethereum**\n- **Base**\n- **Arbitrum**\n- **Optimism**\n- **Polygon**\n\n### 🎯 **Priorité de Paiement Intelligente**\n\nAu lieu de négocier une combinaison chaîne / jeton avec le commerçant, le terminal de paiement s’en charge automatiquement. Il identifie d’abord une chaîne prise en charge par le commerçant sur laquelle vous disposez également de fonds, puis envoie une transaction en ETH ou en jeton ERC-20 selon cette priorité :\n\n```\nStablecoin L2 > Autre L2 > ETH L2 > Stablecoin L1 > Autre L1 > ETH L1\n```",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "## 🚀 Quick Start\n\n1. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n2. **Environment setup:**\n   ```bash\n   echo \"ALCHEMY_API_KEY=your_alchemy_api_key_here\" > .env\n   ```\n\n3. **Run the terminal:**\n   ```bash\n   npm start\n   ```\n\n4. **Open the interface:**\n   Navigate to `http://localhost:3000`\n",
    "ContentSha": "Zi/hDUmVO5J5r0t5RPo1wkWQhfLFV+cY4pN8Y6VAVX0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🚀 Démarrage rapide\n\n1. **Installer les dépendances :**\n   ```bash\n   npm install\n   ```\n\n2. **Configuration de l'environnement :**\n   ```bash\n   echo \"ALCHEMY_API_KEY=your_alchemy_api_key_here\" > .env\n   ```\n\n3. **Lancer le terminal :**\n   ```bash\n   npm start\n   ```\n\n4. **Ouvrir l'interface :**\n   Rendez-vous sur `http://localhost:3000`",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "## 🏗️ Architecture\n\n```\nsrc/\n├── server.ts                   # Express server & WebSocket handler\n├── app.ts                     # Main application orchestrator\n├── web/index.html             # Payment terminal UI\n├── config/index.ts            # Multi-chain configuration\n└── services/\n    ├── nfcService.ts          # NFC reader & wallet scanning\n    ├── alchemyService.ts      # Multi-chain balance & monitoring\n    ├── paymentService.ts      # Payment selection & EIP-681 generation\n    ├── ethereumService.ts     # Address validation utilities\n    └── addressProcessor.ts    # Duplicate processing prevention\nscripts/\n└── rpi-deploy/\n    ├── setup-build-environment.sh  # Install dependencies to allow building a Raspberry Pi image\n    └── build-pi-image-osx.sh       # Build a Raspberry Pi image\n```\n",
    "ContentSha": "g4uwm9UnsnRyY1+SOvBPNyQsRnRkAcLl+l3LqQCo880=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🏗️ Architecture\n\n```\nsrc/\n├── server.ts                   # Serveur Express & gestionnaire WebSocket\n├── app.ts                      # Orchestrateur principal de l'application\n├── web/index.html              # Interface utilisateur du terminal de paiement\n├── config/index.ts             # Configuration multi-chaînes\n└── services/\n    ├── nfcService.ts           # Lecteur NFC & scan de portefeuille\n    ├── alchemyService.ts       # Solde multi-chaînes & surveillance\n    ├── paymentService.ts       # Sélection de paiement & génération EIP-681\n    ├── ethereumService.ts      # Utilitaires de validation d'adresse\n    └── addressProcessor.ts     # Prévention du traitement des doublons\nscripts/\n└── rpi-deploy/\n    ├── setup-build-environment.sh  # Installer les dépendances pour permettre la création d'une image Raspberry Pi\n    └── build-pi-image-osx.sh       # Créer une image Raspberry Pi\n```",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "## 💡 Usage\n\n### **Processing Payments**\n1. Enter amount using the keypad (cents-based: \"150\" = $1.50)\n2. Tap \"Charge\" to initiate payment\n3. Customer taps NFC device to send payment\n4. Real-time monitoring confirms transaction\n5. \"Approved\" message with block explorer link\n\n### **Transaction History**\n1. Tap the 📜 history button on the keypad\n2. View all transactions or scan a wallet for specific history\n3. Tap \"📱 Scan Wallet for History\" and have customer tap their device\n4. Browse filtered transactions for that specific wallet\n\n\n## 🔄 Payment Flow\n\n1. **NFC Detection** → Customer taps device\n2. **Multi-Chain Fetching** → Portfolio analysis across all 6 chains\n3. **Smart Selection** → Optimal payment token based on priority system\n4. **EIP-681 Generation** → Payment request with chain ID\n5. **Real-Time Monitoring** → WebSocket/polling for transaction confirmation\n6. **History Logging** → Transaction stored with full metadata\n",
    "ContentSha": "J+WGDWPeAjl7sIlurfkYZDcwzRuMaTiHoAD9A+uQ8K0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 💡 Utilisation\n\n### **Traitement des paiements**\n1. Saisissez le montant à l'aide du pavé numérique (en centimes : \"150\" = 1,50 $)\n2. Appuyez sur \"Charger\" pour lancer le paiement\n3. Le client approche son appareil NFC pour effectuer le paiement\n4. La surveillance en temps réel confirme la transaction\n5. Message \"Approuvé\" avec lien vers l’explorateur de blocs\n\n### **Historique des transactions**\n1. Appuyez sur le bouton 📜 historique du pavé numérique\n2. Consultez toutes les transactions ou scannez un portefeuille pour un historique spécifique\n3. Appuyez sur \"📱 Scanner le portefeuille pour l’historique\" et demandez au client d’approcher son appareil\n4. Parcourez les transactions filtrées pour ce portefeuille spécifique\n\n\n## 🔄 Flux de paiement\n\n1. **Détection NFC** → Le client approche son appareil\n2. **Récupération multi-chaînes** → Analyse du portefeuille sur les 6 chaînes\n3. **Sélection intelligente** → Jeton de paiement optimal selon le système de priorité\n4. **Génération EIP-681** → Demande de paiement avec ID de chaîne\n5. **Surveillance en temps réel** → WebSocket/interrogation pour confirmation de transaction\n6. **Enregistrement de l’historique** → Transaction enregistrée avec toutes les métadonnées",
    "Status": "ok"
  },
  {
    "Id": 5,
    "Content": "## 🛡️ Transaction Monitoring\n\n- **WebSocket monitoring** for Ethereum, Base, Arbitrum, Optimism, Polygon\n- **Polling-based monitoring** fallback\n- **Automatic timeout** after 5 minutes\n- **Block explorer integration** for transaction verification\n- **Status tracking**: detected → confirmed → failed\n\n## 🍓 Raspberry Pi Deployment\n\nThis NFC payment terminal can be deployed as a **plug-and-play kiosk** on Raspberry Pi hardware for production use.\n\n### **Hardware Requirements**\n- Raspberry Pi 4B (4GB+ RAM recommended)\n- 7\" Official Raspberry Pi Touchscreen \n- **ACR1252U-M1 NFC Reader** (specifically supported)\n- 32GB+ MicroSD card\n\n### **Deployment Features**\n- **One-command build** creates bootable SD card image\n- **Pre-configured WiFi** and API credentials\n- **Automatic startup** with fullscreen kiosk mode\n- **Safety validation** prevents deployment with test addresses\n- **macOS and Linux** build support\n",
    "ContentSha": "XdVLIkLEQWeuUPlp6VBY6ilx0Ub2e+rAJocpc3rs/o0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## 🛡️ Surveillance des Transactions\n\n- **Surveillance WebSocket** pour Ethereum, Base, Arbitrum, Optimism, Polygon\n- **Surveillance par sondage** en mode de secours\n- **Délai d’expiration automatique** après 5 minutes\n- **Intégration avec des explorateurs de blocs** pour la vérification des transactions\n- **Suivi du statut** : détectée → confirmée → échouée\n\n## 🍓 Déploiement sur Raspberry Pi\n\nCe terminal de paiement NFC peut être déployé comme un **kiosque plug-and-play** sur du matériel Raspberry Pi pour une utilisation en production.\n\n### **Exigences Matérielles**\n- Raspberry Pi 4B (4 Go+ de RAM recommandés)\n- Écran tactile officiel Raspberry Pi 7\"\n- **Lecteur NFC ACR1252U-M1** (spécifiquement pris en charge)\n- Carte MicroSD 32 Go ou plus\n\n### **Fonctionnalités de Déploiement**\n- **Construction en une commande** pour créer une image SD amorçable\n- **WiFi préconfiguré** et identifiants API\n- **Démarrage automatique** en mode kiosque plein écran\n- **Validation de sécurité** pour empêcher le déploiement avec des adresses de test\n- Prise en charge de la construction sur **macOS et Linux**",
    "Status": "ok"
  },
  {
    "Id": 6,
    "Content": "### **Quick Deploy**\n```bash\n# Navigate to deployment scripts\ncd scripts/rpi-deploy\n\n# Configure your deployment\ncp build-config.env.template build-config.env\n# Edit build-config.env with your WiFi, API key, and merchant address\n\n# Build bootable image (macOS)\n./build-pi-image-osx.sh\n\n# Flash the generated nfc-terminal-<date>.img.gz file to SD card using Raspberry Pi Imager and boot!\n```\n\n📖 **[Complete Deployment Guide](https://raw.githubusercontent.com/FreePayPOS/merchant-app/main/README-DEPLOYMENT.md)**",
    "ContentSha": "Z2ZdzeK6yogXFBnJoxqX4X4pfTcqnhfaN2ORjo58Gz4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### **Déploiement Rapide**\n```bash\n# Accédez aux scripts de déploiement\ncd scripts/rpi-deploy\n\n# Configurez votre déploiement\ncp build-config.env.template build-config.env\n# Modifiez build-config.env avec votre WiFi, clé API et adresse du commerçant\n\n# Construisez l'image bootable (macOS)\n./build-pi-image-osx.sh\n\n# Flashez le fichier nfc-terminal-<date>.img.gz généré sur la carte SD à l'aide de Raspberry Pi Imager et démarrez !\n```\n\n📖 **[Guide de Déploiement Complet](https://raw.githubusercontent.com/FreePayPOS/merchant-app/main/README-DEPLOYMENT.md)**",
    "Status": "ok"
  }
]