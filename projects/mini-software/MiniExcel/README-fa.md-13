{
  "id": 13,
  "origin": "    };\n    MiniExcel.Insert(path, value);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png)\n\nv1.37.0 support excel insert a new sheet into an existing workbook\n\n```csharp\n// Origin excel\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value, sheetName: \"Sheet1\");\n}\n// Insert a new sheet\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, table, sheetName: \"Sheet2\");\n}\n```\n\n\n\n#### Delete(waiting)\n\n#### Update(waiting)\n\n\n\n### Excel Type Auto Check <a name=\"getstart5\"></a>\n\n- MiniExcel will check whether it is xlsx or csv based on the `file extension` by default, but there may be inaccuracy, please specify it manually.\n- Stream cannot be know from which excel, please specify it manually.\n\n```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//or\nstream.SaveAs(excelType:ExcelType.XLSX);\n//or\nstream.Query(excelType:ExcelType.CSV);\n//or\nstream.Query(excelType:ExcelType.XLSX);\n```\n\n\n\n\n\n### CSV\n\n#### Note\n\n- Default return `string` type, and value will not be converted to numbers or datetime, unless the type is defined by strong typing generic.\n\n\n\n#### Custom separator\n\nThe default is `,` as the separator, you can modify the `Seperator` property for customization\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\nSince V1.30.1 support function to custom separator (thanks @hyzx86)\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```\n\n\n\n#### Custom line break\n\nThe default is `\\r\\n` as the newline character, you can modify the `NewLine` property for customization\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\n\n\n#### Custom coding",
  "origin_sha": "L9HkLzxXU7FGwZczjCauQGs4SUPmaKDck6toO1yCteU=",
  "translate": "```csharp\n};\nMiniExcel.Insert(path, value);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png)\n\nنسخه v1.37.0 پشتیبانی از درج یک شیت جدید در یک ورک‌بوک اکسل موجود\n\n```csharp\n// اکسل اولیه\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value, sheetName: \"Sheet1\");\n}\n// درج یک شیت جدید\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, table, sheetName: \"Sheet2\");\n}\n```\n\n\n\n#### حذف (در انتظار)\n\n#### به‌روزرسانی (در انتظار)\n\n\n\n### بررسی خودکار نوع اکسل <a name=\"getstart5\"></a>\n\n- MiniExcel به طور پیش‌فرض بر اساس `پسوند فایل` بررسی می‌کند که xlsx باشد یا csv، اما ممکن است نادقیق باشد، لطفاً به صورت دستی مشخص کنید.\n- از روی Stream نوع اکسل قابل تشخیص نیست، لطفاً به صورت دستی مشخص کنید.\n\n```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//or\nstream.SaveAs(excelType:ExcelType.XLSX);\n//or\nstream.Query(excelType:ExcelType.CSV);\n//or\nstream.Query(excelType:ExcelType.XLSX);\n```\n\n\n\n\n\n### CSV\n\n#### نکته\n\n- به طور پیش‌فرض نوع بازگشتی `string` است و مقدار به عدد یا تاریخ تبدیل نخواهد شد، مگر اینکه نوع با استفاده از جنریک قوی تعریف شده باشد.\n\n\n\n#### جداکننده سفارشی\n\nجداکننده پیش‌فرض `,` است، می‌توانید ویژگی `Seperator` را برای سفارشی‌سازی تغییر دهید\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\nاز نسخه V1.30.1 تابعی برای جداکننده سفارشی پشتیبانی می‌شود (با تشکر از @hyzx86)\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```\n\n\n\n#### سطرشکن سفارشی\n\nپیش‌فرض `\\r\\n` به عنوان کاراکتر انتهای خط است، می‌توانید ویژگی `NewLine` را برای سفارشی‌سازی تغییر دهید\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\n\n\n#### کدگذاری سفارشی",
  "status": "ok"
}