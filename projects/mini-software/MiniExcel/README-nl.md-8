{
  "id": 8,
  "origin": "        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n//2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 3. Complex Data Fill\n\n> Note: Support multi-sheets and using same varible\n\nTemplate:\n\n![image](https://user-images.githubusercontent.com/12729184/114565255-acf0da00-9ca3-11eb-8a7f-8131b2265ae8.png)\n\nResult:\n\n![image](https://user-images.githubusercontent.com/12729184/114565329-bf6b1380-9ca3-11eb-85e3-3969e8bf6378.png)\n\n```csharp\n// 1. By POCO\nvar value = new\n{\n    title = \"FooCompany\",\n    managers = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    employees = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    [\"employees\"] = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n#### 4. Fill Big Data Performance\n\n> NOTE: Using IEnumerable deferred execution not ToList can save max memory usage in MiniExcel\n\n![image](https://user-images.githubusercontent.com/12729184/114577091-5046ec80-9cae-11eb-924b-087c7becf8da.png)\n\n\n\n#### 5. Cell value auto mapping type\n\nTemplate\n\n![image](https://user-images.githubusercontent.com/12729184/114802504-64830a80-9dd0-11eb-8d56-8e8c401b3ace.png)\n\nResult\n\n![image](https://user-images.githubusercontent.com/12729184/114802419-43221e80-9dd0-11eb-9ffe-a2ce34fe7076.png)\n\nClass\n\n```csharp\npublic class Poco\n{\n    public string @string { get; set; }\n    public int? @int { get; set; }",
  "origin_sha": "DfuU5hlb3ztcJkdbhsh6z5jYZi1n/2gMFW7hOjpKJ+c=",
  "translate": "new {name=\"Jack\",department=\"HR\"},\nnew {name=\"Lisa\",department=\"HR\"},\nnew {name=\"John\",department=\"HR\"},\nnew {name=\"Mike\",department=\"IT\"},\nnew {name=\"Neo\",department=\"IT\"},\nnew {name=\"Loan\",department=\"IT\"}\n}\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n//2. Met Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 3. Complexe gegevensvulling\n\n> Opmerking: Ondersteunt meerdere werkbladen en het gebruik van dezelfde variabele\n\nSjabloon:\n\n![image](https://user-images.githubusercontent.com/12729184/114565255-acf0da00-9ca3-11eb-8a7f-8131b2265ae8.png)\n\nResultaat:\n\n![image](https://user-images.githubusercontent.com/12729184/114565329-bf6b1380-9ca3-11eb-85e3-3969e8bf6378.png)\n\n```csharp\n// 1. Met POCO\nvar value = new\n{\n    title = \"FooCompany\",\n    managers = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    employees = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n// 2. Met Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    [\"employees\"] = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n#### 4. Grote hoeveelheden data vullen: prestaties\n\n> OPMERKING: Gebruik van IEnumerable uitgestelde uitvoering in plaats van ToList kan het maximale geheugengebruik besparen in MiniExcel\n\n![image](https://user-images.githubusercontent.com/12729184/114577091-5046ec80-9cae-11eb-924b-087c7becf8da.png)\n\n\n\n#### 5. Celwaarde automatische type-mapping\n\nSjabloon\n\n![image](https://user-images.githubusercontent.com/12729184/114802504-64830a80-9dd0-11eb-8d56-8e8c401b3ace.png)\n\nResultaat\n\n![image](https://user-images.githubusercontent.com/12729184/114802419-43221e80-9dd0-11eb-9ffe-a2ce34fe7076.png)\n\nKlasse\n\n```csharp\npublic class Poco\n{\n    public string @string { get; set; }\n    public int? @int { get; set; }",
  "status": "ok"
}