{
  "id": 3,
  "origin": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. Get Columns\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // get column count\n```\n\n#### 8. Dynamic Query cast row to `IDictionary<string,object>`\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// or\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// or Query specified ranges (capitalized)\n// A2 represents the second row of column A, C3 represents the third row of column C\n// If you don't want to restrict rows, just don't include numbers\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Query Excel return DataTable\n\nNot recommended, because DataTable will load all data into memory and lose MiniExcel's low memory consumption feature.\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Specify the cell to start reading data\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Fill Merged Cells\n\nNote: The efficiency is slower compared to `not using merge fill`\n\nReason: The OpenXml standard puts mergeCells at the bottom of the file, which leads to the need to foreach the sheetxml twice\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nsupport variable length and width multi-row and column filling\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Reading big file by disk-base cache (Disk-Base Cache - SharedString)\n\nIf the SharedStrings size exceeds 5 MB, MiniExcel default will use local disk cache, e.g, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(one million rows data), when disable disk cache the maximum memory usage is 195MB, but able disk cache only needs 65MB. Note, this optimization needs some efficiency cost, so this case will increase reading time from 7.4 seconds to 27.2 seconds, If you don't need it that you can disable disk cache with the following code:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nYou can use `SharedStringCacheSize ` to change the sharedString file size beyond the specified size for disk caching\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n\n\n\n\n",
  "origin_sha": "Th7oEFQjLrBaVMzEWFf1Q2rPewXbroJ5P5dVVNt3/c0=",
  "translate": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. Lấy Tên Cột\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // ví dụ kết quả: [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // lấy số lượng cột\n```\n\n#### 8. Dynamic Query ép kiểu dòng sang `IDictionary<string,object>`\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// hoặc\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// hoặc Truy vấn các vùng chỉ định (viết hoa)\n// A2 đại diện cho dòng thứ hai của cột A, C3 đại diện cho dòng thứ ba của cột C\n// Nếu bạn không muốn giới hạn dòng, chỉ cần không bao gồm số\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Truy vấn Excel trả về DataTable\n\nKhông khuyến nghị, vì DataTable sẽ tải tất cả dữ liệu vào bộ nhớ và mất đi tính năng tiêu thụ bộ nhớ thấp của MiniExcel.\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Chỉ định ô để bắt đầu đọc dữ liệu\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Điền Các Ô Được Gộp\n\nLưu ý: Hiệu suất chậm hơn so với `không sử dụng merge fill`\n\nLý do: Tiêu chuẩn OpenXml đặt mergeCells ở cuối file, dẫn đến phải lặp qua sheetxml hai lần\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nhỗ trợ điền nhiều dòng và cột có độ dài, độ rộng thay đổi\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Đọc file lớn bằng cache dựa trên ổ đĩa (Disk-Base Cache - SharedString)\n\nNếu kích thước SharedStrings vượt quá 5 MB, MiniExcel mặc định sẽ sử dụng cache ổ đĩa cục bộ, ví dụ, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx) (một triệu dòng dữ liệu), khi tắt cache ổ đĩa thì bộ nhớ tối đa sử dụng là 195MB, nhưng bật cache ổ đĩa chỉ cần 65MB. Lưu ý, tối ưu này sẽ tốn thêm chi phí hiệu suất, nên trường hợp này thời gian đọc tăng từ 7.4 giây lên 27.2 giây. Nếu bạn không cần tính năng này, có thể tắt cache ổ đĩa với đoạn mã sau:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nBạn có thể dùng `SharedStringCacheSize` để thay đổi kích thước file sharedString vượt quá giới hạn sẽ sử dụng cache ổ đĩa\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n```",
  "status": "ok"
}