{
  "id": 6,
  "origin": "var value = new[] {\n    new { Name=\"github\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\"))},\n    new { Name=\"google\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\"))},\n    new { Name=\"microsoft\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/microsoft_logo.png\"))},\n    new { Name=\"reddit\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/reddit_logo.png\"))},\n    new { Name=\"statck_overflow\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/statck_overflow_logo.png\"))},\n};\nMiniExcel.SaveAs(path, value);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/150462383-ad9931b3-ed8d-4221-a1d6-66f799743433.png)\n\n\n\n#### 11. Byte Array File Export\n\nSince 1.22.0, when value type is `byte[]` then system will save file path at cell by default, and when import system can be converted to `byte[]`. And if you don't want to use it, you can set  `OpenXmlConfiguration.EnableConvertByteArray` to `false`, it can improve the system efficiency.\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\nSince 1.22.0, when value type is `byte[]` then system will save file path at cell by default, and when import system can be converted to `byte[]`. And if you don't want to use it, you can set  `OpenXmlConfiguration.EnableConvertByteArray` to `false`, it can improve the system efficiency.\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\n#### 12. Merge same cells vertically\n\nThis functionality is only supported in `xlsx` format and merges cells vertically between @merge and @endmerge tags.\nYou can use @mergelimit to limit boundaries of merging cells vertically.\n\n```csharp\nvar mergedFilePath = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid().ToString()}.xlsx\");\n\nvar path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";\n\nMiniExcel.MergeSameCells(mergedFilePath, path);\n```\n\n```csharp\nvar memoryStream = new MemoryStream();\n\nvar path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";\n\nmemoryStream.MergeSameCells(path);\n```\n\nFile content before and after merge:\n\nWithout merge limit:\n\n<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 24\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/49cc96b9-6c35-4bf3-8d43-a9752a15b22e\">\n\n<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 57\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/3fbd529b-3ae6-4bbe-b4d8-2793a5a58010\">\n\nWith merge limit:\n\n<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 00\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/04049d28-84d5-4c2a-bcff-5847547df5e1\">\n\n<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 40\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/f5cf8957-b0b0-4831-b8fc-8556299235c2\">\n\n#### 13. Skip null values\n\nNew explicit option to write empty cells for null values:\n\n```csharp\nDataTable dt = new DataTable();\n\n/* ... */\n\nDataRow dr = dt.NewRow();\n\ndr[\"Name1\"] = \"Somebody once\";\ndr[\"Name2\"] = null;\ndr[\"Name3\"] = \"told me.\";\n\ndt.Rows.Add(dr);\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n     EnableWriteNullValueCell = true // Default value.\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```\n\n![image](https://user-images.githubusercontent.com/31481586/241419455-3c0aec8a-4e5f-4d83-b7ec-6572124c165d.png)\n\n```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" s=\"2\"></x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```\n\nPrevious behavior:\n",
  "origin_sha": "8snlHgBk3SLV1yAZ+8YrEn3asZRg/398iM6/LcrFWYo=",
  "translate": "```csharp\nvar value = new[] {\n    new { Name=\"github\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\"))},\n    new { Name=\"google\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\"))},\n    new { Name=\"microsoft\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/microsoft_logo.png\"))},\n    new { Name=\"reddit\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/reddit_logo.png\"))},\n    new { Name=\"statck_overflow\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/statck_overflow_logo.png\"))},\n};\nMiniExcel.SaveAs(path, value);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/150462383-ad9931b3-ed8d-4221-a1d6-66f799743433.png)\n\n\n\n#### 11. Byte Array Bestand Exporteren\n\nSinds versie 1.22.0, wanneer het waarde type `byte[]` is, slaat het systeem standaard het bestandspad op in de cel, en bij importeren kan het systeem dit omzetten naar `byte[]`. Als je dit niet wilt gebruiken, kun je `OpenXmlConfiguration.EnableConvertByteArray` op `false` zetten, dit kan de systeemefficiëntie verbeteren.\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\nSinds versie 1.22.0, wanneer het waarde type `byte[]` is, slaat het systeem standaard het bestandspad op in de cel, en bij importeren kan het systeem dit omzetten naar `byte[]`. Als je dit niet wilt gebruiken, kun je `OpenXmlConfiguration.EnableConvertByteArray` op `false` zetten, dit kan de systeemefficiëntie verbeteren.\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\n#### 12. Dezelfde cellen verticaal samenvoegen\n\nDeze functionaliteit wordt alleen ondersteund in het `xlsx`-formaat en voegt cellen verticaal samen tussen @merge- en @endmerge-tags.\nJe kunt @mergelimit gebruiken om de grenzen van het samenvoegen van cellen verticaal te beperken.\n\n```csharp\nvar mergedFilePath = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid().ToString()}.xlsx\");\n\nvar path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";\n\nMiniExcel.MergeSameCells(mergedFilePath, path);\n```\n\n```csharp\nvar memoryStream = new MemoryStream();\n\nvar path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";\n\nmemoryStream.MergeSameCells(path);\n```\n\nBestandsinhoud vóór en na samenvoegen:\n\nZonder merge limit:\n\n<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 24\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/49cc96b9-6c35-4bf3-8d43-a9752a15b22e\">\n\n<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 57\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/3fbd529b-3ae6-4bbe-b4d8-2793a5a58010\">\n\nMet merge limit:\n\n<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 00\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/04049d28-84d5-4c2a-bcff-5847547df5e1\">\n\n<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 40\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/f5cf8957-b0b0-4831-b8fc-8556299235c2\">\n\n#### 13. Null-waarden overslaan\n\nNieuwe expliciete optie om lege cellen te schrijven voor null-waarden:\n\n```csharp\nDataTable dt = new DataTable();\n\n/* ... */\n\nDataRow dr = dt.NewRow();\n\ndr[\"Name1\"] = \"Somebody once\";\ndr[\"Name2\"] = null;\ndr[\"Name3\"] = \"told me.\";\n\ndt.Rows.Add(dr);\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n     EnableWriteNullValueCell = true // Standaardwaarde.\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```\n\n![image](https://user-images.githubusercontent.com/31481586/241419455-3c0aec8a-4e5f-4d83-b7ec-6572124c165d.png)\n\n```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" s=\"2\"></x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```\n\nEerder gedrag:\n```",
  "status": "ok"
}