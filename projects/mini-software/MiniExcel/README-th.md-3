{
  "id": 3,
  "origin": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. Get Columns\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // get column count\n```\n\n#### 8. Dynamic Query cast row to `IDictionary<string,object>`\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// or\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// or Query specified ranges (capitalized)\n// A2 represents the second row of column A, C3 represents the third row of column C\n// If you don't want to restrict rows, just don't include numbers\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Query Excel return DataTable\n\nNot recommended, because DataTable will load all data into memory and lose MiniExcel's low memory consumption feature.\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Specify the cell to start reading data\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Fill Merged Cells\n\nNote: The efficiency is slower compared to `not using merge fill`\n\nReason: The OpenXml standard puts mergeCells at the bottom of the file, which leads to the need to foreach the sheetxml twice\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nsupport variable length and width multi-row and column filling\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Reading big file by disk-base cache (Disk-Base Cache - SharedString)\n\nIf the SharedStrings size exceeds 5 MB, MiniExcel default will use local disk cache, e.g, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(one million rows data), when disable disk cache the maximum memory usage is 195MB, but able disk cache only needs 65MB. Note, this optimization needs some efficiency cost, so this case will increase reading time from 7.4 seconds to 27.2 seconds, If you don't need it that you can disable disk cache with the following code:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nYou can use `SharedStringCacheSize ` to change the sharedString file size beyond the specified size for disk caching\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n\n\n\n\n",
  "origin_sha": "Th7oEFQjLrBaVMzEWFf1Q2rPewXbroJ5P5dVVNt3/c0=",
  "translate": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. รับชื่อคอลัมน์\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // ตัวอย่างผลลัพธ์ : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // รับจำนวนคอลัมน์\n```\n\n#### 8. Dynamic Query แปะแถวเป็น `IDictionary<string,object>`\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// หรือ\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// หรือ Query ช่วงที่ระบุ (ใช้ตัวอักษรตัวใหญ่)\n// A2 หมายถึงแถวที่สองของคอลัมน์ A, C3 หมายถึงแถวที่สามของคอลัมน์ C\n// ถ้าไม่ต้องการจำกัดแถว ก็ไม่ต้องใส่ตัวเลข\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Query Excel คืนค่า DataTable\n\nไม่แนะนำ เนื่องจาก DataTable จะโหลดข้อมูลทั้งหมดเข้าในหน่วยความจำและสูญเสียคุณสมบัติการใช้หน่วยความจำต่ำของ MiniExcel\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. ระบุเซลล์ที่จะเริ่มอ่านข้อมูล\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. เติมข้อมูลในเซลล์ที่รวม (Fill Merged Cells)\n\nหมายเหตุ: ประสิทธิภาพจะช้ากว่าเมื่อ `ไม่ใช้ merge fill`\n\nเหตุผล: มาตรฐาน OpenXml จะวาง mergeCells ไว้ท้ายไฟล์ ทำให้ต้องวนลูป sheetxml สองรอบ\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nรองรับการเติมหลายแถวและคอลัมน์ที่ความยาวและความกว้างไม่เท่ากัน\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. อ่านไฟล์ขนาดใหญ่โดยใช้ disk-base cache (Disk-Base Cache - SharedString)\n\nถ้าขนาด SharedStrings เกิน 5 MB MiniExcel จะใช้ disk cache ในเครื่องโดยอัตโนมัติ เช่น [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx) (ข้อมูลหนึ่งล้านแถว) หากปิด disk cache การใช้หน่วยความจำสูงสุดคือ 195MB แต่เมื่อเปิด disk cache จะใช้แค่ 65MB หมายเหตุ การปรับแต่งนี้มีต้นทุนด้านประสิทธิภาพ ดังนั้นในกรณีนี้จะเพิ่มเวลาอ่านจาก 7.4 วินาทีเป็น 27.2 วินาที หากคุณไม่ต้องการสามารถปิด disk cache ด้วยโค้ดนี้:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nคุณสามารถใช้ `SharedStringCacheSize` เพื่อเปลี่ยนขนาดไฟล์ sharedString ที่เกินขนาดที่กำหนดให้ใช้ disk cache\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n```",
  "status": "ok"
}