{
  "id": 4,
  "origin": "\n\n\n\n### Create/Export Excel  <a name=\"getstart2\"></a>\n\n1. Must be a non-abstract type with a public parameterless constructor .\n\n2. MiniExcel support parameter IEnumerable Deferred Execution, If you want to use least memory, please do not call methods such as ToList\n\ne.g : ToList or not memory usage\n![image](https://user-images.githubusercontent.com/12729184/112587389-752b0b00-8e38-11eb-8a52-cfb76c57e5eb.png)\n\n\n\n#### 1. Anonymous or strongly type [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\n```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nMiniExcel.SaveAs(path, new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n});\n```\n\n#### 2. `IEnumerable<IDictionary<string, object>>`\n\n```csharp\nvar values = new List<Dictionary<string, object>>()\n{\n    new Dictionary<string,object>{{ \"Column1\", \"MiniExcel\" }, { \"Column2\", 1 } },\n    new Dictionary<string,object>{{ \"Column1\", \"Github\" }, { \"Column2\", 2 } }\n};\nMiniExcel.SaveAs(path, values);\n```\n\nCreate File Result :\n\n| Column1   | Column2 |\n|-----------|---------|\n| MiniExcel | 1       |\n| Github    | 2       |\n\n\n#### 3.  IDataReader\n- `Recommended`, it can avoid to load all data into memory\n```csharp\nMiniExcel.SaveAs(path, reader);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/121275378-149a5e80-c8bc-11eb-85fe-5453552134f0.png)\n\nDataReader export multiple sheets (recommand by Dapper ExecuteReader)\n\n```csharp\nusing (var cnn = Connection)\n{\n    cnn.Open();\n    var sheets = new Dictionary<string,object>();\n    sheets.Add(\"sheet1\", cnn.ExecuteReader(\"select 1 id\"));\n    sheets.Add(\"sheet2\", cnn.ExecuteReader(\"select 2 id\"));\n    MiniExcel.SaveAs(\"Demo.xlsx\", sheets);\n}\n```\n\n\n\n#### 4. Datatable\n\n- `Not recommended`, it will load all data into memory\n\n- DataTable use Caption for column name first, then use columname\n\n```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nvar table = new DataTable();\n{\n    table.Columns.Add(\"Column1\", typeof(string));\n    table.Columns.Add(\"Column2\", typeof(decimal));\n    table.Rows.Add(\"MiniExcel\", 1);\n    table.Rows.Add(\"Github\", 2);\n}\n\nMiniExcel.SaveAs(path, table);\n```\n\n####  5. Dapper Query\n\nThanks @shaofing #552 , please use `CommandDefinition + CommandFlags.NoCache`\n\n```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(\n        new CommandDefinition(\n            @\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\"\n            , flags: CommandFlags.NoCache)\n        );\n    // Note: QueryAsync will throw close connection exception\n    MiniExcel.SaveAs(path, rows);",
  "origin_sha": "0vpdB7AnCLRrmz6GC1YqtbLkkGNHAraqkt1YxSYWEz8=",
  "translate": "### Создание/Экспорт Excel  <a name=\"getstart2\"></a>\n\n1. Должен быть неабстрактным типом с общедоступным конструктором без параметров.\n\n2. MiniExcel поддерживает параметр IEnumerable с отложенным выполнением. Если вы хотите использовать минимальное количество памяти, пожалуйста, не вызывайте методы, такие как ToList.\n\nнапример: ToList или не использовать память\n![image](https://user-images.githubusercontent.com/12729184/112587389-752b0b00-8e38-11eb-8a52-cfb76c57e5eb.png)\n\n#### 1. Анонимный или строго типизированный [[Попробовать]](https://dotnetfiddle.net/w5WD1J)\n\n```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nMiniExcel.SaveAs(path, new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n});\n```\n\n#### 2. `IEnumerable<IDictionary<string, object>>`\n\n```csharp\nvar values = new List<Dictionary<string, object>>()\n{\n    new Dictionary<string,object>{{ \"Column1\", \"MiniExcel\" }, { \"Column2\", 1 } },\n    new Dictionary<string,object>{{ \"Column1\", \"Github\" }, { \"Column2\", 2 } }\n};\nMiniExcel.SaveAs(path, values);\n```\n\nРезультат создания файла:\n\n| Column1   | Column2 |\n|-----------|---------|\n| MiniExcel | 1       |\n| Github    | 2       |\n\n\n#### 3.  IDataReader\n- `Рекомендуется`, позволяет избежать загрузки всех данных в память\n```csharp\nMiniExcel.SaveAs(path, reader);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/121275378-149a5e80-c8bc-11eb-85fe-5453552134f0.png)\n\nЭкспорт нескольких листов через DataReader (рекомендуется использовать Dapper ExecuteReader)\n\n```csharp\nusing (var cnn = Connection)\n{\n    cnn.Open();\n    var sheets = new Dictionary<string,object>();\n    sheets.Add(\"sheet1\", cnn.ExecuteReader(\"select 1 id\"));\n    sheets.Add(\"sheet2\", cnn.ExecuteReader(\"select 2 id\"));\n    MiniExcel.SaveAs(\"Demo.xlsx\", sheets);\n}\n```\n\n#### 4. Datatable\n\n- `Не рекомендуется`, так как все данные будут загружены в память\n\n- DataTable сначала использует Caption для имени столбца, затем имя столбца\n\n```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nvar table = new DataTable();\n{\n    table.Columns.Add(\"Column1\", typeof(string));\n    table.Columns.Add(\"Column2\", typeof(decimal));\n    table.Rows.Add(\"MiniExcel\", 1);\n    table.Rows.Add(\"Github\", 2);\n}\n\nMiniExcel.SaveAs(path, table);\n```\n\n####  5. Dapper Query\n\nБлагодарим @shaofing #552, пожалуйста, используйте `CommandDefinition + CommandFlags.NoCache`\n\n```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(\n        new CommandDefinition(\n            @\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\"\n            , flags: CommandFlags.NoCache)\n        );\n    // Примечание: QueryAsync вызовет исключение закрытия соединения\n    MiniExcel.SaveAs(path, rows);\n```",
  "status": "ok"
}