{
  "id": 14,
  "origin": "\n- The default encoding is \"Detect Encoding From Byte Order Marks\"  (detectEncodingFromByteOrderMarks: true)\n- f you have custom encoding requirements, please modify the StreamReaderFunc / StreamWriterFunc  property\n\n```csharp\n// Read\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamReaderFunc = (stream) => new StreamReader(stream,Encoding.GetEncoding(\"gb2312\"))\n};\nvar rows = MiniExcel.Query(path, true,excelType:ExcelType.CSV,configuration: config);\n\n// Write\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamWriterFunc = (stream) => new StreamWriter(stream, Encoding.GetEncoding(\"gb2312\"))\n};\nMiniExcel.SaveAs(path, value,excelType:ExcelType.CSV, configuration: config);\n```\n\n#### Read empty string as null\n\nBy default, empty values are mapped to string.Empty. You can modify this behavior\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n   ReadEmptyStringAsNull = true\n};\n```\n\n\n### DataReader\n\n#### 1. GetReader\nSince 1.23.0, you can GetDataReader\n\n```csharp\n    using (var reader = MiniExcel.GetReader(path,true))\n    {\n        while (reader.Read())\n        {\n            for (int i = 0; i < reader.FieldCount; i++)\n            {\n                var value = reader.GetValue(i);\n            }\n        }\n    }\n```\n\n\n\n###  Async\n\n- v0.17.0 support Async (thanks isdaniel ( SHIH,BING-SIOU)](https://github.com/isdaniel))\n\n```csharp\npublic static Task SaveAsAsync(string path, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.UNKNOWN, IConfiguration configuration = null)\npublic static Task SaveAsAsync(this Stream stream, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.XLSX, IConfiguration configuration = null)\npublic static Task<IEnumerable<dynamic>> QueryAsync(string path, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task<IEnumerable<T>> QueryAsync<T>(this Stream stream, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<T>> QueryAsync<T>(string path, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<IDictionary<string, object>>> QueryAsync(this Stream stream, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task SaveAsByTemplateAsync(this Stream stream, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(this Stream stream, byte[] templateBytes, object value)\npublic static Task SaveAsByTemplateAsync(string path, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(string path, byte[] templateBytes, object value)\npublic static Task<DataTable> QueryAsDataTableAsync(string path, bool useHeaderRow = true, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\n```\n\n-  v1.25.0 support `cancellationToken`。\n\n\n\n### Others\n\n#### 1. Enum\n\nBe sure excel & property name same, system will auto mapping (case insensitive)\n\n![image](https://user-images.githubusercontent.com/12729184/116210595-9784b100-a775-11eb-936f-8e7a8b435961.png)\n\nSince V0.18.0 support Enum Description\n\n```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n    public I49RYZUserType UserType { get; set; }\n}\n\npublic enum Type\n{\n    [Description(\"General User\")]\n    V1,\n    [Description(\"General Administrator\")]\n    V2,\n    [Description(\"Super Administrator\")]\n    V3\n}",
  "origin_sha": "EE7ZYYFIKaQfPC1Krq58EoRABfS3T0SDvT/18AfYxgE=",
  "translate": "- डिफ़ॉल्ट एन्कोडिंग \"Detect Encoding From Byte Order Marks\" है  (detectEncodingFromByteOrderMarks: true)\n- यदि आपके पास कस्टम एन्कोडिंग आवश्यकताएँ हैं, तो कृपया StreamReaderFunc / StreamWriterFunc  प्रॉपर्टी को संशोधित करें\n\n```csharp\n// पढ़ना\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamReaderFunc = (stream) => new StreamReader(stream,Encoding.GetEncoding(\"gb2312\"))\n};\nvar rows = MiniExcel.Query(path, true,excelType:ExcelType.CSV,configuration: config);\n\n// लिखना\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamWriterFunc = (stream) => new StreamWriter(stream, Encoding.GetEncoding(\"gb2312\"))\n};\nMiniExcel.SaveAs(path, value,excelType:ExcelType.CSV, configuration: config);\n```\n\n#### खाली स्ट्रिंग को null के रूप में पढ़ें\n\nडिफ़ॉल्ट रूप से, खाली मान string.Empty पर मैप होते हैं। आप इस व्यवहार को बदल सकते हैं\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n   ReadEmptyStringAsNull = true\n};\n```\n\n\n### DataReader\n\n#### 1. GetReader\nसंस्करण 1.23.0 से, आप GetDataReader का उपयोग कर सकते हैं\n\n```csharp\n    using (var reader = MiniExcel.GetReader(path,true))\n    {\n        while (reader.Read())\n        {\n            for (int i = 0; i < reader.FieldCount; i++)\n            {\n                var value = reader.GetValue(i);\n            }\n        }\n    }\n```\n\n\n\n###  Async\n\n- v0.17.0 में Async का समर्थन है (धन्यवाद isdaniel ( SHIH,BING-SIOU)](https://github.com/isdaniel))\n\n```csharp\npublic static Task SaveAsAsync(string path, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.UNKNOWN, IConfiguration configuration = null)\npublic static Task SaveAsAsync(this Stream stream, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.XLSX, IConfiguration configuration = null)\npublic static Task<IEnumerable<dynamic>> QueryAsync(string path, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task<IEnumerable<T>> QueryAsync<T>(this Stream stream, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<T>> QueryAsync<T>(string path, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<IDictionary<string, object>>> QueryAsync(this Stream stream, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task SaveAsByTemplateAsync(this Stream stream, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(this Stream stream, byte[] templateBytes, object value)\npublic static Task SaveAsByTemplateAsync(string path, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(string path, byte[] templateBytes, object value)\npublic static Task<DataTable> QueryAsDataTableAsync(string path, bool useHeaderRow = true, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\n```\n\n-  v1.25.0 से `cancellationToken` का समर्थन।\n\n\n\n### अन्य\n\n#### 1. Enum\n\nसुनिश्चित करें कि excel और प्रॉपर्टी नाम एक जैसे हों, सिस्टम ऑटो-मैपिंग कर देगा (केस इनसेंसिटिव)\n\n![image](https://user-images.githubusercontent.com/12729184/116210595-9784b100-a775-11eb-936f-8e7a8b435961.png)\n\nV0.18.0 से Enum Description का समर्थन\n\n```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n    public I49RYZUserType UserType { get; set; }\n}\n\npublic enum Type\n{\n    [Description(\"General User\")]\n    V1,\n    [Description(\"General Administrator\")]\n    V2,\n    [Description(\"Super Administrator\")]\n    V3\n}",
  "status": "ok"
}