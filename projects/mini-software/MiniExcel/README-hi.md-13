{
  "id": 13,
  "origin": "    };\n    MiniExcel.Insert(path, value);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png)\n\nv1.37.0 support excel insert a new sheet into an existing workbook\n\n```csharp\n// Origin excel\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value, sheetName: \"Sheet1\");\n}\n// Insert a new sheet\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, table, sheetName: \"Sheet2\");\n}\n```\n\n\n\n#### Delete(waiting)\n\n#### Update(waiting)\n\n\n\n### Excel Type Auto Check <a name=\"getstart5\"></a>\n\n- MiniExcel will check whether it is xlsx or csv based on the `file extension` by default, but there may be inaccuracy, please specify it manually.\n- Stream cannot be know from which excel, please specify it manually.\n\n```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//or\nstream.SaveAs(excelType:ExcelType.XLSX);\n//or\nstream.Query(excelType:ExcelType.CSV);\n//or\nstream.Query(excelType:ExcelType.XLSX);\n```\n\n\n\n\n\n### CSV\n\n#### Note\n\n- Default return `string` type, and value will not be converted to numbers or datetime, unless the type is defined by strong typing generic.\n\n\n\n#### Custom separator\n\nThe default is `,` as the separator, you can modify the `Seperator` property for customization\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\nSince V1.30.1 support function to custom separator (thanks @hyzx86)\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```\n\n\n\n#### Custom line break\n\nThe default is `\\r\\n` as the newline character, you can modify the `NewLine` property for customization\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\n\n\n#### Custom coding",
  "origin_sha": "L9HkLzxXU7FGwZczjCauQGs4SUPmaKDck6toO1yCteU=",
  "translate": "```csharp\n};\nMiniExcel.Insert(path, value);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png)\n\nv1.37.0 समर्थन करता है कि Excel में मौजूदा वर्कबुक में एक नया शीट डाला जा सकता है\n\n```csharp\n// मूल Excel\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value, sheetName: \"Sheet1\");\n}\n// एक नया शीट जोड़ें\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, table, sheetName: \"Sheet2\");\n}\n```\n\n\n\n#### हटाएँ (प्रतीक्षा में)\n\n#### अपडेट करें (प्रतीक्षा में)\n\n\n\n### Excel प्रकार ऑटो जांच <a name=\"getstart5\"></a>\n\n- MiniExcel डिफ़ॉल्ट रूप से `file extension` के आधार पर जांचेगा कि यह xlsx है या csv, लेकिन इसमें गलतियाँ हो सकती हैं, कृपया इसे मैन्युअली निर्दिष्ट करें।\n- स्ट्रीम से यह पता नहीं लगाया जा सकता कि यह किस Excel से है, कृपया इसे मैन्युअली निर्दिष्ट करें।\n\n```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//या\nstream.SaveAs(excelType:ExcelType.XLSX);\n//या\nstream.Query(excelType:ExcelType.CSV);\n//या\nstream.Query(excelType:ExcelType.XLSX);\n```\n\n\n\n\n\n### CSV\n\n#### नोट\n\n- डिफ़ॉल्ट रूप से `string` प्रकार लौटता है, और मान को नंबर या डेटटाइम में परिवर्तित नहीं किया जाएगा, जब तक कि प्रकार स्ट्रॉन्ग टाइपिंग जेनेरिक द्वारा परिभाषित न हो।\n\n\n\n#### कस्टम सेपरेटर\n\nडिफ़ॉल्ट `,` सेपरेटर के रूप में होता है, आप कस्टमाइज़ेशन के लिए `Seperator` प्रॉपर्टी को संशोधित कर सकते हैं\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\nV1.30.1 से कस्टम सेपरेटर के लिए फंक्शन को सपोर्ट करता है (धन्यवाद @hyzx86)\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```\n\n\n\n#### कस्टम लाइन ब्रेक\n\nडिफ़ॉल्ट रूप से `\\r\\n` न्यू लाइन कैरेक्टर है, आप कस्टमाइज़ेशन के लिए `NewLine` प्रॉपर्टी को संशोधित कर सकते हैं\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\n\n\n#### कस्टम कोडिंग",
  "status": "ok"
}