{
  "id": 17,
  "origin": "                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(bytes, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult UploadExcel(IFormFile excel)\n    {\n        var stream = new MemoryStream();\n        excel.CopyTo(stream);\n\n        foreach (var item in stream.Query(true))\n        {\n            // do your logic etc.\n        }\n\n        return Ok(\"File uploaded successfully\");\n    }\n}\n```\n\n####  3. Paging Query\n\n```csharp\nvoid Main()\n{\n    var rows = MiniExcel.Query(path);\n\n    Console.WriteLine(\"==== No.1 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:1));\n    Console.WriteLine(\"==== No.50 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:50));\n    Console.WriteLine(\"==== No.5000 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:5000));\n}\n\npublic static IEnumerable<T> Page<T>(IEnumerable<T> en, int pageSize, int page)\n{\n    return en.Skip(page * pageSize).Take(pageSize);\n}\n```\n\n![20210419](https://user-images.githubusercontent.com/12729184/114679083-6ef4c400-9d3e-11eb-9f78-a86daa45fe46.gif)\n\n\n\n#### 4. WebForm export Excel by memorystream\n\n```csharp\nvar fileName = \"Demo.xlsx\";\nvar sheetName = \"Sheet1\";\nHttpResponse response = HttpContext.Current.Response;\nresponse.Clear();\nresponse.ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\nresponse.AddHeader(\"Content-Disposition\", $\"attachment;filename=\\\"{fileName}\\\"\");\nvar values = new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n};\nvar memoryStream = new MemoryStream();\nmemoryStream.SaveAs(values, sheetName: sheetName);\nmemoryStream.Seek(0, SeekOrigin.Begin);\nmemoryStream.CopyTo(Response.OutputStream);\nresponse.End();\n```\n\n\n\n#### 5. Dynamic i18n multi-language and role authority management\n\nLike the example, create a method to handle i18n and permission management, and use `yield return to return IEnumerable<Dictionary<string, object>>` to achieve dynamic and low-memory processing effects\n\n```csharp\nvoid Main()\n{\n    var value = new Order[] {\n        new Order(){OrderNo = \"SO01\",CustomerID=\"C001\",ProductID=\"P001\",Qty=100,Amt=500},\n        new Order(){OrderNo = \"SO02\",CustomerID=\"C002\",ProductID=\"P002\",Qty=300,Amt=400},\n    };\n\n    Console.WriteLine(\"en-Us and Sales role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"en-US\";\n        var role = \"Sales\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));",
  "origin_sha": "IB4mXlJP3aFe3aCwWdAv4aSlv/oLE3G28vdXJipN/4g=",
  "translate": "new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(bytes, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult UploadExcel(IFormFile excel)\n    {\n        var stream = new MemoryStream();\n        excel.CopyTo(stream);\n\n        foreach (var item in stream.Query(true))\n        {\n            // do your logic etc.\n        }\n\n        return Ok(\"File uploaded successfully\");\n    }\n}\n```\n\n####  3. 分頁查詢\n\n```csharp\nvoid Main()\n{\n    var rows = MiniExcel.Query(path);\n\n    Console.WriteLine(\"==== 第1頁 ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:1));\n    Console.WriteLine(\"==== 第50頁 ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:50));\n    Console.WriteLine(\"==== 第5000頁 ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:5000));\n}\n\npublic static IEnumerable<T> Page<T>(IEnumerable<T> en, int pageSize, int page)\n{\n    return en.Skip(page * pageSize).Take(pageSize);\n}\n```\n\n![20210419](https://user-images.githubusercontent.com/12729184/114679083-6ef4c400-9d3e-11eb-9f78-a86daa45fe46.gif)\n\n\n\n#### 4. WebForm 以記憶體串流匯出 Excel\n\n```csharp\nvar fileName = \"Demo.xlsx\";\nvar sheetName = \"Sheet1\";\nHttpResponse response = HttpContext.Current.Response;\nresponse.Clear();\nresponse.ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\nresponse.AddHeader(\"Content-Disposition\", $\"attachment;filename=\\\"{fileName}\\\"\");\nvar values = new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n};\nvar memoryStream = new MemoryStream();\nmemoryStream.SaveAs(values, sheetName: sheetName);\nmemoryStream.Seek(0, SeekOrigin.Begin);\nmemoryStream.CopyTo(Response.OutputStream);\nresponse.End();\n```\n\n\n\n#### 5. 動態 i18n 多語系及角色權限管理\n\n如同範例，建立一個方法來處理 i18n 及權限管理，並使用 `yield return` 回傳 IEnumerable<Dictionary<string, object>>，以實現動態且低記憶體的處理效果\n\n```csharp\nvoid Main()\n{\n    var value = new Order[] {\n        new Order(){OrderNo = \"SO01\",CustomerID=\"C001\",ProductID=\"P001\",Qty=100,Amt=500},\n        new Order(){OrderNo = \"SO02\",CustomerID=\"C002\",ProductID=\"P002\",Qty=300,Amt=400},\n    };\n\n    Console.WriteLine(\"en-Us 和 Sales 角色\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"en-US\";\n        var role = \"Sales\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));",
  "status": "ok"
}