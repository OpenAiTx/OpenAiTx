[
  {
    "Id": 1,
    "Content": "<div align=\"center\">\n<p><a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/v/MiniExcel.svg\" alt=\"NuGet\"></a>  <a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/dt/MiniExcel.svg\" alt=\"\"></a>\n<a href=\"https://ci.appveyor.com/project/mini-software/miniexcel/branch/master\"><img src=\"https://ci.appveyor.com/api/projects/status/b2vustrwsuqx45f4/branch/master?svg=true\" alt=\"Build status\"></a>\n<a href=\"https://gitee.com/dotnetchina/MiniExcel\"><img src=\"https://gitee.com/dotnetchina/MiniExcel/badge/star.svg\" alt=\"star\"></a> <a href=\"https://github.com/mini-software/MiniExcel\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/mini-software/MiniExcel?logo=github\" alt=\"GitHub stars\"></a>\n<a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/badge/.NET-%3E%3D%204.5-red.svg\" alt=\"version\"></a>\n<a href=\"https://deepwiki.com/mini-software/MiniExcel\"><img src=\"https://deepwiki.com/badge.svg\" alt=\"Ask DeepWiki\"></a>\n</p>\n</div>\n\n---\n\n[<img align=\"right\" src=\"https://github.com/dotnet-foundation/swag/blob/main/logo/dotnetfoundation_v4.png?raw=true\" width=\"100\" />](https://www.dotnetfoundation.org/)\n\n<div align=\"center\">\n<p>This project is part of the <a href=\"https://www.dotnetfoundation.org/\">.NET Foundation</a> and operates under their <a href=\"https://www.dotnetfoundation.org/code-of-conduct\">code of conduct</a>. </p>\n</div>\n\n---\n\n<div align=\"center\">\n<p><strong><a href=\"README.md\">English</a> | <a href=\"README.zh-CN.md\">简体中文</a> | <a href=\"README.zh-Hant.md\">繁體中文</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ja\">日本語</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ko\">한국어</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=hi\">हिन्दी</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=th\">ไทย</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=fr\">Français</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=de\">Deutsch</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=es\">Español</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=it\">Italiano</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ru\">Русский</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=pt\">Português</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=nl\">Nederlands</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=pl\">Polski</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ar\">العربية</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=fa\">فارسی</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=tr\">Türkçe</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=vi\">Tiếng Việt</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=id\">Bahasa Indonesia</a><p></p>\n</strong></p>\n</div>\n\n\n---\n\n<div align=\"center\">\n Your <a href=\"https://github.com/mini-software/MiniExcel\">Stars</a> or <a href=\"https://miniexcel.github.io\">Donations</a> can make MiniExcel better\n</div>\n\n---\n\n### Introduction\n\nMiniExcel is a simple and efficient Excel processing tool for .NET, specifically designed to minimize memory usage.\n\nAt present, most popular frameworks need to load all the data from an Excel document into memory to facilitate operations, but this may cause memory consumption problems. MiniExcel's approach is different: the data is processed row by row in a streaming manner, reducing the original consumption from potentially hundreds of megabytes to just a few megabytes, effectively preventing out-of-memory(OOM) issues.\n",
    "ContentSha": "fnsyX9dGg5qGA4t/OVMP7GwjGdkoAMaCTxm1x7c4FtY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<div align=\"center\">\n<p><a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/v/MiniExcel.svg\" alt=\"NuGet\"></a>  <a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/dt/MiniExcel.svg\" alt=\"\"></a>\n<a href=\"https://ci.appveyor.com/project/mini-software/miniexcel/branch/master\"><img src=\"https://ci.appveyor.com/api/projects/status/b2vustrwsuqx45f4/branch/master?svg=true\" alt=\"Build status\"></a>\n<a href=\"https://gitee.com/dotnetchina/MiniExcel\"><img src=\"https://gitee.com/dotnetchina/MiniExcel/badge/star.svg\" alt=\"star\"></a> <a href=\"https://github.com/mini-software/MiniExcel\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/mini-software/MiniExcel?logo=github\" alt=\"GitHub stars\"></a>\n<a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/badge/.NET-%3E%3D%204.5-red.svg\" alt=\"version\"></a>\n<a href=\"https://deepwiki.com/mini-software/MiniExcel\"><img src=\"https://deepwiki.com/badge.svg\" alt=\"Ask DeepWiki\"></a>\n</p>\n</div>\n\n---\n\n[<img align=\"right\" src=\"https://github.com/dotnet-foundation/swag/blob/main/logo/dotnetfoundation_v4.png?raw=true\" width=\"100\" />](https://www.dotnetfoundation.org/)\n\n<div align=\"center\">\n<p>Este proyecto es parte de la <a href=\"https://www.dotnetfoundation.org/\">.NET Foundation</a> y opera bajo su <a href=\"https://www.dotnetfoundation.org/code-of-conduct\">código de conducta</a>. </p>\n</div>\n\n---\n\n<div align=\"center\">\n<p><strong><a href=\"README.md\">English</a> | <a href=\"README.zh-CN.md\">简体中文</a> | <a href=\"README.zh-Hant.md\">繁體中文</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ja\">日本語</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ko\">한국어</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=hi\">हिन्दी</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=th\">ไทย</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=fr\">Français</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=de\">Deutsch</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=es\">Español</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=it\">Italiano</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ru\">Русский</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=pt\">Português</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=nl\">Nederlands</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=pl\">Polski</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ar\">العربية</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=fa\">فارسی</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=tr\">Türkçe</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=vi\">Tiếng Việt</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=id\">Bahasa Indonesia</a><p></p>\n</strong></p>\n</div>\n\n\n---\n\n<div align=\"center\">\n Tus <a href=\"https://github.com/mini-software/MiniExcel\">Estrellas</a> o <a href=\"https://miniexcel.github.io\">Donaciones</a> pueden hacer MiniExcel mejor\n</div>\n\n---\n\n### Introducción\n\nMiniExcel es una herramienta sencilla y eficiente para procesar archivos Excel en .NET, diseñada específicamente para minimizar el uso de memoria.\n\nActualmente, la mayoría de los frameworks populares necesitan cargar todos los datos de un documento Excel en memoria para poder operar, pero esto puede causar problemas de consumo de memoria. El enfoque de MiniExcel es diferente: los datos se procesan fila por fila de manera streaming, reduciendo el consumo original de potencialmente cientos de megabytes a solo unos pocos megabytes, previniendo eficazmente los problemas de memoria insuficiente (OOM).\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "94MDjHJY1ZLwHNTLIEUIfk7TMc9cq1L/1FmwhqBTe/k=",
        "originContent": "<div align=\"center\">",
        "translatedContent": "<div align=\"center\">"
      },
      {
        "row": 2,
        "rowsha": "8MsBkSFMPbm/3TD5JBWITJoaA3kaWbSG+KcXJRJbWTc=",
        "originContent": "<p><a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/v/MiniExcel.svg\" alt=\"NuGet\"></a>  <a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/dt/MiniExcel.svg\" alt=\"\"></a>",
        "translatedContent": "<p><a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/v/MiniExcel.svg\" alt=\"NuGet\"></a>  <a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/dt/MiniExcel.svg\" alt=\"\"></a>"
      },
      {
        "row": 3,
        "rowsha": "+cpdejI5RkvMFjila59inoaQPTwknAZ4/48fZ2Nw3ao=",
        "originContent": "<a href=\"https://ci.appveyor.com/project/mini-software/miniexcel/branch/master\"><img src=\"https://ci.appveyor.com/api/projects/status/b2vustrwsuqx45f4/branch/master?svg=true\" alt=\"Build status\"></a>",
        "translatedContent": "<a href=\"https://ci.appveyor.com/project/mini-software/miniexcel/branch/master\"><img src=\"https://ci.appveyor.com/api/projects/status/b2vustrwsuqx45f4/branch/master?svg=true\" alt=\"Build status\"></a>"
      },
      {
        "row": 4,
        "rowsha": "uAcmiPtewCnx/XWXavypRhFVQCTmUoCEdLBeTXgvXr4=",
        "originContent": "<a href=\"https://gitee.com/dotnetchina/MiniExcel\"><img src=\"https://gitee.com/dotnetchina/MiniExcel/badge/star.svg\" alt=\"star\"></a> <a href=\"https://github.com/mini-software/MiniExcel\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/mini-software/MiniExcel?logo=github\" alt=\"GitHub stars\"></a>",
        "translatedContent": "<a href=\"https://gitee.com/dotnetchina/MiniExcel\"><img src=\"https://gitee.com/dotnetchina/MiniExcel/badge/star.svg\" alt=\"star\"></a> <a href=\"https://github.com/mini-software/MiniExcel\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/mini-software/MiniExcel?logo=github\" alt=\"GitHub stars\"></a>"
      },
      {
        "row": 5,
        "rowsha": "Fb3y2YzdQ+UZ76KsXxmwBQZVEniuyAvk1ZlWeYkytpU=",
        "originContent": "<a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/badge/.NET-%3E%3D%204.5-red.svg\" alt=\"version\"></a>",
        "translatedContent": "<a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/badge/.NET-%3E%3D%204.5-red.svg\" alt=\"version\"></a>"
      },
      {
        "row": 6,
        "rowsha": "PouqQtna28Voxdl/jGKvfJ0uCfDO4uWsW7tiSUWwl34=",
        "originContent": "<a href=\"https://deepwiki.com/mini-software/MiniExcel\"><img src=\"https://deepwiki.com/badge.svg\" alt=\"Ask DeepWiki\"></a>",
        "translatedContent": "<a href=\"https://deepwiki.com/mini-software/MiniExcel\"><img src=\"https://deepwiki.com/badge.svg\" alt=\"Ask DeepWiki\"></a>"
      },
      {
        "row": 7,
        "rowsha": "dSdvPNAZSmR86FDDSF6tkQUCVfI9qmACHOR5tThOetY=",
        "originContent": "</p>",
        "translatedContent": "</p>"
      },
      {
        "row": 8,
        "rowsha": "qsMmUbEPVnxGG5tPJV1vsfpoWbU2jYvZpRr5IKshzyM=",
        "originContent": "</div>",
        "translatedContent": "</div>"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "yz+R1U7uMOU+NbK5mQX3Dxae1Un9eJCdPawt78ntjTs=",
        "originContent": "---",
        "translatedContent": "---"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "jARsznL+AKPPeY7Y/IIcJdEGown7W36WRpMLUudyZy8=",
        "originContent": "[<img align=\"right\" src=\"https://github.com/dotnet-foundation/swag/blob/main/logo/dotnetfoundation_v4.png?raw=true\" width=\"100\" />](https://www.dotnetfoundation.org/)",
        "translatedContent": "[<img align=\"right\" src=\"https://github.com/dotnet-foundation/swag/blob/main/logo/dotnetfoundation_v4.png?raw=true\" width=\"100\" />](https://www.dotnetfoundation.org/)"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "94MDjHJY1ZLwHNTLIEUIfk7TMc9cq1L/1FmwhqBTe/k=",
        "originContent": "<div align=\"center\">",
        "translatedContent": "<div align=\"center\">"
      },
      {
        "row": 15,
        "rowsha": "p/IHVHVEocCwh7XhQLs+IoUuSPHIp+Mql9KAHzs78qo=",
        "originContent": "<p>This project is part of the <a href=\"https://www.dotnetfoundation.org/\">.NET Foundation</a> and operates under their <a href=\"https://www.dotnetfoundation.org/code-of-conduct\">code of conduct</a>. </p>",
        "translatedContent": "<p>Este proyecto es parte de la <a href=\"https://www.dotnetfoundation.org/\">.NET Foundation</a> y opera bajo su <a href=\"https://www.dotnetfoundation.org/code-of-conduct\">código de conducta</a>. </p>"
      },
      {
        "row": 16,
        "rowsha": "qsMmUbEPVnxGG5tPJV1vsfpoWbU2jYvZpRr5IKshzyM=",
        "originContent": "</div>",
        "translatedContent": "</div>"
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "yz+R1U7uMOU+NbK5mQX3Dxae1Un9eJCdPawt78ntjTs=",
        "originContent": "---",
        "translatedContent": "---"
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 20,
        "rowsha": "94MDjHJY1ZLwHNTLIEUIfk7TMc9cq1L/1FmwhqBTe/k=",
        "originContent": "<div align=\"center\">",
        "translatedContent": "<div align=\"center\">"
      },
      {
        "row": 21,
        "rowsha": "In2v320p1/fmcwhR6kZOmlE00sKhMJzlUE7GR8deQcA=",
        "originContent": "<p><strong><a href=\"README.md\">English</a> | <a href=\"README.zh-CN.md\">简体中文</a> | <a href=\"README.zh-Hant.md\">繁體中文</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ja\">日本語</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ko\">한국어</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=hi\">हिन्दी</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=th\">ไทย</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=fr\">Français</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=de\">Deutsch</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=es\">Español</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=it\">Italiano</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ru\">Русский</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=pt\">Português</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=nl\">Nederlands</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=pl\">Polski</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ar\">العربية</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=fa\">فارسی</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=tr\">Türkçe</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=vi\">Tiếng Việt</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=id\">Bahasa Indonesia</a><p></p>",
        "translatedContent": "<p><strong><a href=\"README.md\">English</a> | <a href=\"README.zh-CN.md\">简体中文</a> | <a href=\"README.zh-Hant.md\">繁體中文</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ja\">日本語</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ko\">한국어</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=hi\">हिन्दी</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=th\">ไทย</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=fr\">Français</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=de\">Deutsch</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=es\">Español</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=it\">Italiano</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ru\">Русский</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=pt\">Português</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=nl\">Nederlands</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=pl\">Polski</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=ar\">العربية</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=fa\">فارسی</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=tr\">Türkçe</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=vi\">Tiếng Việt</a> | <a href=\"https://openaitx.github.io/view.html?user=mini-software&amp;project=MiniExcel&amp;lang=id\">Bahasa Indonesia</a><p></p>"
      },
      {
        "row": 22,
        "rowsha": "+TueqhSkYmSUPbewkSBkuY58pMexokMmy2YXgJCxza8=",
        "originContent": "</strong></p>",
        "translatedContent": "</strong></p>"
      },
      {
        "row": 23,
        "rowsha": "qsMmUbEPVnxGG5tPJV1vsfpoWbU2jYvZpRr5IKshzyM=",
        "originContent": "</div>",
        "translatedContent": "</div>"
      },
      {
        "row": 24,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 26,
        "rowsha": "yz+R1U7uMOU+NbK5mQX3Dxae1Un9eJCdPawt78ntjTs=",
        "originContent": "---",
        "translatedContent": "---"
      },
      {
        "row": 27,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 28,
        "rowsha": "94MDjHJY1ZLwHNTLIEUIfk7TMc9cq1L/1FmwhqBTe/k=",
        "originContent": "<div align=\"center\">",
        "translatedContent": "<div align=\"center\">"
      },
      {
        "row": 29,
        "rowsha": "wF3KUUpyFo/CeNdfFGGQhBiswLzcxM8IXt1Q606zDUI=",
        "originContent": " Your <a href=\"https://github.com/mini-software/MiniExcel\">Stars</a> or <a href=\"https://miniexcel.github.io\">Donations</a> can make MiniExcel better",
        "translatedContent": " Tus <a href=\"https://github.com/mini-software/MiniExcel\">Estrellas</a> o <a href=\"https://miniexcel.github.io\">Donaciones</a> pueden hacer MiniExcel mejor"
      },
      {
        "row": 30,
        "rowsha": "qsMmUbEPVnxGG5tPJV1vsfpoWbU2jYvZpRr5IKshzyM=",
        "originContent": "</div>",
        "translatedContent": "</div>"
      },
      {
        "row": 31,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 32,
        "rowsha": "yz+R1U7uMOU+NbK5mQX3Dxae1Un9eJCdPawt78ntjTs=",
        "originContent": "---",
        "translatedContent": "---"
      },
      {
        "row": 33,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 34,
        "rowsha": "OPCmkLSln/6qmcKafK4OoGh/h8+Hi2XaZe80ucJ8NCA=",
        "originContent": "### Introduction",
        "translatedContent": "### Introducción"
      },
      {
        "row": 35,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 36,
        "rowsha": "0v8t3jo1uKmrcNdKaFVW+j6jGn9CTf9NvAZzS4tZovw=",
        "originContent": "MiniExcel is a simple and efficient Excel processing tool for .NET, specifically designed to minimize memory usage.",
        "translatedContent": "MiniExcel es una herramienta sencilla y eficiente para procesar archivos Excel en .NET, diseñada específicamente para minimizar el uso de memoria."
      },
      {
        "row": 37,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 38,
        "rowsha": "HAPHU2e2l/9+3FYlhDjxzqzhYXhxzv+miq1vPF6q8z0=",
        "originContent": "At present, most popular frameworks need to load all the data from an Excel document into memory to facilitate operations, but this may cause memory consumption problems. MiniExcel's approach is different: the data is processed row by row in a streaming manner, reducing the original consumption from potentially hundreds of megabytes to just a few megabytes, effectively preventing out-of-memory(OOM) issues.",
        "translatedContent": "Actualmente, la mayoría de los frameworks populares necesitan cargar todos los datos de un documento Excel en memoria para poder operar, pero esto puede causar problemas de consumo de memoria. El enfoque de MiniExcel es diferente: los datos se procesan fila por fila de manera streaming, reduciendo el consumo original de potencialmente cientos de megabytes a solo unos pocos megabytes, previniendo eficazmente los problemas de memoria insuficiente (OOM)."
      },
      {
        "row": 39,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "```mermaid\nflowchart LR\n    A1([\"Excel analysis<br>process\"]) --> A2{{\"Unzipping<br>XLSX file\"}} --> A3{{\"Parsing<br>OpenXML\"}} --> A4{{\"Model<br>conversion\"}} --> A5([\"Output\"])\n\n    B1([\"Other Excel<br>Frameworks\"]) --> B2{{\"Memory\"}} --> B3{{\"Memory\"}} --> B4{{\"Workbooks &<br>Worksheets\"}} --> B5([\"All rows at<br>the same time\"])\n\n    C1([\"MiniExcel\"]) --> C2{{\"Stream\"}} --> C3{{\"Stream\"}} --> C4{{\"POCO or dynamic\"}} --> C5([\"Deferred execution<br>row by row\"])\n\n    classDef analysis fill:#D0E8FF,stroke:#1E88E5,color:#0D47A1,font-weight:bold;\n    classDef others fill:#FCE4EC,stroke:#EC407A,color:#880E4F,font-weight:bold;\n    classDef miniexcel fill:#E8F5E9,stroke:#388E3C,color:#1B5E20,font-weight:bold;\n\n    class A1,A2,A3,A4,A5 analysis;\n    class B1,B2,B3,B4,B5 others;\n    class C1,C2,C3,C4,C5 miniexcel;\n```",
    "ContentSha": "bnIFwd8LvBFJAOaKE6MBE2NrNZ6/WESKpZeaRylRWaU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```mermaid\nflowchart LR\n    A1([\"Excel analysis<br>process\"]) --> A2{{\"Unzipping<br>XLSX file\"}} --> A3{{\"Parsing<br>OpenXML\"}} --> A4{{\"Model<br>conversion\"}} --> A5([\"Output\"])\n\n    B1([\"Other Excel<br>Frameworks\"]) --> B2{{\"Memory\"}} --> B3{{\"Memory\"}} --> B4{{\"Workbooks &<br>Worksheets\"}} --> B5([\"All rows at<br>the same time\"])\n\n    C1([\"MiniExcel\"]) --> C2{{\"Stream\"}} --> C3{{\"Stream\"}} --> C4{{\"POCO or dynamic\"}} --> C5([\"Deferred execution<br>row by row\"])\n\n    classDef analysis fill:#D0E8FF,stroke:#1E88E5,color:#0D47A1,font-weight:bold;\n    classDef others fill:#FCE4EC,stroke:#EC407A,color:#880E4F,font-weight:bold;\n    classDef miniexcel fill:#E8F5E9,stroke:#388E3C,color:#1B5E20,font-weight:bold;\n\n    class A1,A2,A3,A4,A5 analysis;\n    class B1,B2,B3,B4,B5 others;\n    class C1,C2,C3,C4,C5 miniexcel;\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "RtlHQpG+V59KLQkk05f8+fLlxsq4KdWUwAAs6jH0zbs=",
        "originContent": "```mermaid",
        "translatedContent": "```mermaid"
      },
      {
        "row": 2,
        "rowsha": "NbtGMQRYb+ECSAjnQEQyj1Wfd/AIdSDuS7qmIwBpGQs=",
        "originContent": "flowchart LR",
        "translatedContent": "flowchart LR"
      },
      {
        "row": 3,
        "rowsha": "O2QDilpnrhhRFbqjqOniMV8qqQuJKPunkT8JgqLW778=",
        "originContent": "    A1([\"Excel analysis<br>process\"]) --> A2{{\"Unzipping<br>XLSX file\"}} --> A3{{\"Parsing<br>OpenXML\"}} --> A4{{\"Model<br>conversion\"}} --> A5([\"Output\"])",
        "translatedContent": "    A1([\"Excel analysis<br>process\"]) --> A2{{\"Unzipping<br>XLSX file\"}} --> A3{{\"Parsing<br>OpenXML\"}} --> A4{{\"Model<br>conversion\"}} --> A5([\"Output\"])"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "uAXkBiYjGRhKwMgDeg3lG+nQEgI00JDgg/Bu1YBm7AY=",
        "originContent": "    B1([\"Other Excel<br>Frameworks\"]) --> B2{{\"Memory\"}} --> B3{{\"Memory\"}} --> B4{{\"Workbooks &<br>Worksheets\"}} --> B5([\"All rows at<br>the same time\"])",
        "translatedContent": "    B1([\"Other Excel<br>Frameworks\"]) --> B2{{\"Memory\"}} --> B3{{\"Memory\"}} --> B4{{\"Workbooks &<br>Worksheets\"}} --> B5([\"All rows at<br>the same time\"])"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "oJYpkh0NKmDoAjuWpcU7bwnra7okjfiNM8yHz6HW7kY=",
        "originContent": "    C1([\"MiniExcel\"]) --> C2{{\"Stream\"}} --> C3{{\"Stream\"}} --> C4{{\"POCO or dynamic\"}} --> C5([\"Deferred execution<br>row by row\"])",
        "translatedContent": "    C1([\"MiniExcel\"]) --> C2{{\"Stream\"}} --> C3{{\"Stream\"}} --> C4{{\"POCO or dynamic\"}} --> C5([\"Deferred execution<br>row by row\"])"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "Mpw7YkPc0qsdO8CFcnrd2l56uZViX4/XxEoW5kQk36I=",
        "originContent": "    classDef analysis fill:#D0E8FF,stroke:#1E88E5,color:#0D47A1,font-weight:bold;",
        "translatedContent": "    classDef analysis fill:#D0E8FF,stroke:#1E88E5,color:#0D47A1,font-weight:bold;"
      },
      {
        "row": 10,
        "rowsha": "jGJPnybW9WF4m4j3jjSm7jxQ13vaqn7IwZIOp54O/T4=",
        "originContent": "    classDef others fill:#FCE4EC,stroke:#EC407A,color:#880E4F,font-weight:bold;",
        "translatedContent": "    classDef others fill:#FCE4EC,stroke:#EC407A,color:#880E4F,font-weight:bold;"
      },
      {
        "row": 11,
        "rowsha": "BYOpKfGX8DbYVZfAbYfs228FK/fjpapT+etcyAp49Pc=",
        "originContent": "    classDef miniexcel fill:#E8F5E9,stroke:#388E3C,color:#1B5E20,font-weight:bold;",
        "translatedContent": "    classDef miniexcel fill:#E8F5E9,stroke:#388E3C,color:#1B5E20,font-weight:bold;"
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "5PcX9iDTvfCuxQZD0tiubd/LkDUwLNou/V3JIs1e9uU=",
        "originContent": "    class A1,A2,A3,A4,A5 analysis;",
        "translatedContent": "    class A1,A2,A3,A4,A5 analysis;"
      },
      {
        "row": 14,
        "rowsha": "IOS1a2PzJyUlzG36dnjTB4YO3+07BWWD4nvbtV990tU=",
        "originContent": "    class B1,B2,B3,B4,B5 others;",
        "translatedContent": "    class B1,B2,B3,B4,B5 others;"
      },
      {
        "row": 15,
        "rowsha": "NPsSao3gpdS5YzTGEMqgEfAn+E2OLxFyOekTE2qrCfw=",
        "originContent": "    class C1,C2,C3,C4,C5 miniexcel;",
        "translatedContent": "    class C1,C2,C3,C4,C5 miniexcel;"
      },
      {
        "row": 16,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 3,
    "Content": "\n### Features\n\n- Minimizes memory consumption, preventing out-of-memory (OOM) errors and avoiding full garbage collections\n- Enables real-time, row-level data operations for better performance on large datasets\n- Supports LINQ with deferred execution, allowing for fast, memory-efficient paging and complex queries\n- Lightweight, without the need for Microsoft Office or COM+ components, and a DLL size under 500KB\n- Simple and intuitive API style to read/write/fill excel\n\n### Get Started\n\n- [Import/Query Excel](#getstart1)\n\n- [Export/Create Excel](#getstart2)\n\n- [Excel Template](#getstart3)\n\n- [Excel Column Name/Index/Ignore Attribute](#getstart4)\n\n- [Examples](#getstart5)\n\n\n\n### Installation\n\nYou can install the package [from NuGet](https://www.nuget.org/packages/MiniExcel)\n\n### Release Notes\n\nPlease Check [Release Notes](docs)\n\n### TODO\n\nPlease Check  [TODO](https://github.com/mini-software/MiniExcel/projects/1?fullscreen=true)\n\n### Performance\n\nThe code for the benchmarks can be found in [MiniExcel.Benchmarks](https://raw.githubusercontent.com/mini-software/MiniExcel/master/benchmarks/MiniExcel.Benchmarks/Program.cs).\n\nThe file used to test performance is [**Test1,000,000x10.xlsx**](https://raw.githubusercontent.com/mini-software/MiniExcel/master/benchmarks/MiniExcel.Benchmarks/Test1%2C000%2C000x10.xlsx), a 32MB document containing 1,000,000 rows * 10 columns whose cells are filled with the string \"HelloWorld\".\n\nTo run all the benchmarks use:\n",
    "ContentSha": "2UgPykHhGd9H/aLIYfiXZAzaTEiTOpNvuXxX23XZVMM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### Características\n\n- Minimiza el consumo de memoria, previniendo errores de falta de memoria (OOM) y evitando recolecciones completas de basura\n- Permite operaciones de datos en tiempo real a nivel de fila para un mejor rendimiento en grandes conjuntos de datos\n- Soporta LINQ con ejecución diferida, permitiendo paginación rápida y eficiente en memoria y consultas complejas\n- Liviano, sin necesidad de Microsoft Office ni componentes COM+, y un tamaño de DLL menor a 500KB\n- API simple e intuitiva para leer/escribir/llenar Excel\n\n### Comenzar\n\n- [Importar/Consultar Excel](#getstart1)\n\n- [Exportar/Crear Excel](#getstart2)\n\n- [Plantilla de Excel](#getstart3)\n\n- [Atributo de Nombre/Índice/Ignorar Columna de Excel](#getstart4)\n\n- [Ejemplos](#getstart5)\n\n\n\n### Instalación\n\nPuedes instalar el paquete [desde NuGet](https://www.nuget.org/packages/MiniExcel)\n\n### Notas de Lanzamiento\n\nPor favor revisa las [Notas de Lanzamiento](docs)\n\n### POR HACER\n\nPor favor revisa [POR HACER](https://github.com/mini-software/MiniExcel/projects/1?fullscreen=true)\n\n### Rendimiento\n\nEl código para las pruebas de rendimiento se puede encontrar en [MiniExcel.Benchmarks](https://raw.githubusercontent.com/mini-software/MiniExcel/master/benchmarks/MiniExcel.Benchmarks/Program.cs).\n\nEl archivo utilizado para probar el rendimiento es [**Test1,000,000x10.xlsx**](https://raw.githubusercontent.com/mini-software/MiniExcel/master/benchmarks/MiniExcel.Benchmarks/Test1%2C000%2C000x10.xlsx), un documento de 32MB que contiene 1,000,000 de filas * 10 columnas cuyas celdas están llenas con la cadena \"HelloWorld\".\n\nPara ejecutar todas las pruebas de rendimiento utiliza:\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Características"
      },
      {
        "row": 2,
        "rowsha": "Va7ER4dHPfmt1CvLSeep2AEpy33nUzxb+6qMZz++7BQ=",
        "originContent": "### Features",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- Minimiza el consumo de memoria, previniendo errores de falta de memoria (OOM) y evitando recolecciones completas de basura"
      },
      {
        "row": 4,
        "rowsha": "JOmN6SLH2dZr4v1CFEyJh97jFnX2O/eFYpzSK/TOYoo=",
        "originContent": "- Minimizes memory consumption, preventing out-of-memory (OOM) errors and avoiding full garbage collections",
        "translatedContent": "- Permite operaciones de datos en tiempo real a nivel de fila para un mejor rendimiento en grandes conjuntos de datos"
      },
      {
        "row": 5,
        "rowsha": "Htj9mkBjP1OItR2VMbphfdDgNKDKeZ+UHN3Sv5g6I+w=",
        "originContent": "- Enables real-time, row-level data operations for better performance on large datasets",
        "translatedContent": "- Soporta LINQ con ejecución diferida, permitiendo paginación rápida y eficiente en memoria y consultas complejas"
      },
      {
        "row": 6,
        "rowsha": "vmQHR0XEaoIUxJ2uBgBFcPNDdouHaw8fqgoQ5GPYlJc=",
        "originContent": "- Supports LINQ with deferred execution, allowing for fast, memory-efficient paging and complex queries",
        "translatedContent": "- Liviano, sin necesidad de Microsoft Office ni componentes COM+, y un tamaño de DLL menor a 500KB"
      },
      {
        "row": 7,
        "rowsha": "td5CuK/iTapatubsYvTtLeHyrnXUH3PmsM1YhWD1CYA=",
        "originContent": "- Lightweight, without the need for Microsoft Office or COM+ components, and a DLL size under 500KB",
        "translatedContent": "- API simple e intuitiva para leer/escribir/llenar Excel"
      },
      {
        "row": 8,
        "rowsha": "YjuJsmIcVg3xh6eZdOxUep5PtUdHPjElYHdxf5PShbQ=",
        "originContent": "- Simple and intuitive API style to read/write/fill excel",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Comenzar"
      },
      {
        "row": 10,
        "rowsha": "08//RRu/6H7fyjX0UhqYGyFiwKjkhFemLeOssh93kwc=",
        "originContent": "### Get Started",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- [Importar/Consultar Excel](#getstart1)"
      },
      {
        "row": 12,
        "rowsha": "a8kdR4Mj9cvrgF8rfddRk+RvJQD5DLo1mTvLUsrK7L0=",
        "originContent": "- [Import/Query Excel](#getstart1)",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- [Exportar/Crear Excel](#getstart2)"
      },
      {
        "row": 14,
        "rowsha": "fAI1rmIOAyYoAwJ25Agsc1ZYhrrGXwTMRpY/azKDBU4=",
        "originContent": "- [Export/Create Excel](#getstart2)",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- [Plantilla de Excel](#getstart3)"
      },
      {
        "row": 16,
        "rowsha": "KcKJ+Cjcclb8RxHeZqicujbUCHNQ21MsD1umewI4Z0Q=",
        "originContent": "- [Excel Template](#getstart3)",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- [Atributo de Nombre/Índice/Ignorar Columna de Excel](#getstart4)"
      },
      {
        "row": 18,
        "rowsha": "NpJ6zfg/JyMXY6nOiSEKK5nKtAqyl1f2h7vHMmTm09c=",
        "originContent": "- [Excel Column Name/Index/Ignore Attribute](#getstart4)",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- [Ejemplos](#getstart5)"
      },
      {
        "row": 20,
        "rowsha": "raxjfYsVvz3EfEgXQz7nSKEnAHzn2fXpEXmcpKYdRso=",
        "originContent": "- [Examples](#getstart5)",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 22,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 23,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Instalación"
      },
      {
        "row": 24,
        "rowsha": "JuAC4s82hMbNkRqX17s0ltqjVmeI/HhsmWljgf+i7Kg=",
        "originContent": "### Installation",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Puedes instalar el paquete [desde NuGet](https://www.nuget.org/packages/MiniExcel)"
      },
      {
        "row": 26,
        "rowsha": "sAFRPB9YnIeW48AgEMKYoGfBhp3nOmxk2MRPoOK1vBA=",
        "originContent": "You can install the package [from NuGet](https://www.nuget.org/packages/MiniExcel)",
        "translatedContent": ""
      },
      {
        "row": 27,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Notas de Lanzamiento"
      },
      {
        "row": 28,
        "rowsha": "0rXZG5e8WSaQeLoIIQW3aFZFk+2np8bOoZpMfwdfr5s=",
        "originContent": "### Release Notes",
        "translatedContent": ""
      },
      {
        "row": 29,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Por favor revisa las [Notas de Lanzamiento](docs)"
      },
      {
        "row": 30,
        "rowsha": "6glDEnzKUwBBFQWehygbHAofD6RTXVKWBdKdH5XtI14=",
        "originContent": "Please Check [Release Notes](docs)",
        "translatedContent": ""
      },
      {
        "row": 31,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### POR HACER"
      },
      {
        "row": 32,
        "rowsha": "F8LwUOZ4tDJeV2W/K2C9N0HW21H4xuvFdGr6cF8VLK4=",
        "originContent": "### TODO",
        "translatedContent": ""
      },
      {
        "row": 33,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Por favor revisa [POR HACER](https://github.com/mini-software/MiniExcel/projects/1?fullscreen=true)"
      },
      {
        "row": 34,
        "rowsha": "mhKaiCxmm/ZJJWDNqrSGNwLbl96dmiyee0oRa4A1l/o=",
        "originContent": "Please Check  [TODO](https://github.com/mini-software/MiniExcel/projects/1?fullscreen=true)",
        "translatedContent": ""
      },
      {
        "row": 35,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Rendimiento"
      },
      {
        "row": 36,
        "rowsha": "0Qb7J7NNDFOWTzu3jehHtiAPXVpyQ3fb/6bL9d29HtM=",
        "originContent": "### Performance",
        "translatedContent": ""
      },
      {
        "row": 37,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "El código para las pruebas de rendimiento se puede encontrar en [MiniExcel.Benchmarks](https://raw.githubusercontent.com/mini-software/MiniExcel/master/benchmarks/MiniExcel.Benchmarks/Program.cs)."
      },
      {
        "row": 38,
        "rowsha": "lJad+2SkaA6tvBfheprzhC0KexYW/uCv6olLBZksSnM=",
        "originContent": "The code for the benchmarks can be found in [MiniExcel.Benchmarks](https://raw.githubusercontent.com/mini-software/MiniExcel/master/benchmarks/MiniExcel.Benchmarks/Program.cs).",
        "translatedContent": ""
      },
      {
        "row": 39,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "El archivo utilizado para probar el rendimiento es [**Test1,000,000x10.xlsx**](https://raw.githubusercontent.com/mini-software/MiniExcel/master/benchmarks/MiniExcel.Benchmarks/Test1%2C000%2C000x10.xlsx), un documento de 32MB que contiene 1,000,000 de filas * 10 columnas cuyas celdas están llenas con la cadena \"HelloWorld\"."
      },
      {
        "row": 40,
        "rowsha": "HhyzvlsPpItyo5JxUqbTeHH8UFHSL3yJePD3jod3xY0=",
        "originContent": "The file used to test performance is [**Test1,000,000x10.xlsx**](https://raw.githubusercontent.com/mini-software/MiniExcel/master/benchmarks/MiniExcel.Benchmarks/Test1%2C000%2C000x10.xlsx), a 32MB document containing 1,000,000 rows * 10 columns whose cells are filled with the string \"HelloWorld\".",
        "translatedContent": ""
      },
      {
        "row": 41,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Para ejecutar todas las pruebas de rendimiento utiliza:"
      },
      {
        "row": 42,
        "rowsha": "nyd9/qzpIiN/zJHzl3xubyEx9IQmPubz0GM8cJnIgWc=",
        "originContent": "To run all the benchmarks use:",
        "translatedContent": ""
      },
      {
        "row": 43,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 4,
    "Content": "```bash\ndotnet run -project .\\benchmarks\\MiniExcel.Benchmarks -c Release -f net9.0 -filter * --join\n```",
    "ContentSha": "MEF/2+7PD/OGKiFiAH54Uh22Gbk1lSVJY3caZpF1C+w=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```bash\ndotnet run -project .\\benchmarks\\MiniExcel.Benchmarks -c Release -f net9.0 -filter * --join\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "rTMjNc+qNIxb1xXDR5hEYiJw1fc4muBwuBsTXVIaIho=",
        "originContent": "```bash",
        "translatedContent": "```bash"
      },
      {
        "row": 2,
        "rowsha": "gL0HdqBsoe97kkI9a4fUoueBclohYNhDdnYLsDGEhAI=",
        "originContent": "dotnet run -project .\\benchmarks\\MiniExcel.Benchmarks -c Release -f net9.0 -filter * --join",
        "translatedContent": "dotnet run -project .\\benchmarks\\MiniExcel.Benchmarks -c Release -f net9.0 -filter * --join"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 5,
    "Content": "\nYou can find the benchmarks' results for the latest release [here](benchmarks/results).\n\n\n### Excel Query/Import  <a name=\"getstart1\"></a>\n\n#### 1. Execute a query and map the results to a strongly typed IEnumerable [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\nRecommand to use Stream.Query because of better efficiency.\n",
    "ContentSha": "HeSgXOxQHY3aicwcbSvagnTLLLya3vCPzcty5cAKzmc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Puede encontrar los resultados de los benchmarks para la última versión [aquí](benchmarks/results).\n\n\n### Consulta/Importación de Excel  <a name=\"getstart1\"></a>\n\n#### 1. Ejecutar una consulta y asignar los resultados a un IEnumerable fuertemente tipado [[Pruébalo]](https://dotnetfiddle.net/w5WD1J)\n\nSe recomienda usar Stream.Query debido a su mayor eficiencia.\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Puede encontrar los resultados de los benchmarks para la última versión [aquí](benchmarks/results)."
      },
      {
        "row": 2,
        "rowsha": "5Ld+Inlm3kIizYcVP6h7Jv5AFWW0p7bJ1NvIdtkJNTc=",
        "originContent": "You can find the benchmarks' results for the latest release [here](benchmarks/results).",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Consulta/Importación de Excel  <a name=\"getstart1\"></a>"
      },
      {
        "row": 5,
        "rowsha": "9DJt0J7hJTt5ZJPfWd00ao6hMU/m+QV/sqpwbg2NOWU=",
        "originContent": "### Excel Query/Import  <a name=\"getstart1\"></a>",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 1. Ejecutar una consulta y asignar los resultados a un IEnumerable fuertemente tipado [[Pruébalo]](https://dotnetfiddle.net/w5WD1J)"
      },
      {
        "row": 7,
        "rowsha": "0xeZUgvI7oUDuCfT7+uOZ1NNZv43tIeZc97guxjNf9k=",
        "originContent": "#### 1. Execute a query and map the results to a strongly typed IEnumerable [[Try it]](https://dotnetfiddle.net/w5WD1J)",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Se recomienda usar Stream.Query debido a su mayor eficiencia."
      },
      {
        "row": 9,
        "rowsha": "8qU1WXwaozhHYqFGqh4aukJ0JAptjyTFbnxFL1RzKU8=",
        "originContent": "Recommand to use Stream.Query because of better efficiency.",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 6,
    "Content": "```csharp\npublic class UserAccount\n{\n    public Guid ID { get; set; }\n    public string Name { get; set; }\n    public DateTime BoD { get; set; }\n    public int Age { get; set; }\n    public bool VIP { get; set; }\n    public decimal Points { get; set; }\n}\n\nvar rows = MiniExcel.Query<UserAccount>(path);\n\n// or\n\nusing (var stream = File.OpenRead(path))\n    var rows = stream.Query<UserAccount>();\n```",
    "ContentSha": "cLconHwnnKmBqHC0/Wmu90yyg0WLR4s26P3TtXeUPJw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic class UserAccount\n{\n    public Guid ID { get; set; }\n    public string Name { get; set; }\n    public DateTime BoD { get; set; }\n    public int Age { get; set; }\n    public bool VIP { get; set; }\n    public decimal Points { get; set; }\n}\n\nvar rows = MiniExcel.Query<UserAccount>(path);\n\n// or\n\nusing (var stream = File.OpenRead(path))\n    var rows = stream.Query<UserAccount>();\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "IhKewDonUoxO4s3D45OSfVTyzW7TWExd9PjhLEnNDzk=",
        "originContent": "public class UserAccount",
        "translatedContent": "public class UserAccount"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "fC5t+l/n5A3Y5D9uki7r4Txl5nT0o/NJPp1JMvW2wvQ=",
        "originContent": "    public Guid ID { get; set; }",
        "translatedContent": "    public Guid ID { get; set; }"
      },
      {
        "row": 5,
        "rowsha": "I+HeTmsXHfkoFyvCRpVIXNEwM37IfwiQRH1OXTwlp4Q=",
        "originContent": "    public string Name { get; set; }",
        "translatedContent": "    public string Name { get; set; }"
      },
      {
        "row": 6,
        "rowsha": "utq49WOmhqV+3RKTuhYZSnVYNWrdrflZMmnSbeWn+Kc=",
        "originContent": "    public DateTime BoD { get; set; }",
        "translatedContent": "    public DateTime BoD { get; set; }"
      },
      {
        "row": 7,
        "rowsha": "bq3dCNeKdTNiA5LyDy1CV7S8aQEkdr3dsFil3zI8V28=",
        "originContent": "    public int Age { get; set; }",
        "translatedContent": "    public int Age { get; set; }"
      },
      {
        "row": 8,
        "rowsha": "3V8jsyA+IxAxmfD7rbPubABeuXnHZgJKo/YKW/aoGR0=",
        "originContent": "    public bool VIP { get; set; }",
        "translatedContent": "    public bool VIP { get; set; }"
      },
      {
        "row": 9,
        "rowsha": "zaWBkWmzn9H9XQoC7O+P+fv+R/71AcMr6D3bwCZlJnI=",
        "originContent": "    public decimal Points { get; set; }",
        "translatedContent": "    public decimal Points { get; set; }"
      },
      {
        "row": 10,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "XEye8w9nUyfTsJ0GuedJEHGFc+lAHvBWzxs2gI1X5w8=",
        "originContent": "var rows = MiniExcel.Query<UserAccount>(path);",
        "translatedContent": "var rows = MiniExcel.Query<UserAccount>(path);"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "U8nX4/7qeeOEVKc5G5zp7nhH9hdP7onP55ivPRofMTg=",
        "originContent": "// or",
        "translatedContent": "// or"
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "vYgfKv57hLko4cVTqUoakYp9YVo47wKCM9dEBmaEank=",
        "originContent": "using (var stream = File.OpenRead(path))",
        "translatedContent": "using (var stream = File.OpenRead(path))"
      },
      {
        "row": 17,
        "rowsha": "kRA/xaSlnRfOxC9ta+eYCO2P7DvdhTlJJlH9BT2MNrA=",
        "originContent": "    var rows = stream.Query<UserAccount>();",
        "translatedContent": "    var rows = stream.Query<UserAccount>();"
      },
      {
        "row": 18,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 7,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/111107423-c8c46b80-8591-11eb-982f-c97a2dafb379.png)\n\n#### 2. Execute a query and map it to a list of dynamic objects without using head [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\n* dynamic key is `A.B.C.D..`\n\n| MiniExcel | 1 |\n|-----------|---|\n| Github    | 2 |\n",
    "ContentSha": "gioEAB/rMfupv6YQa6R4+9TQRVVzid74xvcdobWZY1E=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/111107423-c8c46b80-8591-11eb-982f-c97a2dafb379.png)\n\n#### 2. Ejecuta una consulta y asígnala a una lista de objetos dinámicos sin usar head [[Pruébalo]](https://dotnetfiddle.net/w5WD1J)\n\n* la clave dinámica es `A.B.C.D..`\n\n| MiniExcel | 1 |\n|-----------|---|\n| Github    | 2 |\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/111107423-c8c46b80-8591-11eb-982f-c97a2dafb379.png)"
      },
      {
        "row": 2,
        "rowsha": "KNncvPwZHGXJ5Yiw+r4ObyrbWlXqxPh6Dbugmz3K+F4=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/111107423-c8c46b80-8591-11eb-982f-c97a2dafb379.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 2. Ejecuta una consulta y asígnala a una lista de objetos dinámicos sin usar head [[Pruébalo]](https://dotnetfiddle.net/w5WD1J)"
      },
      {
        "row": 4,
        "rowsha": "yfBvZ9IyWiRjkc/Q1BZfNAN8VCv4WX+/AHcVd9hd81A=",
        "originContent": "#### 2. Execute a query and map it to a list of dynamic objects without using head [[Try it]](https://dotnetfiddle.net/w5WD1J)",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "* la clave dinámica es `A.B.C.D..`"
      },
      {
        "row": 6,
        "rowsha": "79odUNKnSdsuTObM0PUlMh4IHqdfg+gnrKxYphai2oY=",
        "originContent": "* dynamic key is `A.B.C.D..`",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "| MiniExcel | 1 |"
      },
      {
        "row": 8,
        "rowsha": "+WuTLHErtirMym1fQp08vc8wybG89pbCSKmHU6pSZ8E=",
        "originContent": "| MiniExcel | 1 |",
        "translatedContent": "|-----------|---|"
      },
      {
        "row": 9,
        "rowsha": "mGn34tu7UDzoSM5OYQuqBZf8Z0X09EXiwI/ixN8c4Aw=",
        "originContent": "|-----------|---|",
        "translatedContent": "| Github    | 2 |"
      },
      {
        "row": 10,
        "rowsha": "Exj39b1DGf7dZrhbo1WxNkNoV+eWOzaHZjM2p/YOU+E=",
        "originContent": "| Github    | 2 |",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 8,
    "Content": "```csharp\n\nvar rows = MiniExcel.Query(path).ToList();\n\n// or\nusing (var stream = File.OpenRead(path))\n{\n    var rows = stream.Query().ToList();\n\n    Assert.Equal(\"MiniExcel\", rows[0].A);\n    Assert.Equal(1, rows[0].B);\n    Assert.Equal(\"Github\", rows[1].A);\n    Assert.Equal(2, rows[1].B);\n}\n```",
    "ContentSha": "x7QWjOi1cd7Xsnxys/qE+wxOVEmSYninSZ+gSaZn0IE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n\nvar rows = MiniExcel.Query(path).ToList();\n\n// or\nusing (var stream = File.OpenRead(path))\n{\n    var rows = stream.Query().ToList();\n\n    Assert.Equal(\"MiniExcel\", rows[0].A);\n    Assert.Equal(1, rows[0].B);\n    Assert.Equal(\"Github\", rows[1].A);\n    Assert.Equal(2, rows[1].B);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "1j19c4E5+pUes2IV39zPZzZGdWNWhzdG7eXQxKe8Af8=",
        "originContent": "var rows = MiniExcel.Query(path).ToList();",
        "translatedContent": "var rows = MiniExcel.Query(path).ToList();"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "U8nX4/7qeeOEVKc5G5zp7nhH9hdP7onP55ivPRofMTg=",
        "originContent": "// or",
        "translatedContent": "// or"
      },
      {
        "row": 6,
        "rowsha": "vYgfKv57hLko4cVTqUoakYp9YVo47wKCM9dEBmaEank=",
        "originContent": "using (var stream = File.OpenRead(path))",
        "translatedContent": "using (var stream = File.OpenRead(path))"
      },
      {
        "row": 7,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 8,
        "rowsha": "bDJTaIY5kT8ioq+NSKHJdZ1hUpjYkeLeva+oIwY1lPo=",
        "originContent": "    var rows = stream.Query().ToList();",
        "translatedContent": "    var rows = stream.Query().ToList();"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "7KZcWJTJLoNBSr8Ko/VVg40nAzGUzMNG/x2DvLfaRZQ=",
        "originContent": "    Assert.Equal(\"MiniExcel\", rows[0].A);",
        "translatedContent": "    Assert.Equal(\"MiniExcel\", rows[0].A);"
      },
      {
        "row": 11,
        "rowsha": "dsR9tqURWjy3FIwxx7QaNLRQb+LfwmMS4zL9Kk63/08=",
        "originContent": "    Assert.Equal(1, rows[0].B);",
        "translatedContent": "    Assert.Equal(1, rows[0].B);"
      },
      {
        "row": 12,
        "rowsha": "LUVy4nbW0tiQKjGZ9gk7Kgtc5JrAh5qsdlQw5rdnSBY=",
        "originContent": "    Assert.Equal(\"Github\", rows[1].A);",
        "translatedContent": "    Assert.Equal(\"Github\", rows[1].A);"
      },
      {
        "row": 13,
        "rowsha": "fzS4BWuxYNcSOeoYAYUxNoDBtS9W4IL8iQmJG5x0SzQ=",
        "originContent": "    Assert.Equal(2, rows[1].B);",
        "translatedContent": "    Assert.Equal(2, rows[1].B);"
      },
      {
        "row": 14,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 15,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 9,
    "Content": "\n#### 3. Execute a query with first header row [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\nnote : same column name use last right one\n\nInput Excel :\n\n| Column1   | Column2 |\n|-----------|---------|\n| MiniExcel | 1       |\n| Github    | 2       |\n\n",
    "ContentSha": "N47ztr+uJ4w2wom+qHo19WTtqSfMVTZzNEMxmergXEE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 10,
    "Content": "```csharp\n\nvar rows = MiniExcel.Query(useHeaderRow:true).ToList();\n\n// or\n\nusing (var stream = File.OpenRead(path))\n{\n    var rows = stream.Query(useHeaderRow:true).ToList();\n\n    Assert.Equal(\"MiniExcel\", rows[0].Column1);\n    Assert.Equal(1, rows[0].Column2);\n    Assert.Equal(\"Github\", rows[1].Column1);\n    Assert.Equal(2, rows[1].Column2);\n}\n```",
    "ContentSha": "lpgF5LPjcBqsQ5stqqngCaGIdV9pPzvn/I3xouxkWC0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n\nvar rows = MiniExcel.Query(useHeaderRow:true).ToList();\n\n// or\n\nusing (var stream = File.OpenRead(path))\n{\n    var rows = stream.Query(useHeaderRow:true).ToList();\n\n    Assert.Equal(\"MiniExcel\", rows[0].Column1);\n    Assert.Equal(1, rows[0].Column2);\n    Assert.Equal(\"Github\", rows[1].Column1);\n    Assert.Equal(2, rows[1].Column2);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "9y0kBbGJ5+UIu77vaUkkuslpyh0bplN6HXnj+9aNhas=",
        "originContent": "var rows = MiniExcel.Query(useHeaderRow:true).ToList();",
        "translatedContent": "var rows = MiniExcel.Query(useHeaderRow:true).ToList();"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "U8nX4/7qeeOEVKc5G5zp7nhH9hdP7onP55ivPRofMTg=",
        "originContent": "// or",
        "translatedContent": "// or"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "vYgfKv57hLko4cVTqUoakYp9YVo47wKCM9dEBmaEank=",
        "originContent": "using (var stream = File.OpenRead(path))",
        "translatedContent": "using (var stream = File.OpenRead(path))"
      },
      {
        "row": 8,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 9,
        "rowsha": "2NN2LVRBw2ekxO+uY+106LwOkps5gis7NE7nbCsamt0=",
        "originContent": "    var rows = stream.Query(useHeaderRow:true).ToList();",
        "translatedContent": "    var rows = stream.Query(useHeaderRow:true).ToList();"
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "EXPsZDliaNP99ALgLtN36A55NrA23BvDG50ryhUqg28=",
        "originContent": "    Assert.Equal(\"MiniExcel\", rows[0].Column1);",
        "translatedContent": "    Assert.Equal(\"MiniExcel\", rows[0].Column1);"
      },
      {
        "row": 12,
        "rowsha": "sbK9NSF5clnfN3jhGiZdRJyq3ZzWFslEcNdxyAhKCHU=",
        "originContent": "    Assert.Equal(1, rows[0].Column2);",
        "translatedContent": "    Assert.Equal(1, rows[0].Column2);"
      },
      {
        "row": 13,
        "rowsha": "6JIm1LvegnYA/4scXcnHjLam3uJiZmUcsdl8ChenmRs=",
        "originContent": "    Assert.Equal(\"Github\", rows[1].Column1);",
        "translatedContent": "    Assert.Equal(\"Github\", rows[1].Column1);"
      },
      {
        "row": 14,
        "rowsha": "nfWVWwFFGOKIOrmz9mdrqfzqEYeYzZqGXuvl2TW2hq4=",
        "originContent": "    Assert.Equal(2, rows[1].Column2);",
        "translatedContent": "    Assert.Equal(2, rows[1].Column2);"
      },
      {
        "row": 15,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 16,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 11,
    "Content": "\n#### 4. Query Support LINQ Extension First/Take/Skip ...etc\n\nQuery First",
    "ContentSha": "Dv+u+OiAZ2/wIfjQSDKXvMmnYJ7kYmBy7/dw24u/fYQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 12,
    "Content": "```csharp\nvar row = MiniExcel.Query(path).First();\nAssert.Equal(\"HelloWorld\", row.A);\n\n// or\n\nusing (var stream = File.OpenRead(path))\n{\n    var row = stream.Query().First();\n    Assert.Equal(\"HelloWorld\", row.A);\n}\n```",
    "ContentSha": "o4xMZPgtf9yny18ztgi2oj8kD2QnynEQcmSXR/6Bma8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar row = MiniExcel.Query(path).First();\nAssert.Equal(\"HelloWorld\", row.A);\n\n// or\n\nusing (var stream = File.OpenRead(path))\n{\n    var row = stream.Query().First();\n    Assert.Equal(\"HelloWorld\", row.A);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "afGW02XDihsuzc5Sg2x2Elhi5Qv1wr5kDE71Mm2Kt+A=",
        "originContent": "var row = MiniExcel.Query(path).First();",
        "translatedContent": "var row = MiniExcel.Query(path).First();"
      },
      {
        "row": 3,
        "rowsha": "KZ3BZPqHLQ22UQPo0km35qj9ekkCYsOLmc/JzBaMd5k=",
        "originContent": "Assert.Equal(\"HelloWorld\", row.A);",
        "translatedContent": "Assert.Equal(\"HelloWorld\", row.A);"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "U8nX4/7qeeOEVKc5G5zp7nhH9hdP7onP55ivPRofMTg=",
        "originContent": "// or",
        "translatedContent": "// or"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "vYgfKv57hLko4cVTqUoakYp9YVo47wKCM9dEBmaEank=",
        "originContent": "using (var stream = File.OpenRead(path))",
        "translatedContent": "using (var stream = File.OpenRead(path))"
      },
      {
        "row": 8,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 9,
        "rowsha": "1IdqER1cB2T2k+x0vP7fXpL/m1jb53gPCkk8iDl3WtE=",
        "originContent": "    var row = stream.Query().First();",
        "translatedContent": "    var row = stream.Query().First();"
      },
      {
        "row": 10,
        "rowsha": "OPb9ohoTG+b025E4msLU+8W5m84rzUNVYS0tlYDS7Fw=",
        "originContent": "    Assert.Equal(\"HelloWorld\", row.A);",
        "translatedContent": "    Assert.Equal(\"HelloWorld\", row.A);"
      },
      {
        "row": 11,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 12,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 13,
    "Content": "\nPerformance between MiniExcel/ExcelDataReader/ClosedXML/EPPlus\n![queryfirst](https://user-images.githubusercontent.com/12729184/111072392-6037a900-8515-11eb-9693-5ce2dad1e460.gif)\n\n#### 5. Query by sheet name\n",
    "ContentSha": "JexnguNEhtFAH05mAdpYGAFqrENKtYY1qJVbw+zDKeA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Rendimiento entre MiniExcel/ExcelDataReader/ClosedXML/EPPlus\n![queryfirst](https://user-images.githubusercontent.com/12729184/111072392-6037a900-8515-11eb-9693-5ce2dad1e460.gif)\n\n#### 5. Consulta por nombre de hoja\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Rendimiento entre MiniExcel/ExcelDataReader/ClosedXML/EPPlus"
      },
      {
        "row": 2,
        "rowsha": "+S11pBuj6Dv50xWiD7Xx/NOhblQytge5HStLXdE9wb4=",
        "originContent": "Performance between MiniExcel/ExcelDataReader/ClosedXML/EPPlus",
        "translatedContent": "![queryfirst](https://user-images.githubusercontent.com/12729184/111072392-6037a900-8515-11eb-9693-5ce2dad1e460.gif)"
      },
      {
        "row": 3,
        "rowsha": "Kw06Hki553/JaeJi035Rkzlc710cqIjxo1pN8moPP6g=",
        "originContent": "![queryfirst](https://user-images.githubusercontent.com/12729184/111072392-6037a900-8515-11eb-9693-5ce2dad1e460.gif)",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 5. Consulta por nombre de hoja"
      },
      {
        "row": 5,
        "rowsha": "MXjj9dMHmVEapMtnUlXxywFlbNMPaTo2OGSUT3ju2Fo=",
        "originContent": "#### 5. Query by sheet name",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 14,
    "Content": "```csharp\nMiniExcel.Query(path, sheetName: \"SheetName\");\n//or\nstream.Query(sheetName: \"SheetName\");\n```",
    "ContentSha": "HEsU0MCZzQQqUU7IRpbxIPkqqpBeZ3agNDuBe+ZfW0M=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nMiniExcel.Query(path, sheetName: \"SheetName\");\n//or\nstream.Query(sheetName: \"SheetName\");\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "JACVAdDBtZnEJrdszQ/C6uMj8ILFgRGCJ6QOTnngAT4=",
        "originContent": "MiniExcel.Query(path, sheetName: \"SheetName\");",
        "translatedContent": "MiniExcel.Query(path, sheetName: \"SheetName\");"
      },
      {
        "row": 3,
        "rowsha": "Pr8W+maDDzk884RTyWBjmCslrnI8N2iV+wL7nyNu2yY=",
        "originContent": "//or",
        "translatedContent": "//or"
      },
      {
        "row": 4,
        "rowsha": "0TXaH6gqfyFULVyILqkdnppdIzsyKpjvFkbnCl6Icxo=",
        "originContent": "stream.Query(sheetName: \"SheetName\");",
        "translatedContent": "stream.Query(sheetName: \"SheetName\");"
      },
      {
        "row": 5,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 15,
    "Content": "\n#### 6. Query all sheet name and rows\n",
    "ContentSha": "zxLYbs/fQYgcc+yYJYA68nxFdyp4EldiRc3akVXjpnk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 6. Consultar todos los nombres de hoja y filas\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 6. Consultar todos los nombres de hoja y filas"
      },
      {
        "row": 2,
        "rowsha": "K8VBS0qp1cEwJuShyQMnvnmRMwsE/QHa7lYIx9MlRxI=",
        "originContent": "#### 6. Query all sheet name and rows",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 16,
    "Content": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```",
    "ContentSha": "a3vCrrvf6qQNHABWOBwO+3TzRKd5l9C5cLl/DurtYJk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "64/r6soThA8hXbYkTQdBCysorT1lCJFYnT22DPQcDyw=",
        "originContent": "var sheetNames = MiniExcel.GetSheetNames(path);",
        "translatedContent": "var sheetNames = MiniExcel.GetSheetNames(path);"
      },
      {
        "row": 3,
        "rowsha": "nef8+trfyZ3ab9OJPDQvDL1QLEkelhvZ4MZSy3kYCZg=",
        "originContent": "foreach (var sheetName in sheetNames)",
        "translatedContent": "foreach (var sheetName in sheetNames)"
      },
      {
        "row": 4,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 5,
        "rowsha": "OmGwuRx3qTYcJYaVurASm9JPMRKXElwEx0i5eBEGOIU=",
        "originContent": "    var rows = MiniExcel.Query(path, sheetName: sheetName);",
        "translatedContent": "    var rows = MiniExcel.Query(path, sheetName: sheetName);"
      },
      {
        "row": 6,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 17,
    "Content": "\n#### 7. Get Columns\n",
    "ContentSha": "SbddHE1QZ99iRGATNs5MFXzLx4+oLz1u+Phrl4reQuE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 7. Obtener columnas\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 7. Obtener columnas"
      },
      {
        "row": 2,
        "rowsha": "aV+YfCPPSOqaHh2Aqa/spbgHsgd+hj+gW55lj6dqBBE=",
        "originContent": "#### 7. Get Columns",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 18,
    "Content": "```csharp\nvar columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // get column count\n```",
    "ContentSha": "oaLqhdvH6rEG8r67nZhcGqA1B+t7df3s3HJx4jK0pAU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // get column count\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "EJdOuW7wFah4OG1dQ94/aRAqxOrB7FHA7vwiQXc/hGo=",
        "originContent": "var columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]",
        "translatedContent": "var columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "Mb5c+sSSDGIqcuuWLJKqd44kL/xBDqtVWTFpP47zoDA=",
        "originContent": "var cnt = columns.Count;  // get column count",
        "translatedContent": "var cnt = columns.Count;  // get column count"
      },
      {
        "row": 5,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 19,
    "Content": "\n#### 8. Dynamic Query cast row to `IDictionary<string,object>`\n",
    "ContentSha": "HEYcL/ELf9Vsbax93hMN1ksCss+DRSwQrdC9xf3MIUI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 20,
    "Content": "```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// or\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// or Query specified ranges (capitalized)\n// A2 represents the second row of column A, C3 represents the third row of column C\n// If you don't want to restrict rows, just don't include numbers\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```",
    "ContentSha": "EgKJJifMNH3j+zuly1CTXp9SCyBILDIkvvts0Cs0poA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// or\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// or Query specified ranges (capitalized)\n// A2 represents the second row of column A, C3 represents the third row of column C\n// If you don't want to restrict rows, just don't include numbers\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "VQ6dq5yAepiCBrGZGDTaFoiPYwGyV5f0WIt43s+p4h4=",
        "originContent": "foreach(IDictionary<string,object> row in MiniExcel.Query(path))",
        "translatedContent": "foreach(IDictionary<string,object> row in MiniExcel.Query(path))"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "LzPQ/J2E9nPcRS45iSv5DIfTgO30rMqXl/op9BQgBp4=",
        "originContent": "    //..",
        "translatedContent": "    //.."
      },
      {
        "row": 5,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "U8nX4/7qeeOEVKc5G5zp7nhH9hdP7onP55ivPRofMTg=",
        "originContent": "// or",
        "translatedContent": "// or"
      },
      {
        "row": 8,
        "rowsha": "PIghnqB21WfPpeJ6AHR9XFDZ9BLp7a5+VEhQ/eUctvw=",
        "originContent": "var rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();",
        "translatedContent": "var rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();"
      },
      {
        "row": 9,
        "rowsha": "nEamT0HwIRdaSN3jNj6/B0CtGfrMyX24dfvEEKsKmL4=",
        "originContent": "// or Query specified ranges (capitalized)",
        "translatedContent": "// or Query specified ranges (capitalized)"
      },
      {
        "row": 10,
        "rowsha": "TkA2lJ8d0k4oaCOSCUy/2LbDF133EZEwUfL3zAO2y9M=",
        "originContent": "// A2 represents the second row of column A, C3 represents the third row of column C",
        "translatedContent": "// A2 represents the second row of column A, C3 represents the third row of column C"
      },
      {
        "row": 11,
        "rowsha": "RD94WkNdOmUvsFHgzLWkn4GjS/0flshUbT65sK27p7U=",
        "originContent": "// If you don't want to restrict rows, just don't include numbers",
        "translatedContent": "// If you don't want to restrict rows, just don't include numbers"
      },
      {
        "row": 12,
        "rowsha": "2JdfskhQHDUwvKIzkTcwLpylooyc+P3BqXVlYpaf7ps=",
        "originContent": "var rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();",
        "translatedContent": "var rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();"
      },
      {
        "row": 13,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 21,
    "Content": "\n\n\n#### 9. Query Excel return DataTable\n\nNot recommended, because DataTable will load all data into memory and lose MiniExcel's low memory consumption feature.\n",
    "ContentSha": "hc1WMyqkLmsvin6hPPDZLplzvR0KSmAYHdR/vDt2+1U=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 9. Consultar Excel y devolver DataTable\n\nNo se recomienda, porque DataTable cargará todos los datos en la memoria y se perderá la característica de bajo consumo de memoria de MiniExcel.\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 9. Consultar Excel y devolver DataTable"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "No se recomienda, porque DataTable cargará todos los datos en la memoria y se perderá la característica de bajo consumo de memoria de MiniExcel."
      },
      {
        "row": 4,
        "rowsha": "PJ8lDdtsHltBIADq2TRbwDuZdlNy7AD/GBPPWsy7ElE=",
        "originContent": "#### 9. Query Excel return DataTable",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "gFWXlsR204jZjc4Wh8s6oKNDp2T04c1I5dAK15xfGdM=",
        "originContent": "Not recommended, because DataTable will load all data into memory and lose MiniExcel's low memory consumption feature.",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 22,
    "Content": "```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```",
    "ContentSha": "QJ2qGXB1e5ANwoa5EwjzH0ny8wBjjfeZIaddm2bSawk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "P/40QxwdpVmT5Xf6Clh3gwwhSARV7939GBu4IQsAI3Y=",
        "originContent": "```C#",
        "translatedContent": "```C#"
      },
      {
        "row": 2,
        "rowsha": "Ig+g91k+/fzh0QlG0w4U5iM4RAOyRyTGwqJs0DkZk+M=",
        "originContent": "var table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);",
        "translatedContent": "var table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 23,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Specify the cell to start reading data\n",
    "ContentSha": "sgA2q4A9NIxJzl+E03p22mCKQh8UQsmADNAO0YVSE+A=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Especifique la celda para comenzar a leer los datos\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)"
      },
      {
        "row": 2,
        "rowsha": "PNYjNAGLbF8FquYnWWpOQjg8lLUu4fpoK5c6ipvk8yM=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 10. Especifique la celda para comenzar a leer los datos"
      },
      {
        "row": 6,
        "rowsha": "7sDNBbVcJIJrsdGfKtqPdUAFVvCEpWffxwW1aQ71rek=",
        "originContent": "#### 10. Specify the cell to start reading data",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 24,
    "Content": "```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```",
    "ContentSha": "k6M36VQGhG/ZUU5mjZnaYfrJsi+tER9NTLSVLeZ1jPg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "5Rt4MfoUzMa9Vn8vLQOSddMC3VHX4DZJ90hYbN9cgFw=",
        "originContent": "MiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")",
        "translatedContent": "MiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 25,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Fill Merged Cells\n\nNote: The efficiency is slower compared to `not using merge fill`\n\nReason: The OpenXml standard puts mergeCells at the bottom of the file, which leads to the need to foreach the sheetxml twice\n",
    "ContentSha": "UhT6TZS//JdXuNiaffFIFUJIJ09P2FhWZi/Ug1ryI/k=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Rellenar celdas combinadas\n\nNota: La eficiencia es menor en comparación con `no usar relleno combinado`\n\nRazón: El estándar OpenXml coloca mergeCells al final del archivo, lo que obliga a recorrer el sheetxml dos veces\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)"
      },
      {
        "row": 2,
        "rowsha": "ln82vD+ql7RdMmTYo3IGr/Ezp0FR8PhbIjDetVp+OTs=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 11. Rellenar celdas combinadas"
      },
      {
        "row": 6,
        "rowsha": "KXZ+tcWHTsXOoFZprvm/fS6pTFCLN2cbqJ4a5TE6sZQ=",
        "originContent": "#### 11. Fill Merged Cells",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Nota: La eficiencia es menor en comparación con `no usar relleno combinado`"
      },
      {
        "row": 8,
        "rowsha": "HeLNm6MGnl2ns66aVuAmuVoeUv17fc3SD7ivSs9CZAY=",
        "originContent": "Note: The efficiency is slower compared to `not using merge fill`",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Razón: El estándar OpenXml coloca mergeCells al final del archivo, lo que obliga a recorrer el sheetxml dos veces"
      },
      {
        "row": 10,
        "rowsha": "KlFviHiHHZHpPKMGoX39jHcnW9WmfKpVuuioVmC3fvw=",
        "originContent": "Reason: The OpenXml standard puts mergeCells at the bottom of the file, which leads to the need to foreach the sheetxml twice",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 26,
    "Content": "```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```",
    "ContentSha": "1fOxdg2Ob/D/MwI22nXUtXpa7mKxtXq3HqeH6eSvyHA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "worvb13676MVTX9owVEZX+yv1dIYtc++WuNygy8sYJw=",
        "originContent": "    var config = new OpenXmlConfiguration()",
        "translatedContent": "    var config = new OpenXmlConfiguration()"
      },
      {
        "row": 3,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 4,
        "rowsha": "Mg6Vb5kLoFxgPdldqXdeBt/xRww0y2In63PhVFeIAnc=",
        "originContent": "        FillMergedCells = true",
        "translatedContent": "        FillMergedCells = true"
      },
      {
        "row": 5,
        "rowsha": "7em+/b2HqM6iEBXxrPSXlZytO/iDgRIZPZigKkf6YTc=",
        "originContent": "    };",
        "translatedContent": "    };"
      },
      {
        "row": 6,
        "rowsha": "nJMXTpsJPmSPIgT1QdSabNW17q9VCDLZZeL5EoUi/c8=",
        "originContent": "    var rows = MiniExcel.Query(path, configuration: config);",
        "translatedContent": "    var rows = MiniExcel.Query(path, configuration: config);"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 27,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nsupport variable length and width multi-row and column filling\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Reading big file by disk-base cache (Disk-Base Cache - SharedString)\n\nIf the SharedStrings size exceeds 5 MB, MiniExcel default will use local disk cache, e.g, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(one million rows data), when disable disk cache the maximum memory usage is 195MB, but able disk cache only needs 65MB. Note, this optimization needs some efficiency cost, so this case will increase reading time from 7.4 seconds to 27.2 seconds, If you don't need it that you can disable disk cache with the following code:\n",
    "ContentSha": "QcKgirCKTcRYenWL1cxJzgdEv5RAQ37V1Y5ANx5qxmY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nsoporta longitud variable y relleno de múltiples filas y columnas de ancho variable\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Lectura de archivos grandes mediante caché basada en disco (Disk-Base Cache - SharedString)\n\nSi el tamaño de SharedStrings supera los 5 MB, MiniExcel por defecto usará caché local en disco, por ejemplo, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx) (un millón de filas de datos), cuando se desactiva la caché en disco el uso máximo de memoria es de 195MB, pero con la caché en disco solo necesita 65MB. Tenga en cuenta que esta optimización requiere un costo en eficiencia, por lo que este caso aumentará el tiempo de lectura de 7.4 segundos a 27.2 segundos. Si no lo necesita, puede deshabilitar la caché en disco con el siguiente código:\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)"
      },
      {
        "row": 2,
        "rowsha": "6pFLMslvM7yfCcCJgxZBVgTSdEInkN/MuGkR6CITM/I=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "soporta longitud variable y relleno de múltiples filas y columnas de ancho variable"
      },
      {
        "row": 4,
        "rowsha": "oM/Q+84GAwMhM5ptJniHOansCiUXfluF0uM7ywbidlA=",
        "originContent": "support variable length and width multi-row and column filling",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)"
      },
      {
        "row": 6,
        "rowsha": "qcekvURd9OtE73/bggXXfXQl/sfoqwJWMXBy/4H4wYg=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 12. Lectura de archivos grandes mediante caché basada en disco (Disk-Base Cache - SharedString)"
      },
      {
        "row": 8,
        "rowsha": "0NknbpA55HI5txOzapMooBuYhr9hpj3CO1ZcynTAvaM=",
        "originContent": "#### 12. Reading big file by disk-base cache (Disk-Base Cache - SharedString)",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Si el tamaño de SharedStrings supera los 5 MB, MiniExcel por defecto usará caché local en disco, por ejemplo, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx) (un millón de filas de datos), cuando se desactiva la caché en disco el uso máximo de memoria es de 195MB, pero con la caché en disco solo necesita 65MB. Tenga en cuenta que esta optimización requiere un costo en eficiencia, por lo que este caso aumentará el tiempo de lectura de 7.4 segundos a 27.2 segundos. Si no lo necesita, puede deshabilitar la caché en disco con el siguiente código:"
      },
      {
        "row": 10,
        "rowsha": "n5Q9aoGSRmWlu4BZI7GT95il3NsMNj61VWgKd7twoGY=",
        "originContent": "If the SharedStrings size exceeds 5 MB, MiniExcel default will use local disk cache, e.g, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(one million rows data), when disable disk cache the maximum memory usage is 195MB, but able disk cache only needs 65MB. Note, this optimization needs some efficiency cost, so this case will increase reading time from 7.4 seconds to 27.2 seconds, If you don't need it that you can disable disk cache with the following code:",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 28,
    "Content": "```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```",
    "ContentSha": "IVcr7MvrWByHl4pixAd9MK0IVRq/yAVYttcaeE7h6lE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "DdpiXXZ1b/03+VLGKSaubwtd1IXwVWctN3ifE2KQz3M=",
        "originContent": "var config = new OpenXmlConfiguration { EnableSharedStringCache = false };",
        "translatedContent": "var config = new OpenXmlConfiguration { EnableSharedStringCache = false };"
      },
      {
        "row": 3,
        "rowsha": "46QXPmPWURXoqCHaUaxodLCtcIlfr+ok8cjuSWVp33M=",
        "originContent": "MiniExcel.Query(path,configuration: config)",
        "translatedContent": "MiniExcel.Query(path,configuration: config)"
      },
      {
        "row": 4,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 29,
    "Content": "\nYou can use `SharedStringCacheSize ` to change the sharedString file size beyond the specified size for disk caching",
    "ContentSha": "zBwtPRqN9aTgT8cOgNhwzvNrnkZI+G37S9DtmwCwRrs=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Puede usar `SharedStringCacheSize` para cambiar el tamaño del archivo sharedString más allá del tamaño especificado para el almacenamiento en disco.\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Puede usar `SharedStringCacheSize` para cambiar el tamaño del archivo sharedString más allá del tamaño especificado para el almacenamiento en disco."
      },
      {
        "row": 2,
        "rowsha": "oHisvLvB/b5pa2xlPfUsaMBrtcllMRJGt8sCaUKPIVw=",
        "originContent": "You can use `SharedStringCacheSize ` to change the sharedString file size beyond the specified size for disk caching",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 30,
    "Content": "```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```",
    "ContentSha": "gAs+brQdCh5I5PJ3AcSsKpUJSBfU1E+QzRfJJgamItE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "qjvYwKY49wA1elltCXP7r0YDzS78qKVkAWDV+TAM6zI=",
        "originContent": "var config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };",
        "translatedContent": "var config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };"
      },
      {
        "row": 3,
        "rowsha": "OwJXDVdhwW3LeLpQnoMgavrYOosrdnlpRhDroJdCDYc=",
        "originContent": "MiniExcel.Query(path, configuration: config);",
        "translatedContent": "MiniExcel.Query(path, configuration: config);"
      },
      {
        "row": 4,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 31,
    "Content": "\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n\n\n\n\n\n\n\n\n\n### Create/Export Excel  <a name=\"getstart2\"></a>\n\n1. Must be a non-abstract type with a public parameterless constructor .\n\n2. MiniExcel support parameter IEnumerable Deferred Execution, If you want to use least memory, please do not call methods such as ToList\n\ne.g : ToList or not memory usage\n![image](https://user-images.githubusercontent.com/12729184/112587389-752b0b00-8e38-11eb-8a52-cfb76c57e5eb.png)\n\n\n\n#### 1. Anonymous or strongly type [[Try it]](https://dotnetfiddle.net/w5WD1J)\n",
    "ContentSha": "AnHa5Q2gSGz1ZJpau8gAjLotpIRKnub7jFAKn/hJC5Y=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n\n\n\n\n\n\n\n\n\n### Crear/Exportar Excel  <a name=\"getstart2\"></a>\n\n1. Debe ser un tipo no abstracto con un constructor público sin parámetros.\n\n2. MiniExcel soporta la ejecución diferida de IEnumerable como parámetro, si desea usar la menor cantidad de memoria, por favor no llame métodos como ToList\n\nejemplo: ToList o no uso de memoria\n![image](https://user-images.githubusercontent.com/12729184/112587389-752b0b00-8e38-11eb-8a52-cfb76c57e5eb.png)\n\n\n\n#### 1. Anónimo o fuertemente tipado [[Pruébalo]](https://dotnetfiddle.net/w5WD1J)\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "fGOzpahlw82Vfd6NoiNFXPZCvr2e6JgBxgRb13pHoBA=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "bLOUC64Qj4x0yeSbLI9Dlq7J/VEnCtQm6202jm4d914=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Crear/Exportar Excel  <a name=\"getstart2\"></a>"
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "k5EjCizQs2LNMUcvctv4/qdyw5FNPdIXS4XshUQ0Kis=",
        "originContent": "### Create/Export Excel  <a name=\"getstart2\"></a>",
        "translatedContent": "1. Debe ser un tipo no abstracto con un constructor público sin parámetros."
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "GCcoeCBbbMLw4qGTw1QJoLPDQ7aeH+7o1PT7jMh9LqU=",
        "originContent": "1. Must be a non-abstract type with a public parameterless constructor .",
        "translatedContent": "2. MiniExcel soporta la ejecución diferida de IEnumerable como parámetro, si desea usar la menor cantidad de memoria, por favor no llame métodos como ToList"
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "REO+3GRyW4h9tVDIu8+tydkp4VuSvjgM/0cqD+6pgsc=",
        "originContent": "2. MiniExcel support parameter IEnumerable Deferred Execution, If you want to use least memory, please do not call methods such as ToList",
        "translatedContent": "ejemplo: ToList o no uso de memoria"
      },
      {
        "row": 20,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/112587389-752b0b00-8e38-11eb-8a52-cfb76c57e5eb.png)"
      },
      {
        "row": 21,
        "rowsha": "gIe2iKskrAa7eDJ05O3ukEp6M2I/+qTqiWsn8w2fcXk=",
        "originContent": "e.g : ToList or not memory usage",
        "translatedContent": ""
      },
      {
        "row": 22,
        "rowsha": "iLVhlzCAghkVUuPZFAcVaseWxygWpSehVS933fE8exk=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/112587389-752b0b00-8e38-11eb-8a52-cfb76c57e5eb.png)",
        "translatedContent": ""
      },
      {
        "row": 23,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 24,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 1. Anónimo o fuertemente tipado [[Pruébalo]](https://dotnetfiddle.net/w5WD1J)"
      },
      {
        "row": 25,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 26,
        "rowsha": "9VVZ4A9j8slnPaSsaYdel/YNkZ9gqQbJf6v4HJ2HzXA=",
        "originContent": "#### 1. Anonymous or strongly type [[Try it]](https://dotnetfiddle.net/w5WD1J)",
        "translatedContent": ""
      },
      {
        "row": 27,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 32,
    "Content": "```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nMiniExcel.SaveAs(path, new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n});\n```",
    "ContentSha": "DiGtyNzjhXgDCMA3q1rfnficm62qC8GArM5prO/IQ40=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nMiniExcel.SaveAs(path, new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n});\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "T+9Z4aGdnhdnZGpKoDeBHvCUaNL+gugXJskNa9lEBog=",
        "originContent": "var path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");",
        "translatedContent": "var path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");"
      },
      {
        "row": 3,
        "rowsha": "w7J60cxrrW/wooJKlfX7sFn4eUFWSITkjNyjqDzSFB8=",
        "originContent": "MiniExcel.SaveAs(path, new[] {",
        "translatedContent": "MiniExcel.SaveAs(path, new[] {"
      },
      {
        "row": 4,
        "rowsha": "vD8oGySouu9HDLHEP9MW+qnj6TH5Igbmi5tDOe4afgM=",
        "originContent": "    new { Column1 = \"MiniExcel\", Column2 = 1 },",
        "translatedContent": "    new { Column1 = \"MiniExcel\", Column2 = 1 },"
      },
      {
        "row": 5,
        "rowsha": "4G8es8bYJ49a+ytFKN8mxo5NsZmpMhkMlHscBGNcpLg=",
        "originContent": "    new { Column1 = \"Github\", Column2 = 2}",
        "translatedContent": "    new { Column1 = \"Github\", Column2 = 2}"
      },
      {
        "row": 6,
        "rowsha": "KVdrVOJV48lI7qW1kE+ji4FoL908vZroQf8Oe9gNOUw=",
        "originContent": "});",
        "translatedContent": "});"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 33,
    "Content": "\n#### 2. `IEnumerable<IDictionary<string, object>>`\n",
    "ContentSha": "QKNANFUaick+IuYCi39uuUu0IQVimeJNeZmKSyh6oqE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 2. `IEnumerable<IDictionary<string, object>>`\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 2. `IEnumerable<IDictionary<string, object>>`"
      },
      {
        "row": 2,
        "rowsha": "ozy1QCa/hSQ4KVc/1rYrrljtO4MggmHl1dJeFVL2ffo=",
        "originContent": "#### 2. `IEnumerable<IDictionary<string, object>>`",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 34,
    "Content": "```csharp\nvar values = new List<Dictionary<string, object>>()\n{\n    new Dictionary<string,object>{{ \"Column1\", \"MiniExcel\" }, { \"Column2\", 1 } },\n    new Dictionary<string,object>{{ \"Column1\", \"Github\" }, { \"Column2\", 2 } }\n};\nMiniExcel.SaveAs(path, values);\n```",
    "ContentSha": "+oudhqOhVjkFbNTtCQZvkHbcAO9T/1k9NvChsONglOA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar values = new List<Dictionary<string, object>>()\n{\n    new Dictionary<string,object>{{ \"Column1\", \"MiniExcel\" }, { \"Column2\", 1 } },\n    new Dictionary<string,object>{{ \"Column1\", \"Github\" }, { \"Column2\", 2 } }\n};\nMiniExcel.SaveAs(path, values);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "468TcLQ2ga49dfwJRULXz0t/WF6YNWKXMXcB0YvGUL4=",
        "originContent": "var values = new List<Dictionary<string, object>>()",
        "translatedContent": "var values = new List<Dictionary<string, object>>()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "B8LDXmMv+XE2Heapb5KbOeMmeNqHzm8APK9wPGfa098=",
        "originContent": "    new Dictionary<string,object>{{ \"Column1\", \"MiniExcel\" }, { \"Column2\", 1 } },",
        "translatedContent": "    new Dictionary<string,object>{{ \"Column1\", \"MiniExcel\" }, { \"Column2\", 1 } },"
      },
      {
        "row": 5,
        "rowsha": "jD8pH0genyBfEgf91HaxVTlJqfRymdWbrsspqn1iX6U=",
        "originContent": "    new Dictionary<string,object>{{ \"Column1\", \"Github\" }, { \"Column2\", 2 } }",
        "translatedContent": "    new Dictionary<string,object>{{ \"Column1\", \"Github\" }, { \"Column2\", 2 } }"
      },
      {
        "row": 6,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 7,
        "rowsha": "4FIzZCiqXmKrKXRIdwEqTlBYjKONkhaM0+q4Sz4vCuo=",
        "originContent": "MiniExcel.SaveAs(path, values);",
        "translatedContent": "MiniExcel.SaveAs(path, values);"
      },
      {
        "row": 8,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 35,
    "Content": "\nCreate File Result :\n\n| Column1   | Column2 |\n|-----------|---------|\n| MiniExcel | 1       |\n| Github    | 2       |\n\n\n#### 3.  IDataReader\n- `Recommended`, it can avoid to load all data into memory",
    "ContentSha": "Zja2XoPqZENwchlmpa5Kq0SmLUta2out1zXUUFNkwvw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Crear resultado de archivo :\n\n| Columna1  | Columna2 |\n|-----------|----------|\n| MiniExcel | 1        |\n| Github    | 2        |\n\n\n#### 3.  IDataReader\n- `Recomendado`, puede evitar cargar todos los datos en la memoria\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Crear resultado de archivo :"
      },
      {
        "row": 2,
        "rowsha": "NOJpTtnHf9OibzJ3Z/0j0SfjTyNJkXXQryVi6rKq0rA=",
        "originContent": "Create File Result :",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "| Columna1  | Columna2 |"
      },
      {
        "row": 4,
        "rowsha": "u4PfeYXphkwnF+vlIb6rmmQdbbMYhUpKJtrbKhaJTDI=",
        "originContent": "| Column1   | Column2 |",
        "translatedContent": "|-----------|----------|"
      },
      {
        "row": 5,
        "rowsha": "qw81EfEPhvVBgxuInGYt9HxUXM+TbljaPVRtvvhaDmE=",
        "originContent": "|-----------|---------|",
        "translatedContent": "| MiniExcel | 1        |"
      },
      {
        "row": 6,
        "rowsha": "1rCSKTjGnU2bDZeo5F4aCAk4AFfrMIIRCiSk65xCZHQ=",
        "originContent": "| MiniExcel | 1       |",
        "translatedContent": "| Github    | 2        |"
      },
      {
        "row": 7,
        "rowsha": "R1stBOE+QW9yFBKCibyiTszk/RKlSvFgIk+Lu9S3V0Q=",
        "originContent": "| Github    | 2       |",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 3.  IDataReader"
      },
      {
        "row": 10,
        "rowsha": "uQ6Mj/hXxUdbl8EjgGr98d0bmyyOMszUTXafyT3c7QE=",
        "originContent": "#### 3.  IDataReader",
        "translatedContent": "- `Recomendado`, puede evitar cargar todos los datos en la memoria"
      },
      {
        "row": 11,
        "rowsha": "s7IQ1QtAgrirEWCUGMaMNlX9eegEjosH51ZoQ9r1KK0=",
        "originContent": "- `Recommended`, it can avoid to load all data into memory",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 36,
    "Content": "```csharp\nMiniExcel.SaveAs(path, reader);\n```",
    "ContentSha": "HWvB/KQUlPSLsO8AFbuJMjF3T6lYmgBUnbCsFyAe5cI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nMiniExcel.SaveAs(path, reader);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "bIp/Xgf7N9keISHKtdx9KKr4gfm1KnoD3QgsivxTM5Q=",
        "originContent": "MiniExcel.SaveAs(path, reader);",
        "translatedContent": "MiniExcel.SaveAs(path, reader);"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 37,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/121275378-149a5e80-c8bc-11eb-85fe-5453552134f0.png)\n\nDataReader export multiple sheets (recommand by Dapper ExecuteReader)\n",
    "ContentSha": "43Ymy4fu9uXZJbrPug1WiD3ajNNZN4cuGodeY4Ed8EM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/121275378-149a5e80-c8bc-11eb-85fe-5453552134f0.png)\n\nExportación de múltiples hojas con DataReader (recomendado por Dapper ExecuteReader)\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/121275378-149a5e80-c8bc-11eb-85fe-5453552134f0.png)"
      },
      {
        "row": 2,
        "rowsha": "fiMgyaERVTbh/ms/1307CMuASUVaygYxI72YrCglds8=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/121275378-149a5e80-c8bc-11eb-85fe-5453552134f0.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Exportación de múltiples hojas con DataReader (recomendado por Dapper ExecuteReader)"
      },
      {
        "row": 4,
        "rowsha": "6eC0Uyl1J45dbUNIcTkR3d7ygCyKoy8LvjGRpeW43GM=",
        "originContent": "DataReader export multiple sheets (recommand by Dapper ExecuteReader)",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 38,
    "Content": "```csharp\nusing (var cnn = Connection)\n{\n    cnn.Open();\n    var sheets = new Dictionary<string,object>();\n    sheets.Add(\"sheet1\", cnn.ExecuteReader(\"select 1 id\"));\n    sheets.Add(\"sheet2\", cnn.ExecuteReader(\"select 2 id\"));\n    MiniExcel.SaveAs(\"Demo.xlsx\", sheets);\n}\n```",
    "ContentSha": "80AiPJro4WBh6ITImUlC/c8HulXSdsWzOUhAv8vBzLQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nusing (var cnn = Connection)\n{\n    cnn.Open();\n    var sheets = new Dictionary<string,object>();\n    sheets.Add(\"sheet1\", cnn.ExecuteReader(\"select 1 id\"));\n    sheets.Add(\"sheet2\", cnn.ExecuteReader(\"select 2 id\"));\n    MiniExcel.SaveAs(\"Demo.xlsx\", sheets);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "966YfFYY2yrwrJi5UfP9B7W5/mh6B8BGb8C2LihmKxo=",
        "originContent": "using (var cnn = Connection)",
        "translatedContent": "using (var cnn = Connection)"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "GAK8vbBk2D1sh0k+q/urbyrTX4oXrsRRDpG2HbDSnyc=",
        "originContent": "    cnn.Open();",
        "translatedContent": "    cnn.Open();"
      },
      {
        "row": 5,
        "rowsha": "3GsteHG3xd4PcemXJxj2UBiJK7n21zA0nQmaEUMGmMg=",
        "originContent": "    var sheets = new Dictionary<string,object>();",
        "translatedContent": "    var sheets = new Dictionary<string,object>();"
      },
      {
        "row": 6,
        "rowsha": "0D9/XP4pnVfb8bDbHxmLS2g7kcjNpOYBP+I+chSEZ98=",
        "originContent": "    sheets.Add(\"sheet1\", cnn.ExecuteReader(\"select 1 id\"));",
        "translatedContent": "    sheets.Add(\"sheet1\", cnn.ExecuteReader(\"select 1 id\"));"
      },
      {
        "row": 7,
        "rowsha": "xvbfmva8AGXTxUvgybPAZPXxnAkMAq4H8hiLIQ6ZA20=",
        "originContent": "    sheets.Add(\"sheet2\", cnn.ExecuteReader(\"select 2 id\"));",
        "translatedContent": "    sheets.Add(\"sheet2\", cnn.ExecuteReader(\"select 2 id\"));"
      },
      {
        "row": 8,
        "rowsha": "KFvV7ozdLwFFbM4xM/NykQEa54wpxHlmJgNDqyuBktg=",
        "originContent": "    MiniExcel.SaveAs(\"Demo.xlsx\", sheets);",
        "translatedContent": "    MiniExcel.SaveAs(\"Demo.xlsx\", sheets);"
      },
      {
        "row": 9,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 10,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 39,
    "Content": "\n\n\n#### 4. Datatable\n\n- `Not recommended`, it will load all data into memory\n\n- DataTable use Caption for column name first, then use columname\n",
    "ContentSha": "4VQN6w10ViOigi7VIEBEsiosjhi5lUdMi3pLBdEiChY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 4. Datatable\n\n- `No recomendado`, cargará todos los datos en la memoria\n\n- DataTable usa Caption para el nombre de la columna primero, luego usa columname\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 4. Datatable"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- `No recomendado`, cargará todos los datos en la memoria"
      },
      {
        "row": 4,
        "rowsha": "aQFTSIa+DXarQVsnvoMihbTaVcbUAa/cMA0u+g7oxtg=",
        "originContent": "#### 4. Datatable",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- DataTable usa Caption para el nombre de la columna primero, luego usa columname"
      },
      {
        "row": 6,
        "rowsha": "pdVe9+NGdIH3U2PlqIgqS0FQaeMv4MOsJJOZKJcjsbo=",
        "originContent": "- `Not recommended`, it will load all data into memory",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "PG4n9iueOJoO2nWd5aLeMQCgRWT+VCU2O4cqD3WZ4go=",
        "originContent": "- DataTable use Caption for column name first, then use columname",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 40,
    "Content": "```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nvar table = new DataTable();\n{\n    table.Columns.Add(\"Column1\", typeof(string));\n    table.Columns.Add(\"Column2\", typeof(decimal));\n    table.Rows.Add(\"MiniExcel\", 1);\n    table.Rows.Add(\"Github\", 2);\n}\n\nMiniExcel.SaveAs(path, table);\n```",
    "ContentSha": "/jWe1CLXNKct6YmIgsXSCfX2/aqiY+VrTQw7+dTiBzo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nvar table = new DataTable();\n{\n    table.Columns.Add(\"Column1\", typeof(string));\n    table.Columns.Add(\"Column2\", typeof(decimal));\n    table.Rows.Add(\"MiniExcel\", 1);\n    table.Rows.Add(\"Github\", 2);\n}\n\nMiniExcel.SaveAs(path, table);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "T+9Z4aGdnhdnZGpKoDeBHvCUaNL+gugXJskNa9lEBog=",
        "originContent": "var path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");",
        "translatedContent": "var path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");"
      },
      {
        "row": 3,
        "rowsha": "Y73UIGx6nOtnjTOgkTTOouTLquKWX5CdF1zxXjtrGN0=",
        "originContent": "var table = new DataTable();",
        "translatedContent": "var table = new DataTable();"
      },
      {
        "row": 4,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 5,
        "rowsha": "o/20RIAwarbeA7GXIEoD/5ZcVb4JN021VU1PcVMIo6I=",
        "originContent": "    table.Columns.Add(\"Column1\", typeof(string));",
        "translatedContent": "    table.Columns.Add(\"Column1\", typeof(string));"
      },
      {
        "row": 6,
        "rowsha": "zAZ9bYxqLRgpg7XbJEqeZqAWc5g2RRHNC7cONzKnstI=",
        "originContent": "    table.Columns.Add(\"Column2\", typeof(decimal));",
        "translatedContent": "    table.Columns.Add(\"Column2\", typeof(decimal));"
      },
      {
        "row": 7,
        "rowsha": "ymlMn8gXm670rq1ZenRk+63d7UPIGOl96gCqDsn6NDw=",
        "originContent": "    table.Rows.Add(\"MiniExcel\", 1);",
        "translatedContent": "    table.Rows.Add(\"MiniExcel\", 1);"
      },
      {
        "row": 8,
        "rowsha": "Hr+6nQROqWEOiLv1UWtt5F9fdfEdQMSMdP1kr2alE0o=",
        "originContent": "    table.Rows.Add(\"Github\", 2);",
        "translatedContent": "    table.Rows.Add(\"Github\", 2);"
      },
      {
        "row": 9,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "/BE7TOGsLFXXdF9STJOGTvZO3d9YJ64SbmwQ87B1KNY=",
        "originContent": "MiniExcel.SaveAs(path, table);",
        "translatedContent": "MiniExcel.SaveAs(path, table);"
      },
      {
        "row": 12,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 41,
    "Content": "\n####  5. Dapper Query\n\nThanks @shaofing #552 , please use `CommandDefinition + CommandFlags.NoCache`\n",
    "ContentSha": "iXLrtUhvD7BxyAW8HoiG6Oytksn9xldUgQMg0vO2M38=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 42,
    "Content": "```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(\n        new CommandDefinition(\n            @\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\"\n            , flags: CommandFlags.NoCache)\n        );\n    // Note: QueryAsync will throw close connection exception\n    MiniExcel.SaveAs(path, rows);\n}\n```",
    "ContentSha": "/ge2sjLSdDNPxnIDjEaOZMpidn0FwQViJwArRrtAUfc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(\n        new CommandDefinition(\n            @\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\"\n            , flags: CommandFlags.NoCache)\n        );\n    // Note: QueryAsync will throw close connection exception\n    MiniExcel.SaveAs(path, rows);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "ycgfDGtfPCD3a3aFIOBJf0SUYi4UGBbO0VWAnciwTNw=",
        "originContent": "using (var connection = GetConnection(connectionString))",
        "translatedContent": "using (var connection = GetConnection(connectionString))"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "PZc5k6zTwDCI1GtAgZK7EqsbGSXGT6OLLvyLNBF1aX0=",
        "originContent": "    var rows = connection.Query(",
        "translatedContent": "    var rows = connection.Query("
      },
      {
        "row": 5,
        "rowsha": "/aZQ2AyIT3RXzJyAlvNo3fh+qZbgYbrGldDdfmKlbQw=",
        "originContent": "        new CommandDefinition(",
        "translatedContent": "        new CommandDefinition("
      },
      {
        "row": 6,
        "rowsha": "uborzd1aeDTDKCbqLqOHOaL4+ZWLaU7N4IJ4ilvdTWU=",
        "originContent": "            @\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\"",
        "translatedContent": "            @\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\""
      },
      {
        "row": 7,
        "rowsha": "f8Rk/lJLbz8+H6wRLK79os9HTKAo/L1bnj3ctL8jPxI=",
        "originContent": "            , flags: CommandFlags.NoCache)",
        "translatedContent": "            , flags: CommandFlags.NoCache)"
      },
      {
        "row": 8,
        "rowsha": "bq/4eiC48vFtXXAuFRwkmntL9c8Jdj21yA8p0PHvrPk=",
        "originContent": "        );",
        "translatedContent": "        );"
      },
      {
        "row": 9,
        "rowsha": "7vvx+qWbW7wjm7PXQGy6vj3LV6lS3wAsM+wIiMrxDRU=",
        "originContent": "    // Note: QueryAsync will throw close connection exception",
        "translatedContent": "    // Note: QueryAsync will throw close connection exception"
      },
      {
        "row": 10,
        "rowsha": "ybiz9z8BKbGp7kYAJOdcHw9RjTxMsp5IKQ4TKfmOnMI=",
        "originContent": "    MiniExcel.SaveAs(path, rows);",
        "translatedContent": "    MiniExcel.SaveAs(path, rows);"
      },
      {
        "row": 11,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 12,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 43,
    "Content": "\nBelow code will load all data into memory\n",
    "ContentSha": "OSbYVPeCoWC17f14bVkhbgiuPcqZbIFAuWyqekZX4Dc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "El siguiente código cargará todos los datos en la memoria\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "El siguiente código cargará todos los datos en la memoria"
      },
      {
        "row": 2,
        "rowsha": "bQdhTdY+NV5c2RquEeTtRZpCiprGzrbtr2ncqXugK0o=",
        "originContent": "Below code will load all data into memory",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 44,
    "Content": "```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(@\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\");\n    MiniExcel.SaveAs(path, rows);\n}\n```",
    "ContentSha": "SgvPNYsKBl9YgBccL31qIbm6lnV0IudsqqdKlTsmpyo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(@\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\");\n    MiniExcel.SaveAs(path, rows);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "ycgfDGtfPCD3a3aFIOBJf0SUYi4UGBbO0VWAnciwTNw=",
        "originContent": "using (var connection = GetConnection(connectionString))",
        "translatedContent": "using (var connection = GetConnection(connectionString))"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "l2tHXYxwUbl92jQx3gnpkHeUjFxitDMxHC/i5/p7AXk=",
        "originContent": "    var rows = connection.Query(@\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\");",
        "translatedContent": "    var rows = connection.Query(@\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\");"
      },
      {
        "row": 5,
        "rowsha": "ybiz9z8BKbGp7kYAJOdcHw9RjTxMsp5IKQ4TKfmOnMI=",
        "originContent": "    MiniExcel.SaveAs(path, rows);",
        "translatedContent": "    MiniExcel.SaveAs(path, rows);"
      },
      {
        "row": 6,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 45,
    "Content": "\n\n#### 6. SaveAs to MemoryStream  [[Try it]](https://dotnetfiddle.net/JOen0e)\n",
    "ContentSha": "1t7UD8roGjVP6npUZ+MZ2e5pUBiB0tm1TazKWIqNcpM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 46,
    "Content": "```csharp\nusing (var stream = new MemoryStream()) //support FileStream,MemoryStream ect.\n{\n    stream.SaveAs(values);\n}\n```",
    "ContentSha": "zJnQ7IhRU0bVjP85+Bh4h0t0LdY0iUWHNQpsTAk7h5g=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nusing (var stream = new MemoryStream()) //support FileStream,MemoryStream ect.\n{\n    stream.SaveAs(values);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "ZpcGwxZI1U3QEQ9oio/+B75P25hg8pCIBFtdE+9Thbg=",
        "originContent": "using (var stream = new MemoryStream()) //support FileStream,MemoryStream ect.",
        "translatedContent": "using (var stream = new MemoryStream()) //support FileStream,MemoryStream ect."
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "Id9mUpwqebSAO7gMqgzg+FRLPDf1xNv6x3DuA7W8wUM=",
        "originContent": "    stream.SaveAs(values);",
        "translatedContent": "    stream.SaveAs(values);"
      },
      {
        "row": 5,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 6,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 47,
    "Content": "\ne.g : api of export excel\n",
    "ContentSha": "iz+o7VVYDtYoC+MzriLDbefSZdMfteM+2nZzDRf9cpc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "por ejemplo: api de exportación a Excel\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "por ejemplo: api de exportación a Excel"
      },
      {
        "row": 2,
        "rowsha": "dGtjqwheaQ4gTBO/6lZxaaSGrIQnu9HnPTIsqo5aXMA=",
        "originContent": "e.g : api of export excel",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 48,
    "Content": "```csharp\npublic IActionResult DownloadExcel()\n{\n    var values = new[] {\n        new { Column1 = \"MiniExcel\", Column2 = 1 },\n        new { Column1 = \"Github\", Column2 = 2}\n    };\n\n    var memoryStream = new MemoryStream();\n    memoryStream.SaveAs(values);\n    memoryStream.Seek(0, SeekOrigin.Begin);\n    return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n    {\n        FileDownloadName = \"demo.xlsx\"\n    };\n}\n```",
    "ContentSha": "o7whkqfRQ7tEJK2p9RPJgVuukCrEsyBVIemoUeI4+S0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic IActionResult DownloadExcel()\n{\n    var values = new[] {\n        new { Column1 = \"MiniExcel\", Column2 = 1 },\n        new { Column1 = \"Github\", Column2 = 2}\n    };\n\n    var memoryStream = new MemoryStream();\n    memoryStream.SaveAs(values);\n    memoryStream.Seek(0, SeekOrigin.Begin);\n    return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n    {\n        FileDownloadName = \"demo.xlsx\"\n    };\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "MQyAsybQz08CTys7oZuFf8Zm4HsWmZDYKEyDFsD/ujU=",
        "originContent": "public IActionResult DownloadExcel()",
        "translatedContent": "public IActionResult DownloadExcel()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "wWjx2cl/7q2GU8UjzFaqsTDCZkV6QbfSHHqjC9mJTUo=",
        "originContent": "    var values = new[] {",
        "translatedContent": "    var values = new[] {"
      },
      {
        "row": 5,
        "rowsha": "SDWhWKgFbLOXApjlJi5S9aBSGRqMQu86PVQTa/aREC0=",
        "originContent": "        new { Column1 = \"MiniExcel\", Column2 = 1 },",
        "translatedContent": "        new { Column1 = \"MiniExcel\", Column2 = 1 },"
      },
      {
        "row": 6,
        "rowsha": "RNUyag22TrFVWiMbRpryq1GeTIN3rJX7Xtla4r+cmEk=",
        "originContent": "        new { Column1 = \"Github\", Column2 = 2}",
        "translatedContent": "        new { Column1 = \"Github\", Column2 = 2}"
      },
      {
        "row": 7,
        "rowsha": "7em+/b2HqM6iEBXxrPSXlZytO/iDgRIZPZigKkf6YTc=",
        "originContent": "    };",
        "translatedContent": "    };"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "zC/a2VcT1uA5pVSu2z/I6fWgiGVYmapMhSpxRd+P9+k=",
        "originContent": "    var memoryStream = new MemoryStream();",
        "translatedContent": "    var memoryStream = new MemoryStream();"
      },
      {
        "row": 10,
        "rowsha": "CpydYdmH0/7JbsBXN0CS9luJNnwuTUIwwhYNUOj9jeg=",
        "originContent": "    memoryStream.SaveAs(values);",
        "translatedContent": "    memoryStream.SaveAs(values);"
      },
      {
        "row": 11,
        "rowsha": "ZffTy3SQwPMVqFEAzwGBIDf/8t3AB0qgughxObEo0qo=",
        "originContent": "    memoryStream.Seek(0, SeekOrigin.Begin);",
        "translatedContent": "    memoryStream.Seek(0, SeekOrigin.Begin);"
      },
      {
        "row": 12,
        "rowsha": "J8wQfI2OEKDMmg2NVoNYsLCoBIHX7oh46MipuzZhbQE=",
        "originContent": "    return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")",
        "translatedContent": "    return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")"
      },
      {
        "row": 13,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 14,
        "rowsha": "5rygkBDxVhNiSsb/K3gqSdrlEuv/TnWlITqPwEp946E=",
        "originContent": "        FileDownloadName = \"demo.xlsx\"",
        "translatedContent": "        FileDownloadName = \"demo.xlsx\""
      },
      {
        "row": 15,
        "rowsha": "7em+/b2HqM6iEBXxrPSXlZytO/iDgRIZPZigKkf6YTc=",
        "originContent": "    };",
        "translatedContent": "    };"
      },
      {
        "row": 16,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 17,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 49,
    "Content": "\n\n#### 7. Create Multiple Sheets\n",
    "ContentSha": "lTcnM310oFpFX/ClvYTshveUtqx11fyaI5SFDrJ304s=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 7. Crear varias hojas\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 7. Crear varias hojas"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "+OHPk9mgk/bo9W1hS1D8qo9oVHQOtQhCMf38nWVvCdQ=",
        "originContent": "#### 7. Create Multiple Sheets",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 50,
    "Content": "```csharp\n// 1. Dictionary<string,object>\nvar users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };\nvar department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };\nvar sheets = new Dictionary<string, object>\n{\n    [\"users\"] = users,\n    [\"department\"] = department\n};\nMiniExcel.SaveAs(path, sheets);\n\n// 2. DataSet\nvar sheets = new DataSet();\nsheets.Add(UsersDataTable);\nsheets.Add(DepartmentDataTable);\n//..\nMiniExcel.SaveAs(path, sheets);\n```",
    "ContentSha": "6dRrO3Jqf+VddatAI0vgepwz6Hw/r0+47pgVmzrFw6Q=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n// 1. Dictionary<string,object>\nvar users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };\nvar department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };\nvar sheets = new Dictionary<string, object>\n{\n    [\"users\"] = users,\n    [\"department\"] = department\n};\nMiniExcel.SaveAs(path, sheets);\n\n// 2. DataSet\nvar sheets = new DataSet();\nsheets.Add(UsersDataTable);\nsheets.Add(DepartmentDataTable);\n//..\nMiniExcel.SaveAs(path, sheets);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "bzXFQKcyZriPg18IVQoCSkwfetsh0P00/MKpII2xdsk=",
        "originContent": "// 1. Dictionary<string,object>",
        "translatedContent": "// 1. Dictionary<string,object>"
      },
      {
        "row": 3,
        "rowsha": "YvT6RqQZ5T9fmNebAgdkpghS10QayNC9HxthIK/wMi4=",
        "originContent": "var users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };",
        "translatedContent": "var users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };"
      },
      {
        "row": 4,
        "rowsha": "TeA8ZCqOXn0W3nMJoFSasRb6R4eYPgDqDEYnGpb3QZk=",
        "originContent": "var department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };",
        "translatedContent": "var department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };"
      },
      {
        "row": 5,
        "rowsha": "174OPov4QYdeKqP73ylEa1gOgT+v/86X2/0mBTxtAGI=",
        "originContent": "var sheets = new Dictionary<string, object>",
        "translatedContent": "var sheets = new Dictionary<string, object>"
      },
      {
        "row": 6,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 7,
        "rowsha": "jxtMP+SAgij/lDsbq7BsjDn81ETZGuU/hbtvthrjynk=",
        "originContent": "    [\"users\"] = users,",
        "translatedContent": "    [\"users\"] = users,"
      },
      {
        "row": 8,
        "rowsha": "ZNlf/JyZiVTPm4fDd0zz3sKAX3iTwcZH55qlRzE9SL0=",
        "originContent": "    [\"department\"] = department",
        "translatedContent": "    [\"department\"] = department"
      },
      {
        "row": 9,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 10,
        "rowsha": "GXg7rKOt25+1MtyoViE+wmFR+gzagC81NOBln//z0K4=",
        "originContent": "MiniExcel.SaveAs(path, sheets);",
        "translatedContent": "MiniExcel.SaveAs(path, sheets);"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "jrAI5rTL5VkYZPLp5woPaKq4Ovaecnn2wtCX3mqwUoc=",
        "originContent": "// 2. DataSet",
        "translatedContent": "// 2. DataSet"
      },
      {
        "row": 13,
        "rowsha": "ioS3BOCTD0yBwXiBMwmdBL0E862vEmtzT7YmteQDlEk=",
        "originContent": "var sheets = new DataSet();",
        "translatedContent": "var sheets = new DataSet();"
      },
      {
        "row": 14,
        "rowsha": "MVm07n9APydeFinW21n0CvZWHkPZYC33Ml+kX9iVOl4=",
        "originContent": "sheets.Add(UsersDataTable);",
        "translatedContent": "sheets.Add(UsersDataTable);"
      },
      {
        "row": 15,
        "rowsha": "OdijKNMvCV6ymBqyzB8sDFeLCInbjMy2IKHmqpJc5l0=",
        "originContent": "sheets.Add(DepartmentDataTable);",
        "translatedContent": "sheets.Add(DepartmentDataTable);"
      },
      {
        "row": 16,
        "rowsha": "1t/+mY1NUmAd1WoWZrvQn2kmvBEEKcQ0QCynqBQICAg=",
        "originContent": "//..",
        "translatedContent": "//.."
      },
      {
        "row": 17,
        "rowsha": "GXg7rKOt25+1MtyoViE+wmFR+gzagC81NOBln//z0K4=",
        "originContent": "MiniExcel.SaveAs(path, sheets);",
        "translatedContent": "MiniExcel.SaveAs(path, sheets);"
      },
      {
        "row": 18,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 51,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/118130875-6e7c4580-b430-11eb-9b82-22f02716bd63.png)\n\n\n#### 8. TableStyles Options\n\nDefault style\n\n![image](https://user-images.githubusercontent.com/12729184/138234373-cfa97109-b71f-4711-b7f5-0eaaa4a0a3a6.png)\n\nWithout style configuration\n",
    "ContentSha": "g8KyJhUw2PPjLdNTpNrGYaU3W1NynvO1MY8jlXuPJm8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![imagen](https://user-images.githubusercontent.com/12729184/118130875-6e7c4580-b430-11eb-9b82-22f02716bd63.png)\n\n\n#### 8. Opciones de TableStyles\n\nEstilo por defecto\n\n![imagen](https://user-images.githubusercontent.com/12729184/138234373-cfa97109-b71f-4711-b7f5-0eaaa4a0a3a6.png)\n\nSin configuración de estilo\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![imagen](https://user-images.githubusercontent.com/12729184/118130875-6e7c4580-b430-11eb-9b82-22f02716bd63.png)"
      },
      {
        "row": 2,
        "rowsha": "wTyrQAs1KCOZ3i5mlZpUyraM3IydZk+/FfaWEpr/xFU=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/118130875-6e7c4580-b430-11eb-9b82-22f02716bd63.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 8. Opciones de TableStyles"
      },
      {
        "row": 5,
        "rowsha": "r8FREwp4hOs6HzvHJNgtt3T6V4VVY2mwl8kpe55RJDc=",
        "originContent": "#### 8. TableStyles Options",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Estilo por defecto"
      },
      {
        "row": 7,
        "rowsha": "oHQMlZz+6WC9XXsA4C8wsifcAZ6TY8uQLqEVr5XjZHk=",
        "originContent": "Default style",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![imagen](https://user-images.githubusercontent.com/12729184/138234373-cfa97109-b71f-4711-b7f5-0eaaa4a0a3a6.png)"
      },
      {
        "row": 9,
        "rowsha": "75fmSGLJY7bfclYHy72FqeqeEAIfXAgjWyqU7EL+GJY=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/138234373-cfa97109-b71f-4711-b7f5-0eaaa4a0a3a6.png)",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Sin configuración de estilo"
      },
      {
        "row": 11,
        "rowsha": "9hRpHR2cfC1XjRyyV/6zosEbfquclsTJybkQC0O91qI=",
        "originContent": "Without style configuration",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 52,
    "Content": "```csharp\nvar config = new OpenXmlConfiguration()\n{\n     TableStyles = TableStyles.None\n};\nMiniExcel.SaveAs(path, value,configuration:config);\n```",
    "ContentSha": "PwE9+iqqeoL4FYEFQEgOlDJGd3PuEHpMHggaQHePmR4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar config = new OpenXmlConfiguration()\n{\n     TableStyles = TableStyles.None\n};\nMiniExcel.SaveAs(path, value,configuration:config);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "3pcSaiOTalau5C2YS0wQEiBstpkEJW/Bu2UZvhEhqTM=",
        "originContent": "var config = new OpenXmlConfiguration()",
        "translatedContent": "var config = new OpenXmlConfiguration()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "RKz/jy+tkdhURszEmOXA0IzU29f/er52x7Y9dr8AuUM=",
        "originContent": "     TableStyles = TableStyles.None",
        "translatedContent": "     TableStyles = TableStyles.None"
      },
      {
        "row": 5,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 6,
        "rowsha": "ZmR3NUIruCstoVujAOiyZB431fjjhmX4tm1UnGafRQA=",
        "originContent": "MiniExcel.SaveAs(path, value,configuration:config);",
        "translatedContent": "MiniExcel.SaveAs(path, value,configuration:config);"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 53,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/118784917-f3e57700-b8c2-11eb-8718-8d955b1bc197.png)\n\n\n#### 9. AutoFilter\n\nSince v0.19.0  `OpenXmlConfiguration.AutoFilter` can en/unable AutoFilter , default value is `true`, and setting AutoFilter way:\n",
    "ContentSha": "dfzu2LDkg9NNZheHnNdbBwf/sSm2vwCqCNXRktM1LmI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/118784917-f3e57700-b8c2-11eb-8718-8d955b1bc197.png)\n\n\n#### 9. AutoFiltro\n\nDesde la versión v0.19.0, `OpenXmlConfiguration.AutoFilter` puede activar/desactivar el AutoFiltro, el valor predeterminado es `true`, y la forma de configurar el AutoFiltro es:\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/118784917-f3e57700-b8c2-11eb-8718-8d955b1bc197.png)"
      },
      {
        "row": 2,
        "rowsha": "60HFpJUMR47RG/yDoDQQ77yFuPEVm2Ko+hptlkKBB08=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/118784917-f3e57700-b8c2-11eb-8718-8d955b1bc197.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 9. AutoFiltro"
      },
      {
        "row": 5,
        "rowsha": "dAFtTUzT1N6PDuOgoB3AWajF9vahPAmOdq9lD/UFbAg=",
        "originContent": "#### 9. AutoFilter",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Desde la versión v0.19.0, `OpenXmlConfiguration.AutoFilter` puede activar/desactivar el AutoFiltro, el valor predeterminado es `true`, y la forma de configurar el AutoFiltro es:"
      },
      {
        "row": 7,
        "rowsha": "qrJFFuOl4oSimNJaU27/SIdYgMSyJvUKcilRkmrgZvI=",
        "originContent": "Since v0.19.0  `OpenXmlConfiguration.AutoFilter` can en/unable AutoFilter , default value is `true`, and setting AutoFilter way:",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 54,
    "Content": "```csharp\nMiniExcel.SaveAs(path, value, configuration: new OpenXmlConfiguration() { AutoFilter = false });\n```",
    "ContentSha": "VRmO5gJPDNV0hffw0MiwbzlNPU3vzAkJB1gc9XLx4r4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nMiniExcel.SaveAs(path, value, configuration: new OpenXmlConfiguration() { AutoFilter = false });\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "phmRYRV6HHsyDcJGLl9HXW9TjDqzudmWo/55IXBPkDE=",
        "originContent": "MiniExcel.SaveAs(path, value, configuration: new OpenXmlConfiguration() { AutoFilter = false });",
        "translatedContent": "MiniExcel.SaveAs(path, value, configuration: new OpenXmlConfiguration() { AutoFilter = false });"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 55,
    "Content": "\n\n\n#### 10. Create Image\n",
    "ContentSha": "so+Rl2mfsMzsVdN2yuKr5dfGQnj8iU/vRt4xZZbNuKk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 10. Crear imagen\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 10. Crear imagen"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "4jJGSJtqxwn5UrpQzEF582wcsOnABKoepyIP/glPmkw=",
        "originContent": "#### 10. Create Image",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 56,
    "Content": "```csharp\nvar value = new[] {\n    new { Name=\"github\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\"))},\n    new { Name=\"google\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\"))},\n    new { Name=\"microsoft\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/microsoft_logo.png\"))},\n    new { Name=\"reddit\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/reddit_logo.png\"))},\n    new { Name=\"statck_overflow\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/statck_overflow_logo.png\"))},\n};\nMiniExcel.SaveAs(path, value);\n```",
    "ContentSha": "BSMer1AejjI9TMUi83jMPyqTiwS5ip93rH5+kyD9Kkw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new[] {\n    new { Name=\"github\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\"))},\n    new { Name=\"google\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\"))},\n    new { Name=\"microsoft\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/microsoft_logo.png\"))},\n    new { Name=\"reddit\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/reddit_logo.png\"))},\n    new { Name=\"statck_overflow\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/statck_overflow_logo.png\"))},\n};\nMiniExcel.SaveAs(path, value);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "np5NTMtai3zDQlFkq3eh+MJMIkONeeGsi72/kEPen8w=",
        "originContent": "var value = new[] {",
        "translatedContent": "var value = new[] {"
      },
      {
        "row": 3,
        "rowsha": "a11kKjaOuN4rBmdCbWX1r9ilDWblq69pTvdWaVc/Lco=",
        "originContent": "    new { Name=\"github\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\"))},",
        "translatedContent": "    new { Name=\"github\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\"))},"
      },
      {
        "row": 4,
        "rowsha": "Xxt+OBQf9QZL3mLKP+Oi0GhkXwBhiAFGN+AdCqIjbeY=",
        "originContent": "    new { Name=\"google\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\"))},",
        "translatedContent": "    new { Name=\"google\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\"))},"
      },
      {
        "row": 5,
        "rowsha": "/waPLoU4KTrmByYXgvh0Uxxz2KMpMzB+KXNSjzu3dH8=",
        "originContent": "    new { Name=\"microsoft\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/microsoft_logo.png\"))},",
        "translatedContent": "    new { Name=\"microsoft\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/microsoft_logo.png\"))},"
      },
      {
        "row": 6,
        "rowsha": "BGDDqEgto/T0qwdmeVeR1VUcKAS7qjHt+h+F1k5UMUM=",
        "originContent": "    new { Name=\"reddit\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/reddit_logo.png\"))},",
        "translatedContent": "    new { Name=\"reddit\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/reddit_logo.png\"))},"
      },
      {
        "row": 7,
        "rowsha": "HDf4DRKIt2xC8uIY0lPunIM/2rc2ymhK9RcjqJ//Lj4=",
        "originContent": "    new { Name=\"statck_overflow\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/statck_overflow_logo.png\"))},",
        "translatedContent": "    new { Name=\"statck_overflow\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/statck_overflow_logo.png\"))},"
      },
      {
        "row": 8,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 9,
        "rowsha": "4VpclK1CJ7n5vomm9LnzaeHmvZ+NQWpXM5U8rSt0pXE=",
        "originContent": "MiniExcel.SaveAs(path, value);",
        "translatedContent": "MiniExcel.SaveAs(path, value);"
      },
      {
        "row": 10,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 57,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/150462383-ad9931b3-ed8d-4221-a1d6-66f799743433.png)\n\n\n\n#### 11. Byte Array File Export\n\nSince 1.22.0, when value type is `byte[]` then system will save file path at cell by default, and when import system can be converted to `byte[]`. And if you don't want to use it, you can set  `OpenXmlConfiguration.EnableConvertByteArray` to `false`, it can improve the system efficiency.\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\nSince 1.22.0, when value type is `byte[]` then system will save file path at cell by default, and when import system can be converted to `byte[]`. And if you don't want to use it, you can set  `OpenXmlConfiguration.EnableConvertByteArray` to `false`, it can improve the system efficiency.\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\n#### 12. Merge same cells vertically\n\nThis functionality is only supported in `xlsx` format and merges cells vertically between @merge and @endmerge tags.\nYou can use @mergelimit to limit boundaries of merging cells vertically.\n",
    "ContentSha": "mP+GEjw+n5ry/NcPlt4yBj/ZaPNLt7ZRFvYKgckN9Fo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/150462383-ad9931b3-ed8d-4221-a1d6-66f799743433.png)\n\n\n\n#### 11. Exportación de archivos de matrices de bytes\n\nDesde la versión 1.22.0, cuando el tipo de valor es `byte[]`, el sistema guardará la ruta del archivo en la celda por defecto, y al importar el sistema puede convertirlo a `byte[]`. Y si no desea utilizarlo, puede configurar `OpenXmlConfiguration.EnableConvertByteArray` en `false`, lo que puede mejorar la eficiencia del sistema.\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\nDesde la versión 1.22.0, cuando el tipo de valor es `byte[]`, el sistema guardará la ruta del archivo en la celda por defecto, y al importar el sistema puede convertirlo a `byte[]`. Y si no desea utilizarlo, puede configurar `OpenXmlConfiguration.EnableConvertByteArray` en `false`, lo que puede mejorar la eficiencia del sistema.\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\n#### 12. Unir celdas iguales verticalmente\n\nEsta funcionalidad solo es compatible con el formato `xlsx` y une celdas verticalmente entre las etiquetas @merge y @endmerge.\nPuede usar @mergelimit para limitar los límites de la unión de celdas verticalmente.\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/150462383-ad9931b3-ed8d-4221-a1d6-66f799743433.png)"
      },
      {
        "row": 2,
        "rowsha": "s2baF0Rcx092+eNiedhyJl8uY8+BAbyKZoPzHRalIMU=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/150462383-ad9931b3-ed8d-4221-a1d6-66f799743433.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 11. Exportación de archivos de matrices de bytes"
      },
      {
        "row": 6,
        "rowsha": "VXMF/lYv4pGLE0KGg2WoBLN7ZZx16UvLVtWf67Aiw10=",
        "originContent": "#### 11. Byte Array File Export",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Desde la versión 1.22.0, cuando el tipo de valor es `byte[]`, el sistema guardará la ruta del archivo en la celda por defecto, y al importar el sistema puede convertirlo a `byte[]`. Y si no desea utilizarlo, puede configurar `OpenXmlConfiguration.EnableConvertByteArray` en `false`, lo que puede mejorar la eficiencia del sistema."
      },
      {
        "row": 8,
        "rowsha": "UMybSpfe3SFUCALtO4QZiBMr/cw92b7tTpNhacTXqV0=",
        "originContent": "Since 1.22.0, when value type is `byte[]` then system will save file path at cell by default, and when import system can be converted to `byte[]`. And if you don't want to use it, you can set  `OpenXmlConfiguration.EnableConvertByteArray` to `false`, it can improve the system efficiency.",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)"
      },
      {
        "row": 10,
        "rowsha": "RLtG9j55mcyUqnBvTSZwpihERxja+Igmd3i4kd1W9Sc=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Desde la versión 1.22.0, cuando el tipo de valor es `byte[]`, el sistema guardará la ruta del archivo en la celda por defecto, y al importar el sistema puede convertirlo a `byte[]`. Y si no desea utilizarlo, puede configurar `OpenXmlConfiguration.EnableConvertByteArray` en `false`, lo que puede mejorar la eficiencia del sistema."
      },
      {
        "row": 12,
        "rowsha": "UMybSpfe3SFUCALtO4QZiBMr/cw92b7tTpNhacTXqV0=",
        "originContent": "Since 1.22.0, when value type is `byte[]` then system will save file path at cell by default, and when import system can be converted to `byte[]`. And if you don't want to use it, you can set  `OpenXmlConfiguration.EnableConvertByteArray` to `false`, it can improve the system efficiency.",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)"
      },
      {
        "row": 14,
        "rowsha": "RLtG9j55mcyUqnBvTSZwpihERxja+Igmd3i4kd1W9Sc=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 12. Unir celdas iguales verticalmente"
      },
      {
        "row": 16,
        "rowsha": "OJ+SHnZy5yEg3ADXfZB9Sct2UgBcgkKc81srT30mMRY=",
        "originContent": "#### 12. Merge same cells vertically",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Esta funcionalidad solo es compatible con el formato `xlsx` y une celdas verticalmente entre las etiquetas @merge y @endmerge."
      },
      {
        "row": 18,
        "rowsha": "08h7HiaMEp6Q0dX1OU6XRf6oQj1w/qeRl2lXr+ttmQs=",
        "originContent": "This functionality is only supported in `xlsx` format and merges cells vertically between @merge and @endmerge tags.",
        "translatedContent": "Puede usar @mergelimit para limitar los límites de la unión de celdas verticalmente."
      },
      {
        "row": 19,
        "rowsha": "gnrN+sRJHBcMDibWcnK66rFFfP76aZW/lBasyZv9QeU=",
        "originContent": "You can use @mergelimit to limit boundaries of merging cells vertically.",
        "translatedContent": ""
      },
      {
        "row": 20,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 58,
    "Content": "```csharp\nvar mergedFilePath = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid().ToString()}.xlsx\");\n\nvar path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";\n\nMiniExcel.MergeSameCells(mergedFilePath, path);\n```",
    "ContentSha": "hVwv1CnRppsTd4KsCWBYsV/WYn2Vjy2b5JmMpWMl57w=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar mergedFilePath = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid().ToString()}.xlsx\");\n\nvar path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";\n\nMiniExcel.MergeSameCells(mergedFilePath, path);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "q841sm5YhZthyQDNiid6JHMpvl7RjbiL6WMgjIjSs3Q=",
        "originContent": "var mergedFilePath = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid().ToString()}.xlsx\");",
        "translatedContent": "var mergedFilePath = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid().ToString()}.xlsx\");"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "GQDFSq9t/59y6XG3nbS3/8anNFj4FvKG7WFXMAmDiqY=",
        "originContent": "var path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";",
        "translatedContent": "var path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "iGgz2AmpwOQz3qP5vLDsOEn+vCO3XF09exty3syj3Mo=",
        "originContent": "MiniExcel.MergeSameCells(mergedFilePath, path);",
        "translatedContent": "MiniExcel.MergeSameCells(mergedFilePath, path);"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 59,
    "Content": "",
    "ContentSha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content></translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content></translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 60,
    "Content": "```csharp\nvar memoryStream = new MemoryStream();\n\nvar path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";\n\nmemoryStream.MergeSameCells(path);\n```",
    "ContentSha": "ttYqv/VAJiY/CkeO0Uf2/xbZEiGLzSfDI+Pkq3DBDXo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar memoryStream = new MemoryStream();\n\nvar path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";\n\nmemoryStream.MergeSameCells(path);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "yW2jzChfBU626C8rVia8x8cJViW+gxnMDHMDaofV/w8=",
        "originContent": "var memoryStream = new MemoryStream();",
        "translatedContent": "var memoryStream = new MemoryStream();"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "GQDFSq9t/59y6XG3nbS3/8anNFj4FvKG7WFXMAmDiqY=",
        "originContent": "var path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";",
        "translatedContent": "var path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "WgkzygdJBhgMBcIksfe5hd4EpBWqeTnMJtIfuPrMH8E=",
        "originContent": "memoryStream.MergeSameCells(path);",
        "translatedContent": "memoryStream.MergeSameCells(path);"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 61,
    "Content": "\nFile content before and after merge:\n\nWithout merge limit:\n\n<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 24\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/49cc96b9-6c35-4bf3-8d43-a9752a15b22e\">\n\n<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 57\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/3fbd529b-3ae6-4bbe-b4d8-2793a5a58010\">\n\nWith merge limit:\n\n<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 00\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/04049d28-84d5-4c2a-bcff-5847547df5e1\">\n\n<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 40\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/f5cf8957-b0b0-4831-b8fc-8556299235c2\">\n\n#### 13. Skip null values\n\nNew explicit option to write empty cells for null values:\n",
    "ContentSha": "4U0Ey4yU00Pq+cGQrlxdrYLK8No//yiuG2zpkjciL4M=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Contenido del archivo antes y después de la combinación:\n\nSin límite de combinación:\n\n<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 24\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/49cc96b9-6c35-4bf3-8d43-a9752a15b22e\">\n\n<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 57\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/3fbd529b-3ae6-4bbe-b4d8-2793a5a58010\">\n\nCon límite de combinación:\n\n<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 00\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/04049d28-84d5-4c2a-bcff-5847547df5e1\">\n\n<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 40\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/f5cf8957-b0b0-4831-b8fc-8556299235c2\">\n\n#### 13. Omitir valores nulos\n\nNueva opción explícita para escribir celdas vacías para valores nulos:\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Contenido del archivo antes y después de la combinación:"
      },
      {
        "row": 2,
        "rowsha": "4RjXsVRU7AkpWDGV+0gm8ErASSg6mPEX5iGdNrHqIic=",
        "originContent": "File content before and after merge:",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Sin límite de combinación:"
      },
      {
        "row": 4,
        "rowsha": "8+j4m54yRwDtFyblxqUTJSRGbLbQwruxMIlW5Wdh/2o=",
        "originContent": "Without merge limit:",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 24\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/49cc96b9-6c35-4bf3-8d43-a9752a15b22e\">"
      },
      {
        "row": 6,
        "rowsha": "KL9jUI9aDilN53vagWTTamOH5twzGeITjo+D3+YHbKI=",
        "originContent": "<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 24\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/49cc96b9-6c35-4bf3-8d43-a9752a15b22e\">",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 57\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/3fbd529b-3ae6-4bbe-b4d8-2793a5a58010\">"
      },
      {
        "row": 8,
        "rowsha": "6sQk3YP+QGu5q/BU52C6K3GvYB4sSZ4lmKv8qN+cpVY=",
        "originContent": "<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 57\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/3fbd529b-3ae6-4bbe-b4d8-2793a5a58010\">",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Con límite de combinación:"
      },
      {
        "row": 10,
        "rowsha": "aXnQA9Z5t9f4KGMZX6lg+DzTlB175Scfa4NHnNHJf1I=",
        "originContent": "With merge limit:",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 00\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/04049d28-84d5-4c2a-bcff-5847547df5e1\">"
      },
      {
        "row": 12,
        "rowsha": "CdOAYdX4WKwzWVmNK8F0sQOskLeXNwH2AMcrlI760PI=",
        "originContent": "<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 00\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/04049d28-84d5-4c2a-bcff-5847547df5e1\">",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 40\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/f5cf8957-b0b0-4831-b8fc-8556299235c2\">"
      },
      {
        "row": 14,
        "rowsha": "HjU5qEHJsJEttuCz+CR0w8w7WUW9N/pb5v54So/H14M=",
        "originContent": "<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 40\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/f5cf8957-b0b0-4831-b8fc-8556299235c2\">",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 13. Omitir valores nulos"
      },
      {
        "row": 16,
        "rowsha": "2gvjRQ5RSuC/jtBDOu+ccL7phHHlLJPAMDnjXMB1Il0=",
        "originContent": "#### 13. Skip null values",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Nueva opción explícita para escribir celdas vacías para valores nulos:"
      },
      {
        "row": 18,
        "rowsha": "9CLLxd2+WPn17KHFfe29pCDeZ3UVvoW50cUYj9pk+jg=",
        "originContent": "New explicit option to write empty cells for null values:",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 62,
    "Content": "```csharp\nDataTable dt = new DataTable();\n\n/* ... */\n\nDataRow dr = dt.NewRow();\n\ndr[\"Name1\"] = \"Somebody once\";\ndr[\"Name2\"] = null;\ndr[\"Name3\"] = \"told me.\";\n\ndt.Rows.Add(dr);\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n     EnableWriteNullValueCell = true // Default value.\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```",
    "ContentSha": "xHA4nV9ZPQ0ebVrVYXdYkOgEtD7EI4DATT/tGpSFZLk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nDataTable dt = new DataTable();\n\n/* ... */\n\nDataRow dr = dt.NewRow();\n\ndr[\"Name1\"] = \"Somebody once\";\ndr[\"Name2\"] = null;\ndr[\"Name3\"] = \"told me.\";\n\ndt.Rows.Add(dr);\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n     EnableWriteNullValueCell = true // Default value.\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "K2xFx5xvfbhZnkPsSex7lW/Fg774FzFTaw6fReeVVhI=",
        "originContent": "DataTable dt = new DataTable();",
        "translatedContent": "DataTable dt = new DataTable();"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "E4Ym0kYtEiQ1P8QRSgWGhK/qkig1LpTXKIp4xeS8Qqg=",
        "originContent": "/* ... */",
        "translatedContent": "/* ... */"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "O0t7Ko1Zcug0s3jtEUvXQs3dJCEA+UnUOPIiwhGnYxo=",
        "originContent": "DataRow dr = dt.NewRow();",
        "translatedContent": "DataRow dr = dt.NewRow();"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "lPXVm5HtDjYNNz0ZJMQS6RL+7pqnnwYC3PwAaM1dO3M=",
        "originContent": "dr[\"Name1\"] = \"Somebody once\";",
        "translatedContent": "dr[\"Name1\"] = \"Somebody once\";"
      },
      {
        "row": 9,
        "rowsha": "C/D3DbhkTs6XfPZvs0URbNAiHRSIMftBBvq9lKu4Gzo=",
        "originContent": "dr[\"Name2\"] = null;",
        "translatedContent": "dr[\"Name2\"] = null;"
      },
      {
        "row": 10,
        "rowsha": "roVHEAjZtYZNc6B/rXqinV/r9HtBW9IZ7P1sLTEjn8c=",
        "originContent": "dr[\"Name3\"] = \"told me.\";",
        "translatedContent": "dr[\"Name3\"] = \"told me.\";"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "xMI916MlPIxLUKfQCIQpvob6x08P0lUU5oZdgkq7BiI=",
        "originContent": "dt.Rows.Add(dr);",
        "translatedContent": "dt.Rows.Add(dr);"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "UOo+mSskbBPE278sPhyycqazHZxOx8mouj15+xOB2gs=",
        "originContent": "OpenXmlConfiguration configuration = new OpenXmlConfiguration()",
        "translatedContent": "OpenXmlConfiguration configuration = new OpenXmlConfiguration()"
      },
      {
        "row": 15,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 16,
        "rowsha": "yvHpVhkYlZaF4rRZycePAXzHz6QVFYKMWeG3kXTKtDM=",
        "originContent": "     EnableWriteNullValueCell = true // Default value.",
        "translatedContent": "     EnableWriteNullValueCell = true // Default value."
      },
      {
        "row": 17,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "+PF9WZBZpQ+TDm0n6RnDNn35I3S1jjxyzbQi8U/8sKA=",
        "originContent": "MiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);",
        "translatedContent": "MiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);"
      },
      {
        "row": 20,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 63,
    "Content": "\n![image](https://user-images.githubusercontent.com/31481586/241419455-3c0aec8a-4e5f-4d83-b7ec-6572124c165d.png)\n",
    "ContentSha": "5shBEiBBVrh0zUGo2VK3Q2F+tO15dFw6MeoHOJA7ehQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 64,
    "Content": "```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" s=\"2\"></x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```",
    "ContentSha": "tvNgAZTYNCviMgZm0aycKPo0Q2bEvdA04osV7UuUhxc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" s=\"2\"></x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "t8tiRzaNtUnLbiIQGiHIAAk1ELMO6fTRRvBkkpFEsR4=",
        "originContent": "```xml",
        "translatedContent": "```xml"
      },
      {
        "row": 2,
        "rowsha": "mNtDjgOlETXLZ+P1G/8ZoyY+5Yi3A++DyVQcH91rc0E=",
        "originContent": "<x:row r=\"2\">",
        "translatedContent": "<x:row r=\"2\">"
      },
      {
        "row": 3,
        "rowsha": "CmplhWWVM15tXXkFQhYAYQN5sxTOs4tlr9ty5unyN6E=",
        "originContent": "    <x:c r=\"A2\" t =\"str\" s=\"2\">",
        "translatedContent": "    <x:c r=\"A2\" t =\"str\" s=\"2\">"
      },
      {
        "row": 4,
        "rowsha": "+8Go6+7GFhSsep/ADeUOTZhYX3fJl4/wNbGMH+ydVNo=",
        "originContent": "        <x:v>Somebody once</x:v>",
        "translatedContent": "        <x:v>Somebody once</x:v>"
      },
      {
        "row": 5,
        "rowsha": "NjDdvXRzaOjpNkXkp8y7fd3rXQypb3OeYd52f/KXe+8=",
        "originContent": "    </x:c>",
        "translatedContent": "    </x:c>"
      },
      {
        "row": 6,
        "rowsha": "U/8uU61/9X55W7F0Ucs3gld7M0xbQzPaMd+e6KtNkIQ=",
        "originContent": "    <x:c r=\"B2\" s=\"2\"></x:c>",
        "translatedContent": "    <x:c r=\"B2\" s=\"2\"></x:c>"
      },
      {
        "row": 7,
        "rowsha": "ZZ1pd7Z/T6NRkTm985DxA8OJqL0qftNduv2iry1lCJY=",
        "originContent": "    <x:c r=\"C2\" t =\"str\" s=\"2\">",
        "translatedContent": "    <x:c r=\"C2\" t =\"str\" s=\"2\">"
      },
      {
        "row": 8,
        "rowsha": "pK1ZlRUxVgkQ7y/lCym+KOqUEPuGndM2BihLi2KeniI=",
        "originContent": "        <x:v>told me.</x:v>",
        "translatedContent": "        <x:v>told me.</x:v>"
      },
      {
        "row": 9,
        "rowsha": "NjDdvXRzaOjpNkXkp8y7fd3rXQypb3OeYd52f/KXe+8=",
        "originContent": "    </x:c>",
        "translatedContent": "    </x:c>"
      },
      {
        "row": 10,
        "rowsha": "C27cx1rzhng2rjqP7BGXS+L6CkNtjseC3QhnZYvfots=",
        "originContent": "</x:row>",
        "translatedContent": "</x:row>"
      },
      {
        "row": 11,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 65,
    "Content": "\nPrevious behavior:\n",
    "ContentSha": "3ZPK1gGfk78nqeMIJ9BV2lryfPcKxEZwglnP+2QWcgg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\nComportamiento anterior:\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "CvvCkhhM/Kz1vTr86EdKbEY8+mG3IjZu7I5ypJNEy3Y=",
        "originContent": "Previous behavior:",
        "translatedContent": "Comportamiento anterior:"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 66,
    "Content": "```csharp\n/* ... */\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n     EnableWriteNullValueCell = false // Default value is true.\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```",
    "ContentSha": "x6haRIhVyvUFDLAQvB7mJ0xaTKhXnf52REpLnuL1Yk8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n/* ... */\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n     EnableWriteNullValueCell = false // Default value is true.\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "E4Ym0kYtEiQ1P8QRSgWGhK/qkig1LpTXKIp4xeS8Qqg=",
        "originContent": "/* ... */",
        "translatedContent": "/* ... */"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "UOo+mSskbBPE278sPhyycqazHZxOx8mouj15+xOB2gs=",
        "originContent": "OpenXmlConfiguration configuration = new OpenXmlConfiguration()",
        "translatedContent": "OpenXmlConfiguration configuration = new OpenXmlConfiguration()"
      },
      {
        "row": 5,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 6,
        "rowsha": "OrrAFBoN38azpT34kPSVokAi2qvv6SNf85HVGmQ8rnA=",
        "originContent": "     EnableWriteNullValueCell = false // Default value is true.",
        "translatedContent": "     EnableWriteNullValueCell = false // Default value is true."
      },
      {
        "row": 7,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "+PF9WZBZpQ+TDm0n6RnDNn35I3S1jjxyzbQi8U/8sKA=",
        "originContent": "MiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);",
        "translatedContent": "MiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);"
      },
      {
        "row": 10,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 67,
    "Content": "\n![image](https://user-images.githubusercontent.com/31481586/241419441-c4f27e8f-3f87-46db-a10f-08665864c874.png)\n",
    "ContentSha": "OcWTPNkAgKKjG3646HsPonfsJg38WX2p7A/Y6pj6LMA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![imagen](https://user-images.githubusercontent.com/31481586/241419441-c4f27e8f-3f87-46db-a10f-08665864c874.png)\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![imagen](https://user-images.githubusercontent.com/31481586/241419441-c4f27e8f-3f87-46db-a10f-08665864c874.png)"
      },
      {
        "row": 2,
        "rowsha": "u73IcxxfsKjV/vVf6uh1a/iUOfUEt3AB9lFGADUPcGw=",
        "originContent": "![image](https://user-images.githubusercontent.com/31481586/241419441-c4f27e8f-3f87-46db-a10f-08665864c874.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 68,
    "Content": "```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" t =\"str\" s=\"2\">\n        <x:v></x:v>\n    </x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```",
    "ContentSha": "qW6ZS8EtNIVbwT05vSM3z/dISEtnvcPQP2rW9vT320M=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" t =\"str\" s=\"2\">\n        <x:v></x:v>\n    </x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "t8tiRzaNtUnLbiIQGiHIAAk1ELMO6fTRRvBkkpFEsR4=",
        "originContent": "```xml",
        "translatedContent": "```xml"
      },
      {
        "row": 2,
        "rowsha": "mNtDjgOlETXLZ+P1G/8ZoyY+5Yi3A++DyVQcH91rc0E=",
        "originContent": "<x:row r=\"2\">",
        "translatedContent": "<x:row r=\"2\">"
      },
      {
        "row": 3,
        "rowsha": "CmplhWWVM15tXXkFQhYAYQN5sxTOs4tlr9ty5unyN6E=",
        "originContent": "    <x:c r=\"A2\" t =\"str\" s=\"2\">",
        "translatedContent": "    <x:c r=\"A2\" t =\"str\" s=\"2\">"
      },
      {
        "row": 4,
        "rowsha": "+8Go6+7GFhSsep/ADeUOTZhYX3fJl4/wNbGMH+ydVNo=",
        "originContent": "        <x:v>Somebody once</x:v>",
        "translatedContent": "        <x:v>Somebody once</x:v>"
      },
      {
        "row": 5,
        "rowsha": "NjDdvXRzaOjpNkXkp8y7fd3rXQypb3OeYd52f/KXe+8=",
        "originContent": "    </x:c>",
        "translatedContent": "    </x:c>"
      },
      {
        "row": 6,
        "rowsha": "6V8M0KxltHp+bx5sciHjKF0a3IP/XDHLSvMJh9fBrvQ=",
        "originContent": "    <x:c r=\"B2\" t =\"str\" s=\"2\">",
        "translatedContent": "    <x:c r=\"B2\" t =\"str\" s=\"2\">"
      },
      {
        "row": 7,
        "rowsha": "fGFjr4rWMtWskZGGk4VRo+i++jtbowyl2gB23tvDt8E=",
        "originContent": "        <x:v></x:v>",
        "translatedContent": "        <x:v></x:v>"
      },
      {
        "row": 8,
        "rowsha": "NjDdvXRzaOjpNkXkp8y7fd3rXQypb3OeYd52f/KXe+8=",
        "originContent": "    </x:c>",
        "translatedContent": "    </x:c>"
      },
      {
        "row": 9,
        "rowsha": "ZZ1pd7Z/T6NRkTm985DxA8OJqL0qftNduv2iry1lCJY=",
        "originContent": "    <x:c r=\"C2\" t =\"str\" s=\"2\">",
        "translatedContent": "    <x:c r=\"C2\" t =\"str\" s=\"2\">"
      },
      {
        "row": 10,
        "rowsha": "pK1ZlRUxVgkQ7y/lCym+KOqUEPuGndM2BihLi2KeniI=",
        "originContent": "        <x:v>told me.</x:v>",
        "translatedContent": "        <x:v>told me.</x:v>"
      },
      {
        "row": 11,
        "rowsha": "NjDdvXRzaOjpNkXkp8y7fd3rXQypb3OeYd52f/KXe+8=",
        "originContent": "    </x:c>",
        "translatedContent": "    </x:c>"
      },
      {
        "row": 12,
        "rowsha": "C27cx1rzhng2rjqP7BGXS+L6CkNtjseC3QhnZYvfots=",
        "originContent": "</x:row>",
        "translatedContent": "</x:row>"
      },
      {
        "row": 13,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 69,
    "Content": "\nWorks for null and DBNull values.\n\n#### 14. Freeze Panes",
    "ContentSha": "SEb+ySvjTTpmREu3Ivb3lKQ+i3ktkWe6jwh2ssXPuH8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Funciona para valores null y DBNull.\n\n#### 14. Inmovilizar paneles\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Funciona para valores null y DBNull."
      },
      {
        "row": 2,
        "rowsha": "QRWqkuGOAXZR3UxHmOGZkUldah0EVBnrZVrB8U7DTOQ=",
        "originContent": "Works for null and DBNull values.",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 14. Inmovilizar paneles"
      },
      {
        "row": 4,
        "rowsha": "Gin/VkFak9Dd835YemuBhcSwdUUIGlutrF9m6OlDm/4=",
        "originContent": "#### 14. Freeze Panes",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 70,
    "Content": "```csharp\n/* ... */\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n    FreezeRowCount = 1,     // default is 1\n    FreezeColumnCount = 2   // default is 0\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```",
    "ContentSha": "sWfMVn25b56KxeOAwJ2/1OU/VOMa9HfKcrzTR2h2sGM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n/* ... */\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n    FreezeRowCount = 1,     // default is 1\n    FreezeColumnCount = 2   // default is 0\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "E4Ym0kYtEiQ1P8QRSgWGhK/qkig1LpTXKIp4xeS8Qqg=",
        "originContent": "/* ... */",
        "translatedContent": "/* ... */"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "UOo+mSskbBPE278sPhyycqazHZxOx8mouj15+xOB2gs=",
        "originContent": "OpenXmlConfiguration configuration = new OpenXmlConfiguration()",
        "translatedContent": "OpenXmlConfiguration configuration = new OpenXmlConfiguration()"
      },
      {
        "row": 5,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 6,
        "rowsha": "Vek1EQRoGn2NwAK3KilbFOAq6Uuba0YJ0Y1xjmW6sLM=",
        "originContent": "    FreezeRowCount = 1,     // default is 1",
        "translatedContent": "    FreezeRowCount = 1,     // default is 1"
      },
      {
        "row": 7,
        "rowsha": "+ZQ5+QBggPzp1TiWRnNjC7Am6m3ct7Rk31vxsAKkrvY=",
        "originContent": "    FreezeColumnCount = 2   // default is 0",
        "translatedContent": "    FreezeColumnCount = 2   // default is 0"
      },
      {
        "row": 8,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "+PF9WZBZpQ+TDm0n6RnDNn35I3S1jjxyzbQi8U/8sKA=",
        "originContent": "MiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);",
        "translatedContent": "MiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);"
      },
      {
        "row": 11,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 71,
    "Content": "\n![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/freeze-pane-1.png)\n\n\n### Fill Data To Excel Template <a name=\"getstart3\"></a>\n\n- The declaration is similar to Vue template `{{variable name}}`, or the collection rendering `{{collection name.field name}}`\n- Collection rendering support IEnumerable/DataTable/DapperRow\n\n#### 1. Basic Fill\n\nTemplate:\n![image](https://user-images.githubusercontent.com/12729184/114537556-ed8d2b00-9c84-11eb-8303-a69f62c41e5b.png)\n\nResult:\n![image](https://user-images.githubusercontent.com/12729184/114537490-d8180100-9c84-11eb-8c69-db58692f3a85.png)\n\nCode:",
    "ContentSha": "nhQYZWl96KcZGnQTUxNiZPM0K3eJR6uprBWY62eFsNE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/freeze-pane-1.png)\n\n\n### Rellenar datos en la plantilla de Excel <a name=\"getstart3\"></a>\n\n- La declaración es similar a la plantilla de Vue `{{nombre de variable}}`, o el renderizado de colecciones `{{nombre de colección.nombre de campo}}`\n- El renderizado de colecciones soporta IEnumerable/DataTable/DapperRow\n\n#### 1. Rellenado básico\n\nPlantilla:\n![image](https://user-images.githubusercontent.com/12729184/114537556-ed8d2b00-9c84-11eb-8303-a69f62c41e5b.png)\n\nResultado:\n![image](https://user-images.githubusercontent.com/12729184/114537490-d8180100-9c84-11eb-8c69-db58692f3a85.png)\n\nCódigo:\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/freeze-pane-1.png)"
      },
      {
        "row": 2,
        "rowsha": "zqunhjzeAehxcad6U2B96H5CO/ISjtZvRzJ3E5HEhy8=",
        "originContent": "![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/freeze-pane-1.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Rellenar datos en la plantilla de Excel <a name=\"getstart3\"></a>"
      },
      {
        "row": 5,
        "rowsha": "TQ77RYlGFHc9406/QLyN/+HxCBVz6htuhHrwml4RtEY=",
        "originContent": "### Fill Data To Excel Template <a name=\"getstart3\"></a>",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- La declaración es similar a la plantilla de Vue `{{nombre de variable}}`, o el renderizado de colecciones `{{nombre de colección.nombre de campo}}`"
      },
      {
        "row": 7,
        "rowsha": "lX7xrZmxVeidIUL55O2UuYL866EiKlgIF3CnMfETrBA=",
        "originContent": "- The declaration is similar to Vue template `{{variable name}}`, or the collection rendering `{{collection name.field name}}`",
        "translatedContent": "- El renderizado de colecciones soporta IEnumerable/DataTable/DapperRow"
      },
      {
        "row": 8,
        "rowsha": "ksYcJ3/azwsuhVpFIUjQTz0JwrPdhM8Jp4FfqlWIFvc=",
        "originContent": "- Collection rendering support IEnumerable/DataTable/DapperRow",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 1. Rellenado básico"
      },
      {
        "row": 10,
        "rowsha": "d7RttyYjcTp+OnUeAs0/qY4fx2TpeR1OJGmKVEj2W80=",
        "originContent": "#### 1. Basic Fill",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Plantilla:"
      },
      {
        "row": 12,
        "rowsha": "PIk4d064PcWVZf+ZgT4xXsDtwYB4FZf6fyh9Tr7fM/4=",
        "originContent": "Template:",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/114537556-ed8d2b00-9c84-11eb-8303-a69f62c41e5b.png)"
      },
      {
        "row": 13,
        "rowsha": "myNwxS+htRtDig1q96rtfZgxPjI7u54aDp3nZovpJBc=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/114537556-ed8d2b00-9c84-11eb-8303-a69f62c41e5b.png)",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Resultado:"
      },
      {
        "row": 15,
        "rowsha": "zPvKZQd4HNnuVnaGBJTmWVhZQEBtIv501ZLTARqHxCE=",
        "originContent": "Result:",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/114537490-d8180100-9c84-11eb-8c69-db58692f3a85.png)"
      },
      {
        "row": 16,
        "rowsha": "4Teh0rrQsq1I3bu05OuqxkXYI/P0GyH5Z3COXMY02dA=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/114537490-d8180100-9c84-11eb-8c69-db58692f3a85.png)",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Código:"
      },
      {
        "row": 18,
        "rowsha": "Xwnh90ptKYxaicHoRguLlCfsVOk73EJAkNrKpnvG/RM=",
        "originContent": "Code:",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 72,
    "Content": "```csharp\n// 1. By POCO\nvar value = new\n{\n    Name = \"Jack\",\n    CreateDate = new DateTime(2021, 01, 01),\n    VIP = true,\n    Points = 123\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"Name\"] = \"Jack\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "p9dEiYRjny7/ngXnKelYXwhrUdqu6/8NCM9KnJ5zckE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n// 1. By POCO\nvar value = new\n{\n    Name = \"Jack\",\n    CreateDate = new DateTime(2021, 01, 01),\n    VIP = true,\n    Points = 123\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"Name\"] = \"Jack\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "O4Tz6cbSgUmJzzrT2H36RRHYGCZgtR8dNHbgRtPj1Tk=",
        "originContent": "// 1. By POCO",
        "translatedContent": "// 1. By POCO"
      },
      {
        "row": 3,
        "rowsha": "ciisRb3n3ddiGoU3eXpIJr2nwrUBNVFyrlHMuVQ/KrY=",
        "originContent": "var value = new",
        "translatedContent": "var value = new"
      },
      {
        "row": 4,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 5,
        "rowsha": "8KkaZ7PlxkvCGeOrBQ+GrKNlllnEoLuPAx0kYWQB1+s=",
        "originContent": "    Name = \"Jack\",",
        "translatedContent": "    Name = \"Jack\","
      },
      {
        "row": 6,
        "rowsha": "bV841ED/whoA8AR9Nkn4LKB7+/FKczdLH1hhBdJI3Do=",
        "originContent": "    CreateDate = new DateTime(2021, 01, 01),",
        "translatedContent": "    CreateDate = new DateTime(2021, 01, 01),"
      },
      {
        "row": 7,
        "rowsha": "+Tq4KiyeiQb5J2qblTsAUmQfOieZk2c3ZNtex/xyOYU=",
        "originContent": "    VIP = true,",
        "translatedContent": "    VIP = true,"
      },
      {
        "row": 8,
        "rowsha": "vwj6JH0CxTGRHpUSswlTq9zaD4BAJZuD7ASc8yPWX0s=",
        "originContent": "    Points = 123",
        "translatedContent": "    Points = 123"
      },
      {
        "row": 9,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 10,
        "rowsha": "rHsN+q7MSqdjztBySCdCQwrEH48bzVX4Wn5Gs4l14HM=",
        "originContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);",
        "translatedContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "n8/+tlGGeUgWJQ2hxNvBW3SF8WBKotLjIbGisoXoYY4=",
        "originContent": "// 2. By Dictionary",
        "translatedContent": "// 2. By Dictionary"
      },
      {
        "row": 14,
        "rowsha": "Fvqmo73Q+sbCRsQ/G5bEtSkp9bf7NeKk3+Du8xy+ihI=",
        "originContent": "var value = new Dictionary<string, object>()",
        "translatedContent": "var value = new Dictionary<string, object>()"
      },
      {
        "row": 15,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 16,
        "rowsha": "EViUhMMTsIt8Mjw4CKlskwU6GSIQtOvpGF9ygadYjM8=",
        "originContent": "    [\"Name\"] = \"Jack\",",
        "translatedContent": "    [\"Name\"] = \"Jack\","
      },
      {
        "row": 17,
        "rowsha": "pabLK38biIS/bAiwxy/elwAKGNl1a2kYS3kQJclHMds=",
        "originContent": "    [\"CreateDate\"] = new DateTime(2021, 01, 01),",
        "translatedContent": "    [\"CreateDate\"] = new DateTime(2021, 01, 01),"
      },
      {
        "row": 18,
        "rowsha": "8ust8cFQwMiUwN2IG8FMWRkKUaHwbsV8iA/4AdWXvyM=",
        "originContent": "    [\"VIP\"] = true,",
        "translatedContent": "    [\"VIP\"] = true,"
      },
      {
        "row": 19,
        "rowsha": "YZ64NTSUYG1/S1EyMFmrHR58cCzrzmY4uihijaLtPz8=",
        "originContent": "    [\"Points\"] = 123",
        "translatedContent": "    [\"Points\"] = 123"
      },
      {
        "row": 20,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 21,
        "rowsha": "rHsN+q7MSqdjztBySCdCQwrEH48bzVX4Wn5Gs4l14HM=",
        "originContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);",
        "translatedContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);"
      },
      {
        "row": 22,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 73,
    "Content": "\n\n\n#### 2. IEnumerable Data Fill\n\n> Note1: Use the first IEnumerable of the same column as the basis for filling list\n\nTemplate:\n![image](https://user-images.githubusercontent.com/12729184/114564652-14f2f080-9ca3-11eb-831f-09e3fedbc5fc.png)\n\nResult:\n![image](https://user-images.githubusercontent.com/12729184/114564204-b2015980-9ca2-11eb-900d-e21249f93f7c.png)\n\nCode:",
    "ContentSha": "M1hj9uMI1n0Vctb7LGxkyOkxXVkFF9gNR4BMgRes15M=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n\n\n#### 2. Relleno de Datos IEnumerable\n\n> Nota1: Utilice el primer IEnumerable de la misma columna como base para rellenar la lista\n\nPlantilla:\n![image](https://user-images.githubusercontent.com/12729184/114564652-14f2f080-9ca3-11eb-831f-09e3fedbc5fc.png)\n\nResultado:\n![image](https://user-images.githubusercontent.com/12729184/114564204-b2015980-9ca2-11eb-900d-e21249f93f7c.png)\n\nCódigo:</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "2cr5SF2EqnjYuQIwFQwZXuWcPKEk2qIc431HHg2f6WY=",
        "originContent": "#### 2. IEnumerable Data Fill",
        "translatedContent": "#### 2. Relleno de Datos IEnumerable"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "pKA1eILJTzYhUvIZJVZKn3AfE8+yoFl+708leay70/o=",
        "originContent": "> Note1: Use the first IEnumerable of the same column as the basis for filling list",
        "translatedContent": "> Nota1: Utilice el primer IEnumerable de la misma columna como base para rellenar la lista"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "PIk4d064PcWVZf+ZgT4xXsDtwYB4FZf6fyh9Tr7fM/4=",
        "originContent": "Template:",
        "translatedContent": "Plantilla:"
      },
      {
        "row": 9,
        "rowsha": "UyYTp/67b6Qitm6elJWTt9GzcHnsjmX7Yyt7gJ0AXA4=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/114564652-14f2f080-9ca3-11eb-831f-09e3fedbc5fc.png)",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/114564652-14f2f080-9ca3-11eb-831f-09e3fedbc5fc.png)"
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "zPvKZQd4HNnuVnaGBJTmWVhZQEBtIv501ZLTARqHxCE=",
        "originContent": "Result:",
        "translatedContent": "Resultado:"
      },
      {
        "row": 12,
        "rowsha": "gxP4+wV17PmXldLOQtWOfTGln1XndKNyZZ1NZ046DoY=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/114564204-b2015980-9ca2-11eb-900d-e21249f93f7c.png)",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/114564204-b2015980-9ca2-11eb-900d-e21249f93f7c.png)"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "Xwnh90ptKYxaicHoRguLlCfsVOk73EJAkNrKpnvG/RM=",
        "originContent": "Code:",
        "translatedContent": "Código:</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 74,
    "Content": "```csharp\n//1. By POCO\nvar value = new\n{\n    employees = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n//2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "4qTUIKolrow2eiEo5qJp6CoYTAme5dN2v2+ferczoCM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n//1. By POCO\nvar value = new\n{\n    employees = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n//2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "sME/ar9NIqhS5e1gdhnyEzR48+5grcVurMKCQ0FYayg=",
        "originContent": "//1. By POCO",
        "translatedContent": "//1. By POCO"
      },
      {
        "row": 3,
        "rowsha": "ciisRb3n3ddiGoU3eXpIJr2nwrUBNVFyrlHMuVQ/KrY=",
        "originContent": "var value = new",
        "translatedContent": "var value = new"
      },
      {
        "row": 4,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 5,
        "rowsha": "UlzKx0ZyU+3nRtWmxbAgVZBZ0b9lEq74KcWthkuQzkU=",
        "originContent": "    employees = new[] {",
        "translatedContent": "    employees = new[] {"
      },
      {
        "row": 6,
        "rowsha": "1v4DKvYxeNSNppf6AoZ7W/4Cw2Dq+fvqobiIcHe5ehg=",
        "originContent": "        new {name=\"Jack\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Jack\",department=\"HR\"},"
      },
      {
        "row": 7,
        "rowsha": "72Dz6GQpIbavtpmujSH4WQ0Jr1cN5/wL6loCbTIsjTo=",
        "originContent": "        new {name=\"Lisa\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Lisa\",department=\"HR\"},"
      },
      {
        "row": 8,
        "rowsha": "DEBZBcBGQlG3n309q6JrmhKYtRNr0sTWbDb5kQX1Daw=",
        "originContent": "        new {name=\"John\",department=\"HR\"},",
        "translatedContent": "        new {name=\"John\",department=\"HR\"},"
      },
      {
        "row": 9,
        "rowsha": "Ot66y5aa1qZiq7/IVXL50lGKyGEF0R2l0026LeiWcTA=",
        "originContent": "        new {name=\"Mike\",department=\"IT\"},",
        "translatedContent": "        new {name=\"Mike\",department=\"IT\"},"
      },
      {
        "row": 10,
        "rowsha": "P8jGg7pe5OCCsbn6Nd9pBfKYjLe+X1t+sjZX/K7HrU8=",
        "originContent": "        new {name=\"Neo\",department=\"IT\"},",
        "translatedContent": "        new {name=\"Neo\",department=\"IT\"},"
      },
      {
        "row": 11,
        "rowsha": "RgKonFjd8MSaGpR9OCO3mRXg4c+dBAn2wtjSx5W6/84=",
        "originContent": "        new {name=\"Loan\",department=\"IT\"}",
        "translatedContent": "        new {name=\"Loan\",department=\"IT\"}"
      },
      {
        "row": 12,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 13,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 14,
        "rowsha": "rHsN+q7MSqdjztBySCdCQwrEH48bzVX4Wn5Gs4l14HM=",
        "originContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);",
        "translatedContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);"
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "8taB6Zdv2s963heUlI2TeyfyyZLGUXM0++PeIT/LF7I=",
        "originContent": "//2. By Dictionary",
        "translatedContent": "//2. By Dictionary"
      },
      {
        "row": 17,
        "rowsha": "Fvqmo73Q+sbCRsQ/G5bEtSkp9bf7NeKk3+Du8xy+ihI=",
        "originContent": "var value = new Dictionary<string, object>()",
        "translatedContent": "var value = new Dictionary<string, object>()"
      },
      {
        "row": 18,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 19,
        "rowsha": "/R4dBQ+QzKHhNDxNT78sjgQ9ZmBdXr7yyGHGz0OBzzk=",
        "originContent": "    [\"employees\"] = new[] {",
        "translatedContent": "    [\"employees\"] = new[] {"
      },
      {
        "row": 20,
        "rowsha": "1v4DKvYxeNSNppf6AoZ7W/4Cw2Dq+fvqobiIcHe5ehg=",
        "originContent": "        new {name=\"Jack\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Jack\",department=\"HR\"},"
      },
      {
        "row": 21,
        "rowsha": "72Dz6GQpIbavtpmujSH4WQ0Jr1cN5/wL6loCbTIsjTo=",
        "originContent": "        new {name=\"Lisa\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Lisa\",department=\"HR\"},"
      },
      {
        "row": 22,
        "rowsha": "DEBZBcBGQlG3n309q6JrmhKYtRNr0sTWbDb5kQX1Daw=",
        "originContent": "        new {name=\"John\",department=\"HR\"},",
        "translatedContent": "        new {name=\"John\",department=\"HR\"},"
      },
      {
        "row": 23,
        "rowsha": "Ot66y5aa1qZiq7/IVXL50lGKyGEF0R2l0026LeiWcTA=",
        "originContent": "        new {name=\"Mike\",department=\"IT\"},",
        "translatedContent": "        new {name=\"Mike\",department=\"IT\"},"
      },
      {
        "row": 24,
        "rowsha": "P8jGg7pe5OCCsbn6Nd9pBfKYjLe+X1t+sjZX/K7HrU8=",
        "originContent": "        new {name=\"Neo\",department=\"IT\"},",
        "translatedContent": "        new {name=\"Neo\",department=\"IT\"},"
      },
      {
        "row": 25,
        "rowsha": "RgKonFjd8MSaGpR9OCO3mRXg4c+dBAn2wtjSx5W6/84=",
        "originContent": "        new {name=\"Loan\",department=\"IT\"}",
        "translatedContent": "        new {name=\"Loan\",department=\"IT\"}"
      },
      {
        "row": 26,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 27,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 28,
        "rowsha": "rHsN+q7MSqdjztBySCdCQwrEH48bzVX4Wn5Gs4l14HM=",
        "originContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);",
        "translatedContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);"
      },
      {
        "row": 29,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 75,
    "Content": "\n\n\n#### 3. Complex Data Fill\n\n> Note: Support multi-sheets and using same varible\n\nTemplate:\n\n![image](https://user-images.githubusercontent.com/12729184/114565255-acf0da00-9ca3-11eb-8a7f-8131b2265ae8.png)\n\nResult:\n\n![image](https://user-images.githubusercontent.com/12729184/114565329-bf6b1380-9ca3-11eb-85e3-3969e8bf6378.png)\n",
    "ContentSha": "OZti5xekFclglkJuozdmjVjVYIVKpsDZsY7+kPHaV2I=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 3. Relleno de Datos Complejos\n\n> Nota: Soporta múltiples hojas y el uso de la misma variable\n\nPlantilla:\n\n![image](https://user-images.githubusercontent.com/12729184/114565255-acf0da00-9ca3-11eb-8a7f-8131b2265ae8.png)\n\nResultado:\n\n![image](https://user-images.githubusercontent.com/12729184/114565329-bf6b1380-9ca3-11eb-85e3-3969e8bf6378.png)\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 3. Relleno de Datos Complejos"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "> Nota: Soporta múltiples hojas y el uso de la misma variable"
      },
      {
        "row": 4,
        "rowsha": "GKLfz8O6WSYQAIUsCMkMlUdfwBDFjil9lsBkFznfn2I=",
        "originContent": "#### 3. Complex Data Fill",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Plantilla:"
      },
      {
        "row": 6,
        "rowsha": "bH7ldlbdlHbKOtxv3sfBSfc+36U3rz6OKb+cGbYixAk=",
        "originContent": "> Note: Support multi-sheets and using same varible",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/114565255-acf0da00-9ca3-11eb-8a7f-8131b2265ae8.png)"
      },
      {
        "row": 8,
        "rowsha": "PIk4d064PcWVZf+ZgT4xXsDtwYB4FZf6fyh9Tr7fM/4=",
        "originContent": "Template:",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Resultado:"
      },
      {
        "row": 10,
        "rowsha": "Pk+qXPB6wkUiSyVspY+TLC7Cu7epk5JS4QMNTN4keiE=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/114565255-acf0da00-9ca3-11eb-8a7f-8131b2265ae8.png)",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/114565329-bf6b1380-9ca3-11eb-85e3-3969e8bf6378.png)"
      },
      {
        "row": 12,
        "rowsha": "zPvKZQd4HNnuVnaGBJTmWVhZQEBtIv501ZLTARqHxCE=",
        "originContent": "Result:",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "OwCENtcRy6qvb474olribZOMd+fhETeA1v1W51RbA8Q=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/114565329-bf6b1380-9ca3-11eb-85e3-3969e8bf6378.png)",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 76,
    "Content": "```csharp\n// 1. By POCO\nvar value = new\n{\n    title = \"FooCompany\",\n    managers = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    employees = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    [\"employees\"] = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "ZpGTeeVTUoKOLgTkM1S4n0SObxGcnvBqzcpDtck+9F4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n// 1. By POCO\nvar value = new\n{\n    title = \"FooCompany\",\n    managers = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    employees = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    [\"employees\"] = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "O4Tz6cbSgUmJzzrT2H36RRHYGCZgtR8dNHbgRtPj1Tk=",
        "originContent": "// 1. By POCO",
        "translatedContent": "// 1. By POCO"
      },
      {
        "row": 3,
        "rowsha": "ciisRb3n3ddiGoU3eXpIJr2nwrUBNVFyrlHMuVQ/KrY=",
        "originContent": "var value = new",
        "translatedContent": "var value = new"
      },
      {
        "row": 4,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 5,
        "rowsha": "1Bpi2zzJ3LyWofjGVyvTQ24RPReMFmHYNFwLNIe3s7w=",
        "originContent": "    title = \"FooCompany\",",
        "translatedContent": "    title = \"FooCompany\","
      },
      {
        "row": 6,
        "rowsha": "Xno32K0ogT76SlU8rVEdcnCbhS5jtwu0CiFePbR4rHc=",
        "originContent": "    managers = new[] {",
        "translatedContent": "    managers = new[] {"
      },
      {
        "row": 7,
        "rowsha": "1v4DKvYxeNSNppf6AoZ7W/4Cw2Dq+fvqobiIcHe5ehg=",
        "originContent": "        new {name=\"Jack\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Jack\",department=\"HR\"},"
      },
      {
        "row": 8,
        "rowsha": "RgKonFjd8MSaGpR9OCO3mRXg4c+dBAn2wtjSx5W6/84=",
        "originContent": "        new {name=\"Loan\",department=\"IT\"}",
        "translatedContent": "        new {name=\"Loan\",department=\"IT\"}"
      },
      {
        "row": 9,
        "rowsha": "WGNt2RaDM5CS9wC/Od2XzvCKt+GnXlriS9x94uzxbUA=",
        "originContent": "    },",
        "translatedContent": "    },"
      },
      {
        "row": 10,
        "rowsha": "UlzKx0ZyU+3nRtWmxbAgVZBZ0b9lEq74KcWthkuQzkU=",
        "originContent": "    employees = new[] {",
        "translatedContent": "    employees = new[] {"
      },
      {
        "row": 11,
        "rowsha": "fXs/A73614O58N6elffslbjUk3u0PrxTOm8PWPyjuj4=",
        "originContent": "        new {name=\"Wade\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Wade\",department=\"HR\"},"
      },
      {
        "row": 12,
        "rowsha": "AQFLcAfQpaysZuDEn7XKUpWgjGDAsTH88cd8Q78c/SY=",
        "originContent": "        new {name=\"Felix\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Felix\",department=\"HR\"},"
      },
      {
        "row": 13,
        "rowsha": "qm6j0vNHtOv9F48g3h4VFEBseB/d/GGpkmMQWhZz3sw=",
        "originContent": "        new {name=\"Eric\",department=\"IT\"},",
        "translatedContent": "        new {name=\"Eric\",department=\"IT\"},"
      },
      {
        "row": 14,
        "rowsha": "uQKQgPVLzDgXLCnQ1lm2u/QPFTD0kaLuzQJWcCEJ2VA=",
        "originContent": "        new {name=\"Keaton\",department=\"IT\"}",
        "translatedContent": "        new {name=\"Keaton\",department=\"IT\"}"
      },
      {
        "row": 15,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 16,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 17,
        "rowsha": "rHsN+q7MSqdjztBySCdCQwrEH48bzVX4Wn5Gs4l14HM=",
        "originContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);",
        "translatedContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);"
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "n8/+tlGGeUgWJQ2hxNvBW3SF8WBKotLjIbGisoXoYY4=",
        "originContent": "// 2. By Dictionary",
        "translatedContent": "// 2. By Dictionary"
      },
      {
        "row": 20,
        "rowsha": "Fvqmo73Q+sbCRsQ/G5bEtSkp9bf7NeKk3+Du8xy+ihI=",
        "originContent": "var value = new Dictionary<string, object>()",
        "translatedContent": "var value = new Dictionary<string, object>()"
      },
      {
        "row": 21,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 22,
        "rowsha": "ABaBfN/PDoyFvYFb/4A9jyBpSAvsnrO2Q9OvfOqXcb8=",
        "originContent": "    [\"title\"] = \"FooCompany\",",
        "translatedContent": "    [\"title\"] = \"FooCompany\","
      },
      {
        "row": 23,
        "rowsha": "Q5GNTUCuwWco6d8wyI8XZR2jRc53IjKNBmHAlHlCTao=",
        "originContent": "    [\"managers\"] = new[] {",
        "translatedContent": "    [\"managers\"] = new[] {"
      },
      {
        "row": 24,
        "rowsha": "1v4DKvYxeNSNppf6AoZ7W/4Cw2Dq+fvqobiIcHe5ehg=",
        "originContent": "        new {name=\"Jack\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Jack\",department=\"HR\"},"
      },
      {
        "row": 25,
        "rowsha": "RgKonFjd8MSaGpR9OCO3mRXg4c+dBAn2wtjSx5W6/84=",
        "originContent": "        new {name=\"Loan\",department=\"IT\"}",
        "translatedContent": "        new {name=\"Loan\",department=\"IT\"}"
      },
      {
        "row": 26,
        "rowsha": "WGNt2RaDM5CS9wC/Od2XzvCKt+GnXlriS9x94uzxbUA=",
        "originContent": "    },",
        "translatedContent": "    },"
      },
      {
        "row": 27,
        "rowsha": "/R4dBQ+QzKHhNDxNT78sjgQ9ZmBdXr7yyGHGz0OBzzk=",
        "originContent": "    [\"employees\"] = new[] {",
        "translatedContent": "    [\"employees\"] = new[] {"
      },
      {
        "row": 28,
        "rowsha": "fXs/A73614O58N6elffslbjUk3u0PrxTOm8PWPyjuj4=",
        "originContent": "        new {name=\"Wade\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Wade\",department=\"HR\"},"
      },
      {
        "row": 29,
        "rowsha": "AQFLcAfQpaysZuDEn7XKUpWgjGDAsTH88cd8Q78c/SY=",
        "originContent": "        new {name=\"Felix\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Felix\",department=\"HR\"},"
      },
      {
        "row": 30,
        "rowsha": "qm6j0vNHtOv9F48g3h4VFEBseB/d/GGpkmMQWhZz3sw=",
        "originContent": "        new {name=\"Eric\",department=\"IT\"},",
        "translatedContent": "        new {name=\"Eric\",department=\"IT\"},"
      },
      {
        "row": 31,
        "rowsha": "uQKQgPVLzDgXLCnQ1lm2u/QPFTD0kaLuzQJWcCEJ2VA=",
        "originContent": "        new {name=\"Keaton\",department=\"IT\"}",
        "translatedContent": "        new {name=\"Keaton\",department=\"IT\"}"
      },
      {
        "row": 32,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 33,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 34,
        "rowsha": "rHsN+q7MSqdjztBySCdCQwrEH48bzVX4Wn5Gs4l14HM=",
        "originContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);",
        "translatedContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);"
      },
      {
        "row": 35,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 77,
    "Content": "\n#### 4. Fill Big Data Performance\n\n> NOTE: Using IEnumerable deferred execution not ToList can save max memory usage in MiniExcel\n\n![image](https://user-images.githubusercontent.com/12729184/114577091-5046ec80-9cae-11eb-924b-087c7becf8da.png)\n\n\n\n#### 5. Cell value auto mapping type\n\nTemplate\n\n![image](https://user-images.githubusercontent.com/12729184/114802504-64830a80-9dd0-11eb-8d56-8e8c401b3ace.png)\n\nResult\n\n![image](https://user-images.githubusercontent.com/12729184/114802419-43221e80-9dd0-11eb-9ffe-a2ce34fe7076.png)\n\nClass\n",
    "ContentSha": "9olq3HH9B8CY3eGlebiMac6xklXhHLzYHVp6ptUKMcM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 4. Relleno de Datos Masivos - Rendimiento\n\n> NOTA: Usar la ejecución diferida de IEnumerable en lugar de ToList puede ahorrar el uso máximo de memoria en MiniExcel\n\n![image](https://user-images.githubusercontent.com/12729184/114577091-5046ec80-9cae-11eb-924b-087c7becf8da.png)\n\n\n\n#### 5. Mapeo automático de tipo de valor de celda\n\nPlantilla\n\n![image](https://user-images.githubusercontent.com/12729184/114802504-64830a80-9dd0-11eb-8d56-8e8c401b3ace.png)\n\nResultado\n\n![image](https://user-images.githubusercontent.com/12729184/114802419-43221e80-9dd0-11eb-9ffe-a2ce34fe7076.png)\n\nClase\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 4. Relleno de Datos Masivos - Rendimiento"
      },
      {
        "row": 2,
        "rowsha": "zGqJpDE1DPlll3Q7outKr+jyLWVXQzVKSSyF3RY5Cs4=",
        "originContent": "#### 4. Fill Big Data Performance",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "> NOTA: Usar la ejecución diferida de IEnumerable en lugar de ToList puede ahorrar el uso máximo de memoria en MiniExcel"
      },
      {
        "row": 4,
        "rowsha": "8Ikk00FAIZ/Zsbra0eifCg8Xd7T6/43UnBKeCJjDXUs=",
        "originContent": "> NOTE: Using IEnumerable deferred execution not ToList can save max memory usage in MiniExcel",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/114577091-5046ec80-9cae-11eb-924b-087c7becf8da.png)"
      },
      {
        "row": 6,
        "rowsha": "Ei10XEB+FEQ9YgZstNqch8M2Va168Ia291/W1mc14lM=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/114577091-5046ec80-9cae-11eb-924b-087c7becf8da.png)",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 5. Mapeo automático de tipo de valor de celda"
      },
      {
        "row": 10,
        "rowsha": "rxQwicTewVAkVUEKFBi5Yzh4M/r3ukk2UrrPqn0qVVc=",
        "originContent": "#### 5. Cell value auto mapping type",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Plantilla"
      },
      {
        "row": 12,
        "rowsha": "BXXynfiIon6FtgcRG9L8pCD9R0MiMbqyud6LgSBMpPI=",
        "originContent": "Template",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/114802504-64830a80-9dd0-11eb-8d56-8e8c401b3ace.png)"
      },
      {
        "row": 14,
        "rowsha": "iDQRjtxmvhpztIi7qJ7snhpEiEIUp5X2m9aKXn9RbB0=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/114802504-64830a80-9dd0-11eb-8d56-8e8c401b3ace.png)",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Resultado"
      },
      {
        "row": 16,
        "rowsha": "bn1Q6E9HMe90GHz4z6JnIYTu2IZrCwB0p3L0pk4PS6I=",
        "originContent": "Result",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/114802419-43221e80-9dd0-11eb-9ffe-a2ce34fe7076.png)"
      },
      {
        "row": 18,
        "rowsha": "Wet+vP5DTjdjCmxGKB2npfutU9n+Itt7zLLZs6kqlXQ=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/114802419-43221e80-9dd0-11eb-9ffe-a2ce34fe7076.png)",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Clase"
      },
      {
        "row": 20,
        "rowsha": "Tzqb0AOXSl7Yya1l1K7aO4oNtv2QPjboOjqVBiSwm70=",
        "originContent": "Class",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 78,
    "Content": "```csharp\npublic class Poco\n{\n    public string @string { get; set; }\n    public int? @int { get; set; }\n    public decimal? @decimal { get; set; }\n    public double? @double { get; set; }\n    public DateTime? datetime { get; set; }\n    public bool? @bool { get; set; }\n    public Guid? Guid { get; set; }\n}\n```",
    "ContentSha": "ZF++Un7H9PYfBmDiycopK6xc9iR5Wv/Sexl1S4yEMjw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic class Poco\n{\n    public string @string { get; set; }\n    public int? @int { get; set; }\n    public decimal? @decimal { get; set; }\n    public double? @double { get; set; }\n    public DateTime? datetime { get; set; }\n    public bool? @bool { get; set; }\n    public Guid? Guid { get; set; }\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "Nq1vc15DwK+mlS4/yEW1ZaCACzBf9lcLYP+Gk69wtkc=",
        "originContent": "public class Poco",
        "translatedContent": "public class Poco"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "Z3KDh3Av68HMU0eao/G7jH045hAcRIhQi5jd1In5NiQ=",
        "originContent": "    public string @string { get; set; }",
        "translatedContent": "    public string @string { get; set; }"
      },
      {
        "row": 5,
        "rowsha": "T0+1HwEVeHi4p3EWDhxNcHgg657DKELtonAmlnAnD8M=",
        "originContent": "    public int? @int { get; set; }",
        "translatedContent": "    public int? @int { get; set; }"
      },
      {
        "row": 6,
        "rowsha": "6XnFPk9Q0/n//Owu47zUwJRUQHRoIWTuWQtTmOhiTkI=",
        "originContent": "    public decimal? @decimal { get; set; }",
        "translatedContent": "    public decimal? @decimal { get; set; }"
      },
      {
        "row": 7,
        "rowsha": "q/CmcAY79n/K9fVELUZHKWvR6mSJOK5ITKU5TidA8+o=",
        "originContent": "    public double? @double { get; set; }",
        "translatedContent": "    public double? @double { get; set; }"
      },
      {
        "row": 8,
        "rowsha": "LPotDUJF6eH/wQRIr/4oJuCEZgw2DQOKmfU2Bhc/oxA=",
        "originContent": "    public DateTime? datetime { get; set; }",
        "translatedContent": "    public DateTime? datetime { get; set; }"
      },
      {
        "row": 9,
        "rowsha": "uDIBqBzmXGOINXSSQ5u+xTYdjME7g9EmbbRi7E524ug=",
        "originContent": "    public bool? @bool { get; set; }",
        "translatedContent": "    public bool? @bool { get; set; }"
      },
      {
        "row": 10,
        "rowsha": "YhPoRnnxmWRSyHVkyAMgYBxN9c80QihnW4xadeWcsQE=",
        "originContent": "    public Guid? Guid { get; set; }",
        "translatedContent": "    public Guid? Guid { get; set; }"
      },
      {
        "row": 11,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 12,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 79,
    "Content": "\nCode\n",
    "ContentSha": "Q60d4hFMAeB4HYk8SxPF+dO8FItDJ5qUzbWXcOtyq38=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\nCódigo\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "NA9GMDPg/V3eq7ki301PG1dHSU0PXtmJTxO24TyoMfU=",
        "originContent": "Code",
        "translatedContent": "Código"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 80,
    "Content": "```csharp\nvar poco = new TestIEnumerableTypePoco { @string = \"string\", @int = 123, @decimal = decimal.Parse(\"123.45\"), @double = (double)123.33, @datetime = new DateTime(2021, 4, 1), @bool = true, @Guid = Guid.NewGuid() };\nvar value = new\n{\n    Ts = new[] {\n        poco,\n        new TestIEnumerableTypePoco{},\n        null,\n        poco\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "CpBPYW2afluiD5RdHwP51o0Kv6eJq85PdAdDFdrHKTQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar poco = new TestIEnumerableTypePoco { @string = \"string\", @int = 123, @decimal = decimal.Parse(\"123.45\"), @double = (double)123.33, @datetime = new DateTime(2021, 4, 1), @bool = true, @Guid = Guid.NewGuid() };\nvar value = new\n{\n    Ts = new[] {\n        poco,\n        new TestIEnumerableTypePoco{},\n        null,\n        poco\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "MZfDZXkijp1ZkDssuOJ1hAJhO1XzJw94lIfYxAeOLdE=",
        "originContent": "var poco = new TestIEnumerableTypePoco { @string = \"string\", @int = 123, @decimal = decimal.Parse(\"123.45\"), @double = (double)123.33, @datetime = new DateTime(2021, 4, 1), @bool = true, @Guid = Guid.NewGuid() };",
        "translatedContent": "var poco = new TestIEnumerableTypePoco { @string = \"string\", @int = 123, @decimal = decimal.Parse(\"123.45\"), @double = (double)123.33, @datetime = new DateTime(2021, 4, 1), @bool = true, @Guid = Guid.NewGuid() };"
      },
      {
        "row": 3,
        "rowsha": "ciisRb3n3ddiGoU3eXpIJr2nwrUBNVFyrlHMuVQ/KrY=",
        "originContent": "var value = new",
        "translatedContent": "var value = new"
      },
      {
        "row": 4,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 5,
        "rowsha": "uv5KnjMHgpLmkYjCFxiVycGx5T2sAcSeEMHYaQNffsQ=",
        "originContent": "    Ts = new[] {",
        "translatedContent": "    Ts = new[] {"
      },
      {
        "row": 6,
        "rowsha": "YkSFLS4dZD2jFKLMd6sJv4mkkioBr36OMI9JawPWC0Q=",
        "originContent": "        poco,",
        "translatedContent": "        poco,"
      },
      {
        "row": 7,
        "rowsha": "Pf+OWQ6TVhwr05LxIh4yFcY5nSJHdiIb6iSkykDia0o=",
        "originContent": "        new TestIEnumerableTypePoco{},",
        "translatedContent": "        new TestIEnumerableTypePoco{},"
      },
      {
        "row": 8,
        "rowsha": "+D8QDxLOxQPN44WlUfYiDcsFKJwu+FOehxfWRyqRVDc=",
        "originContent": "        null,",
        "translatedContent": "        null,"
      },
      {
        "row": 9,
        "rowsha": "PaSlS1CQ53FF9Jz8g1k5/piBZGfowWHguHjzZFqT16g=",
        "originContent": "        poco",
        "translatedContent": "        poco"
      },
      {
        "row": 10,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 11,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 12,
        "rowsha": "rHsN+q7MSqdjztBySCdCQwrEH48bzVX4Wn5Gs4l14HM=",
        "originContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);",
        "translatedContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);"
      },
      {
        "row": 13,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 81,
    "Content": "\n\n\n#### 6. Example :  List Github Projects\n\nTemplate\n\n![image](https://user-images.githubusercontent.com/12729184/115068623-12073280-9f25-11eb-9124-f4b3efcdb2a7.png)\n\n\nResult\n\n![image](https://user-images.githubusercontent.com/12729184/115068639-1a5f6d80-9f25-11eb-9f45-27c434d19a78.png)\n\nCode\n",
    "ContentSha": "OkIaCx9Rtmqt4OT/t0iKykbC8hsYiiGVz4Ak+25mcnw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 82,
    "Content": "```csharp\nvar projects = new[]\n{\n    new {Name = \"MiniExcel\",Link=\"https://github.com/mini-software/MiniExcel\",Star=146, CreateTime=new DateTime(2021,03,01)},\n    new {Name = \"HtmlTableHelper\",Link=\"https://github.com/mini-software/HtmlTableHelper\",Star=16, CreateTime=new DateTime(2020,02,01)},\n    new {Name = \"PocoClassGenerator\",Link=\"https://github.com/mini-software/PocoClassGenerator\",Star=16, CreateTime=new DateTime(2019,03,17)}\n};\nvar value = new\n{\n    User = \"ITWeiHan\",\n    Projects = projects,\n    TotalStar = projects.Sum(s => s.Star)\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "ko4LvsBQ4/nsIr7Ewl9vyJR+JSAKkCBwkp6GmVX+o9Y=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar projects = new[]\n{\n    new {Name = \"MiniExcel\",Link=\"https://github.com/mini-software/MiniExcel\",Star=146, CreateTime=new DateTime(2021,03,01)},\n    new {Name = \"HtmlTableHelper\",Link=\"https://github.com/mini-software/HtmlTableHelper\",Star=16, CreateTime=new DateTime(2020,02,01)},\n    new {Name = \"PocoClassGenerator\",Link=\"https://github.com/mini-software/PocoClassGenerator\",Star=16, CreateTime=new DateTime(2019,03,17)}\n};\nvar value = new\n{\n    User = \"ITWeiHan\",\n    Projects = projects,\n    TotalStar = projects.Sum(s => s.Star)\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "Oe/FPuAnxHhIdpLpWNZwnCCgJ4VKKv2U2ycJhTWmgF4=",
        "originContent": "var projects = new[]",
        "translatedContent": "var projects = new[]"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "yJeuUu/rSdeZ/WDFfObtkSwD5W8IQuhcp4a29reeklo=",
        "originContent": "    new {Name = \"MiniExcel\",Link=\"https://github.com/mini-software/MiniExcel\",Star=146, CreateTime=new DateTime(2021,03,01)},",
        "translatedContent": "    new {Name = \"MiniExcel\",Link=\"https://github.com/mini-software/MiniExcel\",Star=146, CreateTime=new DateTime(2021,03,01)},"
      },
      {
        "row": 5,
        "rowsha": "4nWT9G0KRB1m5VJqNq6uzYKQi87MEej3HexLx2SVgN4=",
        "originContent": "    new {Name = \"HtmlTableHelper\",Link=\"https://github.com/mini-software/HtmlTableHelper\",Star=16, CreateTime=new DateTime(2020,02,01)},",
        "translatedContent": "    new {Name = \"HtmlTableHelper\",Link=\"https://github.com/mini-software/HtmlTableHelper\",Star=16, CreateTime=new DateTime(2020,02,01)},"
      },
      {
        "row": 6,
        "rowsha": "ETyQ5ZmKqE+mmunJd1nWjDHDk6QmkadqNEkl/fTB1QI=",
        "originContent": "    new {Name = \"PocoClassGenerator\",Link=\"https://github.com/mini-software/PocoClassGenerator\",Star=16, CreateTime=new DateTime(2019,03,17)}",
        "translatedContent": "    new {Name = \"PocoClassGenerator\",Link=\"https://github.com/mini-software/PocoClassGenerator\",Star=16, CreateTime=new DateTime(2019,03,17)}"
      },
      {
        "row": 7,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 8,
        "rowsha": "ciisRb3n3ddiGoU3eXpIJr2nwrUBNVFyrlHMuVQ/KrY=",
        "originContent": "var value = new",
        "translatedContent": "var value = new"
      },
      {
        "row": 9,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 10,
        "rowsha": "bLak8U36/ubskiY8D98yZfeEu8nPJQnSwVhLmytHdA0=",
        "originContent": "    User = \"ITWeiHan\",",
        "translatedContent": "    User = \"ITWeiHan\","
      },
      {
        "row": 11,
        "rowsha": "INEr+cd40G7TRukqSi2aWYTWLc+HgdtoISfNm3x+w+Y=",
        "originContent": "    Projects = projects,",
        "translatedContent": "    Projects = projects,"
      },
      {
        "row": 12,
        "rowsha": "+KrOwL7QF7aa2RTKUa/TsiM/xpDKWNcoDPE/8tK6b98=",
        "originContent": "    TotalStar = projects.Sum(s => s.Star)",
        "translatedContent": "    TotalStar = projects.Sum(s => s.Star)"
      },
      {
        "row": 13,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 14,
        "rowsha": "rHsN+q7MSqdjztBySCdCQwrEH48bzVX4Wn5Gs4l14HM=",
        "originContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);",
        "translatedContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);"
      },
      {
        "row": 15,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 83,
    "Content": "\n#### 7. Grouped Data Fill\n",
    "ContentSha": "72n+jnR0cjNS4tbPngwFwBBh4XjIbOcMGt0HSE2qsTA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 7. Relleno de Datos Agrupados\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 7. Relleno de Datos Agrupados"
      },
      {
        "row": 2,
        "rowsha": "LQuRLENiTEA0xjFxVg8RLIDPSHJy+MMINy6oh7GsIMc=",
        "originContent": "#### 7. Grouped Data Fill",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 84,
    "Content": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"John\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nawait MiniExcel.SaveAsByTemplateAsync(path, templatePath, value);\n```",
    "ContentSha": "HjYvoWgTLWJP4WJuQriBQDtdvYLMpRP6+9zmwiMlBh4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"John\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nawait MiniExcel.SaveAsByTemplateAsync(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "Fvqmo73Q+sbCRsQ/G5bEtSkp9bf7NeKk3+Du8xy+ihI=",
        "originContent": "var value = new Dictionary<string, object>()",
        "translatedContent": "var value = new Dictionary<string, object>()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "/R4dBQ+QzKHhNDxNT78sjgQ9ZmBdXr7yyGHGz0OBzzk=",
        "originContent": "    [\"employees\"] = new[] {",
        "translatedContent": "    [\"employees\"] = new[] {"
      },
      {
        "row": 5,
        "rowsha": "1v4DKvYxeNSNppf6AoZ7W/4Cw2Dq+fvqobiIcHe5ehg=",
        "originContent": "        new {name=\"Jack\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Jack\",department=\"HR\"},"
      },
      {
        "row": 6,
        "rowsha": "1v4DKvYxeNSNppf6AoZ7W/4Cw2Dq+fvqobiIcHe5ehg=",
        "originContent": "        new {name=\"Jack\",department=\"HR\"},",
        "translatedContent": "        new {name=\"Jack\",department=\"HR\"},"
      },
      {
        "row": 7,
        "rowsha": "DEBZBcBGQlG3n309q6JrmhKYtRNr0sTWbDb5kQX1Daw=",
        "originContent": "        new {name=\"John\",department=\"HR\"},",
        "translatedContent": "        new {name=\"John\",department=\"HR\"},"
      },
      {
        "row": 8,
        "rowsha": "ztSe46zH4RLN37KdGo83e0Thxku5o/CsYokhT/lxC/o=",
        "originContent": "        new {name=\"John\",department=\"IT\"},",
        "translatedContent": "        new {name=\"John\",department=\"IT\"},"
      },
      {
        "row": 9,
        "rowsha": "P8jGg7pe5OCCsbn6Nd9pBfKYjLe+X1t+sjZX/K7HrU8=",
        "originContent": "        new {name=\"Neo\",department=\"IT\"},",
        "translatedContent": "        new {name=\"Neo\",department=\"IT\"},"
      },
      {
        "row": 10,
        "rowsha": "RgKonFjd8MSaGpR9OCO3mRXg4c+dBAn2wtjSx5W6/84=",
        "originContent": "        new {name=\"Loan\",department=\"IT\"}",
        "translatedContent": "        new {name=\"Loan\",department=\"IT\"}"
      },
      {
        "row": 11,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 12,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 13,
        "rowsha": "9+09/U5ux8+Reqa+RquCRnXY80ecm7gq6PAr6wiYfP4=",
        "originContent": "await MiniExcel.SaveAsByTemplateAsync(path, templatePath, value);",
        "translatedContent": "await MiniExcel.SaveAsByTemplateAsync(path, templatePath, value);"
      },
      {
        "row": 14,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 85,
    "Content": "##### 1. With `@group` tag and with `@header` tag\n\nBefore\n\n![before_with_header](https://user-images.githubusercontent.com/38832863/218646717-21b9d57a-2be2-4e9a-801b-ae212231d2b4.PNG)\n\nAfter\n\n![after_with_header](https://user-images.githubusercontent.com/38832863/218646721-58a7a340-7004-4bc2-af24-cffcb2c20737.PNG)\n\n##### 2. With @group tag and without @header tag\n\nBefore\n\n![before_without_header](https://user-images.githubusercontent.com/38832863/218646873-b12417fa-801b-4890-8e96-669ed3b43902.PNG)\n\nAfter\n\n![after_without_header](https://user-images.githubusercontent.com/38832863/218646872-622461ba-342e-49ee-834f-b91ad9c2dac3.PNG)\n\n##### 3. Without @group tag\n\nBefore\n\n![without_group](https://user-images.githubusercontent.com/38832863/218646975-f52a68eb-e031-43b5-abaa-03b67c052d1a.PNG)\n\nAfter\n\n![without_group_after](https://user-images.githubusercontent.com/38832863/218646974-4a3c0e07-7c66-4088-ad07-b4ad3695b7e1.PNG)\n\n#### 8. If/ElseIf/Else Statements inside cell\n\nRules:\n1. Supports DateTime, Double, Int with ==, !=, >, >=, <, <= operators.\n2. Supports String with ==, != operators.\n3. Each statement should be new line.\n4. Single space should be added before and after operators.\n5. There shouldn't be new line inside of statements.\n6. Cell should be in exact format as below.\n",
    "ContentSha": "1pMk7ho7b/YYs1NzXkkkPfulJ1U6H+oHrzMJauRBLog=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "##### 1. Con la etiqueta `@group` y con la etiqueta `@header`\n\nAntes\n\n![before_with_header](https://user-images.githubusercontent.com/38832863/218646717-21b9d57a-2be2-4e9a-801b-ae212231d2b4.PNG)\n\nDespués\n\n![after_with_header](https://user-images.githubusercontent.com/38832863/218646721-58a7a340-7004-4bc2-af24-cffcb2c20737.PNG)\n\n##### 2. Con la etiqueta @group y sin la etiqueta @header\n\nAntes\n\n![before_without_header](https://user-images.githubusercontent.com/38832863/218646873-b12417fa-801b-4890-8e96-669ed3b43902.PNG)\n\nDespués\n\n![after_without_header](https://user-images.githubusercontent.com/38832863/218646872-622461ba-342e-49ee-834f-b91ad9c2dac3.PNG)\n\n##### 3. Sin la etiqueta @group\n\nAntes\n\n![without_group](https://user-images.githubusercontent.com/38832863/218646975-f52a68eb-e031-43b5-abaa-03b67c052d1a.PNG)\n\nDespués\n\n![without_group_after](https://user-images.githubusercontent.com/38832863/218646974-4a3c0e07-7c66-4088-ad07-b4ad3695b7e1.PNG)\n\n#### 8. Instrucciones If/ElseIf/Else dentro de una celda\n\nReglas:\n1. Soporta DateTime, Double, Int con los operadores ==, !=, >, >=, <, <=.\n2. Soporta String con los operadores ==, !=.\n3. Cada instrucción debe ir en una nueva línea.\n4. Se debe añadir un solo espacio antes y después de los operadores.\n5. No debe haber una nueva línea dentro de las instrucciones.\n6. La celda debe tener el formato exacto que se muestra a continuación.\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "LHNBj/NNYK+XRRduzLMWcDX9fxsxom1hqvLnvBnydz8=",
        "originContent": "##### 1. With `@group` tag and with `@header` tag",
        "translatedContent": "##### 1. Con la etiqueta `@group` y con la etiqueta `@header`"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "m7clAFBVQSx1qOjR+1oHgFlRdKyLvlok92hke9Tk3r4=",
        "originContent": "Before",
        "translatedContent": "Antes"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "oEmUk/l8apTL1VL6EOmmVruNSE4kSF3r7JETO8Owsuc=",
        "originContent": "![before_with_header](https://user-images.githubusercontent.com/38832863/218646717-21b9d57a-2be2-4e9a-801b-ae212231d2b4.PNG)",
        "translatedContent": "![before_with_header](https://user-images.githubusercontent.com/38832863/218646717-21b9d57a-2be2-4e9a-801b-ae212231d2b4.PNG)"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "e2j+VRCFHaPYkQDFadMmXgRNhlbZV1DDdregly3qczA=",
        "originContent": "After",
        "translatedContent": "Después"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "helgjtRc6tm5CdFgCgjK9EH8PP119pacceKAkR9GvKs=",
        "originContent": "![after_with_header](https://user-images.githubusercontent.com/38832863/218646721-58a7a340-7004-4bc2-af24-cffcb2c20737.PNG)",
        "translatedContent": "![after_with_header](https://user-images.githubusercontent.com/38832863/218646721-58a7a340-7004-4bc2-af24-cffcb2c20737.PNG)"
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "FTrmTVvQj0rzMShLGP1OhTaNL4dNSib53DS3HF9Fju0=",
        "originContent": "##### 2. With @group tag and without @header tag",
        "translatedContent": "##### 2. Con la etiqueta @group y sin la etiqueta @header"
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "m7clAFBVQSx1qOjR+1oHgFlRdKyLvlok92hke9Tk3r4=",
        "originContent": "Before",
        "translatedContent": "Antes"
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "Ip2jexyxGGFSiKYTqthLFQFT8eVc0XB5Fy/sXLs45RQ=",
        "originContent": "![before_without_header](https://user-images.githubusercontent.com/38832863/218646873-b12417fa-801b-4890-8e96-669ed3b43902.PNG)",
        "translatedContent": "![before_without_header](https://user-images.githubusercontent.com/38832863/218646873-b12417fa-801b-4890-8e96-669ed3b43902.PNG)"
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "e2j+VRCFHaPYkQDFadMmXgRNhlbZV1DDdregly3qczA=",
        "originContent": "After",
        "translatedContent": "Después"
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "ADmGJA5eRJ8GkT87N5VgCwuq7r9EFfzDga2u/zbu/mY=",
        "originContent": "![after_without_header](https://user-images.githubusercontent.com/38832863/218646872-622461ba-342e-49ee-834f-b91ad9c2dac3.PNG)",
        "translatedContent": "![after_without_header](https://user-images.githubusercontent.com/38832863/218646872-622461ba-342e-49ee-834f-b91ad9c2dac3.PNG)"
      },
      {
        "row": 20,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "YYbcXosBiVqGhALz69Jw1tG/7NE7n60VPoUsPnBUGRA=",
        "originContent": "##### 3. Without @group tag",
        "translatedContent": "##### 3. Sin la etiqueta @group"
      },
      {
        "row": 22,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 23,
        "rowsha": "m7clAFBVQSx1qOjR+1oHgFlRdKyLvlok92hke9Tk3r4=",
        "originContent": "Before",
        "translatedContent": "Antes"
      },
      {
        "row": 24,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "VbVnKcxiUPDy/Rabw6GO+iPTa9GgLJM83UApxVvjLgg=",
        "originContent": "![without_group](https://user-images.githubusercontent.com/38832863/218646975-f52a68eb-e031-43b5-abaa-03b67c052d1a.PNG)",
        "translatedContent": "![without_group](https://user-images.githubusercontent.com/38832863/218646975-f52a68eb-e031-43b5-abaa-03b67c052d1a.PNG)"
      },
      {
        "row": 26,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 27,
        "rowsha": "e2j+VRCFHaPYkQDFadMmXgRNhlbZV1DDdregly3qczA=",
        "originContent": "After",
        "translatedContent": "Después"
      },
      {
        "row": 28,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 29,
        "rowsha": "Rn2DLZlSYMX5OznOcbo75nGWh4aHfhwRg/6pIJpNOgs=",
        "originContent": "![without_group_after](https://user-images.githubusercontent.com/38832863/218646974-4a3c0e07-7c66-4088-ad07-b4ad3695b7e1.PNG)",
        "translatedContent": "![without_group_after](https://user-images.githubusercontent.com/38832863/218646974-4a3c0e07-7c66-4088-ad07-b4ad3695b7e1.PNG)"
      },
      {
        "row": 30,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 31,
        "rowsha": "yTUaTT7lLyhVAei1OGNie8EcrEHtEtsCQkJXSc/CcHU=",
        "originContent": "#### 8. If/ElseIf/Else Statements inside cell",
        "translatedContent": "#### 8. Instrucciones If/ElseIf/Else dentro de una celda"
      },
      {
        "row": 32,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 33,
        "rowsha": "CeCXYtLR6AnVKqLVVW5cpyeWa4aytvzqvq/spQrFRSI=",
        "originContent": "Rules:",
        "translatedContent": "Reglas:"
      },
      {
        "row": 34,
        "rowsha": "izv6EJnJ6OiEoGFC5+zd4koCgaovyEG07PrdkLfj0UM=",
        "originContent": "1. Supports DateTime, Double, Int with ==, !=, >, >=, <, <= operators.",
        "translatedContent": "1. Soporta DateTime, Double, Int con los operadores ==, !=, >, >=, <, <=."
      },
      {
        "row": 35,
        "rowsha": "opR+7ZW0J+fByleqrSchmeBei3Uk8VK9xlyCnNeMibI=",
        "originContent": "2. Supports String with ==, != operators.",
        "translatedContent": "2. Soporta String con los operadores ==, !=."
      },
      {
        "row": 36,
        "rowsha": "36kHqpP80iEXRCPZud+9xypLQg8x3IgX1R/sZkFj9Vg=",
        "originContent": "3. Each statement should be new line.",
        "translatedContent": "3. Cada instrucción debe ir en una nueva línea."
      },
      {
        "row": 37,
        "rowsha": "fgAtKyjyl9sYFTiHTApqvhM8kCf04B6GM4o5jebovQk=",
        "originContent": "4. Single space should be added before and after operators.",
        "translatedContent": "4. Se debe añadir un solo espacio antes y después de los operadores."
      },
      {
        "row": 38,
        "rowsha": "RKQUxgL4C67pmeuKmpC7eNB8uiKuAe3OGE+HiZMjqIo=",
        "originContent": "5. There shouldn't be new line inside of statements.",
        "translatedContent": "5. No debe haber una nueva línea dentro de las instrucciones."
      },
      {
        "row": 39,
        "rowsha": "woMLB9qxKzyXzmzsttwuFptOyhQp4FSNxnErrV8wtBY=",
        "originContent": "6. Cell should be in exact format as below.",
        "translatedContent": "6. La celda debe tener el formato exacto que se muestra a continuación."
      },
      {
        "row": 40,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 86,
    "Content": "```csharp\n@if(name == Jack)\n{{employees.name}}\n@elseif(name == Neo)\nTest {{employees.name}}\n@else\n{{employees.department}}\n@endif\n```",
    "ContentSha": "6oaKHpzwLd7+REbPVnG4d2IxqH3o3cQ136I5KUwPYhw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n@if(name == Jack)\n{{employees.name}}\n@elseif(name == Neo)\nTest {{employees.name}}\n@else\n{{employees.department}}\n@endif\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "9Cp7vcjNDs1Uzhaf8N+O+0w9v4CQr+5R3VsTS6foXiw=",
        "originContent": "@if(name == Jack)",
        "translatedContent": "@if(name == Jack)"
      },
      {
        "row": 3,
        "rowsha": "BEjBQBYkrB0gNeOuVt4RtFC7eNRtb0AwTRuH2T6vIms=",
        "originContent": "{{employees.name}}",
        "translatedContent": "{{employees.name}}"
      },
      {
        "row": 4,
        "rowsha": "RbCnsvxPegiVD8CmTfFHdP0J6OkZKGE2juYRl/U04+w=",
        "originContent": "@elseif(name == Neo)",
        "translatedContent": "@elseif(name == Neo)"
      },
      {
        "row": 5,
        "rowsha": "WbhcOJh5r1+/qjTGd+yVNGxfCfc1YMnN1zMXDAS5OKI=",
        "originContent": "Test {{employees.name}}",
        "translatedContent": "Test {{employees.name}}"
      },
      {
        "row": 6,
        "rowsha": "rHvrhb2jnEpWJAEAPYjgUMG3X8ETrEh7O4nFea1m+94=",
        "originContent": "@else",
        "translatedContent": "@else"
      },
      {
        "row": 7,
        "rowsha": "LavkobnkF5XnFlt+gkEIepftRANND07PMgBWPtk9y20=",
        "originContent": "{{employees.department}}",
        "translatedContent": "{{employees.department}}"
      },
      {
        "row": 8,
        "rowsha": "pGCiktXXsGPJAoJUbh+exaUJvAp558Zxg5gOer8WQIU=",
        "originContent": "@endif",
        "translatedContent": "@endif"
      },
      {
        "row": 9,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 87,
    "Content": "\nBefore\n\n![if_before](https://user-images.githubusercontent.com/38832863/235360606-ca654769-ff55-4f5b-98d2-d2ec0edb8173.PNG)\n\nAfter\n\n![if_after](https://user-images.githubusercontent.com/38832863/235360609-869bb960-d63d-45ae-8d64-9e8b0d0ab658.PNG)\n\n#### 9. DataTable as parameter\n",
    "ContentSha": "ZhDyx1IJjckYIVJ5nJC7KSDMHz+usW/6bElB3xNnbPE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Antes\n\n![if_before](https://user-images.githubusercontent.com/38832863/235360606-ca654769-ff55-4f5b-98d2-d2ec0edb8173.PNG)\n\nDespués\n\n![if_after](https://user-images.githubusercontent.com/38832863/235360609-869bb960-d63d-45ae-8d64-9e8b0d0ab658.PNG)\n\n#### 9. DataTable como parámetro\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Antes"
      },
      {
        "row": 2,
        "rowsha": "m7clAFBVQSx1qOjR+1oHgFlRdKyLvlok92hke9Tk3r4=",
        "originContent": "Before",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![if_before](https://user-images.githubusercontent.com/38832863/235360606-ca654769-ff55-4f5b-98d2-d2ec0edb8173.PNG)"
      },
      {
        "row": 4,
        "rowsha": "EH7S/ODw6KjGmC/57dVOcgDZJPn/whiToCttgnTL3CU=",
        "originContent": "![if_before](https://user-images.githubusercontent.com/38832863/235360606-ca654769-ff55-4f5b-98d2-d2ec0edb8173.PNG)",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Después"
      },
      {
        "row": 6,
        "rowsha": "e2j+VRCFHaPYkQDFadMmXgRNhlbZV1DDdregly3qczA=",
        "originContent": "After",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![if_after](https://user-images.githubusercontent.com/38832863/235360609-869bb960-d63d-45ae-8d64-9e8b0d0ab658.PNG)"
      },
      {
        "row": 8,
        "rowsha": "BOSKLHazhlWJeWe8z0CTAgeybWyLgxe6ya+LincR9eo=",
        "originContent": "![if_after](https://user-images.githubusercontent.com/38832863/235360609-869bb960-d63d-45ae-8d64-9e8b0d0ab658.PNG)",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 9. DataTable como parámetro"
      },
      {
        "row": 10,
        "rowsha": "MCSpvA3d8uebgNulv+MZrwAWF/ap04A/JYqpkjdJFyw=",
        "originContent": "#### 9. DataTable as parameter",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 88,
    "Content": "```csharp\nvar managers = new DataTable();\n{\n    managers.Columns.Add(\"name\");\n    managers.Columns.Add(\"department\");\n    managers.Rows.Add(\"Jack\", \"HR\");\n    managers.Rows.Add(\"Loan\", \"IT\");\n}\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = managers,\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "WelcLS8bD6QBSfmzhilcOnvJh2FCQS5ElA+thMME6X8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar managers = new DataTable();\n{\n    managers.Columns.Add(\"name\");\n    managers.Columns.Add(\"department\");\n    managers.Rows.Add(\"Jack\", \"HR\");\n    managers.Rows.Add(\"Loan\", \"IT\");\n}\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = managers,\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "hwScymMgd7+0TZchhbJKE8c7TU7Gqvd68GQ2PczpskY=",
        "originContent": "var managers = new DataTable();",
        "translatedContent": "var managers = new DataTable();"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "Oi325C1mQq0ZD8eH6q8VJgx9xKOANmW+piLWg5204qk=",
        "originContent": "    managers.Columns.Add(\"name\");",
        "translatedContent": "    managers.Columns.Add(\"name\");"
      },
      {
        "row": 5,
        "rowsha": "3HU0pEZ2eLewmUpuL6eD688SHsJR8/OwnGYqvz8G6Mw=",
        "originContent": "    managers.Columns.Add(\"department\");",
        "translatedContent": "    managers.Columns.Add(\"department\");"
      },
      {
        "row": 6,
        "rowsha": "pzuDmfz3GOwFpcKP79tGbGKkPeRDsLS2GE4i3fQFO20=",
        "originContent": "    managers.Rows.Add(\"Jack\", \"HR\");",
        "translatedContent": "    managers.Rows.Add(\"Jack\", \"HR\");"
      },
      {
        "row": 7,
        "rowsha": "Brey0OIfX2LVP05+rJIbVmZkEDX6W8SloFKir5UO6z4=",
        "originContent": "    managers.Rows.Add(\"Loan\", \"IT\");",
        "translatedContent": "    managers.Rows.Add(\"Loan\", \"IT\");"
      },
      {
        "row": 8,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 9,
        "rowsha": "Fvqmo73Q+sbCRsQ/G5bEtSkp9bf7NeKk3+Du8xy+ihI=",
        "originContent": "var value = new Dictionary<string, object>()",
        "translatedContent": "var value = new Dictionary<string, object>()"
      },
      {
        "row": 10,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 11,
        "rowsha": "ABaBfN/PDoyFvYFb/4A9jyBpSAvsnrO2Q9OvfOqXcb8=",
        "originContent": "    [\"title\"] = \"FooCompany\",",
        "translatedContent": "    [\"title\"] = \"FooCompany\","
      },
      {
        "row": 12,
        "rowsha": "OQ1Wz0J6lfHFQqhjVBwJAh4I6l+1ajerHHWvWCjcvlw=",
        "originContent": "    [\"managers\"] = managers,",
        "translatedContent": "    [\"managers\"] = managers,"
      },
      {
        "row": 13,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 14,
        "rowsha": "rHsN+q7MSqdjztBySCdCQwrEH48bzVX4Wn5Gs4l14HM=",
        "originContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);",
        "translatedContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value);"
      },
      {
        "row": 15,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 89,
    "Content": "#### 10. Formulas\n\n##### 1. Example\nPrefix your formula with `$` and use `$enumrowstart` and `$enumrowend` to mark references to the enumerable start and end rows:\n\n![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/template-formulas-1.png)\n\nWhen the template is rendered, the `$` prefix will be removed and `$enumrowstart` and `$enumrowend` will be replaced with the start and end row numbers of the enumerable:\n\n![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/template-formulas-2.png)\n\n##### 2. Other Example Formulas:\n\n|              |                                                                                           |\n|--------------|-------------------------------------------------------------------------------------------|\n| Sum          | `$=SUM(C{{$enumrowstart}}:C{{$enumrowend}})`                                              |\n| Alt. Average | `$=SUM(C{{$enumrowstart}}:C{{$enumrowend}}) / COUNT(C{{$enumrowstart}}:C{{$enumrowend}})` |\n| Range        | `$=MAX(C{{$enumrowstart}}:C{{$enumrowend}}) - MIN(C{{$enumrowstart}}:C{{$enumrowend}})`   |\n\n\n#### 11. Other\n\n##### 1. Checking template parameter key\n\nSince V1.24.0 , default ignore template missing parameter key and replace it with empty string, `IgnoreTemplateParameterMissing` can control throwing exception or not.\n",
    "ContentSha": "12o7rOMkfXQZ5kN2Dap2sJDuDKQVeJxBLk26wxAoGwY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 10. Fórmulas\n\n##### 1. Ejemplo\nAntepone tu fórmula con `$` y usa `$enumrowstart` y `$enumrowend` para marcar las referencias al inicio y fin de las filas enumerables:\n\n![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/template-formulas-1.png)\n\nCuando se renderiza la plantilla, el prefijo `$` se eliminará y `$enumrowstart` y `$enumrowend` serán reemplazados por los números de fila inicial y final de la enumerable:\n\n![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/template-formulas-2.png)\n\n##### 2. Otras Fórmulas de Ejemplo:\n\n|              |                                                                                           |\n|--------------|-------------------------------------------------------------------------------------------|\n| Suma         | `$=SUM(C{{$enumrowstart}}:C{{$enumrowend}})`                                              |\n| Prom. Alt.   | `$=SUM(C{{$enumrowstart}}:C{{$enumrowend}}) / COUNT(C{{$enumrowstart}}:C{{$enumrowend}})` |\n| Rango        | `$=MAX(C{{$enumrowstart}}:C{{$enumrowend}}) - MIN(C{{$enumrowstart}}:C{{$enumrowend}})`   |\n\n\n#### 11. Otros\n\n##### 1. Comprobación de la clave del parámetro de plantilla\n\nDesde la V1.24.0, por defecto se ignora la clave de parámetro de plantilla faltante y se reemplaza por una cadena vacía, `IgnoreTemplateParameterMissing` puede controlar si se lanza o no una excepción.\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "touWEOGYXaGS9dePEYEITHaT/wPHdmHtILnVt13PfpA=",
        "originContent": "#### 10. Formulas",
        "translatedContent": "#### 10. Fórmulas"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "bBKX8RrlfOGDB48/reWI9aL+fiMmf6shv1Zwqzd1Cus=",
        "originContent": "##### 1. Example",
        "translatedContent": "##### 1. Ejemplo"
      },
      {
        "row": 4,
        "rowsha": "wHpKLp1bPJTtn/kphe1yGjFSRUw0IuS0wFu2uGk5QCk=",
        "originContent": "Prefix your formula with `$` and use `$enumrowstart` and `$enumrowend` to mark references to the enumerable start and end rows:",
        "translatedContent": "Antepone tu fórmula con `$` y usa `$enumrowstart` y `$enumrowend` para marcar las referencias al inicio y fin de las filas enumerables:"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "pKC1ata80xEFmTw3wUWv49uqO6mlQakjdlmCroWVa3o=",
        "originContent": "![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/template-formulas-1.png)",
        "translatedContent": "![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/template-formulas-1.png)"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "wgou53sw2WmSIeAxy42DmhMw7hP4WaHgs2wci4hCfWc=",
        "originContent": "When the template is rendered, the `$` prefix will be removed and `$enumrowstart` and `$enumrowend` will be replaced with the start and end row numbers of the enumerable:",
        "translatedContent": "Cuando se renderiza la plantilla, el prefijo `$` se eliminará y `$enumrowstart` y `$enumrowend` serán reemplazados por los números de fila inicial y final de la enumerable:"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "ZZDdAIr8xJuNmfeEBHB8gtPSvyK4k6ga7X3I1YrvMzM=",
        "originContent": "![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/template-formulas-2.png)",
        "translatedContent": "![image](https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/template-formulas-2.png)"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "n5zzqsGD9Urg9OIQokI1UlLJAJvMwt4p87xmC161l9w=",
        "originContent": "##### 2. Other Example Formulas:",
        "translatedContent": "##### 2. Otras Fórmulas de Ejemplo:"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "BFjMVqfVMEO9as4qiDmJqBC+Zwk79QSVwpyFo/KwvQ4=",
        "originContent": "|              |                                                                                           |",
        "translatedContent": "|              |                                                                                           |"
      },
      {
        "row": 15,
        "rowsha": "UeDZA6iGnq66zBs8vnefmmECs4nkMljeaqJ5Zxp0McI=",
        "originContent": "|--------------|-------------------------------------------------------------------------------------------|",
        "translatedContent": "|--------------|-------------------------------------------------------------------------------------------|"
      },
      {
        "row": 16,
        "rowsha": "uSouDVBTvRx5Rv7a+IgenBAr7r99nW2qG4SwDrihmxI=",
        "originContent": "| Sum          | `$=SUM(C{{$enumrowstart}}:C{{$enumrowend}})`                                              |",
        "translatedContent": "| Suma         | `$=SUM(C{{$enumrowstart}}:C{{$enumrowend}})`                                              |"
      },
      {
        "row": 17,
        "rowsha": "FSOBpyennBuEVFOoVNGtVLU+Cnq6oaNefWwQT2Q9L9o=",
        "originContent": "| Alt. Average | `$=SUM(C{{$enumrowstart}}:C{{$enumrowend}}) / COUNT(C{{$enumrowstart}}:C{{$enumrowend}})` |",
        "translatedContent": "| Prom. Alt.   | `$=SUM(C{{$enumrowstart}}:C{{$enumrowend}}) / COUNT(C{{$enumrowstart}}:C{{$enumrowend}})` |"
      },
      {
        "row": 18,
        "rowsha": "t4jtvN3gDdXNZw8j8eMV7+4zlJkEANvUjFCx7Emgdhc=",
        "originContent": "| Range        | `$=MAX(C{{$enumrowstart}}:C{{$enumrowend}}) - MIN(C{{$enumrowstart}}:C{{$enumrowend}})`   |",
        "translatedContent": "| Rango        | `$=MAX(C{{$enumrowstart}}:C{{$enumrowend}}) - MIN(C{{$enumrowstart}}:C{{$enumrowend}})`   |"
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 20,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "r5pl3WnzopmTZsUzFgTFKU62SFXyG89u6tTiaS6GQ1s=",
        "originContent": "#### 11. Other",
        "translatedContent": "#### 11. Otros"
      },
      {
        "row": 22,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 23,
        "rowsha": "qXCJyrAJ/xj+YiSvJw8ofk4Ev+SL9SRvzktMw5CSEhY=",
        "originContent": "##### 1. Checking template parameter key",
        "translatedContent": "##### 1. Comprobación de la clave del parámetro de plantilla"
      },
      {
        "row": 24,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "5RjH5T6oMOtzNgJWbVnqsFEQuko8Ly6iK4+WGvZ2hVI=",
        "originContent": "Since V1.24.0 , default ignore template missing parameter key and replace it with empty string, `IgnoreTemplateParameterMissing` can control throwing exception or not.",
        "translatedContent": "Desde la V1.24.0, por defecto se ignora la clave de parámetro de plantilla faltante y se reemplaza por una cadena vacía, `IgnoreTemplateParameterMissing` puede controlar si se lanza o no una excepción."
      },
      {
        "row": 26,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 90,
    "Content": "```csharp\nvar config = new OpenXmlConfiguration()\n{\n    IgnoreTemplateParameterMissing = false,\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value, config)\n```",
    "ContentSha": "ozBaitff7XPgcjIKQSS4oC+kdGoOpM6i4G03CbMYD5k=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar config = new OpenXmlConfiguration()\n{\n    IgnoreTemplateParameterMissing = false,\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value, config)\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "3pcSaiOTalau5C2YS0wQEiBstpkEJW/Bu2UZvhEhqTM=",
        "originContent": "var config = new OpenXmlConfiguration()",
        "translatedContent": "var config = new OpenXmlConfiguration()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "DCn8v/6a0h5LQ7FyRNJpGCoSWqJtfq4bSAOG32ZmheQ=",
        "originContent": "    IgnoreTemplateParameterMissing = false,",
        "translatedContent": "    IgnoreTemplateParameterMissing = false,"
      },
      {
        "row": 5,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 6,
        "rowsha": "F5UApgj8NdAZwgaHDuODGAPIzBI/Tjs+vbYHV/jHbWw=",
        "originContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value, config)",
        "translatedContent": "MiniExcel.SaveAsByTemplate(path, templatePath, value, config)"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 91,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/157464332-e316f829-54aa-4c84-a5aa-9aef337b668d.png)\n\n\n\n### Excel Column Name/Index/Ignore Attribute <a name=\"getstart4\"></a>\n\n\n\n#### 1. Specify the column name, column index, column ignore\n\nExcel Example\n\n![image](https://user-images.githubusercontent.com/12729184/114230869-3e163700-99ac-11eb-9a90-2039d4b4b313.png)\n\nCode\n",
    "ContentSha": "V7uPiJfp4Aa80dZDI8Cy7u7qwoTjIZgj8MgsiXvFiLU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/157464332-e316f829-54aa-4c84-a5aa-9aef337b668d.png)\n\n\n\n### Nombre de columna de Excel/Índice/Omitir atributo <a name=\"getstart4\"></a>\n\n\n\n#### 1. Especificar el nombre de la columna, el índice de columna, omitir columna\n\nEjemplo de Excel\n\n![image](https://user-images.githubusercontent.com/12729184/114230869-3e163700-99ac-11eb-9a90-2039d4b4b313.png)\n\nCódigo\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/157464332-e316f829-54aa-4c84-a5aa-9aef337b668d.png)"
      },
      {
        "row": 2,
        "rowsha": "hyXQL9i74Hscq9jCvdG6YGtFczbQeid1HURgbfUPp9s=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/157464332-e316f829-54aa-4c84-a5aa-9aef337b668d.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Nombre de columna de Excel/Índice/Omitir atributo <a name=\"getstart4\"></a>"
      },
      {
        "row": 6,
        "rowsha": "KwoLlasINXQARkubvwu5TTh0FuPqOokMZ6yvhp/nwFs=",
        "originContent": "### Excel Column Name/Index/Ignore Attribute <a name=\"getstart4\"></a>",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 1. Especificar el nombre de la columna, el índice de columna, omitir columna"
      },
      {
        "row": 10,
        "rowsha": "MTrjGYM4UkgnqDuh+k597Vg5tz6DogPKZDZopgAFles=",
        "originContent": "#### 1. Specify the column name, column index, column ignore",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Ejemplo de Excel"
      },
      {
        "row": 12,
        "rowsha": "AlmR+ZwJGsQq8tT935CpbPw9a2AjHKmbL1rmvWC9xjg=",
        "originContent": "Excel Example",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/114230869-3e163700-99ac-11eb-9a90-2039d4b4b313.png)"
      },
      {
        "row": 14,
        "rowsha": "83c+416g5h8yn2Ut0C+64fbWBfRQHQ9eBvGzcjquctg=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/114230869-3e163700-99ac-11eb-9a90-2039d4b4b313.png)",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Código"
      },
      {
        "row": 16,
        "rowsha": "NA9GMDPg/V3eq7ki301PG1dHSU0PXtmJTxO24TyoMfU=",
        "originContent": "Code",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 92,
    "Content": "```csharp\npublic class ExcelAttributeDemo\n{\n    [ExcelColumnName(\"Column1\")]\n    public string Test1 { get; set; }\n    [ExcelColumnName(\"Column2\")]\n    public string Test2 { get; set; }\n    [ExcelIgnore]\n    public string Test3 { get; set; }\n    [ExcelColumnIndex(\"I\")] // system will convert \"I\" to 8 index\n    public string Test4 { get; set; }\n    public string Test5 { get; } //wihout set will ignore\n    public string Test6 { get; private set; } //un-public set will ignore\n    [ExcelColumnIndex(3)] // start with 0\n    public string Test7 { get; set; }\n}\n\nvar rows = MiniExcel.Query<ExcelAttributeDemo>(path).ToList();\nAssert.Equal(\"Column1\", rows[0].Test1);\nAssert.Equal(\"Column2\", rows[0].Test2);\nAssert.Null(rows[0].Test3);\nAssert.Equal(\"Test7\", rows[0].Test4);\nAssert.Null(rows[0].Test5);\nAssert.Null(rows[0].Test6);\nAssert.Equal(\"Test4\", rows[0].Test7);\n```",
    "ContentSha": "PnmSkf1ZdPmy237uDYVTYVijtilX7TwqwN6Ku1i5xS8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic class ExcelAttributeDemo\n{\n    [ExcelColumnName(\"Column1\")]\n    public string Test1 { get; set; }\n    [ExcelColumnName(\"Column2\")]\n    public string Test2 { get; set; }\n    [ExcelIgnore]\n    public string Test3 { get; set; }\n    [ExcelColumnIndex(\"I\")] // system will convert \"I\" to 8 index\n    public string Test4 { get; set; }\n    public string Test5 { get; } //wihout set will ignore\n    public string Test6 { get; private set; } //un-public set will ignore\n    [ExcelColumnIndex(3)] // start with 0\n    public string Test7 { get; set; }\n}\n\nvar rows = MiniExcel.Query<ExcelAttributeDemo>(path).ToList();\nAssert.Equal(\"Column1\", rows[0].Test1);\nAssert.Equal(\"Column2\", rows[0].Test2);\nAssert.Null(rows[0].Test3);\nAssert.Equal(\"Test7\", rows[0].Test4);\nAssert.Null(rows[0].Test5);\nAssert.Null(rows[0].Test6);\nAssert.Equal(\"Test4\", rows[0].Test7);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "H1cFau93HT0D8bejXZ/Ye2TDQkkiu0EAmtz9i05Q5JM=",
        "originContent": "public class ExcelAttributeDemo",
        "translatedContent": "public class ExcelAttributeDemo"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "olU4Z1Hp/IWJUQoYFY2TQ0x8uWt2GY9dlewLhnSPugc=",
        "originContent": "    [ExcelColumnName(\"Column1\")]",
        "translatedContent": "    [ExcelColumnName(\"Column1\")]"
      },
      {
        "row": 5,
        "rowsha": "ow1LQtUEiBsfnCbnq8S4f/+4vyJlG2C3OpJLtDe4oos=",
        "originContent": "    public string Test1 { get; set; }",
        "translatedContent": "    public string Test1 { get; set; }"
      },
      {
        "row": 6,
        "rowsha": "JxPkzMcoj+u/R5jN4vGsw0HaUbkgihlrQNOklMIAWaE=",
        "originContent": "    [ExcelColumnName(\"Column2\")]",
        "translatedContent": "    [ExcelColumnName(\"Column2\")]"
      },
      {
        "row": 7,
        "rowsha": "jpcSPO+jkNrXo2bn5W/9tL4/vIaaXLX4oB6etRV8Swo=",
        "originContent": "    public string Test2 { get; set; }",
        "translatedContent": "    public string Test2 { get; set; }"
      },
      {
        "row": 8,
        "rowsha": "wq4nFQSoVYjITSZo0hTkP/I6eBILfG89zbiG4CFlESU=",
        "originContent": "    [ExcelIgnore]",
        "translatedContent": "    [ExcelIgnore]"
      },
      {
        "row": 9,
        "rowsha": "EH3PJcPsol52zJzVv/3sTYiv2ZfKJhsU2dWS6s6W8hw=",
        "originContent": "    public string Test3 { get; set; }",
        "translatedContent": "    public string Test3 { get; set; }"
      },
      {
        "row": 10,
        "rowsha": "RjZIes+rqHLTCHb88lS1JDiYrmh2+fZj0HFcsncUHrM=",
        "originContent": "    [ExcelColumnIndex(\"I\")] // system will convert \"I\" to 8 index",
        "translatedContent": "    [ExcelColumnIndex(\"I\")] // system will convert \"I\" to 8 index"
      },
      {
        "row": 11,
        "rowsha": "Hf6SfHc4SeNyUFYhlJF9PAPI2GeAJWbZyUGLxUzSDpA=",
        "originContent": "    public string Test4 { get; set; }",
        "translatedContent": "    public string Test4 { get; set; }"
      },
      {
        "row": 12,
        "rowsha": "bxxWWhV1G1Pt0xNOeO5SoGAwiRZbAJq/JeDlIILl9y4=",
        "originContent": "    public string Test5 { get; } //wihout set will ignore",
        "translatedContent": "    public string Test5 { get; } //wihout set will ignore"
      },
      {
        "row": 13,
        "rowsha": "jWukY3W4fe4oVSFVDtLNjPrB3vNlRfemfMlnmg26A1g=",
        "originContent": "    public string Test6 { get; private set; } //un-public set will ignore",
        "translatedContent": "    public string Test6 { get; private set; } //un-public set will ignore"
      },
      {
        "row": 14,
        "rowsha": "oLDVg2lrEW76zerd7GByfvvv3zD8onvkiBETvC2KFvo=",
        "originContent": "    [ExcelColumnIndex(3)] // start with 0",
        "translatedContent": "    [ExcelColumnIndex(3)] // start with 0"
      },
      {
        "row": 15,
        "rowsha": "KFVdCRKLXkHRusFOsEHTeQYucrM0Q7u8Mlz174NTguk=",
        "originContent": "    public string Test7 { get; set; }",
        "translatedContent": "    public string Test7 { get; set; }"
      },
      {
        "row": 16,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "3rOTofWujCSagl/moSUvIIeI0zjTOGFep6xmqkb1CBQ=",
        "originContent": "var rows = MiniExcel.Query<ExcelAttributeDemo>(path).ToList();",
        "translatedContent": "var rows = MiniExcel.Query<ExcelAttributeDemo>(path).ToList();"
      },
      {
        "row": 19,
        "rowsha": "H9QoMGNppTd9ztHA3g8RJJbuLiojI9hcmRNMx6gaeg8=",
        "originContent": "Assert.Equal(\"Column1\", rows[0].Test1);",
        "translatedContent": "Assert.Equal(\"Column1\", rows[0].Test1);"
      },
      {
        "row": 20,
        "rowsha": "fj5bXkI/47qGmquyF4B3C13z+MnznNB/eG2APBIycLI=",
        "originContent": "Assert.Equal(\"Column2\", rows[0].Test2);",
        "translatedContent": "Assert.Equal(\"Column2\", rows[0].Test2);"
      },
      {
        "row": 21,
        "rowsha": "sTQDb0cr0ElwVLoW9GqN5Mx7k6zqRvj8/uw4p/8ZN/c=",
        "originContent": "Assert.Null(rows[0].Test3);",
        "translatedContent": "Assert.Null(rows[0].Test3);"
      },
      {
        "row": 22,
        "rowsha": "Jh1VFjAqyp6VJpZMOTCGhaPITySC0DVGnuFRwPh9mJQ=",
        "originContent": "Assert.Equal(\"Test7\", rows[0].Test4);",
        "translatedContent": "Assert.Equal(\"Test7\", rows[0].Test4);"
      },
      {
        "row": 23,
        "rowsha": "Cli5yERcAV4bfSqn1mKoavqMplMrm1nFXxYX+BzM+D4=",
        "originContent": "Assert.Null(rows[0].Test5);",
        "translatedContent": "Assert.Null(rows[0].Test5);"
      },
      {
        "row": 24,
        "rowsha": "sSkFos3ocXuVmprXDERcclm9TUN2a6YSABzZFoU0Ri8=",
        "originContent": "Assert.Null(rows[0].Test6);",
        "translatedContent": "Assert.Null(rows[0].Test6);"
      },
      {
        "row": 25,
        "rowsha": "DxhJyLeQQhk1frCcXVH2pGZ71Uk+LrYTFczo10+maBk=",
        "originContent": "Assert.Equal(\"Test4\", rows[0].Test7);",
        "translatedContent": "Assert.Equal(\"Test4\", rows[0].Test7);"
      },
      {
        "row": 26,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 93,
    "Content": "\n\n\n\n\n#### 2. Custom Format (ExcelFormatAttribute)\n\nSince V0.21.0 support class which contains `ToString(string content)` method format\n\nClass\n",
    "ContentSha": "YjTK2G57TPJQaVon8OkhbmLEgQOG2nfefMfoCV1GQFM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n\n\n\n\n#### 2. Formato personalizado (ExcelFormatAttribute)\n\nDesde la versión V0.21.0 se admite la clase que contiene el formato del método `ToString(string content)`\n\nClase\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "XHTEBGbwpafgUYCbfiWjXr0LWPlpKXeEE6CWH05Ttl4=",
        "originContent": "#### 2. Custom Format (ExcelFormatAttribute)",
        "translatedContent": "#### 2. Formato personalizado (ExcelFormatAttribute)"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "HoEC3W7ZTO8RiMBz7cbtDwuCYsNzEaEdMFZUcciiH5s=",
        "originContent": "Since V0.21.0 support class which contains `ToString(string content)` method format",
        "translatedContent": "Desde la versión V0.21.0 se admite la clase que contiene el formato del método `ToString(string content)`"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "Tzqb0AOXSl7Yya1l1K7aO4oNtv2QPjboOjqVBiSwm70=",
        "originContent": "Class",
        "translatedContent": "Clase"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 94,
    "Content": "```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n\n    [ExcelFormat(\"MMMM dd, yyyy\")]\n    public DateTime InDate { get; set; }\n}\n```",
    "ContentSha": "U1iDI8S2/wFHPVc3K2d4RMoiSooOSZ3qRQP9xa2f8i8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n\n    [ExcelFormat(\"MMMM dd, yyyy\")]\n    public DateTime InDate { get; set; }\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "V5rovqR1x5iamTW+3SSlBeFLlYNcSAV5EmL87uTcBIM=",
        "originContent": "public class Dto",
        "translatedContent": "public class Dto"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "I+HeTmsXHfkoFyvCRpVIXNEwM37IfwiQRH1OXTwlp4Q=",
        "originContent": "    public string Name { get; set; }",
        "translatedContent": "    public string Name { get; set; }"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "oV/wFP1S4wRuLI9JJlWD2mAIZmaUiPkf7dOvZ9JNmAs=",
        "originContent": "    [ExcelFormat(\"MMMM dd, yyyy\")]",
        "translatedContent": "    [ExcelFormat(\"MMMM dd, yyyy\")]"
      },
      {
        "row": 7,
        "rowsha": "mh+BXawhjRazACT/NHBRLih0rp7uO859KiKQGmyAOIA=",
        "originContent": "    public DateTime InDate { get; set; }",
        "translatedContent": "    public DateTime InDate { get; set; }"
      },
      {
        "row": 8,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 9,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 95,
    "Content": "\nCode\n",
    "ContentSha": "Q60d4hFMAeB4HYk8SxPF+dO8FItDJ5qUzbWXcOtyq38=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Código\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Código"
      },
      {
        "row": 2,
        "rowsha": "NA9GMDPg/V3eq7ki301PG1dHSU0PXtmJTxO24TyoMfU=",
        "originContent": "Code",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 96,
    "Content": "```csharp\nvar value = new Dto[] {\n    new Issue241Dto{ Name=\"Jack\",InDate=new DateTime(2021,01,04)},\n    new Issue241Dto{ Name=\"Henry\",InDate=new DateTime(2020,04,05)},\n};\nMiniExcel.SaveAs(path, value);\n```",
    "ContentSha": "nrOD+UJNMHUp8SL1SJHz7lGPiYvUT/+PyDb5XXLFNTE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new Dto[] {\n    new Issue241Dto{ Name=\"Jack\",InDate=new DateTime(2021,01,04)},\n    new Issue241Dto{ Name=\"Henry\",InDate=new DateTime(2020,04,05)},\n};\nMiniExcel.SaveAs(path, value);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "bV7GBouBwgjVuupiinE942wBi4Xm2alT7GtKoT3onOo=",
        "originContent": "var value = new Dto[] {",
        "translatedContent": "var value = new Dto[] {"
      },
      {
        "row": 3,
        "rowsha": "ZKj5+wNPZD0OebTpl76pvQPwqjnWKl+XCEs8q8C/o3o=",
        "originContent": "    new Issue241Dto{ Name=\"Jack\",InDate=new DateTime(2021,01,04)},",
        "translatedContent": "    new Issue241Dto{ Name=\"Jack\",InDate=new DateTime(2021,01,04)},"
      },
      {
        "row": 4,
        "rowsha": "SjAEVhDd/NKgpnDhsaQXyafY/8O5Cjsrm+kK/oPVA1w=",
        "originContent": "    new Issue241Dto{ Name=\"Henry\",InDate=new DateTime(2020,04,05)},",
        "translatedContent": "    new Issue241Dto{ Name=\"Henry\",InDate=new DateTime(2020,04,05)},"
      },
      {
        "row": 5,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 6,
        "rowsha": "4VpclK1CJ7n5vomm9LnzaeHmvZ+NQWpXM5U8rSt0pXE=",
        "originContent": "MiniExcel.SaveAs(path, value);",
        "translatedContent": "MiniExcel.SaveAs(path, value);"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 97,
    "Content": "\nResult\n\n![image](https://user-images.githubusercontent.com/12729184/118910788-ab2bcd80-b957-11eb-8d42-bfce36621b1b.png)\n\nQuery supports custom format conversion\n\n![image](https://user-images.githubusercontent.com/12729184/118911286-87b55280-b958-11eb-9a88-c8ff403d240a.png)\n\n#### 3. Set Column Width(ExcelColumnWidthAttribute)\n",
    "ContentSha": "z4CXPgYvXMOdbSeO6fnlOGgPd48eTM2wBsRHhn/mc/0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Resultado\n\n![image](https://user-images.githubusercontent.com/12729184/118910788-ab2bcd80-b957-11eb-8d42-bfce36621b1b.png)\n\nLa consulta admite conversión de formato personalizado\n\n![image](https://user-images.githubusercontent.com/12729184/118911286-87b55280-b958-11eb-9a88-c8ff403d240a.png)\n\n#### 3. Establecer ancho de columna (ExcelColumnWidthAttribute)\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Resultado"
      },
      {
        "row": 2,
        "rowsha": "bn1Q6E9HMe90GHz4z6JnIYTu2IZrCwB0p3L0pk4PS6I=",
        "originContent": "Result",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/118910788-ab2bcd80-b957-11eb-8d42-bfce36621b1b.png)"
      },
      {
        "row": 4,
        "rowsha": "r2TUm2elJfbQRqH/ACxreR8uoWxDvk7Hgd0AzEq/0sc=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/118910788-ab2bcd80-b957-11eb-8d42-bfce36621b1b.png)",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "La consulta admite conversión de formato personalizado"
      },
      {
        "row": 6,
        "rowsha": "aqyafzfqfoKiCI5hUuCdOkT5ui43lH0FNNLBFUX/h2I=",
        "originContent": "Query supports custom format conversion",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/118911286-87b55280-b958-11eb-9a88-c8ff403d240a.png)"
      },
      {
        "row": 8,
        "rowsha": "aBosvawdgOtWxkL3hkQlqR2j2914hnZejxYV2nGAztk=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/118911286-87b55280-b958-11eb-9a88-c8ff403d240a.png)",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 3. Establecer ancho de columna (ExcelColumnWidthAttribute)"
      },
      {
        "row": 10,
        "rowsha": "IVifT3izS2UurEPEeE/a3iCtRvMAXg0cUtS07Lq54Gg=",
        "originContent": "#### 3. Set Column Width(ExcelColumnWidthAttribute)",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 98,
    "Content": "```csharp\npublic class Dto\n{\n    [ExcelColumnWidth(20)]\n    public int ID { get; set; }\n    [ExcelColumnWidth(15.50)]\n    public string Name { get; set; }\n}\n```",
    "ContentSha": "ajX0m0FIrc14E+GZMa4O7CMTLrxx0qFAgzlnVfJtM+8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic class Dto\n{\n    [ExcelColumnWidth(20)]\n    public int ID { get; set; }\n    [ExcelColumnWidth(15.50)]\n    public string Name { get; set; }\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "V5rovqR1x5iamTW+3SSlBeFLlYNcSAV5EmL87uTcBIM=",
        "originContent": "public class Dto",
        "translatedContent": "public class Dto"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "RKdEiOf8om/8Je6AQ6ZxFRAqGJOh19pLGz9DuALIwAw=",
        "originContent": "    [ExcelColumnWidth(20)]",
        "translatedContent": "    [ExcelColumnWidth(20)]"
      },
      {
        "row": 5,
        "rowsha": "GCP8cm5PQNl9xvIr+/3lya3S+ERkICm6Mf6XRyzLx/8=",
        "originContent": "    public int ID { get; set; }",
        "translatedContent": "    public int ID { get; set; }"
      },
      {
        "row": 6,
        "rowsha": "P8AkX00Shk8Bmx3uCPh/axmQyxvjWBFwzd0dLwvW32g=",
        "originContent": "    [ExcelColumnWidth(15.50)]",
        "translatedContent": "    [ExcelColumnWidth(15.50)]"
      },
      {
        "row": 7,
        "rowsha": "I+HeTmsXHfkoFyvCRpVIXNEwM37IfwiQRH1OXTwlp4Q=",
        "originContent": "    public string Name { get; set; }",
        "translatedContent": "    public string Name { get; set; }"
      },
      {
        "row": 8,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 9,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 99,
    "Content": "\n#### 4. Multiple column names mapping to the same property.\n",
    "ContentSha": "CAGuJmwlKa1dqJl09mQfApKhia3mh4OK6hxliU1Ebcs=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 100,
    "Content": "```csharp\npublic class Dto\n{\n    [ExcelColumnName(excelColumnName:\"EmployeeNo\",aliases:new[] { \"EmpNo\",\"No\" })]\n    public string Empno { get; set; }\n    public string Name { get; set; }\n}\n```",
    "ContentSha": "fGFmQCKjXt7dJErGeqvq82B+rnmp7N1wndtRkX2eL/M=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic class Dto\n{\n    [ExcelColumnName(excelColumnName:\"EmployeeNo\",aliases:new[] { \"EmpNo\",\"No\" })]\n    public string Empno { get; set; }\n    public string Name { get; set; }\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "V5rovqR1x5iamTW+3SSlBeFLlYNcSAV5EmL87uTcBIM=",
        "originContent": "public class Dto",
        "translatedContent": "public class Dto"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "pgSne62CyUksS0jeDa9R4zgiib/Q7nOJb4cgIT/WNvk=",
        "originContent": "    [ExcelColumnName(excelColumnName:\"EmployeeNo\",aliases:new[] { \"EmpNo\",\"No\" })]",
        "translatedContent": "    [ExcelColumnName(excelColumnName:\"EmployeeNo\",aliases:new[] { \"EmpNo\",\"No\" })]"
      },
      {
        "row": 5,
        "rowsha": "W5OMZ7LA3HR+fmju9EXu2G1u5RwLP0dpOIebX3rWgrQ=",
        "originContent": "    public string Empno { get; set; }",
        "translatedContent": "    public string Empno { get; set; }"
      },
      {
        "row": 6,
        "rowsha": "I+HeTmsXHfkoFyvCRpVIXNEwM37IfwiQRH1OXTwlp4Q=",
        "originContent": "    public string Name { get; set; }",
        "translatedContent": "    public string Name { get; set; }"
      },
      {
        "row": 7,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 8,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 101,
    "Content": "\n\n\n#### 5. System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n\nSince 1.24.0, system supports System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n",
    "ContentSha": "12NR9FdPevqNLH4BcKuXVX83rNRW3A6v/bfyd8xAinQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n\n\n#### 5. System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n\nDesde la versión 1.24.0, el sistema soporta System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "F4qvbK9gQNry/77bf4ZDqWVMV4OVY/WsqKH/MEXuMks=",
        "originContent": "#### 5. System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute",
        "translatedContent": "#### 5. System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "w68Ynzqs54rXeBtQhdYHoSYzRub5QoAglaOXE8/PEkk=",
        "originContent": "Since 1.24.0, system supports System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute",
        "translatedContent": "Desde la versión 1.24.0, el sistema soporta System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 102,
    "Content": "```C#\npublic class TestIssueI4TXGTDto\n{\n    public int ID { get; set; }\n    public string Name { get; set; }\n    [DisplayName(\"Specification\")]\n    public string Spc { get; set; }\n    [DisplayName(\"Unit Price\")]\n    public decimal Up { get; set; }\n}\n```",
    "ContentSha": "EYPeTfaPZEJs+L+5Qoy4a9It+cev/ktj3Z8L7KuUp/U=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```C#\npublic class TestIssueI4TXGTDto\n{\n    public int ID { get; set; }\n    public string Name { get; set; }\n    [DisplayName(\"Specification\")]\n    public string Spc { get; set; }\n    [DisplayName(\"Unit Price\")]\n    public decimal Up { get; set; }\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "P/40QxwdpVmT5Xf6Clh3gwwhSARV7939GBu4IQsAI3Y=",
        "originContent": "```C#",
        "translatedContent": "```C#"
      },
      {
        "row": 2,
        "rowsha": "2LwLK4vc2O6P2jnnYF+/Gkd9cF0ceo2dPZdNcKHjdOY=",
        "originContent": "public class TestIssueI4TXGTDto",
        "translatedContent": "public class TestIssueI4TXGTDto"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "GCP8cm5PQNl9xvIr+/3lya3S+ERkICm6Mf6XRyzLx/8=",
        "originContent": "    public int ID { get; set; }",
        "translatedContent": "    public int ID { get; set; }"
      },
      {
        "row": 5,
        "rowsha": "I+HeTmsXHfkoFyvCRpVIXNEwM37IfwiQRH1OXTwlp4Q=",
        "originContent": "    public string Name { get; set; }",
        "translatedContent": "    public string Name { get; set; }"
      },
      {
        "row": 6,
        "rowsha": "a+EWkJ40hVGTj8PWUgRx1IKHN5ZYiu+ipi2Yp7Lmnkk=",
        "originContent": "    [DisplayName(\"Specification\")]",
        "translatedContent": "    [DisplayName(\"Specification\")]"
      },
      {
        "row": 7,
        "rowsha": "LISg/YThCuxD1hr/kEp7AxEdAtOiOXn8Hpwid5Q8xgQ=",
        "originContent": "    public string Spc { get; set; }",
        "translatedContent": "    public string Spc { get; set; }"
      },
      {
        "row": 8,
        "rowsha": "JwqyShMWZkUeV2mmNW5kY93VXhkyDOaVieJsEDu0/1g=",
        "originContent": "    [DisplayName(\"Unit Price\")]",
        "translatedContent": "    [DisplayName(\"Unit Price\")]"
      },
      {
        "row": 9,
        "rowsha": "a01ELX4OScH9ZdJkvrNsZUSyMYqrcLjicjF+echFWn4=",
        "originContent": "    public decimal Up { get; set; }",
        "translatedContent": "    public decimal Up { get; set; }"
      },
      {
        "row": 10,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 11,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 103,
    "Content": "\n\n\n#### 6. ExcelColumnAttribute\n\nSince V1.26.0, multiple attributes can be simplified like :",
    "ContentSha": "jughh5+UILo/3g0AA7GHZaUFTvURM3Eh2ZpNw6eWVtU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 104,
    "Content": "```csharp\n        public class TestIssueI4ZYUUDto\n        {\n            [ExcelColumn(Name = \"ID\",Index =0)]\n            public string MyProperty { get; set; }\n            [ExcelColumn(Name = \"CreateDate\", Index = 1,Format =\"yyyy-MM\",Width =100)]\n            public DateTime MyProperty2 { get; set; }\n        }\n```",
    "ContentSha": "MgZbybYXC9qNI28jBasnZXTFdsG0AziCCqOsPmLF7wQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n        public class TestIssueI4ZYUUDto\n        {\n            [ExcelColumn(Name = \"ID\",Index =0)]\n            public string MyProperty { get; set; }\n            [ExcelColumn(Name = \"CreateDate\", Index = 1,Format =\"yyyy-MM\",Width =100)]\n            public DateTime MyProperty2 { get; set; }\n        }\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "NJ4JAMPC4XH3YHLwxSAxTyQWHvENayIiq+sZ7kkSK/g=",
        "originContent": "        public class TestIssueI4ZYUUDto",
        "translatedContent": "        public class TestIssueI4ZYUUDto"
      },
      {
        "row": 3,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 4,
        "rowsha": "iE1BwahMMa+YpzgeY16ISdK6m7l97W26gKrRixfacqc=",
        "originContent": "            [ExcelColumn(Name = \"ID\",Index =0)]",
        "translatedContent": "            [ExcelColumn(Name = \"ID\",Index =0)]"
      },
      {
        "row": 5,
        "rowsha": "ML94kpHe8tL7JqnXEc7lgw0emvaqPAdI5KophJfJ+TY=",
        "originContent": "            public string MyProperty { get; set; }",
        "translatedContent": "            public string MyProperty { get; set; }"
      },
      {
        "row": 6,
        "rowsha": "Bm2V85s/sGH9uxHMTF1pKoOUENd3M8+aA6P5tcbnNQA=",
        "originContent": "            [ExcelColumn(Name = \"CreateDate\", Index = 1,Format =\"yyyy-MM\",Width =100)]",
        "translatedContent": "            [ExcelColumn(Name = \"CreateDate\", Index = 1,Format =\"yyyy-MM\",Width =100)]"
      },
      {
        "row": 7,
        "rowsha": "CXq1yy3qW914gO604rTC4/M+j+JLDZnUWDrPoLNE9lM=",
        "originContent": "            public DateTime MyProperty2 { get; set; }",
        "translatedContent": "            public DateTime MyProperty2 { get; set; }"
      },
      {
        "row": 8,
        "rowsha": "KkQWgxjiJOH4MP6atiCqAN1Pez+xnvQ5mr9ZWTzwdW0=",
        "originContent": "        }",
        "translatedContent": "        }"
      },
      {
        "row": 9,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 105,
    "Content": "\n\n\n#### 7. DynamicColumnAttribute\n\nSince V1.26.0, we can set the attributes of Column dynamically",
    "ContentSha": "7D0jndqio9uZt23MSlDGiB+6NnlHLZLXxXZBG3/sWGo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 7. DynamicColumnAttribute\n\nDesde la versión V1.26.0, podemos establecer los atributos de Column de forma dinámica\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 7. DynamicColumnAttribute"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Desde la versión V1.26.0, podemos establecer los atributos de Column de forma dinámica"
      },
      {
        "row": 4,
        "rowsha": "R3hXUCQ7Cyi9IcRC3bg3hftW6NKX5I47o+4zGllQIUs=",
        "originContent": "#### 7. DynamicColumnAttribute",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "4BfZ6eAOxBZc9G6PHlmhQogA00nY3nT2D7ZeK/MWt3A=",
        "originContent": "Since V1.26.0, we can set the attributes of Column dynamically",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 106,
    "Content": "```csharp\n            var config = new OpenXmlConfiguration\n            {\n                DynamicColumns = new DynamicExcelColumn[] {\n                    new DynamicExcelColumn(\"id\"){Ignore=true},\n                    new DynamicExcelColumn(\"name\"){Index=1,Width=10},\n                    new DynamicExcelColumn(\"createdate\"){Index=0,Format=\"yyyy-MM-dd\",Width=15},\n                    new DynamicExcelColumn(\"point\"){Index=2,Name=\"Account Point\"},\n                }\n            };\n            var path = PathHelper.GetTempPath();\n            var value = new[] { new { id = 1, name = \"Jack\", createdate = new DateTime(2022, 04, 12) ,point = 123.456} };\n            MiniExcel.SaveAs(path, value, configuration: config);\n```",
    "ContentSha": "Dq7/m6XMX0ZoQBiFX3/Xzhg0Wc+zPpm6T/KPlbXylZg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n            var config = new OpenXmlConfiguration\n            {\n                DynamicColumns = new DynamicExcelColumn[] {\n                    new DynamicExcelColumn(\"id\"){Ignore=true},\n                    new DynamicExcelColumn(\"name\"){Index=1,Width=10},\n                    new DynamicExcelColumn(\"createdate\"){Index=0,Format=\"yyyy-MM-dd\",Width=15},\n                    new DynamicExcelColumn(\"point\"){Index=2,Name=\"Account Point\"},\n                }\n            };\n            var path = PathHelper.GetTempPath();\n            var value = new[] { new { id = 1, name = \"Jack\", createdate = new DateTime(2022, 04, 12) ,point = 123.456} };\n            MiniExcel.SaveAs(path, value, configuration: config);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "meWKVMOxM3rQKDrXB1v0geMYAnlwMPE2n8Lod3WaYSI=",
        "originContent": "            var config = new OpenXmlConfiguration",
        "translatedContent": "            var config = new OpenXmlConfiguration"
      },
      {
        "row": 3,
        "rowsha": "eP03rcdD1du8iWcplsteDSugGG60x9rQBsnNT3AplAc=",
        "originContent": "            {",
        "translatedContent": "            {"
      },
      {
        "row": 4,
        "rowsha": "Z8JCnM33FdUOawEbdxXTzKkcHWi15QRPtz8+PlPz098=",
        "originContent": "                DynamicColumns = new DynamicExcelColumn[] {",
        "translatedContent": "                DynamicColumns = new DynamicExcelColumn[] {"
      },
      {
        "row": 5,
        "rowsha": "OeGMrV/+ytsZwSUNba+0iio/CAAtzZwVNQmUj+/oxxw=",
        "originContent": "                    new DynamicExcelColumn(\"id\"){Ignore=true},",
        "translatedContent": "                    new DynamicExcelColumn(\"id\"){Ignore=true},"
      },
      {
        "row": 6,
        "rowsha": "SEZXe+OMLz6aQ7BaQky6Ws4nqZPXrK4o8P8OQm5R+LQ=",
        "originContent": "                    new DynamicExcelColumn(\"name\"){Index=1,Width=10},",
        "translatedContent": "                    new DynamicExcelColumn(\"name\"){Index=1,Width=10},"
      },
      {
        "row": 7,
        "rowsha": "RyHfuAkP4sgCymsinPLlvsFdv+rAmDWXXqkDZmfcaXI=",
        "originContent": "                    new DynamicExcelColumn(\"createdate\"){Index=0,Format=\"yyyy-MM-dd\",Width=15},",
        "translatedContent": "                    new DynamicExcelColumn(\"createdate\"){Index=0,Format=\"yyyy-MM-dd\",Width=15},"
      },
      {
        "row": 8,
        "rowsha": "DuGkzWXCjaHQkw3b0ZnByI1O2iyyT3VCGOh/gUPc1BA=",
        "originContent": "                    new DynamicExcelColumn(\"point\"){Index=2,Name=\"Account Point\"},",
        "translatedContent": "                    new DynamicExcelColumn(\"point\"){Index=2,Name=\"Account Point\"},"
      },
      {
        "row": 9,
        "rowsha": "C/CgiKZJwi3JsYSpUZ0e0FpDibwsPF8bbIyFfD+4S6E=",
        "originContent": "                }",
        "translatedContent": "                }"
      },
      {
        "row": 10,
        "rowsha": "huZslwA2DH8tGgdxJRm5jYO9DxR9WgkYvCGDGTbJPpQ=",
        "originContent": "            };",
        "translatedContent": "            };"
      },
      {
        "row": 11,
        "rowsha": "Ln8ZA0i80izegQYYV2+Yu4RkRwNI7rUFOJsHVYhg0cw=",
        "originContent": "            var path = PathHelper.GetTempPath();",
        "translatedContent": "            var path = PathHelper.GetTempPath();"
      },
      {
        "row": 12,
        "rowsha": "3A1wbpMIrmcpkIjFCJXZrq7d6UZz/2f5ZY0VH2szNvU=",
        "originContent": "            var value = new[] { new { id = 1, name = \"Jack\", createdate = new DateTime(2022, 04, 12) ,point = 123.456} };",
        "translatedContent": "            var value = new[] { new { id = 1, name = \"Jack\", createdate = new DateTime(2022, 04, 12) ,point = 123.456} };"
      },
      {
        "row": 13,
        "rowsha": "0kt/HmKwPZlL0oB+JZFTDb+yBVbU+lf2MXxDhPC06EA=",
        "originContent": "            MiniExcel.SaveAs(path, value, configuration: config);",
        "translatedContent": "            MiniExcel.SaveAs(path, value, configuration: config);"
      },
      {
        "row": 14,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 107,
    "Content": "![image](https://user-images.githubusercontent.com/12729184/164510353-5aecbc4e-c3ce-41e8-b6cf-afd55eb23b68.png)\n\n#### 8. DynamicSheetAttribute\n\nSince V1.31.4 we can set the attributes of Sheet dynamically. We can set sheet name and state (visibility).",
    "ContentSha": "qfGBgWpl5LHWrT2T+v3VVe4/RAyYPxcva6K9XoT2QAc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/164510353-5aecbc4e-c3ce-41e8-b6cf-afd55eb23b68.png)\n\n#### 8. DynamicSheetAttribute\n\nDesde la versión V1.31.4 podemos establecer los atributos de la hoja de forma dinámica. Podemos establecer el nombre de la hoja y su estado (visibilidad).",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "KKdEsE9O6Fqg44YCBRpaL+hkdmup8MBpkKUTD2RSokk=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/164510353-5aecbc4e-c3ce-41e8-b6cf-afd55eb23b68.png)",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/164510353-5aecbc4e-c3ce-41e8-b6cf-afd55eb23b68.png)"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "7zXt5pomvmApwRKWjWxjq6swzukMvIDctUrwdzhSPcM=",
        "originContent": "#### 8. DynamicSheetAttribute",
        "translatedContent": "#### 8. DynamicSheetAttribute"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "KZHcm+mEBlTM9DH/YtyxXcd2VCl6UzGM4ToE6/sx0gY=",
        "originContent": "Since V1.31.4 we can set the attributes of Sheet dynamically. We can set sheet name and state (visibility).",
        "translatedContent": "Desde la versión V1.31.4 podemos establecer los atributos de la hoja de forma dinámica. Podemos establecer el nombre de la hoja y su estado (visibilidad)."
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 108,
    "Content": "```csharp\n            var configuration = new OpenXmlConfiguration\n            {\n                DynamicSheets = new DynamicExcelSheet[] {\n                    new DynamicExcelSheet(\"usersSheet\") { Name = \"Users\", State = SheetState.Visible },\n                    new DynamicExcelSheet(\"departmentSheet\") { Name = \"Departments\", State = SheetState.Hidden }\n                }\n            };\n\n            var users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };\n            var department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };\n            var sheets = new Dictionary<string, object>\n            {\n                [\"usersSheet\"] = users,\n                [\"departmentSheet\"] = department\n            };\n\n            var path = PathHelper.GetTempPath();\n            MiniExcel.SaveAs(path, sheets, configuration: configuration);\n```",
    "ContentSha": "WP2IkXJ+34HDRqxiGs6dJX6C7P08yXdIIC7sdMdiVhI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n            var configuration = new OpenXmlConfiguration\n            {\n                DynamicSheets = new DynamicExcelSheet[] {\n                    new DynamicExcelSheet(\"usersSheet\") { Name = \"Users\", State = SheetState.Visible },\n                    new DynamicExcelSheet(\"departmentSheet\") { Name = \"Departments\", State = SheetState.Hidden }\n                }\n            };\n\n            var users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };\n            var department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };\n            var sheets = new Dictionary<string, object>\n            {\n                [\"usersSheet\"] = users,\n                [\"departmentSheet\"] = department\n            };\n\n            var path = PathHelper.GetTempPath();\n            MiniExcel.SaveAs(path, sheets, configuration: configuration);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "ZILgcWdojlwUtEibcvZ8EbEbZYN9Vs7+dAclYekxmBQ=",
        "originContent": "            var configuration = new OpenXmlConfiguration",
        "translatedContent": "            var configuration = new OpenXmlConfiguration"
      },
      {
        "row": 3,
        "rowsha": "eP03rcdD1du8iWcplsteDSugGG60x9rQBsnNT3AplAc=",
        "originContent": "            {",
        "translatedContent": "            {"
      },
      {
        "row": 4,
        "rowsha": "/fmSQnYGGsLphb7zyWaGjfJcC1gHmlOhUXx5gHwKkLw=",
        "originContent": "                DynamicSheets = new DynamicExcelSheet[] {",
        "translatedContent": "                DynamicSheets = new DynamicExcelSheet[] {"
      },
      {
        "row": 5,
        "rowsha": "HVlBhRRq5JmY64c3h6pmjA5b/8C5eWJN5JKEZJQwYJw=",
        "originContent": "                    new DynamicExcelSheet(\"usersSheet\") { Name = \"Users\", State = SheetState.Visible },",
        "translatedContent": "                    new DynamicExcelSheet(\"usersSheet\") { Name = \"Users\", State = SheetState.Visible },"
      },
      {
        "row": 6,
        "rowsha": "j0c3/OgzwX1WM1u7k+Z4sg2BrlRlGUGvtF6reQQQ0jE=",
        "originContent": "                    new DynamicExcelSheet(\"departmentSheet\") { Name = \"Departments\", State = SheetState.Hidden }",
        "translatedContent": "                    new DynamicExcelSheet(\"departmentSheet\") { Name = \"Departments\", State = SheetState.Hidden }"
      },
      {
        "row": 7,
        "rowsha": "C/CgiKZJwi3JsYSpUZ0e0FpDibwsPF8bbIyFfD+4S6E=",
        "originContent": "                }",
        "translatedContent": "                }"
      },
      {
        "row": 8,
        "rowsha": "huZslwA2DH8tGgdxJRm5jYO9DxR9WgkYvCGDGTbJPpQ=",
        "originContent": "            };",
        "translatedContent": "            };"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "tIpT2XYfp7L//bv9XplQ0yU+J2w/xHYXiLCVWnUUWW0=",
        "originContent": "            var users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };",
        "translatedContent": "            var users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };"
      },
      {
        "row": 11,
        "rowsha": "LXcjqEULBPoV1TE7COMV73A8+CEWPMywJQv8b6jHT1g=",
        "originContent": "            var department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };",
        "translatedContent": "            var department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };"
      },
      {
        "row": 12,
        "rowsha": "FYWT1ITn/J97O0RP9baiF+Uec8ju7D6JMQSwMObLsOM=",
        "originContent": "            var sheets = new Dictionary<string, object>",
        "translatedContent": "            var sheets = new Dictionary<string, object>"
      },
      {
        "row": 13,
        "rowsha": "eP03rcdD1du8iWcplsteDSugGG60x9rQBsnNT3AplAc=",
        "originContent": "            {",
        "translatedContent": "            {"
      },
      {
        "row": 14,
        "rowsha": "sNIGAixI0UYvd4nQ1VykRAsdAMgsVZNIg1OKNXBb2JM=",
        "originContent": "                [\"usersSheet\"] = users,",
        "translatedContent": "                [\"usersSheet\"] = users,"
      },
      {
        "row": 15,
        "rowsha": "u/klKXsdrBKGH9VtB4Ycl8wfwYGpr80eYzAyoUNYLVY=",
        "originContent": "                [\"departmentSheet\"] = department",
        "translatedContent": "                [\"departmentSheet\"] = department"
      },
      {
        "row": 16,
        "rowsha": "huZslwA2DH8tGgdxJRm5jYO9DxR9WgkYvCGDGTbJPpQ=",
        "originContent": "            };",
        "translatedContent": "            };"
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "Ln8ZA0i80izegQYYV2+Yu4RkRwNI7rUFOJsHVYhg0cw=",
        "originContent": "            var path = PathHelper.GetTempPath();",
        "translatedContent": "            var path = PathHelper.GetTempPath();"
      },
      {
        "row": 19,
        "rowsha": "/YOI61ryLti1jLXukqYCthRMf2uintd3a8fZMmU8BaA=",
        "originContent": "            MiniExcel.SaveAs(path, sheets, configuration: configuration);",
        "translatedContent": "            MiniExcel.SaveAs(path, sheets, configuration: configuration);"
      },
      {
        "row": 20,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 109,
    "Content": "\nWe can also use new attribute ExcelSheetAttribute:\n",
    "ContentSha": "r5h7ysi1ijmd468XS8AuZSZIuWpGfbcQueqdvsINX+E=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Podemos también usar el nuevo atributo ExcelSheetAttribute:\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Podemos también usar el nuevo atributo ExcelSheetAttribute:"
      },
      {
        "row": 2,
        "rowsha": "2sYM8x7hOkBJ2QCzazuQiqjQtY3oiCV3Slzd/9QQib4=",
        "originContent": "We can also use new attribute ExcelSheetAttribute:",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 110,
    "Content": "```C#\n   [ExcelSheet(Name = \"Departments\", State = SheetState.Hidden)]\n   private class DepartmentDto\n   {\n      [ExcelColumn(Name = \"ID\",Index = 0)]\n      public string ID { get; set; }\n      [ExcelColumn(Name = \"Name\",Index = 1)]\n      public string Name { get; set; }\n   }\n```",
    "ContentSha": "AZJhyVf8fUVWJ22rseCUIJ210BHjMf6Cc4Fv+0WqElg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```C#\n   [ExcelSheet(Name = \"Departments\", State = SheetState.Hidden)]\n   private class DepartmentDto\n   {\n      [ExcelColumn(Name = \"ID\",Index = 0)]\n      public string ID { get; set; }\n      [ExcelColumn(Name = \"Name\",Index = 1)]\n      public string Name { get; set; }\n   }\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "P/40QxwdpVmT5Xf6Clh3gwwhSARV7939GBu4IQsAI3Y=",
        "originContent": "```C#",
        "translatedContent": "```C#"
      },
      {
        "row": 2,
        "rowsha": "WE+253STwz9l16ihyLf7KuTE34g79XqA7t/VYQUBo9A=",
        "originContent": "   [ExcelSheet(Name = \"Departments\", State = SheetState.Hidden)]",
        "translatedContent": "   [ExcelSheet(Name = \"Departments\", State = SheetState.Hidden)]"
      },
      {
        "row": 3,
        "rowsha": "cyqOjGMcHxln//H9kSFFmTIJdlO4UCZSIdDwBDXRfTA=",
        "originContent": "   private class DepartmentDto",
        "translatedContent": "   private class DepartmentDto"
      },
      {
        "row": 4,
        "rowsha": "0nGFEPHryknsZQctEf8vEyMvbuJrPgYhz1AiG1M51Ys=",
        "originContent": "   {",
        "translatedContent": "   {"
      },
      {
        "row": 5,
        "rowsha": "R/Qh+PHe2FwxE1Iopox48MUx7bt/orZ7oyqIZB2fclw=",
        "originContent": "      [ExcelColumn(Name = \"ID\",Index = 0)]",
        "translatedContent": "      [ExcelColumn(Name = \"ID\",Index = 0)]"
      },
      {
        "row": 6,
        "rowsha": "fSYNL+PdHHKDfMj0Ip12UZqkYgS2fsCrWhsyLEkEmTQ=",
        "originContent": "      public string ID { get; set; }",
        "translatedContent": "      public string ID { get; set; }"
      },
      {
        "row": 7,
        "rowsha": "QgR7eIFIFShhDZUmJgCGdV+0JcB4NKxnQHZhtdW8idc=",
        "originContent": "      [ExcelColumn(Name = \"Name\",Index = 1)]",
        "translatedContent": "      [ExcelColumn(Name = \"Name\",Index = 1)]"
      },
      {
        "row": 8,
        "rowsha": "hgGvPSxe9P44sj/VyL72Ifc9Fp+rKN4GJOpSkhrUE+g=",
        "originContent": "      public string Name { get; set; }",
        "translatedContent": "      public string Name { get; set; }"
      },
      {
        "row": 9,
        "rowsha": "ycCxQTO9KU+lsNjcZ0AEvZXIAAAOwZgQn1KUCO4GRwY=",
        "originContent": "   }",
        "translatedContent": "   }"
      },
      {
        "row": 10,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 111,
    "Content": "\n### Add, Delete, Update\n\n#### Add\n\nv1.28.0 support CSV insert N rows data after last row\n",
    "ContentSha": "xgV4ytWIvFi7uyesyncG9G5UmvlvWd15W27n5cpM1sk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### Agregar, Eliminar, Actualizar\n\n#### Agregar\n\nv1.28.0 admite la inserción de N filas de datos CSV después de la última fila\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Agregar, Eliminar, Actualizar"
      },
      {
        "row": 2,
        "rowsha": "VjKsgihB1tonOXKpWoxy1UYaGb7I/qukAn8+ZeUy9pI=",
        "originContent": "### Add, Delete, Update",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### Agregar"
      },
      {
        "row": 4,
        "rowsha": "fZjUpvBSNRc5kjk/PVYLtuPH/Onx8oEH+wqIO7ScG/w=",
        "originContent": "#### Add",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "v1.28.0 admite la inserción de N filas de datos CSV después de la última fila"
      },
      {
        "row": 6,
        "rowsha": "lfdQNn5K2CeB2ExgsOvvW8Hde8m3Mn6tPNzeaVeLxow=",
        "originContent": "v1.28.0 support CSV insert N rows data after last row",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 112,
    "Content": "```csharp\n// Origin\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value);\n}\n// Insert 1 rows after last\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, value);\n}\n// Insert N rows after last\n{\n    var value = new[] {\n          new { ID=4,Name =\"Frank\",InDate=new DateTime(2021,06,07)},\n          new { ID=5,Name =\"Gloria\",InDate=new DateTime(2022,05,03)},\n    };\n    MiniExcel.Insert(path, value);\n}\n```",
    "ContentSha": "9oWjdZprLFB8cQGzSIHXT/PwskwLNK1dquGfy4G6AYg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n// Origin\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value);\n}\n// Insert 1 rows after last\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, value);\n}\n// Insert N rows after last\n{\n    var value = new[] {\n          new { ID=4,Name =\"Frank\",InDate=new DateTime(2021,06,07)},\n          new { ID=5,Name =\"Gloria\",InDate=new DateTime(2022,05,03)},\n    };\n    MiniExcel.Insert(path, value);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "Gsg/PxSqNU1sIcbLZoQnn/wPFod1d0VBwNrS/dm5GgU=",
        "originContent": "// Origin",
        "translatedContent": "// Origin"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "KZiEwBLuq7IOhb30Hdl+4LUu1hCsAjkH8MOsI0zoA4k=",
        "originContent": "    var value = new[] {",
        "translatedContent": "    var value = new[] {"
      },
      {
        "row": 5,
        "rowsha": "MT8w5s+0Fi51/8VxcIvsQ/huGJVsIZv1oPdyJKkhS94=",
        "originContent": "          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},",
        "translatedContent": "          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},"
      },
      {
        "row": 6,
        "rowsha": "SeDo6l4TDyleULESqnduoX11JyhmOTU82QDu2V3Qe+s=",
        "originContent": "          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},",
        "translatedContent": "          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},"
      },
      {
        "row": 7,
        "rowsha": "7em+/b2HqM6iEBXxrPSXlZytO/iDgRIZPZigKkf6YTc=",
        "originContent": "    };",
        "translatedContent": "    };"
      },
      {
        "row": 8,
        "rowsha": "9hTQDPJGGJaDfW+ysmM2lWBC43FN65ErnM4cQ5wUj1g=",
        "originContent": "    MiniExcel.SaveAs(path, value);",
        "translatedContent": "    MiniExcel.SaveAs(path, value);"
      },
      {
        "row": 9,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 10,
        "rowsha": "OIcX4sHAMyJeHCnD6J3ykUZI+WAH/28VdARA/mbFtFQ=",
        "originContent": "// Insert 1 rows after last",
        "translatedContent": "// Insert 1 rows after last"
      },
      {
        "row": 11,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 12,
        "rowsha": "kgle9pwaBKFTMV+XDm3jci7keqyMFbUpa+0lMJxbVHM=",
        "originContent": "    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };",
        "translatedContent": "    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };"
      },
      {
        "row": 13,
        "rowsha": "qg9vXyNgZ7z6ONCTAWONlcC5Nfkebro0h72J2lcU14E=",
        "originContent": "    MiniExcel.Insert(path, value);",
        "translatedContent": "    MiniExcel.Insert(path, value);"
      },
      {
        "row": 14,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 15,
        "rowsha": "h7eW+hR7ZyV+7Jp6s2ipyce9TgLgmfoKfourSoNP5SA=",
        "originContent": "// Insert N rows after last",
        "translatedContent": "// Insert N rows after last"
      },
      {
        "row": 16,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 17,
        "rowsha": "KZiEwBLuq7IOhb30Hdl+4LUu1hCsAjkH8MOsI0zoA4k=",
        "originContent": "    var value = new[] {",
        "translatedContent": "    var value = new[] {"
      },
      {
        "row": 18,
        "rowsha": "0DUuYm9EhWp9/e75gfb5N+M3hpbzkhzdNMZwp2XmA8c=",
        "originContent": "          new { ID=4,Name =\"Frank\",InDate=new DateTime(2021,06,07)},",
        "translatedContent": "          new { ID=4,Name =\"Frank\",InDate=new DateTime(2021,06,07)},"
      },
      {
        "row": 19,
        "rowsha": "nPxJT8hhSp8NxhBWeDBLPQCbNKGBjwflbNb47Ow+jEE=",
        "originContent": "          new { ID=5,Name =\"Gloria\",InDate=new DateTime(2022,05,03)},",
        "translatedContent": "          new { ID=5,Name =\"Gloria\",InDate=new DateTime(2022,05,03)},"
      },
      {
        "row": 20,
        "rowsha": "7em+/b2HqM6iEBXxrPSXlZytO/iDgRIZPZigKkf6YTc=",
        "originContent": "    };",
        "translatedContent": "    };"
      },
      {
        "row": 21,
        "rowsha": "qg9vXyNgZ7z6ONCTAWONlcC5Nfkebro0h72J2lcU14E=",
        "originContent": "    MiniExcel.Insert(path, value);",
        "translatedContent": "    MiniExcel.Insert(path, value);"
      },
      {
        "row": 22,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 23,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 113,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png)\n\nv1.37.0 support excel insert a new sheet into an existing workbook\n",
    "ContentSha": "ZyupHO3D5V9ffQp1bPn37sER3NDy/enFQaKH3p/LAqU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 114,
    "Content": "```csharp\n// Origin excel\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value, sheetName: \"Sheet1\");\n}\n// Insert a new sheet\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, table, sheetName: \"Sheet2\");\n}\n```",
    "ContentSha": "VAZAX5RFCfikAEALDj1Q2HV44rbxCArvFJMxTJDaHm0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n// Origin excel\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value, sheetName: \"Sheet1\");\n}\n// Insert a new sheet\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, table, sheetName: \"Sheet2\");\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "r3aCdjwf0zd3vVswqCQ0PuL3q+bmhAs5kCgc61/LcQw=",
        "originContent": "// Origin excel",
        "translatedContent": "// Origin excel"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "KZiEwBLuq7IOhb30Hdl+4LUu1hCsAjkH8MOsI0zoA4k=",
        "originContent": "    var value = new[] {",
        "translatedContent": "    var value = new[] {"
      },
      {
        "row": 5,
        "rowsha": "MT8w5s+0Fi51/8VxcIvsQ/huGJVsIZv1oPdyJKkhS94=",
        "originContent": "          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},",
        "translatedContent": "          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},"
      },
      {
        "row": 6,
        "rowsha": "SeDo6l4TDyleULESqnduoX11JyhmOTU82QDu2V3Qe+s=",
        "originContent": "          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},",
        "translatedContent": "          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},"
      },
      {
        "row": 7,
        "rowsha": "7em+/b2HqM6iEBXxrPSXlZytO/iDgRIZPZigKkf6YTc=",
        "originContent": "    };",
        "translatedContent": "    };"
      },
      {
        "row": 8,
        "rowsha": "cirNGM73i1XllkrTU7Jy8doUPEjgo7K5O4hEQKn4ExY=",
        "originContent": "    MiniExcel.SaveAs(path, value, sheetName: \"Sheet1\");",
        "translatedContent": "    MiniExcel.SaveAs(path, value, sheetName: \"Sheet1\");"
      },
      {
        "row": 9,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 10,
        "rowsha": "/oWGtZ2K+YmGqTYuW56Apur7l2tsgeEdV3ZEv/DeDr4=",
        "originContent": "// Insert a new sheet",
        "translatedContent": "// Insert a new sheet"
      },
      {
        "row": 11,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 12,
        "rowsha": "kgle9pwaBKFTMV+XDm3jci7keqyMFbUpa+0lMJxbVHM=",
        "originContent": "    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };",
        "translatedContent": "    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };"
      },
      {
        "row": 13,
        "rowsha": "ftF5FIC82gagTZxSrna1JkE4kUtwReCgSABVkxuPl9A=",
        "originContent": "    MiniExcel.Insert(path, table, sheetName: \"Sheet2\");",
        "translatedContent": "    MiniExcel.Insert(path, table, sheetName: \"Sheet2\");"
      },
      {
        "row": 14,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 15,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 115,
    "Content": "\n\n\n#### Delete(waiting)\n\n#### Update(waiting)\n\n\n\n### Excel Type Auto Check <a name=\"getstart5\"></a>\n\n- MiniExcel will check whether it is xlsx or csv based on the `file extension` by default, but there may be inaccuracy, please specify it manually.\n- Stream cannot be know from which excel, please specify it manually.\n",
    "ContentSha": "1xkcFd502MjBprcJmdLj1vyTDL3x4ykGpEIF/oFXDEA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### Eliminar(esperando)\n\n#### Actualizar(esperando)\n\n\n\n### Comprobación automática del tipo de Excel <a name=\"getstart5\"></a>\n\n- MiniExcel comprobará si es xlsx o csv basándose en la `extensión del archivo` por defecto, pero puede haber inexactitudes, por favor especifíquelo manualmente.\n- No se puede saber de qué excel proviene el Stream, por favor especifíquelo manualmente.\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### Eliminar(esperando)"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### Actualizar(esperando)"
      },
      {
        "row": 4,
        "rowsha": "+lFVBtHun+RJQzGLGOfYt0kQ5eVtk2RoO8LgU9OlMNE=",
        "originContent": "#### Delete(waiting)",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "1qi0X0LlLl/mXHme7fAk+KCX+RTyobnwe831FCT3VYc=",
        "originContent": "#### Update(waiting)",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Comprobación automática del tipo de Excel <a name=\"getstart5\"></a>"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- MiniExcel comprobará si es xlsx o csv basándose en la `extensión del archivo` por defecto, pero puede haber inexactitudes, por favor especifíquelo manualmente."
      },
      {
        "row": 10,
        "rowsha": "DlUF5VjBAi2Zeb9LQ5URcznOdIUJ2x3uI1KgiVwEi0A=",
        "originContent": "### Excel Type Auto Check <a name=\"getstart5\"></a>",
        "translatedContent": "- No se puede saber de qué excel proviene el Stream, por favor especifíquelo manualmente."
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "WFrr2F05OeS5TH5QaG2uAzpWGqeYdiuv5RZl9GGjZPU=",
        "originContent": "- MiniExcel will check whether it is xlsx or csv based on the `file extension` by default, but there may be inaccuracy, please specify it manually.",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "YS4DXQT6epxpYdx3cjfkguwGTUeEkEztIRnUEF0B7aA=",
        "originContent": "- Stream cannot be know from which excel, please specify it manually.",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 116,
    "Content": "```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//or\nstream.SaveAs(excelType:ExcelType.XLSX);\n//or\nstream.Query(excelType:ExcelType.CSV);\n//or\nstream.Query(excelType:ExcelType.XLSX);\n```",
    "ContentSha": "NrsYxMYs29SI+nHbkcd9AQWdIyeyFjzz6TbhjAtzmp0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//or\nstream.SaveAs(excelType:ExcelType.XLSX);\n//or\nstream.Query(excelType:ExcelType.CSV);\n//or\nstream.Query(excelType:ExcelType.XLSX);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "Lr6vzn3Si38mPqwt8nVt/6u5YJUnOduelClhHVnOMoM=",
        "originContent": "stream.SaveAs(excelType:ExcelType.CSV);",
        "translatedContent": "stream.SaveAs(excelType:ExcelType.CSV);"
      },
      {
        "row": 3,
        "rowsha": "Pr8W+maDDzk884RTyWBjmCslrnI8N2iV+wL7nyNu2yY=",
        "originContent": "//or",
        "translatedContent": "//or"
      },
      {
        "row": 4,
        "rowsha": "sqlnQDI0tbetSIG1UjTVOvy5CPDjNJh6ZSwjf7w/zpA=",
        "originContent": "stream.SaveAs(excelType:ExcelType.XLSX);",
        "translatedContent": "stream.SaveAs(excelType:ExcelType.XLSX);"
      },
      {
        "row": 5,
        "rowsha": "Pr8W+maDDzk884RTyWBjmCslrnI8N2iV+wL7nyNu2yY=",
        "originContent": "//or",
        "translatedContent": "//or"
      },
      {
        "row": 6,
        "rowsha": "KX2q8VVtz87SsOWw3U+xxZy3duTZet3xnFfgynklR7c=",
        "originContent": "stream.Query(excelType:ExcelType.CSV);",
        "translatedContent": "stream.Query(excelType:ExcelType.CSV);"
      },
      {
        "row": 7,
        "rowsha": "Pr8W+maDDzk884RTyWBjmCslrnI8N2iV+wL7nyNu2yY=",
        "originContent": "//or",
        "translatedContent": "//or"
      },
      {
        "row": 8,
        "rowsha": "cPuFgwUixpWrxixRcdUcPu5DDwcLmqoRwLARqSFV3sU=",
        "originContent": "stream.Query(excelType:ExcelType.XLSX);",
        "translatedContent": "stream.Query(excelType:ExcelType.XLSX);"
      },
      {
        "row": 9,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 117,
    "Content": "\n\n\n\n\n### CSV\n\n#### Note\n\n- Default return `string` type, and value will not be converted to numbers or datetime, unless the type is defined by strong typing generic.\n\n\n\n#### Custom separator\n\nThe default is `,` as the separator, you can modify the `Seperator` property for customization\n",
    "ContentSha": "zyCRlQDZQp65PqpHi42+6eQ9njDatT7VJlE22RHEKoE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n\n\n\n\n### CSV\n\n#### Nota\n\n- Por defecto retorna el tipo `string`, y el valor no se convertirá a números ni a datetime, a menos que el tipo esté definido mediante tipado fuerte genérico.\n\n\n\n#### Separador personalizado\n\nEl valor predeterminado es `,` como separador, puedes modificar la propiedad `Seperator` para personalizarlo\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "B33uYITFWzFkKTZHnfpmh5sKsH91m+fznJhCFXhmo+E=",
        "originContent": "### CSV",
        "translatedContent": "### CSV"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "rY7bpMd4lZECLHOovVWmFlgPs2T7PhjqrZ4KWaiUrAQ=",
        "originContent": "#### Note",
        "translatedContent": "#### Nota"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "UJNtzpkqX90IgOKg8bS5t+NylV8GvF/YQiPQlxqCfnA=",
        "originContent": "- Default return `string` type, and value will not be converted to numbers or datetime, unless the type is defined by strong typing generic.",
        "translatedContent": "- Por defecto retorna el tipo `string`, y el valor no se convertirá a números ni a datetime, a menos que el tipo esté definido mediante tipado fuerte genérico."
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "cxXmxthOXiZrCdhMWlEWkisF/5m3GhaF/Ew8mmkLjJs=",
        "originContent": "#### Custom separator",
        "translatedContent": "#### Separador personalizado"
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "oQGhjFx71V45nt9Oh5GeGzpIkywqoCeaKgWynOeBH5c=",
        "originContent": "The default is `,` as the separator, you can modify the `Seperator` property for customization",
        "translatedContent": "El valor predeterminado es `,` como separador, puedes modificar la propiedad `Seperator` para personalizarlo"
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 118,
    "Content": "```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```",
    "ContentSha": "vXV7FqBmYVYNt/hbrMIxJLrreWzu1oyl2frxVpe4ZkM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "5r/vExWe6Rjeq4mEvJKt7mJBMqie0tv5fuv42SYAAG0=",
        "originContent": "var config = new MiniExcelLibs.Csv.CsvConfiguration()",
        "translatedContent": "var config = new MiniExcelLibs.Csv.CsvConfiguration()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "3FDfVRxElQpWN2VrSA1nVJkNHXjMTbiyk2QKiMnx67U=",
        "originContent": "    Seperator=';'",
        "translatedContent": "    Seperator=';'"
      },
      {
        "row": 5,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 6,
        "rowsha": "oogjMO/2y4S0aD6E702vAtKRBqGeBuRDAXzJRMK4V9g=",
        "originContent": "MiniExcel.SaveAs(path, values,configuration: config);",
        "translatedContent": "MiniExcel.SaveAs(path, values,configuration: config);"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 119,
    "Content": "\nSince V1.30.1 support function to custom separator (thanks @hyzx86)\n",
    "ContentSha": "+cXMZ0ESRslw6eoYVgbxOm6JpJoqQx4+BkuqVzwg8ps=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Desde la versión V1.30.1 se admite la función para personalizar el separador (gracias @hyzx86)\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Desde la versión V1.30.1 se admite la función para personalizar el separador (gracias @hyzx86)"
      },
      {
        "row": 2,
        "rowsha": "afWU8MGf7QSO/id1hKIZ+NMJlxOY0cfZZLNNVVLp2wA=",
        "originContent": "Since V1.30.1 support function to custom separator (thanks @hyzx86)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 120,
    "Content": "```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```",
    "ContentSha": "+9o4E3gSyM1CrZBF41eJ+zN5hbE8/eIXjLHIgEyrbcU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "29tKlHbWj+hbqHUfPlXgbGF2WzUofVdteQECV6g7pDk=",
        "originContent": "var config = new CsvConfiguration()",
        "translatedContent": "var config = new CsvConfiguration()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "FRLPlLpvOLDkSoFH5fCwUUwyZ7QtNEgiO1VSZd1/SrM=",
        "originContent": "    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")",
        "translatedContent": "    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")"
      },
      {
        "row": 5,
        "rowsha": "bHcdsrAizAde7Uo9OuoSl4FkF7e5IX9LoS6cJSJtEtM=",
        "originContent": "        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()",
        "translatedContent": "        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()"
      },
      {
        "row": 6,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 7,
        "rowsha": "eN3Lr2q11MvoquU/K8p/l+dDZEXgmdJSUYQB68d9b+k=",
        "originContent": "var rows = MiniExcel.Query(path, configuration: config).ToList();",
        "translatedContent": "var rows = MiniExcel.Query(path, configuration: config).ToList();"
      },
      {
        "row": 8,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 121,
    "Content": "\n\n\n#### Custom line break\n\nThe default is `\\r\\n` as the newline character, you can modify the `NewLine` property for customization\n",
    "ContentSha": "g1j/YreJnT+5tS3JjAWqhhCjmPqlHh0xdOcJmpaJYDM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### Salto de línea personalizado\n\nEl valor predeterminado es `\\r\\n` como el carácter de nueva línea, puedes modificar la propiedad `NewLine` para personalizarlo\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### Salto de línea personalizado"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "El valor predeterminado es `\\r\\n` como el carácter de nueva línea, puedes modificar la propiedad `NewLine` para personalizarlo"
      },
      {
        "row": 4,
        "rowsha": "kkyMcPSkZ7trEoTpV1hdUg3mpHuHvNsI9hogrW3MEVw=",
        "originContent": "#### Custom line break",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "OgeDcpcudgQZPu8vavs2cvzFzj8GfvMU3WEPsQG7gvQ=",
        "originContent": "The default is `\\r\\n` as the newline character, you can modify the `NewLine` property for customization",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 122,
    "Content": "```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```",
    "ContentSha": "+/Y84ylV3pr86jKbzaS7wLxQmun+RCft86Qjg1luRms=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "5r/vExWe6Rjeq4mEvJKt7mJBMqie0tv5fuv42SYAAG0=",
        "originContent": "var config = new MiniExcelLibs.Csv.CsvConfiguration()",
        "translatedContent": "var config = new MiniExcelLibs.Csv.CsvConfiguration()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "aehPFoXpO21xwndAkdpH5tTnkMUB4ntmi/xFAfUuIpM=",
        "originContent": "    NewLine='\\n'",
        "translatedContent": "    NewLine='\\n'"
      },
      {
        "row": 5,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 6,
        "rowsha": "oogjMO/2y4S0aD6E702vAtKRBqGeBuRDAXzJRMK4V9g=",
        "originContent": "MiniExcel.SaveAs(path, values,configuration: config);",
        "translatedContent": "MiniExcel.SaveAs(path, values,configuration: config);"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 123,
    "Content": "\n\n\n#### Custom coding\n\n- The default encoding is \"Detect Encoding From Byte Order Marks\"  (detectEncodingFromByteOrderMarks: true)\n- f you have custom encoding requirements, please modify the StreamReaderFunc / StreamWriterFunc  property\n",
    "ContentSha": "Hg6OIyPQzZ/iecVw7N8rdjfylP+fl388ljVUCfQtDxE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### Codificación personalizada\n\n- La codificación predeterminada es \"Detectar codificación a partir de las marcas de orden de bytes\" (detectEncodingFromByteOrderMarks: true)\n- Si tienes requisitos de codificación personalizados, modifica la propiedad StreamReaderFunc / StreamWriterFunc\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### Codificación personalizada"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- La codificación predeterminada es \"Detectar codificación a partir de las marcas de orden de bytes\" (detectEncodingFromByteOrderMarks: true)"
      },
      {
        "row": 4,
        "rowsha": "mJtBsK8S/DzR4JK+7HLphkXvM4tubAfSoyYTGdx0EB4=",
        "originContent": "#### Custom coding",
        "translatedContent": "- Si tienes requisitos de codificación personalizados, modifica la propiedad StreamReaderFunc / StreamWriterFunc"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "FDcruuZ2ZF+yGX6uqJi7QIOJ5dSTw1zCb/BAi/gT/PE=",
        "originContent": "- The default encoding is \"Detect Encoding From Byte Order Marks\"  (detectEncodingFromByteOrderMarks: true)",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "hSDrseK/lvHOlguOefMTXLa0d7noIPCjAZ5aQ1IW5+g=",
        "originContent": "- f you have custom encoding requirements, please modify the StreamReaderFunc / StreamWriterFunc  property",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 124,
    "Content": "```csharp\n// Read\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamReaderFunc = (stream) => new StreamReader(stream,Encoding.GetEncoding(\"gb2312\"))\n};\nvar rows = MiniExcel.Query(path, true,excelType:ExcelType.CSV,configuration: config);\n\n// Write\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamWriterFunc = (stream) => new StreamWriter(stream, Encoding.GetEncoding(\"gb2312\"))\n};\nMiniExcel.SaveAs(path, value,excelType:ExcelType.CSV, configuration: config);\n```",
    "ContentSha": "a/xiC7/W+Mgl8E/GdOwVrSaospPXCpcexgtEaKH2gfE=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n// Read\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamReaderFunc = (stream) => new StreamReader(stream,Encoding.GetEncoding(\"gb2312\"))\n};\nvar rows = MiniExcel.Query(path, true,excelType:ExcelType.CSV,configuration: config);\n\n// Write\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamWriterFunc = (stream) => new StreamWriter(stream, Encoding.GetEncoding(\"gb2312\"))\n};\nMiniExcel.SaveAs(path, value,excelType:ExcelType.CSV, configuration: config);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "irrkN0lNjeTBd6qYBe8JMUfkS9gblFeiNNc3PKtE358=",
        "originContent": "// Read",
        "translatedContent": "// Read"
      },
      {
        "row": 3,
        "rowsha": "5r/vExWe6Rjeq4mEvJKt7mJBMqie0tv5fuv42SYAAG0=",
        "originContent": "var config = new MiniExcelLibs.Csv.CsvConfiguration()",
        "translatedContent": "var config = new MiniExcelLibs.Csv.CsvConfiguration()"
      },
      {
        "row": 4,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 5,
        "rowsha": "eWUAMi+9g+EEYo0X4GSKE0J4XOcRCjjGn5Sx8bhyTao=",
        "originContent": "    StreamReaderFunc = (stream) => new StreamReader(stream,Encoding.GetEncoding(\"gb2312\"))",
        "translatedContent": "    StreamReaderFunc = (stream) => new StreamReader(stream,Encoding.GetEncoding(\"gb2312\"))"
      },
      {
        "row": 6,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 7,
        "rowsha": "hgpjD2bVizoG+bDk/SbUbe6B4xHAPK/2MzWBT+W42Y8=",
        "originContent": "var rows = MiniExcel.Query(path, true,excelType:ExcelType.CSV,configuration: config);",
        "translatedContent": "var rows = MiniExcel.Query(path, true,excelType:ExcelType.CSV,configuration: config);"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "K31CTiIr6SIdYjQGjGZ39/ueg2Em39woN1tOXGv7Jbk=",
        "originContent": "// Write",
        "translatedContent": "// Write"
      },
      {
        "row": 10,
        "rowsha": "5r/vExWe6Rjeq4mEvJKt7mJBMqie0tv5fuv42SYAAG0=",
        "originContent": "var config = new MiniExcelLibs.Csv.CsvConfiguration()",
        "translatedContent": "var config = new MiniExcelLibs.Csv.CsvConfiguration()"
      },
      {
        "row": 11,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 12,
        "rowsha": "D9iGDNqyleUhsDIU0n1P3o5fUYlPvnoySSAic2RFaQU=",
        "originContent": "    StreamWriterFunc = (stream) => new StreamWriter(stream, Encoding.GetEncoding(\"gb2312\"))",
        "translatedContent": "    StreamWriterFunc = (stream) => new StreamWriter(stream, Encoding.GetEncoding(\"gb2312\"))"
      },
      {
        "row": 13,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 14,
        "rowsha": "S9WpmusQ8dJZ+AjchP9o7C+OkLE+cV2CBde194vZzms=",
        "originContent": "MiniExcel.SaveAs(path, value,excelType:ExcelType.CSV, configuration: config);",
        "translatedContent": "MiniExcel.SaveAs(path, value,excelType:ExcelType.CSV, configuration: config);"
      },
      {
        "row": 15,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 125,
    "Content": "\n#### Read empty string as null\n\nBy default, empty values are mapped to string.Empty. You can modify this behavior\n",
    "ContentSha": "QRFcPkSotP24Of7ydird2F1cPXvwei/ngr47Y+/hSew=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### Leer cadena vacía como nulo\n\nDe forma predeterminada, los valores vacíos se asignan a string.Empty. Puede modificar este comportamiento\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### Leer cadena vacía como nulo"
      },
      {
        "row": 2,
        "rowsha": "o8PlWWngKL11rokdOYC0oSwLSoc7oYgE/Lfgv6Bd2/Q=",
        "originContent": "#### Read empty string as null",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "De forma predeterminada, los valores vacíos se asignan a string.Empty. Puede modificar este comportamiento"
      },
      {
        "row": 4,
        "rowsha": "eJDl6SZHq62Fd1LA2B5DadX0F+tDhBrMYCjSmJpG51k=",
        "originContent": "By default, empty values are mapped to string.Empty. You can modify this behavior",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 126,
    "Content": "```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n   ReadEmptyStringAsNull = true\n};\n```",
    "ContentSha": "7U48R/BDcuw7rKJnPsx9mWM/D0U35N/Y75DqmP1z57M=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n   ReadEmptyStringAsNull = true\n};\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "5r/vExWe6Rjeq4mEvJKt7mJBMqie0tv5fuv42SYAAG0=",
        "originContent": "var config = new MiniExcelLibs.Csv.CsvConfiguration()",
        "translatedContent": "var config = new MiniExcelLibs.Csv.CsvConfiguration()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "7IGIG4h5RoQerST3jbquuO3nRFcQejYNCjRmA+XTCCU=",
        "originContent": "   ReadEmptyStringAsNull = true",
        "translatedContent": "   ReadEmptyStringAsNull = true"
      },
      {
        "row": 5,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 6,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 127,
    "Content": "\n\n### DataReader\n\n#### 1. GetReader\nSince 1.23.0, you can GetDataReader\n",
    "ContentSha": "gsuxTCG/V0xZQIQlpdsjv0ZvdbRhRqUa5N3BaZsCqMk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### DataReader\n\n#### 1. GetReader\nDesde la versión 1.23.0, puede usar GetDataReader\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### DataReader"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "pYonY4+3FQGlx+vFvB1TM0+IZjXiKy3igkWXHw9eHG0=",
        "originContent": "### DataReader",
        "translatedContent": "#### 1. GetReader"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Desde la versión 1.23.0, puede usar GetDataReader"
      },
      {
        "row": 5,
        "rowsha": "LNEj7/GpzUgInsjpvQlzm0ZMWJBuxblYZlfKlRjBqSw=",
        "originContent": "#### 1. GetReader",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "QbkaBBfd3neTY++Qu97pp4d1axn/gDGXj60fgQ0n4ck=",
        "originContent": "Since 1.23.0, you can GetDataReader",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 128,
    "Content": "```csharp\n    using (var reader = MiniExcel.GetReader(path,true))\n    {\n        while (reader.Read())\n        {\n            for (int i = 0; i < reader.FieldCount; i++)\n            {\n                var value = reader.GetValue(i);\n            }\n        }\n    }\n```",
    "ContentSha": "TwpFHcMkEUOjNhWZKltlRgFTF8qqePEozR3bGDjktag=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n    using (var reader = MiniExcel.GetReader(path,true))\n    {\n        while (reader.Read())\n        {\n            for (int i = 0; i < reader.FieldCount; i++)\n            {\n                var value = reader.GetValue(i);\n            }\n        }\n    }\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "41LK3SqlUrIi/Ep+sFMrgmf4xF+rC0MBC1zzA1ycCDA=",
        "originContent": "    using (var reader = MiniExcel.GetReader(path,true))",
        "translatedContent": "    using (var reader = MiniExcel.GetReader(path,true))"
      },
      {
        "row": 3,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 4,
        "rowsha": "+pUfjPovM0eM9WEGH8YjoY1lpdxAiW7k+9DFPdt+ZD0=",
        "originContent": "        while (reader.Read())",
        "translatedContent": "        while (reader.Read())"
      },
      {
        "row": 5,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 6,
        "rowsha": "59ftZq8YKFDZUjagwz5ERGPMqW+mn3QYsT2t1xlFzks=",
        "originContent": "            for (int i = 0; i < reader.FieldCount; i++)",
        "translatedContent": "            for (int i = 0; i < reader.FieldCount; i++)"
      },
      {
        "row": 7,
        "rowsha": "eP03rcdD1du8iWcplsteDSugGG60x9rQBsnNT3AplAc=",
        "originContent": "            {",
        "translatedContent": "            {"
      },
      {
        "row": 8,
        "rowsha": "OMJtrvCKX3uf9Cd6rEi05VgET2SkF4u7vN2V7DjaAxI=",
        "originContent": "                var value = reader.GetValue(i);",
        "translatedContent": "                var value = reader.GetValue(i);"
      },
      {
        "row": 9,
        "rowsha": "hq/fcKlUNuiDqn/FwGoqsINxkFRDjxIY0V69ryh7S6w=",
        "originContent": "            }",
        "translatedContent": "            }"
      },
      {
        "row": 10,
        "rowsha": "KkQWgxjiJOH4MP6atiCqAN1Pez+xnvQ5mr9ZWTzwdW0=",
        "originContent": "        }",
        "translatedContent": "        }"
      },
      {
        "row": 11,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 12,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 129,
    "Content": "\n\n\n###  Async\n\n- v0.17.0 support Async (thanks isdaniel ( SHIH,BING-SIOU)](https://github.com/isdaniel))\n",
    "ContentSha": "PPo7xcbroD3W8lf1BZoB9MgfURhF9JKy4ksfe5e9joo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n\n\n###  Async\n\n- v0.17.0 soporta Async (gracias a isdaniel ( SHIH,BING-SIOU)](https://github.com/isdaniel))\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "kIEjw3oJHB2N0CZHivpJJBPx/7kuSKs7QJLTH9FAR5M=",
        "originContent": "###  Async",
        "translatedContent": "###  Async"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "dKLu0bVj9jfLh+sf2jK/Ra0yGjZRpcvKpebgQhe487o=",
        "originContent": "- v0.17.0 support Async (thanks isdaniel ( SHIH,BING-SIOU)](https://github.com/isdaniel))",
        "translatedContent": "- v0.17.0 soporta Async (gracias a isdaniel ( SHIH,BING-SIOU)](https://github.com/isdaniel))"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 130,
    "Content": "```csharp\npublic static Task SaveAsAsync(string path, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.UNKNOWN, IConfiguration configuration = null)\npublic static Task SaveAsAsync(this Stream stream, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.XLSX, IConfiguration configuration = null)\npublic static Task<IEnumerable<dynamic>> QueryAsync(string path, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task<IEnumerable<T>> QueryAsync<T>(this Stream stream, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<T>> QueryAsync<T>(string path, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<IDictionary<string, object>>> QueryAsync(this Stream stream, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task SaveAsByTemplateAsync(this Stream stream, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(this Stream stream, byte[] templateBytes, object value)\npublic static Task SaveAsByTemplateAsync(string path, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(string path, byte[] templateBytes, object value)\npublic static Task<DataTable> QueryAsDataTableAsync(string path, bool useHeaderRow = true, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\n```",
    "ContentSha": "6hjKfRLe64Z2ER4UwkfeYvOIPW3RFJOeTUOM88x00Xc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic static Task SaveAsAsync(string path, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.UNKNOWN, IConfiguration configuration = null)\npublic static Task SaveAsAsync(this Stream stream, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.XLSX, IConfiguration configuration = null)\npublic static Task<IEnumerable<dynamic>> QueryAsync(string path, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task<IEnumerable<T>> QueryAsync<T>(this Stream stream, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<T>> QueryAsync<T>(string path, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<IDictionary<string, object>>> QueryAsync(this Stream stream, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task SaveAsByTemplateAsync(this Stream stream, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(this Stream stream, byte[] templateBytes, object value)\npublic static Task SaveAsByTemplateAsync(string path, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(string path, byte[] templateBytes, object value)\npublic static Task<DataTable> QueryAsDataTableAsync(string path, bool useHeaderRow = true, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "T3Rsuys7pKqpAxJp6qULlxt9itW0lXk4i/1XtxGvI58=",
        "originContent": "public static Task SaveAsAsync(string path, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.UNKNOWN, IConfiguration configuration = null)",
        "translatedContent": "public static Task SaveAsAsync(string path, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.UNKNOWN, IConfiguration configuration = null)"
      },
      {
        "row": 3,
        "rowsha": "p8oC9WJ010bXUU+Qg9ic+MYt/1BW0qh2/OYpxceybl4=",
        "originContent": "public static Task SaveAsAsync(this Stream stream, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.XLSX, IConfiguration configuration = null)",
        "translatedContent": "public static Task SaveAsAsync(this Stream stream, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.XLSX, IConfiguration configuration = null)"
      },
      {
        "row": 4,
        "rowsha": "83KGJyKFItz+yHiBmEWU+URm6+JIu8Oc+5P4HxBhKY8=",
        "originContent": "public static Task<IEnumerable<dynamic>> QueryAsync(string path, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)",
        "translatedContent": "public static Task<IEnumerable<dynamic>> QueryAsync(string path, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)"
      },
      {
        "row": 5,
        "rowsha": "DG9F7XNIttQ3bEbBQCyPa3JRv+c56frxJHinBdbXWKs=",
        "originContent": "public static Task<IEnumerable<T>> QueryAsync<T>(this Stream stream, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()",
        "translatedContent": "public static Task<IEnumerable<T>> QueryAsync<T>(this Stream stream, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()"
      },
      {
        "row": 6,
        "rowsha": "gItCSyzrHXc6Cjc+YnMSvee8mbRJKwTZU8pnliW3yZ4=",
        "originContent": "public static Task<IEnumerable<T>> QueryAsync<T>(string path, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()",
        "translatedContent": "public static Task<IEnumerable<T>> QueryAsync<T>(string path, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()"
      },
      {
        "row": 7,
        "rowsha": "CstuN619+4zIP3BkIujXbeSVOYUxRhlGC/dqmaYpKIE=",
        "originContent": "public static Task<IEnumerable<IDictionary<string, object>>> QueryAsync(this Stream stream, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)",
        "translatedContent": "public static Task<IEnumerable<IDictionary<string, object>>> QueryAsync(this Stream stream, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)"
      },
      {
        "row": 8,
        "rowsha": "KQkdGPnx1WG1Z4tnEYgEWPdSEqXIti7LnwjWK/IeA6E=",
        "originContent": "public static Task SaveAsByTemplateAsync(this Stream stream, string templatePath, object value)",
        "translatedContent": "public static Task SaveAsByTemplateAsync(this Stream stream, string templatePath, object value)"
      },
      {
        "row": 9,
        "rowsha": "K/BUyTF77wCC/kPRyZneeOYgcGBn4eZFRVlx+p80yiI=",
        "originContent": "public static Task SaveAsByTemplateAsync(this Stream stream, byte[] templateBytes, object value)",
        "translatedContent": "public static Task SaveAsByTemplateAsync(this Stream stream, byte[] templateBytes, object value)"
      },
      {
        "row": 10,
        "rowsha": "SetnXl2jXpNSi3Be96MHjenGyf//s80b+5JAP1wu3i0=",
        "originContent": "public static Task SaveAsByTemplateAsync(string path, string templatePath, object value)",
        "translatedContent": "public static Task SaveAsByTemplateAsync(string path, string templatePath, object value)"
      },
      {
        "row": 11,
        "rowsha": "S9jc3CXnnDAGpGMQ/EW2+bcI9fLVry4KGlfWMTnk7GE=",
        "originContent": "public static Task SaveAsByTemplateAsync(string path, byte[] templateBytes, object value)",
        "translatedContent": "public static Task SaveAsByTemplateAsync(string path, byte[] templateBytes, object value)"
      },
      {
        "row": 12,
        "rowsha": "sHZPmOf7YFLwnYCzlDD7Pp49NQQzFlblWuH3+KVnpP4=",
        "originContent": "public static Task<DataTable> QueryAsDataTableAsync(string path, bool useHeaderRow = true, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)",
        "translatedContent": "public static Task<DataTable> QueryAsDataTableAsync(string path, bool useHeaderRow = true, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)"
      },
      {
        "row": 13,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 131,
    "Content": "\n-  v1.25.0 support `cancellationToken`。\n\n\n\n### Others\n\n#### 1. Enum\n\nBe sure excel & property name same, system will auto mapping (case insensitive)\n\n![image](https://user-images.githubusercontent.com/12729184/116210595-9784b100-a775-11eb-936f-8e7a8b435961.png)\n\nSince V0.18.0 support Enum Description\n",
    "ContentSha": "UqznKmIjKB2rS8268A33WVyfn9JAFBze2TkK1+MoTkc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 132,
    "Content": "```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n    public I49RYZUserType UserType { get; set; }\n}\n\npublic enum Type\n{\n    [Description(\"General User\")]\n    V1,\n    [Description(\"General Administrator\")]\n    V2,\n    [Description(\"Super Administrator\")]\n    V3\n}\n```",
    "ContentSha": "MWfrEGM2ishrNFZST0Jxpj09gTlJhjgs4aIxX0Icf10=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n    public I49RYZUserType UserType { get; set; }\n}\n\npublic enum Type\n{\n    [Description(\"General User\")]\n    V1,\n    [Description(\"General Administrator\")]\n    V2,\n    [Description(\"Super Administrator\")]\n    V3\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "V5rovqR1x5iamTW+3SSlBeFLlYNcSAV5EmL87uTcBIM=",
        "originContent": "public class Dto",
        "translatedContent": "public class Dto"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "I+HeTmsXHfkoFyvCRpVIXNEwM37IfwiQRH1OXTwlp4Q=",
        "originContent": "    public string Name { get; set; }",
        "translatedContent": "    public string Name { get; set; }"
      },
      {
        "row": 5,
        "rowsha": "GQeGYbszATouoB2AWitdlrGh5/Aa3IkJunqOBWRbBA0=",
        "originContent": "    public I49RYZUserType UserType { get; set; }",
        "translatedContent": "    public I49RYZUserType UserType { get; set; }"
      },
      {
        "row": 6,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "9Jnh2pdM+EA5x941hgeWM0TpMbb9nJIwUOM8yoSRla0=",
        "originContent": "public enum Type",
        "translatedContent": "public enum Type"
      },
      {
        "row": 9,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 10,
        "rowsha": "Flk1KNOtXln0mgqMTtXHz4ZSDbrxTzc8fGm9i+EQTuk=",
        "originContent": "    [Description(\"General User\")]",
        "translatedContent": "    [Description(\"General User\")]"
      },
      {
        "row": 11,
        "rowsha": "JVmNWCkWCzU8AXVuZ6m2FZCqQwdU6G1AwQ/hJOcL5bo=",
        "originContent": "    V1,",
        "translatedContent": "    V1,"
      },
      {
        "row": 12,
        "rowsha": "7X+HebS3LTLC5jyCk4/BjYKqxaEB5LO9Q/O4dPd6kX0=",
        "originContent": "    [Description(\"General Administrator\")]",
        "translatedContent": "    [Description(\"General Administrator\")]"
      },
      {
        "row": 13,
        "rowsha": "1XVDomNniWHlyMDbEB+TPkDn18wmE/uL8Do/pnzLMhU=",
        "originContent": "    V2,",
        "translatedContent": "    V2,"
      },
      {
        "row": 14,
        "rowsha": "CBQJwYiC46YObqWWU5vU58jAWpPE6OUd6UK/cKiWoEk=",
        "originContent": "    [Description(\"Super Administrator\")]",
        "translatedContent": "    [Description(\"Super Administrator\")]"
      },
      {
        "row": 15,
        "rowsha": "9BcOdIhMIkvnnXQ54++lYpklpVf9kkKRyC6giJefNfw=",
        "originContent": "    V3",
        "translatedContent": "    V3"
      },
      {
        "row": 16,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 17,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 133,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/133116630-27cc7161-099a-48b8-9784-cd1e443af3d1.png)\n\nSince 1.30.0 version support excel Description to Enum , thanks @KaneLeung\n\n#### 2. Convert CSV to XLSX or Convert XLSX to CSV\n",
    "ContentSha": "M4wLy8CiEFQZWP7oWHjfr93FPg2z5JOn1hjbrW9swI8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/133116630-27cc7161-099a-48b8-9784-cd1e443af3d1.png)\n\nDesde la versión 1.30.0 se admite la conversión de la descripción de Excel a Enum, gracias a @KaneLeung\n\n#### 2. Convertir CSV a XLSX o Convertir XLSX a CSV\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/133116630-27cc7161-099a-48b8-9784-cd1e443af3d1.png)"
      },
      {
        "row": 2,
        "rowsha": "Ww8Iaf8BfZRRVzxZHCHNOPtGQIXFWTbXhKjS2lsdppA=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/133116630-27cc7161-099a-48b8-9784-cd1e443af3d1.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Desde la versión 1.30.0 se admite la conversión de la descripción de Excel a Enum, gracias a @KaneLeung"
      },
      {
        "row": 4,
        "rowsha": "KOq4s3lS87tZSIm3XoFsNiGB8fc9N/BpUeeXNWF5wZs=",
        "originContent": "Since 1.30.0 version support excel Description to Enum , thanks @KaneLeung",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 2. Convertir CSV a XLSX o Convertir XLSX a CSV"
      },
      {
        "row": 6,
        "rowsha": "gJS9KeIS7OfSdsoHiM6KMliegomGs8BeT27676OfLUQ=",
        "originContent": "#### 2. Convert CSV to XLSX or Convert XLSX to CSV",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 134,
    "Content": "```csharp\nMiniExcel.ConvertXlsxToCsv(xlsxPath, csvPath);\nMiniExcel.ConvertXlsxToCsv(xlsxStream, csvStream);\nMiniExcel.ConvertCsvToXlsx(csvPath, xlsxPath);\nMiniExcel.ConvertCsvToXlsx(csvStream, xlsxStream);\n```",
    "ContentSha": "foaHCFUSykvx+N8uAAngiR3D4L1ukBm6QAwaA94FHMQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nMiniExcel.ConvertXlsxToCsv(xlsxPath, csvPath);\nMiniExcel.ConvertXlsxToCsv(xlsxStream, csvStream);\nMiniExcel.ConvertCsvToXlsx(csvPath, xlsxPath);\nMiniExcel.ConvertCsvToXlsx(csvStream, xlsxStream);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "ja8nrqKvvPuVYudbOR4hRkkZUPpX8kQfR0+xw5WOHPI=",
        "originContent": "MiniExcel.ConvertXlsxToCsv(xlsxPath, csvPath);",
        "translatedContent": "MiniExcel.ConvertXlsxToCsv(xlsxPath, csvPath);"
      },
      {
        "row": 3,
        "rowsha": "cHW48R6b9lkoMb+WUy+k67PhIRpauomSh7bmHQmMWX4=",
        "originContent": "MiniExcel.ConvertXlsxToCsv(xlsxStream, csvStream);",
        "translatedContent": "MiniExcel.ConvertXlsxToCsv(xlsxStream, csvStream);"
      },
      {
        "row": 4,
        "rowsha": "XlBXtamfduDnbMaw2EwIyC03qYZoJsXOKzShfSRFcRY=",
        "originContent": "MiniExcel.ConvertCsvToXlsx(csvPath, xlsxPath);",
        "translatedContent": "MiniExcel.ConvertCsvToXlsx(csvPath, xlsxPath);"
      },
      {
        "row": 5,
        "rowsha": "TnH76QMgjJCqJQkyiDfrp1M5GmbZqUUfS1EBzuJeUOA=",
        "originContent": "MiniExcel.ConvertCsvToXlsx(csvStream, xlsxStream);",
        "translatedContent": "MiniExcel.ConvertCsvToXlsx(csvStream, xlsxStream);"
      },
      {
        "row": 6,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 135,
    "Content": "```csharp\nusing (var excelStream = new FileStream(path: filePath, FileMode.Open, FileAccess.Read))\nusing (var csvStream = new MemoryStream())\n{\n   MiniExcel.ConvertXlsxToCsv(excelStream, csvStream);\n}\n```",
    "ContentSha": "sZ6yWSABFfKJPsqkxQdy3+DvMMrGoir2aOGq7gXORa4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nusing (var excelStream = new FileStream(path: filePath, FileMode.Open, FileAccess.Read))\nusing (var csvStream = new MemoryStream())\n{\n   MiniExcel.ConvertXlsxToCsv(excelStream, csvStream);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "m6rrSOyput+tp//WHNk9VLSFDQoFqz1sef0Krf3GMAk=",
        "originContent": "using (var excelStream = new FileStream(path: filePath, FileMode.Open, FileAccess.Read))",
        "translatedContent": "using (var excelStream = new FileStream(path: filePath, FileMode.Open, FileAccess.Read))"
      },
      {
        "row": 3,
        "rowsha": "kFh+KMwQ6HoODajGItFXB4SbT2SXoy1ur1Yj70rUuhY=",
        "originContent": "using (var csvStream = new MemoryStream())",
        "translatedContent": "using (var csvStream = new MemoryStream())"
      },
      {
        "row": 4,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 5,
        "rowsha": "dO/n53NDzmj2nDAtmufoNqDUzdSQuAfJRqbxHxCJzwY=",
        "originContent": "   MiniExcel.ConvertXlsxToCsv(excelStream, csvStream);",
        "translatedContent": "   MiniExcel.ConvertXlsxToCsv(excelStream, csvStream);"
      },
      {
        "row": 6,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 7,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 136,
    "Content": "\n#### 3. Custom CultureInfo\n\nSince 1.22.0, you can custom CultureInfo like below, system default `CultureInfo.InvariantCulture`.\n",
    "ContentSha": "g9KHjayEmoCmU4hQoSaCw3HMSCKbzxgtva73j6Zjq6w=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 3. CultureInfo personalizado\n\nDesde la versión 1.22.0, puedes personalizar CultureInfo como se muestra a continuación, el valor predeterminado del sistema es `CultureInfo.InvariantCulture`.\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 3. CultureInfo personalizado"
      },
      {
        "row": 2,
        "rowsha": "JoA47PBp61fQe3c3D78fjjgnOidJbk+/jXyOBPbBp4Y=",
        "originContent": "#### 3. Custom CultureInfo",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Desde la versión 1.22.0, puedes personalizar CultureInfo como se muestra a continuación, el valor predeterminado del sistema es `CultureInfo.InvariantCulture`."
      },
      {
        "row": 4,
        "rowsha": "AYu1f59dZzqm49p1P6YfyyHRTlJIVKeo07E7NuK/nJo=",
        "originContent": "Since 1.22.0, you can custom CultureInfo like below, system default `CultureInfo.InvariantCulture`.",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 137,
    "Content": "```csharp\nvar config = new CsvConfiguration()\n{\n    Culture = new CultureInfo(\"fr-FR\"),\n};\nMiniExcel.SaveAs(path, value, configuration: config);\n\n// or\nMiniExcel.Query(path, configuration: config);\n```",
    "ContentSha": "wzPN6FNGsi3byqF/W/tLlh2ypmaPmAGKeEGgqoaYwe0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar config = new CsvConfiguration()\n{\n    Culture = new CultureInfo(\"fr-FR\"),\n};\nMiniExcel.SaveAs(path, value, configuration: config);\n\n// or\nMiniExcel.Query(path, configuration: config);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "29tKlHbWj+hbqHUfPlXgbGF2WzUofVdteQECV6g7pDk=",
        "originContent": "var config = new CsvConfiguration()",
        "translatedContent": "var config = new CsvConfiguration()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "Avg/MgQm9ZomkB4RRxPl9hv0FDy2moX2zfu8bLCJnw0=",
        "originContent": "    Culture = new CultureInfo(\"fr-FR\"),",
        "translatedContent": "    Culture = new CultureInfo(\"fr-FR\"),"
      },
      {
        "row": 5,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 6,
        "rowsha": "l8zQqTSzgVlf2vDa2FuFWpIqiDVZEtsVcqvSOJ+u4+w=",
        "originContent": "MiniExcel.SaveAs(path, value, configuration: config);",
        "translatedContent": "MiniExcel.SaveAs(path, value, configuration: config);"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "U8nX4/7qeeOEVKc5G5zp7nhH9hdP7onP55ivPRofMTg=",
        "originContent": "// or",
        "translatedContent": "// or"
      },
      {
        "row": 9,
        "rowsha": "OwJXDVdhwW3LeLpQnoMgavrYOosrdnlpRhDroJdCDYc=",
        "originContent": "MiniExcel.Query(path, configuration: config);",
        "translatedContent": "MiniExcel.Query(path, configuration: config);"
      },
      {
        "row": 10,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 138,
    "Content": "\n\n#### 4. Custom Buffer Size",
    "ContentSha": "uOHCvbjoDRBQq5gKAwvxc8zUENtZeV2mxGQm3V91Puw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 4. Tamaño de Búfer Personalizado\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 4. Tamaño de Búfer Personalizado"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "teU5Mkk6vK5IsiRrQVEgtyQ/gBXM1ffiCYgGBRmhGuo=",
        "originContent": "#### 4. Custom Buffer Size",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 139,
    "Content": "```csharp\n    public abstract class Configuration : IConfiguration\n    {\n        public int BufferSize { get; set; } = 1024 * 512;\n    }\n```",
    "ContentSha": "SK1KbGmVJHJnCoT8cAhtY21BSYw3D0Ix8n5KV70Wy9I=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n    public abstract class Configuration : IConfiguration\n    {\n        public int BufferSize { get; set; } = 1024 * 512;\n    }\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "kWAGXm+4hg/Y8IMXJTFaQCf4ZGsKVZOO8dwrhNTafE8=",
        "originContent": "    public abstract class Configuration : IConfiguration",
        "translatedContent": "    public abstract class Configuration : IConfiguration"
      },
      {
        "row": 3,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 4,
        "rowsha": "zdUxXH6JeAX1K8W4FyW6lIO5ubXNxwWpB1VjOEGc4Z8=",
        "originContent": "        public int BufferSize { get; set; } = 1024 * 512;",
        "translatedContent": "        public int BufferSize { get; set; } = 1024 * 512;"
      },
      {
        "row": 5,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 6,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 140,
    "Content": "\n#### 5. FastMode\n\nSystem will not control memory, but you can get faster save speed.\n",
    "ContentSha": "NL9A3pN890W9hcAxzsbHy+Bd1mUIcDse8LbNQOUMTDs=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 5. ModoRápido\n\nEl sistema no controlará la memoria, pero puedes obtener una velocidad de guardado más rápida.\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 5. ModoRápido"
      },
      {
        "row": 2,
        "rowsha": "SlG3ReXoa1nvYFt+9jedL5SVwRVbiC2f3Kcv214Q+FA=",
        "originContent": "#### 5. FastMode",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "El sistema no controlará la memoria, pero puedes obtener una velocidad de guardado más rápida."
      },
      {
        "row": 4,
        "rowsha": "YbGqRgo2jOw1e15BFxUvHGVZtGaMAE8UW6b+GMG9cqE=",
        "originContent": "System will not control memory, but you can get faster save speed.",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 141,
    "Content": "```csharp\nvar config = new OpenXmlConfiguration() { FastMode = true };\nMiniExcel.SaveAs(path, reader,configuration:config);\n```",
    "ContentSha": "R+VyUxZOwpfyXU0cPGr4kMpdjen7XGwB8u6SUPhS44A=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar config = new OpenXmlConfiguration() { FastMode = true };\nMiniExcel.SaveAs(path, reader,configuration:config);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "Rv8zRLLwQKpo77NDKU6p4eVrXtSsjy8FpUYDEH7v2x8=",
        "originContent": "var config = new OpenXmlConfiguration() { FastMode = true };",
        "translatedContent": "var config = new OpenXmlConfiguration() { FastMode = true };"
      },
      {
        "row": 3,
        "rowsha": "HNwFPjKhHSBTr0TvfimO+gGyQ5A4gOO4U7Oh5W13SxU=",
        "originContent": "MiniExcel.SaveAs(path, reader,configuration:config);",
        "translatedContent": "MiniExcel.SaveAs(path, reader,configuration:config);"
      },
      {
        "row": 4,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 142,
    "Content": "\n#### 6. Batch Add Image (MiniExcel.AddPicture)\n\nPlease add pictures before batch generate rows data, or system will load large memory usage when calling AddPicture.\n",
    "ContentSha": "dD1YAk9BvNc3i3jz0u/kR+zqHQ2xo8zKsaPx/aDh3LQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 6. Añadir imagen en lote (MiniExcel.AddPicture)\n\nPor favor, añada las imágenes antes de generar los datos de las filas en lote, o el sistema utilizará mucha memoria al llamar a AddPicture.\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 6. Añadir imagen en lote (MiniExcel.AddPicture)"
      },
      {
        "row": 2,
        "rowsha": "6W5rM/Z3TXHefr6NYWqjbgorOuPB6McnYwqpwdstRjo=",
        "originContent": "#### 6. Batch Add Image (MiniExcel.AddPicture)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Por favor, añada las imágenes antes de generar los datos de las filas en lote, o el sistema utilizará mucha memoria al llamar a AddPicture."
      },
      {
        "row": 4,
        "rowsha": "u0hlMYOZymVYGRl8pfSMG8R2GqgEg/01QN4abVOeuSM=",
        "originContent": "Please add pictures before batch generate rows data, or system will load large memory usage when calling AddPicture.",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 143,
    "Content": "```csharp\nvar images = new[]\n{\n    new MiniExcelPicture\n    {\n        ImageBytes = File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\")),\n        SheetName = null, // default null is first sheet\n        CellAddress = \"C3\", // required\n    },\n    new MiniExcelPicture\n    {\n        ImageBytes = File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\")),\n        PictureType = \"image/png\", // default PictureType = image/png\n        SheetName = \"Demo\",\n        CellAddress = \"C9\", // required\n        WidthPx = 100,\n        HeightPx = 100,\n    },\n};\nMiniExcel.AddPicture(path, images);\n```",
    "ContentSha": "NEM5cnuhEQJzInMZ9gfXiLf71hKXT7hafQ1HI2ZPBus=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar images = new[]\n{\n    new MiniExcelPicture\n    {\n        ImageBytes = File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\")),\n        SheetName = null, // default null is first sheet\n        CellAddress = \"C3\", // required\n    },\n    new MiniExcelPicture\n    {\n        ImageBytes = File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\")),\n        PictureType = \"image/png\", // default PictureType = image/png\n        SheetName = \"Demo\",\n        CellAddress = \"C9\", // required\n        WidthPx = 100,\n        HeightPx = 100,\n    },\n};\nMiniExcel.AddPicture(path, images);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "5qDBwVrXQqy5/MC8xADMCLHr9uixsbmnAmwWIMM+D6I=",
        "originContent": "var images = new[]",
        "translatedContent": "var images = new[]"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "Ga0O5RQu3mcndVX/zOaF/JNrGoouTp84xIbCTc2BMkw=",
        "originContent": "    new MiniExcelPicture",
        "translatedContent": "    new MiniExcelPicture"
      },
      {
        "row": 5,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 6,
        "rowsha": "Enjo9dA/jQpXOo9edvSpQk6urrPAv8pgn7QrT2Hg+xg=",
        "originContent": "        ImageBytes = File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\")),",
        "translatedContent": "        ImageBytes = File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\")),"
      },
      {
        "row": 7,
        "rowsha": "MEiCZ67oyuqigX5+UVmwSL1MzaOnTq7apKQo+pQvdMg=",
        "originContent": "        SheetName = null, // default null is first sheet",
        "translatedContent": "        SheetName = null, // default null is first sheet"
      },
      {
        "row": 8,
        "rowsha": "obF8Xlug29nIyhvkV3HVkCtAWcfl3iH3KHR0dm10Ffk=",
        "originContent": "        CellAddress = \"C3\", // required",
        "translatedContent": "        CellAddress = \"C3\", // required"
      },
      {
        "row": 9,
        "rowsha": "WGNt2RaDM5CS9wC/Od2XzvCKt+GnXlriS9x94uzxbUA=",
        "originContent": "    },",
        "translatedContent": "    },"
      },
      {
        "row": 10,
        "rowsha": "Ga0O5RQu3mcndVX/zOaF/JNrGoouTp84xIbCTc2BMkw=",
        "originContent": "    new MiniExcelPicture",
        "translatedContent": "    new MiniExcelPicture"
      },
      {
        "row": 11,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 12,
        "rowsha": "sQMY0xas+r1jNYA+iMttYNYZDVrlRrQI8lD0UiNjs94=",
        "originContent": "        ImageBytes = File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\")),",
        "translatedContent": "        ImageBytes = File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\")),"
      },
      {
        "row": 13,
        "rowsha": "9+OMtrXOl7HckrjOBJDF6AqjxruGT/fQ8C9sdKQtvWY=",
        "originContent": "        PictureType = \"image/png\", // default PictureType = image/png",
        "translatedContent": "        PictureType = \"image/png\", // default PictureType = image/png"
      },
      {
        "row": 14,
        "rowsha": "fWFwKNskbxNZGFNCpVH0rgcl75GL4aXC3zEQ4J39pCs=",
        "originContent": "        SheetName = \"Demo\",",
        "translatedContent": "        SheetName = \"Demo\","
      },
      {
        "row": 15,
        "rowsha": "r3jaZfgYqg1WOQIK27X1XluG4GX15JLu2pOUmwd7QIk=",
        "originContent": "        CellAddress = \"C9\", // required",
        "translatedContent": "        CellAddress = \"C9\", // required"
      },
      {
        "row": 16,
        "rowsha": "CmHfDMxJAHMeRQgvRL1gGVEQ5HKlay0/OSx0kD04+zo=",
        "originContent": "        WidthPx = 100,",
        "translatedContent": "        WidthPx = 100,"
      },
      {
        "row": 17,
        "rowsha": "Mfrhy2BTNgmxGuBfGtGZTf7txAw+msdBfA/sIOArdCI=",
        "originContent": "        HeightPx = 100,",
        "translatedContent": "        HeightPx = 100,"
      },
      {
        "row": 18,
        "rowsha": "WGNt2RaDM5CS9wC/Od2XzvCKt+GnXlriS9x94uzxbUA=",
        "originContent": "    },",
        "translatedContent": "    },"
      },
      {
        "row": 19,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 20,
        "rowsha": "f+q+gYmOoF9M+UrJkhRJIelhAmHtN1Nf2UxSNoDGzw0=",
        "originContent": "MiniExcel.AddPicture(path, images);",
        "translatedContent": "MiniExcel.AddPicture(path, images);"
      },
      {
        "row": 21,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 144,
    "Content": "![Image](https://github.com/user-attachments/assets/19c4d241-9753-4ede-96c8-f810c1a22247)\n\n#### 7. Get Sheets Dimension\n",
    "ContentSha": "XUio8teriwppRwLPkcdZpWOlnjmwdsXQ2lQJ7AyLyWI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![Imagen](https://github.com/user-attachments/assets/19c4d241-9753-4ede-96c8-f810c1a22247)\n\n#### 7. Obtener dimensiones de las hojas\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "RAviswfeCuNBofciKiR9sXR6AOs9tKtwidtId5btOn4=",
        "originContent": "![Image](https://github.com/user-attachments/assets/19c4d241-9753-4ede-96c8-f810c1a22247)",
        "translatedContent": "![Imagen](https://github.com/user-attachments/assets/19c4d241-9753-4ede-96c8-f810c1a22247)"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "FGMC0yBhQxfKuOTizfrnqn3tIO7HcCdlz/ozTzVee4M=",
        "originContent": "#### 7. Get Sheets Dimension",
        "translatedContent": "#### 7. Obtener dimensiones de las hojas"
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 145,
    "Content": "```csharp\nvar dim = MiniExcel.GetSheetDimensions(path);\n```",
    "ContentSha": "gv+sgxE6CiefDl4FacFl1R3qMm4FrRq+sSyTGjVnhmM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar dim = MiniExcel.GetSheetDimensions(path);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "pYpAojIFxKZwqpbQspeBE7ahiMz3E9pdjw9OLF+yCEA=",
        "originContent": "var dim = MiniExcel.GetSheetDimensions(path);",
        "translatedContent": "var dim = MiniExcel.GetSheetDimensions(path);"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 146,
    "Content": "\n### Examples:\n\n#### 1. SQLite & Dapper `Large Size File` SQL Insert Avoid OOM\n\nnote : please don't call ToList/ToArray methods after Query, it'll load all data into memory\n",
    "ContentSha": "KaUG19+pXGuIIPd6pJLGl3rtHBURtP59a1XE2Qm7Ac4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 147,
    "Content": "```csharp\nusing (var connection = new SQLiteConnection(connectionString))\n{\n    connection.Open();\n    using (var transaction = connection.BeginTransaction())\n    using (var stream = File.OpenRead(path))\n    {\n       var rows = stream.Query();\n       foreach (var row in rows)\n             connection.Execute(\"insert into T (A,B) values (@A,@B)\", new { row.A, row.B }, transaction: transaction);\n       transaction.Commit();\n    }\n}\n```",
    "ContentSha": "Tz4qX43YGeWXdtMgJjk/wwhDeBxw0mUsawgx9c5PGsM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nusing (var connection = new SQLiteConnection(connectionString))\n{\n    connection.Open();\n    using (var transaction = connection.BeginTransaction())\n    using (var stream = File.OpenRead(path))\n    {\n       var rows = stream.Query();\n       foreach (var row in rows)\n             connection.Execute(\"insert into T (A,B) values (@A,@B)\", new { row.A, row.B }, transaction: transaction);\n       transaction.Commit();\n    }\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "z8+QZHpIqmbmYIeY7LvUE27qWFDwGV8CYgIMAEbVTko=",
        "originContent": "using (var connection = new SQLiteConnection(connectionString))",
        "translatedContent": "using (var connection = new SQLiteConnection(connectionString))"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "26KxToFR9yGb8zFWh7qvLTp00R0bBUE+M4UbjF6B41M=",
        "originContent": "    connection.Open();",
        "translatedContent": "    connection.Open();"
      },
      {
        "row": 5,
        "rowsha": "sUZlx546sPfopJFGTWJnI6oRAVkqDSIkuJzhAFA0odM=",
        "originContent": "    using (var transaction = connection.BeginTransaction())",
        "translatedContent": "    using (var transaction = connection.BeginTransaction())"
      },
      {
        "row": 6,
        "rowsha": "7kNkV64ltVMARGJyGIHj3F/umlhBvwqy7sPih/ZdmYE=",
        "originContent": "    using (var stream = File.OpenRead(path))",
        "translatedContent": "    using (var stream = File.OpenRead(path))"
      },
      {
        "row": 7,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 8,
        "rowsha": "DI1IRGsMo22ehO7eToEPzHW21+wg9K5TDCzXAqYc86o=",
        "originContent": "       var rows = stream.Query();",
        "translatedContent": "       var rows = stream.Query();"
      },
      {
        "row": 9,
        "rowsha": "PXvKjo7w7lQvg9RgNqHnJ0WJGun7W6K08BeSE12pUso=",
        "originContent": "       foreach (var row in rows)",
        "translatedContent": "       foreach (var row in rows)"
      },
      {
        "row": 10,
        "rowsha": "wlf7ZOvvW+COtrp+Uep4u70dqzGUwN+MrYhXkIxroxU=",
        "originContent": "             connection.Execute(\"insert into T (A,B) values (@A,@B)\", new { row.A, row.B }, transaction: transaction);",
        "translatedContent": "             connection.Execute(\"insert into T (A,B) values (@A,@B)\", new { row.A, row.B }, transaction: transaction);"
      },
      {
        "row": 11,
        "rowsha": "hCLEg0HXh7KT8cYTSiqCRfSuP3vkLoe8gnKB1Bje0zM=",
        "originContent": "       transaction.Commit();",
        "translatedContent": "       transaction.Commit();"
      },
      {
        "row": 12,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 13,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 14,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 148,
    "Content": "\nperformance:\n![image](https://user-images.githubusercontent.com/12729184/111072579-2dda7b80-8516-11eb-9843-c01a1edc88ec.png)\n\n\n\n\n\n#### 2. ASP.NET Core 3.1 or MVC 5 Download/Upload Excel Xlsx API Demo [Try it](https://raw.githubusercontent.com/mini-software/MiniExcel/master/tests/MiniExcel.Tests.AspNetCore)\n",
    "ContentSha": "TVfEx7ijHKCE74ICc3wAEv3dKsrUlB7PAN1JFNl49a8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 149,
    "Content": "```csharp\npublic class ApiController : Controller\n{\n    public IActionResult Index()\n    {\n        return new ContentResult\n        {\n            ContentType = \"text/html\",\n            StatusCode = (int)HttpStatusCode.OK,\n            Content = @\"<html><body>\n<a href='api/DownloadExcel'>DownloadExcel</a><br>\n<a href='api/DownloadExcelFromTemplatePath'>DownloadExcelFromTemplatePath</a><br>\n<a href='api/DownloadExcelFromTemplateBytes'>DownloadExcelFromTemplateBytes</a><br>\n<p>Upload Excel</p>\n<form method='post' enctype='multipart/form-data' action='/api/uploadexcel'>\n    <input type='file' name='excel'> <br>\n    <input type='submit' >\n</form>\n</body></html{{\"\n        };\n    }\n\n    public IActionResult DownloadExcel()\n    {\n        var values = new[] {\n            new { Column1 = \"MiniExcel\", Column2 = 1 },\n            new { Column1 = \"Github\", Column2 = 2}\n        };\n        var memoryStream = new MemoryStream();\n        memoryStream.SaveAs(values);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult DownloadExcelFromTemplatePath()\n    {\n        string templatePath = \"TestTemplateComplex.xlsx\";\n\n        Dictionary<string, object> value = new Dictionary<string, object>()\n        {\n            [\"title\"] = \"FooCompany\",\n            [\"managers\"] = new[] {\n                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(templatePath, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    private static Dictionary<string, Byte[]> TemplateBytesCache = new Dictionary<string, byte[]>();\n\n    static ApiController()\n    {\n        string templatePath = \"TestTemplateComplex.xlsx\";\n        byte[] bytes = System.IO.File.ReadAllBytes(templatePath);\n        TemplateBytesCache.Add(templatePath, bytes);\n    }\n\n    public IActionResult DownloadExcelFromTemplateBytes()\n    {\n        byte[] bytes = TemplateBytesCache[\"TestTemplateComplex.xlsx\"];\n\n        Dictionary<string, object> value = new Dictionary<string, object>()\n        {\n            [\"title\"] = \"FooCompany\",\n            [\"managers\"] = new[] {\n                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(bytes, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult UploadExcel(IFormFile excel)\n    {\n        var stream = new MemoryStream();\n        excel.CopyTo(stream);\n\n        foreach (var item in stream.Query(true))\n        {\n            // do your logic etc.\n        }\n\n        return Ok(\"File uploaded successfully\");\n    }\n}\n```",
    "ContentSha": "tcYTxxSWToy2aEgmtzE6XRFIewJ5VSIg/lg4/4xJXdg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic class ApiController : Controller\n{\n    public IActionResult Index()\n    {\n        return new ContentResult\n        {\n            ContentType = \"text/html\",\n            StatusCode = (int)HttpStatusCode.OK,\n            Content = @\"<html><body>\n<a href='api/DownloadExcel'>DownloadExcel</a><br>\n<a href='api/DownloadExcelFromTemplatePath'>DownloadExcelFromTemplatePath</a><br>\n<a href='api/DownloadExcelFromTemplateBytes'>DownloadExcelFromTemplateBytes</a><br>\n<p>Upload Excel</p>\n<form method='post' enctype='multipart/form-data' action='/api/uploadexcel'>\n    <input type='file' name='excel'> <br>\n    <input type='submit' >\n</form>\n</body></html{{\"\n        };\n    }\n\n    public IActionResult DownloadExcel()\n    {\n        var values = new[] {\n            new { Column1 = \"MiniExcel\", Column2 = 1 },\n            new { Column1 = \"Github\", Column2 = 2}\n        };\n        var memoryStream = new MemoryStream();\n        memoryStream.SaveAs(values);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult DownloadExcelFromTemplatePath()\n    {\n        string templatePath = \"TestTemplateComplex.xlsx\";\n\n        Dictionary<string, object> value = new Dictionary<string, object>()\n        {\n            [\"title\"] = \"FooCompany\",\n            [\"managers\"] = new[] {\n                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(templatePath, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    private static Dictionary<string, Byte[]> TemplateBytesCache = new Dictionary<string, byte[]>();\n\n    static ApiController()\n    {\n        string templatePath = \"TestTemplateComplex.xlsx\";\n        byte[] bytes = System.IO.File.ReadAllBytes(templatePath);\n        TemplateBytesCache.Add(templatePath, bytes);\n    }\n\n    public IActionResult DownloadExcelFromTemplateBytes()\n    {\n        byte[] bytes = TemplateBytesCache[\"TestTemplateComplex.xlsx\"];\n\n        Dictionary<string, object> value = new Dictionary<string, object>()\n        {\n            [\"title\"] = \"FooCompany\",\n            [\"managers\"] = new[] {\n                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(bytes, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult UploadExcel(IFormFile excel)\n    {\n        var stream = new MemoryStream();\n        excel.CopyTo(stream);\n\n        foreach (var item in stream.Query(true))\n        {\n            // do your logic etc.\n        }\n\n        return Ok(\"File uploaded successfully\");\n    }\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "1nKQrvsRPQu0souMmDsSDJeRZEJMyFl/sfn/Y0+pfAw=",
        "originContent": "public class ApiController : Controller",
        "translatedContent": "public class ApiController : Controller"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "HEZUOSF7k4hGeVt9kK4WQf/D94fX6wiV4xlgjBB/uao=",
        "originContent": "    public IActionResult Index()",
        "translatedContent": "    public IActionResult Index()"
      },
      {
        "row": 5,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 6,
        "rowsha": "PCMaBHkRkJCGPCmCxLHgU4VTr/tMbiJN9v0EXIjkuFo=",
        "originContent": "        return new ContentResult",
        "translatedContent": "        return new ContentResult"
      },
      {
        "row": 7,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 8,
        "rowsha": "J9x/VpcJFU/FvNCvpUyZiLsoCc3iI+0kJUFHjhppTQI=",
        "originContent": "            ContentType = \"text/html\",",
        "translatedContent": "            ContentType = \"text/html\","
      },
      {
        "row": 9,
        "rowsha": "W1XZdTBmdlYmwLMHHs06DikV9KoNQ4qTqo5POC+i3V4=",
        "originContent": "            StatusCode = (int)HttpStatusCode.OK,",
        "translatedContent": "            StatusCode = (int)HttpStatusCode.OK,"
      },
      {
        "row": 10,
        "rowsha": "D/YfQLjVoKQSBNTS9BZaOd4BZ3dMZYgk74nwlelRTqw=",
        "originContent": "            Content = @\"<html><body>",
        "translatedContent": "            Content = @\"<html><body>"
      },
      {
        "row": 11,
        "rowsha": "9yftEQtLQfLaltWNwmv3m7axdy2BBEb7bdU1/IYkNpc=",
        "originContent": "<a href='api/DownloadExcel'>DownloadExcel</a><br>",
        "translatedContent": "<a href='api/DownloadExcel'>DownloadExcel</a><br>"
      },
      {
        "row": 12,
        "rowsha": "LtwG4uS6iI+WHCVb5ZPuawDioHvtMM+WK9cUechzkXA=",
        "originContent": "<a href='api/DownloadExcelFromTemplatePath'>DownloadExcelFromTemplatePath</a><br>",
        "translatedContent": "<a href='api/DownloadExcelFromTemplatePath'>DownloadExcelFromTemplatePath</a><br>"
      },
      {
        "row": 13,
        "rowsha": "h1FXaLvh9bsRXmZ1EEfKJJ8Wc4uIsFb1EyJhjeoz0MA=",
        "originContent": "<a href='api/DownloadExcelFromTemplateBytes'>DownloadExcelFromTemplateBytes</a><br>",
        "translatedContent": "<a href='api/DownloadExcelFromTemplateBytes'>DownloadExcelFromTemplateBytes</a><br>"
      },
      {
        "row": 14,
        "rowsha": "SFHw5DLsqC1gF9mT0c279tje35AQ4tvXc9ajp7Zyt1g=",
        "originContent": "<p>Upload Excel</p>",
        "translatedContent": "<p>Upload Excel</p>"
      },
      {
        "row": 15,
        "rowsha": "2Mc/u0unk+gbA02hz1K3JGaxwaIqRwvk6WfuQkKP1/0=",
        "originContent": "<form method='post' enctype='multipart/form-data' action='/api/uploadexcel'>",
        "translatedContent": "<form method='post' enctype='multipart/form-data' action='/api/uploadexcel'>"
      },
      {
        "row": 16,
        "rowsha": "kTpMWhXoxQmRXb/6iG5M0l7ZcdxZBOWKQHKT587aUJk=",
        "originContent": "    <input type='file' name='excel'> <br>",
        "translatedContent": "    <input type='file' name='excel'> <br>"
      },
      {
        "row": 17,
        "rowsha": "tvUqEWk3gWxIxvJfH2Yj3TyOFeUI4aI7WGRZH5R5gFc=",
        "originContent": "    <input type='submit' >",
        "translatedContent": "    <input type='submit' >"
      },
      {
        "row": 18,
        "rowsha": "4Me7e3Lu7PwHNA9rzlh0F2ri6dE1UdLWpvNAnmbC+Mk=",
        "originContent": "</form>",
        "translatedContent": "</form>"
      },
      {
        "row": 19,
        "rowsha": "tohPzw4jq+cA+054+OwVwUzGTsrLgzuBUeLXpwoests=",
        "originContent": "</body></html{{\"",
        "translatedContent": "</body></html{{\""
      },
      {
        "row": 20,
        "rowsha": "8OSK9LfN3EMF8KXXcn/88MTQZvz8cJjzbAD9AoLmCFQ=",
        "originContent": "        };",
        "translatedContent": "        };"
      },
      {
        "row": 21,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 22,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 23,
        "rowsha": "QcV6BLAHsd9wknJz+UC1JZEPt4xWMhQY4hj5xKEIZeg=",
        "originContent": "    public IActionResult DownloadExcel()",
        "translatedContent": "    public IActionResult DownloadExcel()"
      },
      {
        "row": 24,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 25,
        "rowsha": "f1uKBM2zlnohrGcEv91eb8mf95Fkd3Ybwb94GpIZwu8=",
        "originContent": "        var values = new[] {",
        "translatedContent": "        var values = new[] {"
      },
      {
        "row": 26,
        "rowsha": "fBq1L1NnanV8bZut/lfFnOtBkWQEDGFyMPbetu7lQH8=",
        "originContent": "            new { Column1 = \"MiniExcel\", Column2 = 1 },",
        "translatedContent": "            new { Column1 = \"MiniExcel\", Column2 = 1 },"
      },
      {
        "row": 27,
        "rowsha": "ppbf67Au0DqR9oJbVdbuiffM+yjdBKLcvAtgeaY6m9g=",
        "originContent": "            new { Column1 = \"Github\", Column2 = 2}",
        "translatedContent": "            new { Column1 = \"Github\", Column2 = 2}"
      },
      {
        "row": 28,
        "rowsha": "8OSK9LfN3EMF8KXXcn/88MTQZvz8cJjzbAD9AoLmCFQ=",
        "originContent": "        };",
        "translatedContent": "        };"
      },
      {
        "row": 29,
        "rowsha": "18T7cifbS/OJvSZn0om/E6uurfED4v8KA4eq9+XolgM=",
        "originContent": "        var memoryStream = new MemoryStream();",
        "translatedContent": "        var memoryStream = new MemoryStream();"
      },
      {
        "row": 30,
        "rowsha": "UD+mBQD0APUj8S5w2G6CW3MjxG7GKtc/0tUFafnc4Jo=",
        "originContent": "        memoryStream.SaveAs(values);",
        "translatedContent": "        memoryStream.SaveAs(values);"
      },
      {
        "row": 31,
        "rowsha": "BXv8QfQJ7s3V6j5E4U2Cmr2XUTXUe1NIHY5IPkUj6go=",
        "originContent": "        memoryStream.Seek(0, SeekOrigin.Begin);",
        "translatedContent": "        memoryStream.Seek(0, SeekOrigin.Begin);"
      },
      {
        "row": 32,
        "rowsha": "bKiEZnsaL7e55+O+p7aR+u24f2xLW7WgiTS1Dc6K3A8=",
        "originContent": "        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")",
        "translatedContent": "        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")"
      },
      {
        "row": 33,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 34,
        "rowsha": "sf+BVgKWKV+BDbS9i/vuDVBnZkFCqkCRtehPTYaqFSo=",
        "originContent": "            FileDownloadName = \"demo.xlsx\"",
        "translatedContent": "            FileDownloadName = \"demo.xlsx\""
      },
      {
        "row": 35,
        "rowsha": "8OSK9LfN3EMF8KXXcn/88MTQZvz8cJjzbAD9AoLmCFQ=",
        "originContent": "        };",
        "translatedContent": "        };"
      },
      {
        "row": 36,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 37,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 38,
        "rowsha": "YccPaMuGRLuXAyAL+K7ZIo7BJcVH0IeJ/aKQe8VIOaU=",
        "originContent": "    public IActionResult DownloadExcelFromTemplatePath()",
        "translatedContent": "    public IActionResult DownloadExcelFromTemplatePath()"
      },
      {
        "row": 39,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 40,
        "rowsha": "FX3PJm4MLqqttIPhEiSIrSOrLRG2z9SDuCiGleNAYQ4=",
        "originContent": "        string templatePath = \"TestTemplateComplex.xlsx\";",
        "translatedContent": "        string templatePath = \"TestTemplateComplex.xlsx\";"
      },
      {
        "row": 41,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 42,
        "rowsha": "Gcm3ozl9fwtb2sfBeeQthVIxmWhbqavLTnOZ6tWZ69I=",
        "originContent": "        Dictionary<string, object> value = new Dictionary<string, object>()",
        "translatedContent": "        Dictionary<string, object> value = new Dictionary<string, object>()"
      },
      {
        "row": 43,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 44,
        "rowsha": "QZPeyEWUqjqgmZh3K3xN+GX/BhHf7FMNEjt4x4rLdh0=",
        "originContent": "            [\"title\"] = \"FooCompany\",",
        "translatedContent": "            [\"title\"] = \"FooCompany\","
      },
      {
        "row": 45,
        "rowsha": "BeeFTyPK2s1Lq3iLmAdla/JRixWZuZyvy+ljz/Xzi+c=",
        "originContent": "            [\"managers\"] = new[] {",
        "translatedContent": "            [\"managers\"] = new[] {"
      },
      {
        "row": 46,
        "rowsha": "bvFZ7/Vsg4r8iB/JsAPOwrEyowTk8JfRo0+HGJjWpf8=",
        "originContent": "                new {name=\"Jack\",department=\"HR\"},",
        "translatedContent": "                new {name=\"Jack\",department=\"HR\"},"
      },
      {
        "row": 47,
        "rowsha": "fohYXyDjkJwVyUZuD1hmCHNoMPWR7X9OgxyPChxQQj0=",
        "originContent": "                new {name=\"Loan\",department=\"IT\"}",
        "translatedContent": "                new {name=\"Loan\",department=\"IT\"}"
      },
      {
        "row": 48,
        "rowsha": "P3fk1ACushnjNcsFIQ6mOsZqw8QwPiBC8kSmiXXV5Eo=",
        "originContent": "            },",
        "translatedContent": "            },"
      },
      {
        "row": 49,
        "rowsha": "U4h6I+DNpE8IDz5ApAy2Hm9sWCkTx0QvED/uF04uPnw=",
        "originContent": "            [\"employees\"] = new[] {",
        "translatedContent": "            [\"employees\"] = new[] {"
      },
      {
        "row": 50,
        "rowsha": "OqOsc7meDnP7KwPkrWXTRNlP5X0VYPqdQPmfr9ZjzRM=",
        "originContent": "                new {name=\"Wade\",department=\"HR\"},",
        "translatedContent": "                new {name=\"Wade\",department=\"HR\"},"
      },
      {
        "row": 51,
        "rowsha": "xYTRunzJPQcys4cq+0jVNSIzp6rW5U57ingMlEoHEzg=",
        "originContent": "                new {name=\"Felix\",department=\"HR\"},",
        "translatedContent": "                new {name=\"Felix\",department=\"HR\"},"
      },
      {
        "row": 52,
        "rowsha": "zKR1OXP1no/I7J/mg3UOumu9Offtk8U2UnSw1iJSpKQ=",
        "originContent": "                new {name=\"Eric\",department=\"IT\"},",
        "translatedContent": "                new {name=\"Eric\",department=\"IT\"},"
      },
      {
        "row": 53,
        "rowsha": "FgnSH7n6LqbvsaSx0rlUgRN44SubSF4FrfGEM6z4iy4=",
        "originContent": "                new {name=\"Keaton\",department=\"IT\"}",
        "translatedContent": "                new {name=\"Keaton\",department=\"IT\"}"
      },
      {
        "row": 54,
        "rowsha": "hq/fcKlUNuiDqn/FwGoqsINxkFRDjxIY0V69ryh7S6w=",
        "originContent": "            }",
        "translatedContent": "            }"
      },
      {
        "row": 55,
        "rowsha": "8OSK9LfN3EMF8KXXcn/88MTQZvz8cJjzbAD9AoLmCFQ=",
        "originContent": "        };",
        "translatedContent": "        };"
      },
      {
        "row": 56,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 57,
        "rowsha": "IA7w6rWcbRZhZgo8A9boX8RYSYThUEs8RFjuytqRZrY=",
        "originContent": "        MemoryStream memoryStream = new MemoryStream();",
        "translatedContent": "        MemoryStream memoryStream = new MemoryStream();"
      },
      {
        "row": 58,
        "rowsha": "BXT0OoJFGebMsiJ2SgSeEhQpga7ab24CnlPSuY5FmFU=",
        "originContent": "        memoryStream.SaveAsByTemplate(templatePath, value);",
        "translatedContent": "        memoryStream.SaveAsByTemplate(templatePath, value);"
      },
      {
        "row": 59,
        "rowsha": "BXv8QfQJ7s3V6j5E4U2Cmr2XUTXUe1NIHY5IPkUj6go=",
        "originContent": "        memoryStream.Seek(0, SeekOrigin.Begin);",
        "translatedContent": "        memoryStream.Seek(0, SeekOrigin.Begin);"
      },
      {
        "row": 60,
        "rowsha": "bKiEZnsaL7e55+O+p7aR+u24f2xLW7WgiTS1Dc6K3A8=",
        "originContent": "        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")",
        "translatedContent": "        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")"
      },
      {
        "row": 61,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 62,
        "rowsha": "sf+BVgKWKV+BDbS9i/vuDVBnZkFCqkCRtehPTYaqFSo=",
        "originContent": "            FileDownloadName = \"demo.xlsx\"",
        "translatedContent": "            FileDownloadName = \"demo.xlsx\""
      },
      {
        "row": 63,
        "rowsha": "8OSK9LfN3EMF8KXXcn/88MTQZvz8cJjzbAD9AoLmCFQ=",
        "originContent": "        };",
        "translatedContent": "        };"
      },
      {
        "row": 64,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 65,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 66,
        "rowsha": "WKHWaHQhr2tqoX5pSQA9IWCG5FP3OUazbDNcYhCxDp0=",
        "originContent": "    private static Dictionary<string, Byte[]> TemplateBytesCache = new Dictionary<string, byte[]>();",
        "translatedContent": "    private static Dictionary<string, Byte[]> TemplateBytesCache = new Dictionary<string, byte[]>();"
      },
      {
        "row": 67,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 68,
        "rowsha": "aNyHEBINsjLz68LHUhf+oaP6Iizd84W1l3ZhgRG2R2k=",
        "originContent": "    static ApiController()",
        "translatedContent": "    static ApiController()"
      },
      {
        "row": 69,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 70,
        "rowsha": "FX3PJm4MLqqttIPhEiSIrSOrLRG2z9SDuCiGleNAYQ4=",
        "originContent": "        string templatePath = \"TestTemplateComplex.xlsx\";",
        "translatedContent": "        string templatePath = \"TestTemplateComplex.xlsx\";"
      },
      {
        "row": 71,
        "rowsha": "Eq6a7p0W75dIsCIR6jNKk8A3TD+/s5tmuowGT4iq05o=",
        "originContent": "        byte[] bytes = System.IO.File.ReadAllBytes(templatePath);",
        "translatedContent": "        byte[] bytes = System.IO.File.ReadAllBytes(templatePath);"
      },
      {
        "row": 72,
        "rowsha": "seKmIC6WLswXhM7fjAKPfzO7h7y93KLNtNbQMxKva+w=",
        "originContent": "        TemplateBytesCache.Add(templatePath, bytes);",
        "translatedContent": "        TemplateBytesCache.Add(templatePath, bytes);"
      },
      {
        "row": 73,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 74,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 75,
        "rowsha": "sSybwOZcfif43IRZQSNNgTfwnKFWlg2Dpidbq3/kHB0=",
        "originContent": "    public IActionResult DownloadExcelFromTemplateBytes()",
        "translatedContent": "    public IActionResult DownloadExcelFromTemplateBytes()"
      },
      {
        "row": 76,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 77,
        "rowsha": "Lq/xBSpl+ukhH47hJmwA4b+CTRYef2boN2/wrqVNjYI=",
        "originContent": "        byte[] bytes = TemplateBytesCache[\"TestTemplateComplex.xlsx\"];",
        "translatedContent": "        byte[] bytes = TemplateBytesCache[\"TestTemplateComplex.xlsx\"];"
      },
      {
        "row": 78,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 79,
        "rowsha": "Gcm3ozl9fwtb2sfBeeQthVIxmWhbqavLTnOZ6tWZ69I=",
        "originContent": "        Dictionary<string, object> value = new Dictionary<string, object>()",
        "translatedContent": "        Dictionary<string, object> value = new Dictionary<string, object>()"
      },
      {
        "row": 80,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 81,
        "rowsha": "QZPeyEWUqjqgmZh3K3xN+GX/BhHf7FMNEjt4x4rLdh0=",
        "originContent": "            [\"title\"] = \"FooCompany\",",
        "translatedContent": "            [\"title\"] = \"FooCompany\","
      },
      {
        "row": 82,
        "rowsha": "BeeFTyPK2s1Lq3iLmAdla/JRixWZuZyvy+ljz/Xzi+c=",
        "originContent": "            [\"managers\"] = new[] {",
        "translatedContent": "            [\"managers\"] = new[] {"
      },
      {
        "row": 83,
        "rowsha": "bvFZ7/Vsg4r8iB/JsAPOwrEyowTk8JfRo0+HGJjWpf8=",
        "originContent": "                new {name=\"Jack\",department=\"HR\"},",
        "translatedContent": "                new {name=\"Jack\",department=\"HR\"},"
      },
      {
        "row": 84,
        "rowsha": "fohYXyDjkJwVyUZuD1hmCHNoMPWR7X9OgxyPChxQQj0=",
        "originContent": "                new {name=\"Loan\",department=\"IT\"}",
        "translatedContent": "                new {name=\"Loan\",department=\"IT\"}"
      },
      {
        "row": 85,
        "rowsha": "P3fk1ACushnjNcsFIQ6mOsZqw8QwPiBC8kSmiXXV5Eo=",
        "originContent": "            },",
        "translatedContent": "            },"
      },
      {
        "row": 86,
        "rowsha": "U4h6I+DNpE8IDz5ApAy2Hm9sWCkTx0QvED/uF04uPnw=",
        "originContent": "            [\"employees\"] = new[] {",
        "translatedContent": "            [\"employees\"] = new[] {"
      },
      {
        "row": 87,
        "rowsha": "OqOsc7meDnP7KwPkrWXTRNlP5X0VYPqdQPmfr9ZjzRM=",
        "originContent": "                new {name=\"Wade\",department=\"HR\"},",
        "translatedContent": "                new {name=\"Wade\",department=\"HR\"},"
      },
      {
        "row": 88,
        "rowsha": "xYTRunzJPQcys4cq+0jVNSIzp6rW5U57ingMlEoHEzg=",
        "originContent": "                new {name=\"Felix\",department=\"HR\"},",
        "translatedContent": "                new {name=\"Felix\",department=\"HR\"},"
      },
      {
        "row": 89,
        "rowsha": "zKR1OXP1no/I7J/mg3UOumu9Offtk8U2UnSw1iJSpKQ=",
        "originContent": "                new {name=\"Eric\",department=\"IT\"},",
        "translatedContent": "                new {name=\"Eric\",department=\"IT\"},"
      },
      {
        "row": 90,
        "rowsha": "FgnSH7n6LqbvsaSx0rlUgRN44SubSF4FrfGEM6z4iy4=",
        "originContent": "                new {name=\"Keaton\",department=\"IT\"}",
        "translatedContent": "                new {name=\"Keaton\",department=\"IT\"}"
      },
      {
        "row": 91,
        "rowsha": "hq/fcKlUNuiDqn/FwGoqsINxkFRDjxIY0V69ryh7S6w=",
        "originContent": "            }",
        "translatedContent": "            }"
      },
      {
        "row": 92,
        "rowsha": "8OSK9LfN3EMF8KXXcn/88MTQZvz8cJjzbAD9AoLmCFQ=",
        "originContent": "        };",
        "translatedContent": "        };"
      },
      {
        "row": 93,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 94,
        "rowsha": "IA7w6rWcbRZhZgo8A9boX8RYSYThUEs8RFjuytqRZrY=",
        "originContent": "        MemoryStream memoryStream = new MemoryStream();",
        "translatedContent": "        MemoryStream memoryStream = new MemoryStream();"
      },
      {
        "row": 95,
        "rowsha": "5cp+eJATcN4n+//AApusu/H6fuXU9vRJjEjnbkFJT8c=",
        "originContent": "        memoryStream.SaveAsByTemplate(bytes, value);",
        "translatedContent": "        memoryStream.SaveAsByTemplate(bytes, value);"
      },
      {
        "row": 96,
        "rowsha": "BXv8QfQJ7s3V6j5E4U2Cmr2XUTXUe1NIHY5IPkUj6go=",
        "originContent": "        memoryStream.Seek(0, SeekOrigin.Begin);",
        "translatedContent": "        memoryStream.Seek(0, SeekOrigin.Begin);"
      },
      {
        "row": 97,
        "rowsha": "bKiEZnsaL7e55+O+p7aR+u24f2xLW7WgiTS1Dc6K3A8=",
        "originContent": "        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")",
        "translatedContent": "        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")"
      },
      {
        "row": 98,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 99,
        "rowsha": "sf+BVgKWKV+BDbS9i/vuDVBnZkFCqkCRtehPTYaqFSo=",
        "originContent": "            FileDownloadName = \"demo.xlsx\"",
        "translatedContent": "            FileDownloadName = \"demo.xlsx\""
      },
      {
        "row": 100,
        "rowsha": "8OSK9LfN3EMF8KXXcn/88MTQZvz8cJjzbAD9AoLmCFQ=",
        "originContent": "        };",
        "translatedContent": "        };"
      },
      {
        "row": 101,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 102,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 103,
        "rowsha": "w/n5erry1tK+b7IlSstPIKTIGK416LJfofVYdA5ARaw=",
        "originContent": "    public IActionResult UploadExcel(IFormFile excel)",
        "translatedContent": "    public IActionResult UploadExcel(IFormFile excel)"
      },
      {
        "row": 104,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 105,
        "rowsha": "8bxSFikwHVjg36eNlQlZWbzAqS8GBxJt0684kdUQxOA=",
        "originContent": "        var stream = new MemoryStream();",
        "translatedContent": "        var stream = new MemoryStream();"
      },
      {
        "row": 106,
        "rowsha": "kQSGzuP1MW/2p2KiNOctHBaqgu9Y8ccJm0B82ghqMN8=",
        "originContent": "        excel.CopyTo(stream);",
        "translatedContent": "        excel.CopyTo(stream);"
      },
      {
        "row": 107,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 108,
        "rowsha": "zspQhD6tiz1Nwwx8wV5VV2Xa5xyJQUq71JbsZMhuVhM=",
        "originContent": "        foreach (var item in stream.Query(true))",
        "translatedContent": "        foreach (var item in stream.Query(true))"
      },
      {
        "row": 109,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 110,
        "rowsha": "8fWrTvebsPNriKKE8FF8i5Ja0174p7E/3X/Lrgt1bDA=",
        "originContent": "            // do your logic etc.",
        "translatedContent": "            // do your logic etc."
      },
      {
        "row": 111,
        "rowsha": "KkQWgxjiJOH4MP6atiCqAN1Pez+xnvQ5mr9ZWTzwdW0=",
        "originContent": "        }",
        "translatedContent": "        }"
      },
      {
        "row": 112,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 113,
        "rowsha": "9EE+Ca3kbRM1GgYDgPYKztMTGEWoTcGOaVAZX4VFPwA=",
        "originContent": "        return Ok(\"File uploaded successfully\");",
        "translatedContent": "        return Ok(\"File uploaded successfully\");"
      },
      {
        "row": 114,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 115,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 116,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 150,
    "Content": "\n####  3. Paging Query\n",
    "ContentSha": "K3Nzu57bx/BiR6ek9V6m65QRGHBTzBOCuRbZxCt4CXU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "####  3. Consulta de paginación\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "####  3. Consulta de paginación"
      },
      {
        "row": 2,
        "rowsha": "7xyTCJce3vJWxxsBZH61jn5wTSUI/69HEME9Z6qR2Co=",
        "originContent": "####  3. Paging Query",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 151,
    "Content": "```csharp\nvoid Main()\n{\n    var rows = MiniExcel.Query(path);\n\n    Console.WriteLine(\"==== No.1 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:1));\n    Console.WriteLine(\"==== No.50 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:50));\n    Console.WriteLine(\"==== No.5000 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:5000));\n}\n\npublic static IEnumerable<T> Page<T>(IEnumerable<T> en, int pageSize, int page)\n{\n    return en.Skip(page * pageSize).Take(pageSize);\n}\n```",
    "ContentSha": "DA/be4TrD8nAX+dlfL4KC+Vd8AAA1CprkY0r8LvAeG4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvoid Main()\n{\n    var rows = MiniExcel.Query(path);\n\n    Console.WriteLine(\"==== No.1 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:1));\n    Console.WriteLine(\"==== No.50 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:50));\n    Console.WriteLine(\"==== No.5000 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:5000));\n}\n\npublic static IEnumerable<T> Page<T>(IEnumerable<T> en, int pageSize, int page)\n{\n    return en.Skip(page * pageSize).Take(pageSize);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "BJXio2Np7u6x5y2p3o++v55qLl4yPtvfU9GOASjUNhE=",
        "originContent": "void Main()",
        "translatedContent": "void Main()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "r5xWrR3hCEjUAfrxuTjZgg/yS7YDx0WTL1KG92aOEcg=",
        "originContent": "    var rows = MiniExcel.Query(path);",
        "translatedContent": "    var rows = MiniExcel.Query(path);"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "ZPlR04oxbTIF4Jr3Mhrw7tRjOiot+uBW6PdMpNDf2kI=",
        "originContent": "    Console.WriteLine(\"==== No.1 Page ====\");",
        "translatedContent": "    Console.WriteLine(\"==== No.1 Page ====\");"
      },
      {
        "row": 7,
        "rowsha": "syVDXtbL2CksNWlPxXY5syNcdTQZ8QSTyCmvWHo+FN8=",
        "originContent": "    Console.WriteLine(Page(rows,pageSize:3,page:1));",
        "translatedContent": "    Console.WriteLine(Page(rows,pageSize:3,page:1));"
      },
      {
        "row": 8,
        "rowsha": "6QXC7efm3DX1sHeOC7cHxLtl1ALFcuKT9dDlM4Wd+Oo=",
        "originContent": "    Console.WriteLine(\"==== No.50 Page ====\");",
        "translatedContent": "    Console.WriteLine(\"==== No.50 Page ====\");"
      },
      {
        "row": 9,
        "rowsha": "d61RE6lr2/moRNuVjPp4/y13j3wLsUEcb5HE9c/1RMA=",
        "originContent": "    Console.WriteLine(Page(rows,pageSize:3,page:50));",
        "translatedContent": "    Console.WriteLine(Page(rows,pageSize:3,page:50));"
      },
      {
        "row": 10,
        "rowsha": "jdswYYi9TJXGLE0Ik/ATLgaOP2f15OdVNVscbG6/UNs=",
        "originContent": "    Console.WriteLine(\"==== No.5000 Page ====\");",
        "translatedContent": "    Console.WriteLine(\"==== No.5000 Page ====\");"
      },
      {
        "row": 11,
        "rowsha": "/3ZbNPvVy/H1XdW/3Fx3YA/I5UksbiE+omOzmeXhVLQ=",
        "originContent": "    Console.WriteLine(Page(rows,pageSize:3,page:5000));",
        "translatedContent": "    Console.WriteLine(Page(rows,pageSize:3,page:5000));"
      },
      {
        "row": 12,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "fmOGIyFS7JvCn0+24jBGgCeH/aqGKW48zvpr3DKjCiI=",
        "originContent": "public static IEnumerable<T> Page<T>(IEnumerable<T> en, int pageSize, int page)",
        "translatedContent": "public static IEnumerable<T> Page<T>(IEnumerable<T> en, int pageSize, int page)"
      },
      {
        "row": 15,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 16,
        "rowsha": "0iOsCrXvMmcVC2I5kUmShn2ITrDjK5s/H76f9UqKSEQ=",
        "originContent": "    return en.Skip(page * pageSize).Take(pageSize);",
        "translatedContent": "    return en.Skip(page * pageSize).Take(pageSize);"
      },
      {
        "row": 17,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 18,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 152,
    "Content": "\n![20210419](https://user-images.githubusercontent.com/12729184/114679083-6ef4c400-9d3e-11eb-9f78-a86daa45fe46.gif)\n\n\n\n#### 4. WebForm export Excel by memorystream\n",
    "ContentSha": "VjuuD1+jJ0mxRN+X+FpHIa7+xAnlJK4TseQzQt3FRRk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![20210419](https://user-images.githubusercontent.com/12729184/114679083-6ef4c400-9d3e-11eb-9f78-a86daa45fe46.gif)\n\n\n\n#### 4. Exportación de Excel en WebForm mediante memorystream\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![20210419](https://user-images.githubusercontent.com/12729184/114679083-6ef4c400-9d3e-11eb-9f78-a86daa45fe46.gif)"
      },
      {
        "row": 2,
        "rowsha": "MevWh1oW50y3AJ+wVxkv4wCFakO+Rj+Npi/nqYucD/4=",
        "originContent": "![20210419](https://user-images.githubusercontent.com/12729184/114679083-6ef4c400-9d3e-11eb-9f78-a86daa45fe46.gif)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 4. Exportación de Excel en WebForm mediante memorystream"
      },
      {
        "row": 6,
        "rowsha": "lVzZh5Z72YXx8ht8JJKm2cELzB7fq5JGkrbkc7W6jD4=",
        "originContent": "#### 4. WebForm export Excel by memorystream",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 153,
    "Content": "```csharp\nvar fileName = \"Demo.xlsx\";\nvar sheetName = \"Sheet1\";\nHttpResponse response = HttpContext.Current.Response;\nresponse.Clear();\nresponse.ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\nresponse.AddHeader(\"Content-Disposition\", $\"attachment;filename=\\\"{fileName}\\\"\");\nvar values = new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n};\nvar memoryStream = new MemoryStream();\nmemoryStream.SaveAs(values, sheetName: sheetName);\nmemoryStream.Seek(0, SeekOrigin.Begin);\nmemoryStream.CopyTo(Response.OutputStream);\nresponse.End();\n```",
    "ContentSha": "VUXj5jWbUYiJBB3tU6vqVJDcpqyL1yvYFOcZX5H+ebw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar fileName = \"Demo.xlsx\";\nvar sheetName = \"Sheet1\";\nHttpResponse response = HttpContext.Current.Response;\nresponse.Clear();\nresponse.ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\nresponse.AddHeader(\"Content-Disposition\", $\"attachment;filename=\\\"{fileName}\\\"\");\nvar values = new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n};\nvar memoryStream = new MemoryStream();\nmemoryStream.SaveAs(values, sheetName: sheetName);\nmemoryStream.Seek(0, SeekOrigin.Begin);\nmemoryStream.CopyTo(Response.OutputStream);\nresponse.End();\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "k7vuAL9T9A8kivRZQjJcxV4SPJZbDfF+WEKtyGDe24M=",
        "originContent": "var fileName = \"Demo.xlsx\";",
        "translatedContent": "var fileName = \"Demo.xlsx\";"
      },
      {
        "row": 3,
        "rowsha": "lJdPtWS0hKv5q3mfYwqbHkO29pX/2idEs4jlilvEgRA=",
        "originContent": "var sheetName = \"Sheet1\";",
        "translatedContent": "var sheetName = \"Sheet1\";"
      },
      {
        "row": 4,
        "rowsha": "YD300SCjcqdyH480AvgcstR3t33jF1J3HyFDQn17YwM=",
        "originContent": "HttpResponse response = HttpContext.Current.Response;",
        "translatedContent": "HttpResponse response = HttpContext.Current.Response;"
      },
      {
        "row": 5,
        "rowsha": "3YoO0uOrxhSNKKRNFBCzj8kd2CszNNJvyCsb39eBOqI=",
        "originContent": "response.Clear();",
        "translatedContent": "response.Clear();"
      },
      {
        "row": 6,
        "rowsha": "ycxZWZV+ct5iifXyqvL35A/46T0vunwDbK6cJRTSHtE=",
        "originContent": "response.ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";",
        "translatedContent": "response.ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";"
      },
      {
        "row": 7,
        "rowsha": "eRf0LHYufdGcNu2VLNnsu/XRq5aVQ6nq1pW64dcwhCs=",
        "originContent": "response.AddHeader(\"Content-Disposition\", $\"attachment;filename=\\\"{fileName}\\\"\");",
        "translatedContent": "response.AddHeader(\"Content-Disposition\", $\"attachment;filename=\\\"{fileName}\\\"\");"
      },
      {
        "row": 8,
        "rowsha": "FwqPN1RymmvR7olWb2tz2qEYeC2gJNc1NNRxOchC1eU=",
        "originContent": "var values = new[] {",
        "translatedContent": "var values = new[] {"
      },
      {
        "row": 9,
        "rowsha": "vD8oGySouu9HDLHEP9MW+qnj6TH5Igbmi5tDOe4afgM=",
        "originContent": "    new { Column1 = \"MiniExcel\", Column2 = 1 },",
        "translatedContent": "    new { Column1 = \"MiniExcel\", Column2 = 1 },"
      },
      {
        "row": 10,
        "rowsha": "4G8es8bYJ49a+ytFKN8mxo5NsZmpMhkMlHscBGNcpLg=",
        "originContent": "    new { Column1 = \"Github\", Column2 = 2}",
        "translatedContent": "    new { Column1 = \"Github\", Column2 = 2}"
      },
      {
        "row": 11,
        "rowsha": "3zmC/WEBc1mSQfypPHyGZoP1j1QeztHCCYECFFR3Fkw=",
        "originContent": "};",
        "translatedContent": "};"
      },
      {
        "row": 12,
        "rowsha": "yW2jzChfBU626C8rVia8x8cJViW+gxnMDHMDaofV/w8=",
        "originContent": "var memoryStream = new MemoryStream();",
        "translatedContent": "var memoryStream = new MemoryStream();"
      },
      {
        "row": 13,
        "rowsha": "KtdPFOMtrgDHqerVfQ7be/glLsH1PK+XcoSZfQn/Aww=",
        "originContent": "memoryStream.SaveAs(values, sheetName: sheetName);",
        "translatedContent": "memoryStream.SaveAs(values, sheetName: sheetName);"
      },
      {
        "row": 14,
        "rowsha": "wWt3qdDhdCmXYkEY8SNL6a2iQXBhoIawWci/9rizz5U=",
        "originContent": "memoryStream.Seek(0, SeekOrigin.Begin);",
        "translatedContent": "memoryStream.Seek(0, SeekOrigin.Begin);"
      },
      {
        "row": 15,
        "rowsha": "PbWIZLwvu8Wv5WeJlmLfsNCYV1nWlEiJH2JldN4nsrQ=",
        "originContent": "memoryStream.CopyTo(Response.OutputStream);",
        "translatedContent": "memoryStream.CopyTo(Response.OutputStream);"
      },
      {
        "row": 16,
        "rowsha": "pxmXoO9hl8m/hw2SbyxqSJIexY3agKobXO7pbU1t0q4=",
        "originContent": "response.End();",
        "translatedContent": "response.End();"
      },
      {
        "row": 17,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 154,
    "Content": "\n\n\n#### 5. Dynamic i18n multi-language and role authority management\n\nLike the example, create a method to handle i18n and permission management, and use `yield return to return IEnumerable<Dictionary<string, object>>` to achieve dynamic and low-memory processing effects\n",
    "ContentSha": "5wFDAbGjv8nxMqrUfVUhQqnuoEYgZXej2SINOCAUPeQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 155,
    "Content": "```csharp\nvoid Main()\n{\n    var value = new Order[] {\n        new Order(){OrderNo = \"SO01\",CustomerID=\"C001\",ProductID=\"P001\",Qty=100,Amt=500},\n        new Order(){OrderNo = \"SO02\",CustomerID=\"C002\",ProductID=\"P002\",Qty=300,Amt=400},\n    };\n\n    Console.WriteLine(\"en-Us and Sales role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"en-US\";\n        var role = \"Sales\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));\n        MiniExcel.Query(path, true).Dump();\n    }\n\n    Console.WriteLine(\"zh-CN and PMC role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"zh-CN\";\n        var role = \"PMC\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));\n        MiniExcel.Query(path, true).Dump();\n    }\n}\n\nprivate IEnumerable<Dictionary<string, object>> GetOrders(string lang, string role, Order[] orders)\n{\n    foreach (var order in orders)\n    {\n        var newOrder = new Dictionary<string, object>();\n\n        if (lang == \"zh-CN\")\n        {\n            newOrder.Add(\"客户编号\", order.CustomerID);\n            newOrder.Add(\"订单编号\", order.OrderNo);\n            newOrder.Add(\"产品编号\", order.ProductID);\n            newOrder.Add(\"数量\", order.Qty);\n            if (role == \"Sales\")\n                newOrder.Add(\"价格\", order.Amt);\n            yield return newOrder;\n        }\n        else if (lang == \"en-US\")\n        {\n            newOrder.Add(\"Customer ID\", order.CustomerID);\n            newOrder.Add(\"Order No\", order.OrderNo);\n            newOrder.Add(\"Product ID\", order.ProductID);\n            newOrder.Add(\"Quantity\", order.Qty);\n            if (role == \"Sales\")\n                newOrder.Add(\"Amount\", order.Amt);\n            yield return newOrder;\n        }\n        else\n        {\n            throw new InvalidDataException($\"lang {lang} wrong\");\n        }\n    }\n}\n\npublic class Order\n{\n    public string OrderNo { get; set; }\n    public string CustomerID { get; set; }\n    public decimal Qty { get; set; }\n    public string ProductID { get; set; }\n    public decimal Amt { get; set; }\n}\n```",
    "ContentSha": "IjHJAf6qNGTnLyrdybwDtXW8anXg2ud2EPUFZBKLrT4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvoid Main()\n{\n    var value = new Order[] {\n        new Order(){OrderNo = \"SO01\",CustomerID=\"C001\",ProductID=\"P001\",Qty=100,Amt=500},\n        new Order(){OrderNo = \"SO02\",CustomerID=\"C002\",ProductID=\"P002\",Qty=300,Amt=400},\n    };\n\n    Console.WriteLine(\"en-Us and Sales role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"en-US\";\n        var role = \"Sales\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));\n        MiniExcel.Query(path, true).Dump();\n    }\n\n    Console.WriteLine(\"zh-CN and PMC role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"zh-CN\";\n        var role = \"PMC\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));\n        MiniExcel.Query(path, true).Dump();\n    }\n}\n\nprivate IEnumerable<Dictionary<string, object>> GetOrders(string lang, string role, Order[] orders)\n{\n    foreach (var order in orders)\n    {\n        var newOrder = new Dictionary<string, object>();\n\n        if (lang == \"zh-CN\")\n        {\n            newOrder.Add(\"客户编号\", order.CustomerID);\n            newOrder.Add(\"订单编号\", order.OrderNo);\n            newOrder.Add(\"产品编号\", order.ProductID);\n            newOrder.Add(\"数量\", order.Qty);\n            if (role == \"Sales\")\n                newOrder.Add(\"价格\", order.Amt);\n            yield return newOrder;\n        }\n        else if (lang == \"en-US\")\n        {\n            newOrder.Add(\"Customer ID\", order.CustomerID);\n            newOrder.Add(\"Order No\", order.OrderNo);\n            newOrder.Add(\"Product ID\", order.ProductID);\n            newOrder.Add(\"Quantity\", order.Qty);\n            if (role == \"Sales\")\n                newOrder.Add(\"Amount\", order.Amt);\n            yield return newOrder;\n        }\n        else\n        {\n            throw new InvalidDataException($\"lang {lang} wrong\");\n        }\n    }\n}\n\npublic class Order\n{\n    public string OrderNo { get; set; }\n    public string CustomerID { get; set; }\n    public decimal Qty { get; set; }\n    public string ProductID { get; set; }\n    public decimal Amt { get; set; }\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "BJXio2Np7u6x5y2p3o++v55qLl4yPtvfU9GOASjUNhE=",
        "originContent": "void Main()",
        "translatedContent": "void Main()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "ivnxCa8UMuUet3QcYFdIYi9zug4wBQli7VCMcM3fPLM=",
        "originContent": "    var value = new Order[] {",
        "translatedContent": "    var value = new Order[] {"
      },
      {
        "row": 5,
        "rowsha": "IHjKYpkL3LWoMXqBgm8F+9vgYumfBt5aAEdITXvVPqk=",
        "originContent": "        new Order(){OrderNo = \"SO01\",CustomerID=\"C001\",ProductID=\"P001\",Qty=100,Amt=500},",
        "translatedContent": "        new Order(){OrderNo = \"SO01\",CustomerID=\"C001\",ProductID=\"P001\",Qty=100,Amt=500},"
      },
      {
        "row": 6,
        "rowsha": "LWZDEKfmOJq+O0iOTJNyIGkTVDI1FkpxFvmEm8cU2mo=",
        "originContent": "        new Order(){OrderNo = \"SO02\",CustomerID=\"C002\",ProductID=\"P002\",Qty=300,Amt=400},",
        "translatedContent": "        new Order(){OrderNo = \"SO02\",CustomerID=\"C002\",ProductID=\"P002\",Qty=300,Amt=400},"
      },
      {
        "row": 7,
        "rowsha": "7em+/b2HqM6iEBXxrPSXlZytO/iDgRIZPZigKkf6YTc=",
        "originContent": "    };",
        "translatedContent": "    };"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "g0B/5nPnffIHxuRaSasL78HSUBsuzGJ1FBaNb7reZOQ=",
        "originContent": "    Console.WriteLine(\"en-Us and Sales role\");",
        "translatedContent": "    Console.WriteLine(\"en-Us and Sales role\");"
      },
      {
        "row": 10,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 11,
        "rowsha": "6kcspdZM3X686VvH/zWF35P/7Kpo8hN6ERJteKrJeqo=",
        "originContent": "        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";",
        "translatedContent": "        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";"
      },
      {
        "row": 12,
        "rowsha": "FA3ALfKnbR59pQ/a6HS88TFxrIVXjdNJN0c3RHBWtZY=",
        "originContent": "        var lang = \"en-US\";",
        "translatedContent": "        var lang = \"en-US\";"
      },
      {
        "row": 13,
        "rowsha": "WkBVtIOojNgZKUUXWBllsg9FRl+p1bcR42lbmh8vYow=",
        "originContent": "        var role = \"Sales\";",
        "translatedContent": "        var role = \"Sales\";"
      },
      {
        "row": 14,
        "rowsha": "7E6G9zfmCX2aAoCfaHtVmjGJmyMD6ViicqgHaJTLWZw=",
        "originContent": "        MiniExcel.SaveAs(path, GetOrders(lang, role, value));",
        "translatedContent": "        MiniExcel.SaveAs(path, GetOrders(lang, role, value));"
      },
      {
        "row": 15,
        "rowsha": "gW2XyZyWlPpAfJtZQEoLrei/rZuwfWNHKWL9welvMWk=",
        "originContent": "        MiniExcel.Query(path, true).Dump();",
        "translatedContent": "        MiniExcel.Query(path, true).Dump();"
      },
      {
        "row": 16,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "ckn2kqn3j8/hQ2LURADhexkXLpkQZdiBT5jsPx0M2Ag=",
        "originContent": "    Console.WriteLine(\"zh-CN and PMC role\");",
        "translatedContent": "    Console.WriteLine(\"zh-CN and PMC role\");"
      },
      {
        "row": 19,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 20,
        "rowsha": "6kcspdZM3X686VvH/zWF35P/7Kpo8hN6ERJteKrJeqo=",
        "originContent": "        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";",
        "translatedContent": "        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";"
      },
      {
        "row": 21,
        "rowsha": "dpzkU1t5cHp+QUVZVcui1kGjwLH33sEOnAmQ8m45x+U=",
        "originContent": "        var lang = \"zh-CN\";",
        "translatedContent": "        var lang = \"zh-CN\";"
      },
      {
        "row": 22,
        "rowsha": "5R56KKs3wYvQeeljJH/btBbzXZLuz+L7VMfnikt1gLs=",
        "originContent": "        var role = \"PMC\";",
        "translatedContent": "        var role = \"PMC\";"
      },
      {
        "row": 23,
        "rowsha": "7E6G9zfmCX2aAoCfaHtVmjGJmyMD6ViicqgHaJTLWZw=",
        "originContent": "        MiniExcel.SaveAs(path, GetOrders(lang, role, value));",
        "translatedContent": "        MiniExcel.SaveAs(path, GetOrders(lang, role, value));"
      },
      {
        "row": 24,
        "rowsha": "gW2XyZyWlPpAfJtZQEoLrei/rZuwfWNHKWL9welvMWk=",
        "originContent": "        MiniExcel.Query(path, true).Dump();",
        "translatedContent": "        MiniExcel.Query(path, true).Dump();"
      },
      {
        "row": 25,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 26,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 27,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 28,
        "rowsha": "b5+kyzWLDMh1CwudDtvKUyKB33cJ3DkzfGw2TKJQmG0=",
        "originContent": "private IEnumerable<Dictionary<string, object>> GetOrders(string lang, string role, Order[] orders)",
        "translatedContent": "private IEnumerable<Dictionary<string, object>> GetOrders(string lang, string role, Order[] orders)"
      },
      {
        "row": 29,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 30,
        "rowsha": "AzPjAddfTzlItMjJkhJTQbAUCdkIGinvY01UhTDTYG4=",
        "originContent": "    foreach (var order in orders)",
        "translatedContent": "    foreach (var order in orders)"
      },
      {
        "row": 31,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 32,
        "rowsha": "2mnXZdai7HczZsycZDb+nLrN8+TdoIcoMWg3MgjBwz4=",
        "originContent": "        var newOrder = new Dictionary<string, object>();",
        "translatedContent": "        var newOrder = new Dictionary<string, object>();"
      },
      {
        "row": 33,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 34,
        "rowsha": "7c2zak6QP6EvuiGQfwTmfSH/j3xoMHpZaexiCyCJsho=",
        "originContent": "        if (lang == \"zh-CN\")",
        "translatedContent": "        if (lang == \"zh-CN\")"
      },
      {
        "row": 35,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 36,
        "rowsha": "LVV0wcpkL71v8bFKpZ1C4p5JIQ5zgxT2mTO7Te2EFms=",
        "originContent": "            newOrder.Add(\"客户编号\", order.CustomerID);",
        "translatedContent": "            newOrder.Add(\"客户编号\", order.CustomerID);"
      },
      {
        "row": 37,
        "rowsha": "y6/i6vTtcbah0uWZlb0vfcGZdkmybbWWPMCXn6XXKds=",
        "originContent": "            newOrder.Add(\"订单编号\", order.OrderNo);",
        "translatedContent": "            newOrder.Add(\"订单编号\", order.OrderNo);"
      },
      {
        "row": 38,
        "rowsha": "Rci0HN+Rk76QA4cfiDIaL9QuPqAJ20MyvcN35cQn5gI=",
        "originContent": "            newOrder.Add(\"产品编号\", order.ProductID);",
        "translatedContent": "            newOrder.Add(\"产品编号\", order.ProductID);"
      },
      {
        "row": 39,
        "rowsha": "kBLol0DBTVuUz0Q8k4YNok9p3fc0ORpawUZ24O70qb0=",
        "originContent": "            newOrder.Add(\"数量\", order.Qty);",
        "translatedContent": "            newOrder.Add(\"数量\", order.Qty);"
      },
      {
        "row": 40,
        "rowsha": "4KbesWV44ddFm441i5jTChuBkIwHJLv6Ueaar4cR7yI=",
        "originContent": "            if (role == \"Sales\")",
        "translatedContent": "            if (role == \"Sales\")"
      },
      {
        "row": 41,
        "rowsha": "zHL0svZn7tpMXd2w5QJGQJYabwHb7/ZHg4Rb8kgUQ8k=",
        "originContent": "                newOrder.Add(\"价格\", order.Amt);",
        "translatedContent": "                newOrder.Add(\"价格\", order.Amt);"
      },
      {
        "row": 42,
        "rowsha": "H1qNtOURVSpA8vSH9VpepM/8zTlnCNdk+bGyiQ9adrQ=",
        "originContent": "            yield return newOrder;",
        "translatedContent": "            yield return newOrder;"
      },
      {
        "row": 43,
        "rowsha": "KkQWgxjiJOH4MP6atiCqAN1Pez+xnvQ5mr9ZWTzwdW0=",
        "originContent": "        }",
        "translatedContent": "        }"
      },
      {
        "row": 44,
        "rowsha": "Vj4I4K5cbtW0wDFGUwU5GKwhdgO/FS+q1A/Wa5TF1aA=",
        "originContent": "        else if (lang == \"en-US\")",
        "translatedContent": "        else if (lang == \"en-US\")"
      },
      {
        "row": 45,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 46,
        "rowsha": "+PXQ5Jscml3RKUT9y1PzaWW9hV8hlHIJRe3LehOx+PM=",
        "originContent": "            newOrder.Add(\"Customer ID\", order.CustomerID);",
        "translatedContent": "            newOrder.Add(\"Customer ID\", order.CustomerID);"
      },
      {
        "row": 47,
        "rowsha": "oDIbgvmRCCVrji+OI+73Ln54k6h8cTDDng2BIYRCSwY=",
        "originContent": "            newOrder.Add(\"Order No\", order.OrderNo);",
        "translatedContent": "            newOrder.Add(\"Order No\", order.OrderNo);"
      },
      {
        "row": 48,
        "rowsha": "EEwv2B9KaOBwAYLYUq+o0AXh6w+u50E/D4LJ/yfND50=",
        "originContent": "            newOrder.Add(\"Product ID\", order.ProductID);",
        "translatedContent": "            newOrder.Add(\"Product ID\", order.ProductID);"
      },
      {
        "row": 49,
        "rowsha": "8OVXzN9V5DOy9RfKukcSnGjxxvXDSjZ8AbglEj6UxI0=",
        "originContent": "            newOrder.Add(\"Quantity\", order.Qty);",
        "translatedContent": "            newOrder.Add(\"Quantity\", order.Qty);"
      },
      {
        "row": 50,
        "rowsha": "4KbesWV44ddFm441i5jTChuBkIwHJLv6Ueaar4cR7yI=",
        "originContent": "            if (role == \"Sales\")",
        "translatedContent": "            if (role == \"Sales\")"
      },
      {
        "row": 51,
        "rowsha": "J5V9zoZNADI5u9rjtqQnubI0mUC+lXGsvvPeXr8LRrU=",
        "originContent": "                newOrder.Add(\"Amount\", order.Amt);",
        "translatedContent": "                newOrder.Add(\"Amount\", order.Amt);"
      },
      {
        "row": 52,
        "rowsha": "H1qNtOURVSpA8vSH9VpepM/8zTlnCNdk+bGyiQ9adrQ=",
        "originContent": "            yield return newOrder;",
        "translatedContent": "            yield return newOrder;"
      },
      {
        "row": 53,
        "rowsha": "KkQWgxjiJOH4MP6atiCqAN1Pez+xnvQ5mr9ZWTzwdW0=",
        "originContent": "        }",
        "translatedContent": "        }"
      },
      {
        "row": 54,
        "rowsha": "RnsWyKlBi3YWLGNGcHMiMgpcOlnS4uVaVecbmk33Nz8=",
        "originContent": "        else",
        "translatedContent": "        else"
      },
      {
        "row": 55,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 56,
        "rowsha": "wd8W0vz2uc6X19Gxedtv7YzRN9GFKaoHu4W5btLcaJI=",
        "originContent": "            throw new InvalidDataException($\"lang {lang} wrong\");",
        "translatedContent": "            throw new InvalidDataException($\"lang {lang} wrong\");"
      },
      {
        "row": 57,
        "rowsha": "KkQWgxjiJOH4MP6atiCqAN1Pez+xnvQ5mr9ZWTzwdW0=",
        "originContent": "        }",
        "translatedContent": "        }"
      },
      {
        "row": 58,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 59,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 60,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 61,
        "rowsha": "fKG0QfY96XPNqTsTsXJ6bDdktf6RWQKxJX3o7ULgv6Y=",
        "originContent": "public class Order",
        "translatedContent": "public class Order"
      },
      {
        "row": 62,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 63,
        "rowsha": "g/u4FGRbj5SardwElYLEA32tTlWmcY/FldhOCJ8JaX4=",
        "originContent": "    public string OrderNo { get; set; }",
        "translatedContent": "    public string OrderNo { get; set; }"
      },
      {
        "row": 64,
        "rowsha": "H23Z4M+MwOTva22rEFVNl66xJoCQwDPILUueifItqPA=",
        "originContent": "    public string CustomerID { get; set; }",
        "translatedContent": "    public string CustomerID { get; set; }"
      },
      {
        "row": 65,
        "rowsha": "FPFyuFs9iiWyY3noIJn90iFT638nOVBhhivAtwCmUAU=",
        "originContent": "    public decimal Qty { get; set; }",
        "translatedContent": "    public decimal Qty { get; set; }"
      },
      {
        "row": 66,
        "rowsha": "kZmxzDszLyIiiG3vQzAWCS+7n0++R515mi/g1fTTLEY=",
        "originContent": "    public string ProductID { get; set; }",
        "translatedContent": "    public string ProductID { get; set; }"
      },
      {
        "row": 67,
        "rowsha": "LsOyXPwXMh7Gj5MBqiTlYe5s85I7RCx4I2sXb4oX+qY=",
        "originContent": "    public decimal Amt { get; set; }",
        "translatedContent": "    public decimal Amt { get; set; }"
      },
      {
        "row": 68,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 69,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 156,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/118939964-d24bc480-b982-11eb-88dd-f06655f6121a.png)\n\n\n\n### FAQ\n\n#### Q: Excel header title not equal class property name, how to mapping?\n\nA. Please use ExcelColumnName attribute\n\n![image](https://user-images.githubusercontent.com/12729184/116020475-eac50980-a678-11eb-8804-129e87200e5e.png)\n\n#### Q. How to query or export multiple-sheets?\n\nA. `GetSheetNames` method with  Query  sheetName parameter.\n\n\n",
    "ContentSha": "iB0BAVOV613eax15YkbPEqDw/XmGWO1V/ZXvCkwI0AI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/118939964-d24bc480-b982-11eb-88dd-f06655f6121a.png)\n\n\n\n### Preguntas frecuentes\n\n#### P: El título del encabezado de Excel no es igual al nombre de la propiedad de la clase, ¿cómo mapearlo?\n\nR. Por favor use el atributo ExcelColumnName\n\n![image](https://user-images.githubusercontent.com/12729184/116020475-eac50980-a678-11eb-8804-129e87200e5e.png)\n\n#### P. ¿Cómo consultar o exportar múltiples hojas?\n\nR. Método `GetSheetNames` con el parámetro  Query  sheetName.\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/118939964-d24bc480-b982-11eb-88dd-f06655f6121a.png)"
      },
      {
        "row": 2,
        "rowsha": "I/OS4CgtdW/pQQXqwTcmyzot8eUU0yvlbAOSkWjcykM=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/118939964-d24bc480-b982-11eb-88dd-f06655f6121a.png)",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Preguntas frecuentes"
      },
      {
        "row": 6,
        "rowsha": "+YXYDNIJdZ89ycOnVbN/kCXLAAS1BnuWeK4DALPnYgA=",
        "originContent": "### FAQ",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### P: El título del encabezado de Excel no es igual al nombre de la propiedad de la clase, ¿cómo mapearlo?"
      },
      {
        "row": 8,
        "rowsha": "EB+qKB4/NLG+Lie8+7mhQ2L+dczqihM6peKEUfHC8dU=",
        "originContent": "#### Q: Excel header title not equal class property name, how to mapping?",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "R. Por favor use el atributo ExcelColumnName"
      },
      {
        "row": 10,
        "rowsha": "GDMvEqIXybltM8RIhiJ0C4kdcRdJSdABr35zdtKwuaw=",
        "originContent": "A. Please use ExcelColumnName attribute",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/116020475-eac50980-a678-11eb-8804-129e87200e5e.png)"
      },
      {
        "row": 12,
        "rowsha": "vWoRwLygB5yR+SrRaD0oSE2krNssP9vR4vt73j/WRTU=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/116020475-eac50980-a678-11eb-8804-129e87200e5e.png)",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### P. ¿Cómo consultar o exportar múltiples hojas?"
      },
      {
        "row": 14,
        "rowsha": "JnLyZNiAOEmCxDN61iduGEsh+9yYAv6NYnhVsB7hkeY=",
        "originContent": "#### Q. How to query or export multiple-sheets?",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "R. Método `GetSheetNames` con el parámetro  Query  sheetName."
      },
      {
        "row": 16,
        "rowsha": "K/EhgsAV4eTOeYdHoQ+fZsNCZiXYBgnE/A7NfTmkOf0=",
        "originContent": "A. `GetSheetNames` method with  Query  sheetName parameter.",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 157,
    "Content": "```csharp\nvar sheets = MiniExcel.GetSheetNames(path);\nforeach (var sheet in sheets)\n{\n    Console.WriteLine($\"sheet name : {sheet} \");\n    var rows = MiniExcel.Query(path,useHeaderRow:true,sheetName:sheet);\n    Console.WriteLine(rows);\n}\n```",
    "ContentSha": "z1RNE9ik5YA2FcEmupWfazwTkBSHUFsr4GzH3l6hqvk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar sheets = MiniExcel.GetSheetNames(path);\nforeach (var sheet in sheets)\n{\n    Console.WriteLine($\"sheet name : {sheet} \");\n    var rows = MiniExcel.Query(path,useHeaderRow:true,sheetName:sheet);\n    Console.WriteLine(rows);\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "qR7tD2Es1GxKVGaS4qeAEbRDYumTKMYYizrWzUTvrho=",
        "originContent": "var sheets = MiniExcel.GetSheetNames(path);",
        "translatedContent": "var sheets = MiniExcel.GetSheetNames(path);"
      },
      {
        "row": 3,
        "rowsha": "fQ1vRAXvzNbz6zNFoM0sL70BzkQq5WsU1+RUM0CocTE=",
        "originContent": "foreach (var sheet in sheets)",
        "translatedContent": "foreach (var sheet in sheets)"
      },
      {
        "row": 4,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 5,
        "rowsha": "4EhxOC7VrXiDG5J8BpFQ7jR/FtckytfoORJXhNnZJ90=",
        "originContent": "    Console.WriteLine($\"sheet name : {sheet} \");",
        "translatedContent": "    Console.WriteLine($\"sheet name : {sheet} \");"
      },
      {
        "row": 6,
        "rowsha": "WRgHSr6QKW551Xruq3ytwzQ2YcWWO++AMgOY86/xx+0=",
        "originContent": "    var rows = MiniExcel.Query(path,useHeaderRow:true,sheetName:sheet);",
        "translatedContent": "    var rows = MiniExcel.Query(path,useHeaderRow:true,sheetName:sheet);"
      },
      {
        "row": 7,
        "rowsha": "ArUxmuBgdhL9umt0yqfdxmWhqLRBSmiSNR9fTggDe0k=",
        "originContent": "    Console.WriteLine(rows);",
        "translatedContent": "    Console.WriteLine(rows);"
      },
      {
        "row": 8,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 9,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 158,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/116199841-2a1f5300-a76a-11eb-90a3-6710561cf6db.png)\n\n#### Q. How to query or export information about sheet visibility?\n\nA. `GetSheetInformations` method.\n\n\n",
    "ContentSha": "jHsOSk8WQ93l7WcPbWGotp1hymd9DPFAJ7PZQc6/zDA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 159,
    "Content": "```csharp\nvar sheets = MiniExcel.GetSheetInformations(path);\nforeach (var sheetInfo in sheets)\n{\n    Console.WriteLine($\"sheet index : {sheetInfo.Index} \"); // next sheet index - numbered from 0\n    Console.WriteLine($\"sheet name : {sheetInfo.Name} \");   // sheet name\n    Console.WriteLine($\"sheet state : {sheetInfo.State} \"); // sheet visibility state - visible / hidden\n}\n```",
    "ContentSha": "AiAAPco7HL+DRZQHkUaAz86X9plvjCMeRrvCrSn1yxI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar sheets = MiniExcel.GetSheetInformations(path);\nforeach (var sheetInfo in sheets)\n{\n    Console.WriteLine($\"sheet index : {sheetInfo.Index} \"); // next sheet index - numbered from 0\n    Console.WriteLine($\"sheet name : {sheetInfo.Name} \");   // sheet name\n    Console.WriteLine($\"sheet state : {sheetInfo.State} \"); // sheet visibility state - visible / hidden\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "lxy9MNfYzdElUuWyjIk6cKC135pU39T8N6Z9mmitgZk=",
        "originContent": "var sheets = MiniExcel.GetSheetInformations(path);",
        "translatedContent": "var sheets = MiniExcel.GetSheetInformations(path);"
      },
      {
        "row": 3,
        "rowsha": "YOPConfQngUGqV+7WScyEPUDsu/gh924SnlgQwGqgMA=",
        "originContent": "foreach (var sheetInfo in sheets)",
        "translatedContent": "foreach (var sheetInfo in sheets)"
      },
      {
        "row": 4,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 5,
        "rowsha": "z0og8adbKOiS2KRBAF8ipbJR9Okj6X+pMtMHzUjo41Q=",
        "originContent": "    Console.WriteLine($\"sheet index : {sheetInfo.Index} \"); // next sheet index - numbered from 0",
        "translatedContent": "    Console.WriteLine($\"sheet index : {sheetInfo.Index} \"); // next sheet index - numbered from 0"
      },
      {
        "row": 6,
        "rowsha": "bTPBFJYItKsqB7UrJ75xwYE6YsBUNlIeyNnHG7lnKDM=",
        "originContent": "    Console.WriteLine($\"sheet name : {sheetInfo.Name} \");   // sheet name",
        "translatedContent": "    Console.WriteLine($\"sheet name : {sheetInfo.Name} \");   // sheet name"
      },
      {
        "row": 7,
        "rowsha": "2OjCo3LgrQx2VRUsoIqyE+nQoxCxo8XRZ1drsLUrcZ8=",
        "originContent": "    Console.WriteLine($\"sheet state : {sheetInfo.State} \"); // sheet visibility state - visible / hidden",
        "translatedContent": "    Console.WriteLine($\"sheet state : {sheetInfo.State} \"); // sheet visibility state - visible / hidden"
      },
      {
        "row": 8,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 9,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 160,
    "Content": "\n\n#### Q. Whether to use Count will load all data into the memory?\n\nNo, the image test has 1 million rows*10 columns of data, the maximum memory usage is <60MB, and it takes 13.65 seconds\n\n![image](https://user-images.githubusercontent.com/12729184/117118518-70586000-adc3-11eb-9ce3-2ba76cf8b5e5.png)\n\n#### Q. How does Query use integer indexs?\n\nThe default index of Query is the string Key: A,B,C.... If you want to change to numeric index, please create the following method to convert\n",
    "ContentSha": "SWPgFvpVXTZzLWe18WiK/1FWKn0zrSPWWBFNCTJcrMQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "",
    "Status": "error",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 161,
    "Content": "```csharp\nvoid Main()\n{\n    var path = @\"D:\\git\\MiniExcel\\samples\\xlsx\\TestTypeMapping.xlsx\";\n    var rows = MiniExcel.Query(path,true);\n    foreach (var r in ConvertToIntIndexRows(rows))\n    {\n        Console.Write($\"column 0 : {r[0]} ,column 1 : {r[1]}\");\n        Console.WriteLine();\n    }\n}\n\nprivate IEnumerable<Dictionary<int, object>> ConvertToIntIndexRows(IEnumerable<object> rows)\n{\n    ICollection<string> keys = null;\n    var isFirst = true;\n    foreach (IDictionary<string,object> r in rows)\n    {\n        if(isFirst)\n        {\n            keys = r.Keys;\n            isFirst = false;\n        }\n\n        var dic = new Dictionary<int, object>();\n        var index = 0;\n        foreach (var key in keys)\n            dic[index++] = r[key];\n        yield return dic;\n    }\n}\n```",
    "ContentSha": "aRRJiFdEEHoWtEQaxufBWOQTz+rrHyJ/YHJSNORwdcc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvoid Main()\n{\n    var path = @\"D:\\git\\MiniExcel\\samples\\xlsx\\TestTypeMapping.xlsx\";\n    var rows = MiniExcel.Query(path,true);\n    foreach (var r in ConvertToIntIndexRows(rows))\n    {\n        Console.Write($\"column 0 : {r[0]} ,column 1 : {r[1]}\");\n        Console.WriteLine();\n    }\n}\n\nprivate IEnumerable<Dictionary<int, object>> ConvertToIntIndexRows(IEnumerable<object> rows)\n{\n    ICollection<string> keys = null;\n    var isFirst = true;\n    foreach (IDictionary<string,object> r in rows)\n    {\n        if(isFirst)\n        {\n            keys = r.Keys;\n            isFirst = false;\n        }\n\n        var dic = new Dictionary<int, object>();\n        var index = 0;\n        foreach (var key in keys)\n            dic[index++] = r[key];\n        yield return dic;\n    }\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "BJXio2Np7u6x5y2p3o++v55qLl4yPtvfU9GOASjUNhE=",
        "originContent": "void Main()",
        "translatedContent": "void Main()"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "sFutDxS9OCQWXwrtbNQoLKqfAGOQSMjM8bibbXm4YB0=",
        "originContent": "    var path = @\"D:\\git\\MiniExcel\\samples\\xlsx\\TestTypeMapping.xlsx\";",
        "translatedContent": "    var path = @\"D:\\git\\MiniExcel\\samples\\xlsx\\TestTypeMapping.xlsx\";"
      },
      {
        "row": 5,
        "rowsha": "l869OUCuVLk8KJcHhWNNLxLWOP5Xd6/LlPVYi++G9ns=",
        "originContent": "    var rows = MiniExcel.Query(path,true);",
        "translatedContent": "    var rows = MiniExcel.Query(path,true);"
      },
      {
        "row": 6,
        "rowsha": "UgvYy6FaDW+QmqdlcWiHMVJ+yMHaPcv5S15UETHfvrw=",
        "originContent": "    foreach (var r in ConvertToIntIndexRows(rows))",
        "translatedContent": "    foreach (var r in ConvertToIntIndexRows(rows))"
      },
      {
        "row": 7,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 8,
        "rowsha": "fm8dwklUDsXFJLyW0LM1hVhMjLva9+SAmzSz/WoMc5I=",
        "originContent": "        Console.Write($\"column 0 : {r[0]} ,column 1 : {r[1]}\");",
        "translatedContent": "        Console.Write($\"column 0 : {r[0]} ,column 1 : {r[1]}\");"
      },
      {
        "row": 9,
        "rowsha": "rILA4lTnFbIHMhPgmNzXhTqN9kGBfQEJcn30Td7xYw8=",
        "originContent": "        Console.WriteLine();",
        "translatedContent": "        Console.WriteLine();"
      },
      {
        "row": 10,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 11,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "y4qvKuI9dVZDDX2PQRERmjjj2RLdPtz3iBIsFbokHnI=",
        "originContent": "private IEnumerable<Dictionary<int, object>> ConvertToIntIndexRows(IEnumerable<object> rows)",
        "translatedContent": "private IEnumerable<Dictionary<int, object>> ConvertToIntIndexRows(IEnumerable<object> rows)"
      },
      {
        "row": 14,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 15,
        "rowsha": "+Bm2zA5oInhm23zf+TFBMBla8mWE5kfSXldxlfsNtaM=",
        "originContent": "    ICollection<string> keys = null;",
        "translatedContent": "    ICollection<string> keys = null;"
      },
      {
        "row": 16,
        "rowsha": "Bi4SyJbNNyYiL0FiEYW24aLJrm1HrWWZ4m3Nc1su21s=",
        "originContent": "    var isFirst = true;",
        "translatedContent": "    var isFirst = true;"
      },
      {
        "row": 17,
        "rowsha": "4awtEonimJ14KBkkHO3TLRqfxQqMobuK43s4WlyWEb4=",
        "originContent": "    foreach (IDictionary<string,object> r in rows)",
        "translatedContent": "    foreach (IDictionary<string,object> r in rows)"
      },
      {
        "row": 18,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 19,
        "rowsha": "XET5z15WfUBg01vL+GhlKNRs47GVCN8cpu3IMI2wgus=",
        "originContent": "        if(isFirst)",
        "translatedContent": "        if(isFirst)"
      },
      {
        "row": 20,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 21,
        "rowsha": "QaM8dN8r0z3uMtRQNl7wVzLNsx4B4uQY0iyvggzygA4=",
        "originContent": "            keys = r.Keys;",
        "translatedContent": "            keys = r.Keys;"
      },
      {
        "row": 22,
        "rowsha": "hpWzRkJGMPFebct9/VWHsuzj/4Q8Hp3S84lgiW44QV4=",
        "originContent": "            isFirst = false;",
        "translatedContent": "            isFirst = false;"
      },
      {
        "row": 23,
        "rowsha": "KkQWgxjiJOH4MP6atiCqAN1Pez+xnvQ5mr9ZWTzwdW0=",
        "originContent": "        }",
        "translatedContent": "        }"
      },
      {
        "row": 24,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "zXncC/OhHPkPzzU5Jvzq4sI9T4z0Pcb5sgRIk3po9I4=",
        "originContent": "        var dic = new Dictionary<int, object>();",
        "translatedContent": "        var dic = new Dictionary<int, object>();"
      },
      {
        "row": 26,
        "rowsha": "ij35Zwob7dnZ2+kR30hBDcurGpy71oPAu8zVCmRCnL8=",
        "originContent": "        var index = 0;",
        "translatedContent": "        var index = 0;"
      },
      {
        "row": 27,
        "rowsha": "xe32q1PZCWB6U9EwAIAJect2wCtNUkAnam05T1Q8JGk=",
        "originContent": "        foreach (var key in keys)",
        "translatedContent": "        foreach (var key in keys)"
      },
      {
        "row": 28,
        "rowsha": "7lR1KMh2wnFYh/utTRk+APi95Xj8htCENQBfcqmPQK8=",
        "originContent": "            dic[index++] = r[key];",
        "translatedContent": "            dic[index++] = r[key];"
      },
      {
        "row": 29,
        "rowsha": "b55VhMkraI03X8waKhkO/9h4NHN/soIHzj3C1Nb3dsU=",
        "originContent": "        yield return dic;",
        "translatedContent": "        yield return dic;"
      },
      {
        "row": 30,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 31,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 32,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 162,
    "Content": "\n#### Q. No title empty excel is generated when the value is empty when exporting Excel\n\nBecause MiniExcel uses a logic similar to JSON.NET to dynamically get type from values to simplify API operations, type cannot be knew without data. You can check [issue #133](https://github.com/mini-software/MiniExcel/issues/133) for understanding.\n\n![image](https://user-images.githubusercontent.com/12729184/122639771-546c0c00-d12e-11eb-800c-498db27889ca.png)\n\n> Strong type & DataTable will generate headers, but Dictionary are still empty Excel\n\n#### Q. How to stop the foreach when blank row?\n\nMiniExcel can be used with `LINQ TakeWhile` to stop foreach iterator.\n\n![Image](https://user-images.githubusercontent.com/12729184/130209137-162621c2-f337-4479-9996-beeac65bc4d4.png)\n\n#### Q. How to remove empty rows?\n\n![image](https://user-images.githubusercontent.com/12729184/137873865-7107d8f5-eb59-42db-903a-44e80589f1b2.png)\n\n\nIEnumerable :\n",
    "ContentSha": "cyxsnsuSXdZCYbkOF4HsAy0mURhCfYLvxEDoZ00eyw4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### P. ¿Por qué se genera un archivo Excel vacío y sin título cuando el valor está vacío al exportar a Excel?\n\nDebido a que MiniExcel utiliza una lógica similar a JSON.NET para obtener dinámicamente el tipo a partir de los valores y simplificar las operaciones de la API, no se puede conocer el tipo sin datos. Puedes consultar el [issue #133](https://github.com/mini-software/MiniExcel/issues/133) para más información.\n\n![image](https://user-images.githubusercontent.com/12729184/122639771-546c0c00-d12e-11eb-800c-498db27889ca.png)\n\n> Los tipos fuertes y DataTable generarán encabezados, pero Dictionary seguirá generando un Excel vacío\n\n#### P. ¿Cómo detener el foreach cuando se encuentra una fila en blanco?\n\nMiniExcel se puede usar con `LINQ TakeWhile` para detener el iterador foreach.\n\n![Image](https://user-images.githubusercontent.com/12729184/130209137-162621c2-f337-4479-9996-beeac65bc4d4.png)\n\n#### P. ¿Cómo eliminar filas vacías?\n\n![image](https://user-images.githubusercontent.com/12729184/137873865-7107d8f5-eb59-42db-903a-44e80589f1b2.png)\n\n\nIEnumerable :\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### P. ¿Por qué se genera un archivo Excel vacío y sin título cuando el valor está vacío al exportar a Excel?"
      },
      {
        "row": 2,
        "rowsha": "2gN31N8e29I5jGk1s7gxzkKAl35Ylw5beDmE/6EjFgM=",
        "originContent": "#### Q. No title empty excel is generated when the value is empty when exporting Excel",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Debido a que MiniExcel utiliza una lógica similar a JSON.NET para obtener dinámicamente el tipo a partir de los valores y simplificar las operaciones de la API, no se puede conocer el tipo sin datos. Puedes consultar el [issue #133](https://github.com/mini-software/MiniExcel/issues/133) para más información."
      },
      {
        "row": 4,
        "rowsha": "BE2Xoy8Hq43eue5rUnomLLvmPIOp+M5OcuAAx/3Xh3M=",
        "originContent": "Because MiniExcel uses a logic similar to JSON.NET to dynamically get type from values to simplify API operations, type cannot be knew without data. You can check [issue #133](https://github.com/mini-software/MiniExcel/issues/133) for understanding.",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/122639771-546c0c00-d12e-11eb-800c-498db27889ca.png)"
      },
      {
        "row": 6,
        "rowsha": "KUKvVZOMYJAnltxeSnA42S7h/H6jUUixc2pNaGtFZJg=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/122639771-546c0c00-d12e-11eb-800c-498db27889ca.png)",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "> Los tipos fuertes y DataTable generarán encabezados, pero Dictionary seguirá generando un Excel vacío"
      },
      {
        "row": 8,
        "rowsha": "rVACX24llwKnZIO4N4WxQLhO/eaZ9VjqdDNotePMQP0=",
        "originContent": "> Strong type & DataTable will generate headers, but Dictionary are still empty Excel",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### P. ¿Cómo detener el foreach cuando se encuentra una fila en blanco?"
      },
      {
        "row": 10,
        "rowsha": "EQlIn+b2xNkvVOPJzCHQqWXbYAo0TAY3UbcZtcLaXzo=",
        "originContent": "#### Q. How to stop the foreach when blank row?",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "MiniExcel se puede usar con `LINQ TakeWhile` para detener el iterador foreach."
      },
      {
        "row": 12,
        "rowsha": "MmxUR0kI6dzWj84zXFFF0+/n+noUFSosp41g5YJT+/o=",
        "originContent": "MiniExcel can be used with `LINQ TakeWhile` to stop foreach iterator.",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![Image](https://user-images.githubusercontent.com/12729184/130209137-162621c2-f337-4479-9996-beeac65bc4d4.png)"
      },
      {
        "row": 14,
        "rowsha": "dLJvdpp6ojZRL45k/nyciOZG39sRjMBDi3JcbXyYmQk=",
        "originContent": "![Image](https://user-images.githubusercontent.com/12729184/130209137-162621c2-f337-4479-9996-beeac65bc4d4.png)",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### P. ¿Cómo eliminar filas vacías?"
      },
      {
        "row": 16,
        "rowsha": "+qqqSXgM+BfzUyS8FLwVDfVZBHRl7/9ZVuTKcdy1Dd8=",
        "originContent": "#### Q. How to remove empty rows?",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![image](https://user-images.githubusercontent.com/12729184/137873865-7107d8f5-eb59-42db-903a-44e80589f1b2.png)"
      },
      {
        "row": 18,
        "rowsha": "b07iLSWCxnrhFQezqhExpjPYS37iVxG3rChTrMzl1Gc=",
        "originContent": "![image](https://user-images.githubusercontent.com/12729184/137873865-7107d8f5-eb59-42db-903a-44e80589f1b2.png)",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 20,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "IEnumerable :"
      },
      {
        "row": 21,
        "rowsha": "e25BeE5VOHVE9mYz/5RTHYngC11MwG3JGmK5qzhhH1M=",
        "originContent": "IEnumerable :",
        "translatedContent": ""
      },
      {
        "row": 22,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 163,
    "Content": "```csharp\npublic static IEnumerable<dynamic> QueryWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)\n{\n    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);\n    foreach (IDictionary<string,object> row in rows)\n    {\n        if(row.Keys.Any(key=>row[key]!=null))\n            yield return row;\n    }\n}\n```",
    "ContentSha": "kADW1g7qYyVwDAC3JrRXJPFjGC6slV6XVWM2/j/sH9g=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic static IEnumerable<dynamic> QueryWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)\n{\n    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);\n    foreach (IDictionary<string,object> row in rows)\n    {\n        if(row.Keys.Any(key=>row[key]!=null))\n            yield return row;\n    }\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "d5b+SiwEPkLPWJXx2TboEb8aiCrK+hFqLTEsRnNpQz8=",
        "originContent": "public static IEnumerable<dynamic> QueryWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)",
        "translatedContent": "public static IEnumerable<dynamic> QueryWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "FjyMtfkNI0cTO9VxrRXknsk2zn3Yx1CX/ukWCYyoqlI=",
        "originContent": "    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);",
        "translatedContent": "    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);"
      },
      {
        "row": 5,
        "rowsha": "32A0AlpJYYynRE9uXskdQ83mbrOCQ7uUAPi5OvnCJKI=",
        "originContent": "    foreach (IDictionary<string,object> row in rows)",
        "translatedContent": "    foreach (IDictionary<string,object> row in rows)"
      },
      {
        "row": 6,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 7,
        "rowsha": "CR9tgIs9bvxDsu7B8sLVjElbwLm++NOPJMd5Zm7QSAM=",
        "originContent": "        if(row.Keys.Any(key=>row[key]!=null))",
        "translatedContent": "        if(row.Keys.Any(key=>row[key]!=null))"
      },
      {
        "row": 8,
        "rowsha": "82sq7Jv6KJKeV6oToXFbNvkKuUqUMPOVM26hdomS7n8=",
        "originContent": "            yield return row;",
        "translatedContent": "            yield return row;"
      },
      {
        "row": 9,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 10,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 11,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 164,
    "Content": "\n\n\nDataTable :\n",
    "ContentSha": "hpIY40kVEknO6fURaKNhBg6hHAujmb2A3P/kzzjUcQ4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n\n\nDataTable :\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "/gsdvVp37sKaFe/+rFe6hwiQTqGV4L+QsucviYPtyZQ=",
        "originContent": "DataTable :",
        "translatedContent": "DataTable :"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 165,
    "Content": "```csharp\npublic static DataTable QueryAsDataTableWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)\n{\n    if (sheetName == null && excelType != ExcelType.CSV) /*Issue #279*/\n        sheetName = stream.GetSheetNames().First();\n\n    var dt = new DataTable(sheetName);\n    var first = true;\n    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);\n    foreach (IDictionary<string, object> row in rows)\n    {\n        if (first)\n        {\n\n            foreach (var key in row.Keys)\n            {\n                var column = new DataColumn(key, typeof(object)) { Caption = key };\n                dt.Columns.Add(column);\n            }\n\n            dt.BeginLoadData();\n            first = false;\n        }\n\n        var newRow = dt.NewRow();\n        var isNull=true;\n        foreach (var key in row.Keys)\n        {\n            var _v = row[key];\n            if(_v!=null)\n                isNull = false;\n            newRow[key] = _v;\n        }\n\n        if(!isNull)\n            dt.Rows.Add(newRow);\n    }\n\n    dt.EndLoadData();\n    return dt;\n}\n```",
    "ContentSha": "sxZaT0t0QVfuvZ7RpXxYQeXgPwQ9zf2N47BevAgRXK0=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\npublic static DataTable QueryAsDataTableWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)\n{\n    if (sheetName == null && excelType != ExcelType.CSV) /*Issue #279*/\n        sheetName = stream.GetSheetNames().First();\n\n    var dt = new DataTable(sheetName);\n    var first = true;\n    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);\n    foreach (IDictionary<string, object> row in rows)\n    {\n        if (first)\n        {\n\n            foreach (var key in row.Keys)\n            {\n                var column = new DataColumn(key, typeof(object)) { Caption = key };\n                dt.Columns.Add(column);\n            }\n\n            dt.BeginLoadData();\n            first = false;\n        }\n\n        var newRow = dt.NewRow();\n        var isNull=true;\n        foreach (var key in row.Keys)\n        {\n            var _v = row[key];\n            if(_v!=null)\n                isNull = false;\n            newRow[key] = _v;\n        }\n\n        if(!isNull)\n            dt.Rows.Add(newRow);\n    }\n\n    dt.EndLoadData();\n    return dt;\n}\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "kT4Lv4KCvuoHDabR8GMNUgjIhfhOXd8kxRPrT1AkKKE=",
        "originContent": "public static DataTable QueryAsDataTableWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)",
        "translatedContent": "public static DataTable QueryAsDataTableWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)"
      },
      {
        "row": 3,
        "rowsha": "Ah+1ltuB5tAr89JYbuOYH+UZ8nXArJyna7zy67QJfZY=",
        "originContent": "{",
        "translatedContent": "{"
      },
      {
        "row": 4,
        "rowsha": "OJe1hIhxJsWVc2fKlEkx+pVJsFjNA2N1xlp6wghdeHI=",
        "originContent": "    if (sheetName == null && excelType != ExcelType.CSV) /*Issue #279*/",
        "translatedContent": "    if (sheetName == null && excelType != ExcelType.CSV) /*Issue #279*/"
      },
      {
        "row": 5,
        "rowsha": "fvPV55myt7H9qLU1Q//nsQf1hJvlkBVS30+fYyxR6xU=",
        "originContent": "        sheetName = stream.GetSheetNames().First();",
        "translatedContent": "        sheetName = stream.GetSheetNames().First();"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "IPza5qVD619D1i2gvwqSZDbdEBA647d2EM9wpWb/4eU=",
        "originContent": "    var dt = new DataTable(sheetName);",
        "translatedContent": "    var dt = new DataTable(sheetName);"
      },
      {
        "row": 8,
        "rowsha": "F0PKJdAjaSH4ZVLyHph2vRs1+qT9Xo+vzs6mf9iwCIE=",
        "originContent": "    var first = true;",
        "translatedContent": "    var first = true;"
      },
      {
        "row": 9,
        "rowsha": "FjyMtfkNI0cTO9VxrRXknsk2zn3Yx1CX/ukWCYyoqlI=",
        "originContent": "    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);",
        "translatedContent": "    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);"
      },
      {
        "row": 10,
        "rowsha": "2xsNEdm/ntp75l0QJENISO2zBkLuTSt11dEx79zeuC4=",
        "originContent": "    foreach (IDictionary<string, object> row in rows)",
        "translatedContent": "    foreach (IDictionary<string, object> row in rows)"
      },
      {
        "row": 11,
        "rowsha": "DT0vWosvwXi05at+ucjIhuLgiwNgjwvTIAw/t2tK7Aw=",
        "originContent": "    {",
        "translatedContent": "    {"
      },
      {
        "row": 12,
        "rowsha": "ul48s7Rhcpu9EdlB+XRYJXc+g+ACFR6vQys8wIb4XOE=",
        "originContent": "        if (first)",
        "translatedContent": "        if (first)"
      },
      {
        "row": 13,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "iEMr5l/+nb8Rv1OVKWnUeuTUchZ5ZSHD1b5fAQlfjg0=",
        "originContent": "            foreach (var key in row.Keys)",
        "translatedContent": "            foreach (var key in row.Keys)"
      },
      {
        "row": 16,
        "rowsha": "eP03rcdD1du8iWcplsteDSugGG60x9rQBsnNT3AplAc=",
        "originContent": "            {",
        "translatedContent": "            {"
      },
      {
        "row": 17,
        "rowsha": "mmCSNSyJ7eXSVBO3WTXM4o5d8+WEPXvLUzUQGEf7ZeY=",
        "originContent": "                var column = new DataColumn(key, typeof(object)) { Caption = key };",
        "translatedContent": "                var column = new DataColumn(key, typeof(object)) { Caption = key };"
      },
      {
        "row": 18,
        "rowsha": "hEyLnxDweEnHpZHHcnqwZ1KznNP/OsVzd+rDwJOLd0o=",
        "originContent": "                dt.Columns.Add(column);",
        "translatedContent": "                dt.Columns.Add(column);"
      },
      {
        "row": 19,
        "rowsha": "hq/fcKlUNuiDqn/FwGoqsINxkFRDjxIY0V69ryh7S6w=",
        "originContent": "            }",
        "translatedContent": "            }"
      },
      {
        "row": 20,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "ZVndx2xty/L8A1VB9luzPBLRUBKA5znaQlaNnf9qzZ4=",
        "originContent": "            dt.BeginLoadData();",
        "translatedContent": "            dt.BeginLoadData();"
      },
      {
        "row": 22,
        "rowsha": "VTdTjm7LReZ+97n/HFamgPuzY9ezNR9QXuLk/eG0tNc=",
        "originContent": "            first = false;",
        "translatedContent": "            first = false;"
      },
      {
        "row": 23,
        "rowsha": "KkQWgxjiJOH4MP6atiCqAN1Pez+xnvQ5mr9ZWTzwdW0=",
        "originContent": "        }",
        "translatedContent": "        }"
      },
      {
        "row": 24,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "oOOl70HmVxIvWCjuRxSnP7Xt5fOfEjdcar36mz7h9Qw=",
        "originContent": "        var newRow = dt.NewRow();",
        "translatedContent": "        var newRow = dt.NewRow();"
      },
      {
        "row": 26,
        "rowsha": "W1A5NOE2pf2E9mvqGinuXp4wQX27FEuM6ZDs4d4JIdI=",
        "originContent": "        var isNull=true;",
        "translatedContent": "        var isNull=true;"
      },
      {
        "row": 27,
        "rowsha": "oYJsjySRnp6LOnjkMmtky9vaG/UP9QZm6Rwc/wzaaXw=",
        "originContent": "        foreach (var key in row.Keys)",
        "translatedContent": "        foreach (var key in row.Keys)"
      },
      {
        "row": 28,
        "rowsha": "qWZHcZor3nj5p5pSn5GUOY6dd3LUglu+qw7kVUQ2XhE=",
        "originContent": "        {",
        "translatedContent": "        {"
      },
      {
        "row": 29,
        "rowsha": "bnm7PsGS+gfqJdUwhMeDgP4lC7mgZg0BGIK0Nm6WKBU=",
        "originContent": "            var _v = row[key];",
        "translatedContent": "            var _v = row[key];"
      },
      {
        "row": 30,
        "rowsha": "/8ech3vLXcdEEB7F2jA8L7nUvYNH3AwGDhgr3g2mzcs=",
        "originContent": "            if(_v!=null)",
        "translatedContent": "            if(_v!=null)"
      },
      {
        "row": 31,
        "rowsha": "naCFY/JBKK7HXUz+k2Zz2RB5dMpJyJaQCZd573GjFyI=",
        "originContent": "                isNull = false;",
        "translatedContent": "                isNull = false;"
      },
      {
        "row": 32,
        "rowsha": "/Pe+kBSAP2XZ8hi66yHYEf3dD/vWSDPvdPbqK08TRU4=",
        "originContent": "            newRow[key] = _v;",
        "translatedContent": "            newRow[key] = _v;"
      },
      {
        "row": 33,
        "rowsha": "KkQWgxjiJOH4MP6atiCqAN1Pez+xnvQ5mr9ZWTzwdW0=",
        "originContent": "        }",
        "translatedContent": "        }"
      },
      {
        "row": 34,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 35,
        "rowsha": "vIgAtshh3tstjHnLWlUfnVnR3YdD/B6RCeJQ7QhIrRs=",
        "originContent": "        if(!isNull)",
        "translatedContent": "        if(!isNull)"
      },
      {
        "row": 36,
        "rowsha": "10KPjaRLEAm4R36ADz34Wlxvueyl6DKlLPcQ9AajM/Y=",
        "originContent": "            dt.Rows.Add(newRow);",
        "translatedContent": "            dt.Rows.Add(newRow);"
      },
      {
        "row": 37,
        "rowsha": "KNhneGFfavR7sbxPQPrOdWdJdo5REfEUz6I0pQYMJa8=",
        "originContent": "    }",
        "translatedContent": "    }"
      },
      {
        "row": 38,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 39,
        "rowsha": "OClyR/H8m2tWJFxMTtabozEQlC2GRHzWAnlcG049v/o=",
        "originContent": "    dt.EndLoadData();",
        "translatedContent": "    dt.EndLoadData();"
      },
      {
        "row": 40,
        "rowsha": "iT29ZQKL9W+I+m7ryaSOEav3oXx8W/Yoxi3X6mvJiPw=",
        "originContent": "    return dt;",
        "translatedContent": "    return dt;"
      },
      {
        "row": 41,
        "rowsha": "0Qs2qnSlm89KiBhYN/ZYr682Ru/yuxbDko0OkzXpRdI=",
        "originContent": "}",
        "translatedContent": "}"
      },
      {
        "row": 42,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 166,
    "Content": "\n\n\n#### Q. How SaveAs(path,value) to replace exists file and without throwing \"The file ...xlsx already exists error\"\n\n\nPlease use Stream class to custom file creating logic, e.g:\n",
    "ContentSha": "2AZ3n6ciH6Zrplh0BlanqKMPmwiSyqxjHIAyuIvDB8A=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n\n\n#### P. ¿Cómo usar SaveAs(path,value) para reemplazar un archivo existente sin lanzar el error \"El archivo ...xlsx ya existe\"?\n\n\nPor favor, use la clase Stream para personalizar la lógica de creación de archivos, por ejemplo:\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "33+GhFmG5Rw5jvlXnmPl2XJbJrWmeYzOXRVR1N25LnA=",
        "originContent": "#### Q. How SaveAs(path,value) to replace exists file and without throwing \"The file ...xlsx already exists error\"",
        "translatedContent": "#### P. ¿Cómo usar SaveAs(path,value) para reemplazar un archivo existente sin lanzar el error \"El archivo ...xlsx ya existe\"?"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "i6KuNf2Ghmj91RFKE5P7JYxTr9PbVzmhngDLLwG5vEI=",
        "originContent": "Please use Stream class to custom file creating logic, e.g:",
        "translatedContent": "Por favor, use la clase Stream para personalizar la lógica de creación de archivos, por ejemplo:"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 167,
    "Content": "```C#\n    using (var stream = File.Create(\"Demo.xlsx\"))\n        MiniExcel.SaveAs(stream,value);\n```",
    "ContentSha": "9G76Epj3yOR2BwtjbxGU4suSUzFRwzsxh+fZjz94H9A=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```C#\n    using (var stream = File.Create(\"Demo.xlsx\"))\n        MiniExcel.SaveAs(stream,value);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "P/40QxwdpVmT5Xf6Clh3gwwhSARV7939GBu4IQsAI3Y=",
        "originContent": "```C#",
        "translatedContent": "```C#"
      },
      {
        "row": 2,
        "rowsha": "SIkRDaV1vEm8bMTR4op8oIVqPGm7qFWYlfvgHbEB7ck=",
        "originContent": "    using (var stream = File.Create(\"Demo.xlsx\"))",
        "translatedContent": "    using (var stream = File.Create(\"Demo.xlsx\"))"
      },
      {
        "row": 3,
        "rowsha": "YhAiQT3NYkkaotMOo/8f3OSTpupzsA2o+T2len0CLOs=",
        "originContent": "        MiniExcel.SaveAs(stream,value);",
        "translatedContent": "        MiniExcel.SaveAs(stream,value);"
      },
      {
        "row": 4,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 168,
    "Content": "\n\n\nor, since V1.25.0, SaveAs support overwriteFile parameter for enable/unable overwriting exist file\n",
    "ContentSha": "yzO8mFFoKaOBU0UVaLCwfD7D68poDESAXu/vFtKKeOU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "o, desde la versión V1.25.0, SaveAs admite el parámetro overwriteFile para habilitar/deshabilitar la sobrescritura de un archivo existente\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "o, desde la versión V1.25.0, SaveAs admite el parámetro overwriteFile para habilitar/deshabilitar la sobrescritura de un archivo existente"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "Ye7O1zKmdWXyfHgWfUokLHt7vwKyC6S6POcrQ3Th+5U=",
        "originContent": "or, since V1.25.0, SaveAs support overwriteFile parameter for enable/unable overwriting exist file",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 169,
    "Content": "```csharp\n    MiniExcel.SaveAs(path, value, overwriteFile: true);\n```",
    "ContentSha": "LRnQY9wzojM50N96Mwq8buQh3y/hVci8FlVPM9rEY9I=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n    MiniExcel.SaveAs(path, value, overwriteFile: true);\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "MIy2347JiavNpKKkc5j84MCyJglx5klIwQ6junbXkVI=",
        "originContent": "    MiniExcel.SaveAs(path, value, overwriteFile: true);",
        "translatedContent": "    MiniExcel.SaveAs(path, value, overwriteFile: true);"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 170,
    "Content": "\n\n\n\n### Limitations and caveats\n\n- Not support xls and encrypted file now\n- xlsm only support Query\n\n\n\n### Reference\n\n[ExcelDataReader](https://github.com/ExcelDataReader/ExcelDataReader)  / [ClosedXML](https://github.com/ClosedXML/ClosedXML) / [Dapper](https://github.com/DapperLib/Dapper) / [ExcelNumberFormat](https://github.com/andersnm/ExcelNumberFormat)\n\n\n\n### Thanks\n\n####  [Jetbrains](https://www.jetbrains.com/)\n\n![jetbrains-variant-2](https://user-images.githubusercontent.com/12729184/123997015-8456c180-da02-11eb-829a-aec476fe8e94.png)\n\nThanks for providing a free All product IDE for this project ([License](https://user-images.githubusercontent.com/12729184/123988233-6ab17c00-d9fa-11eb-8739-2a08c6a4a263.png))\n\n\n\n### Contribution sharing donate\nLink https://github.com/orgs/mini-software/discussions/754\n\n### Contributors\n\n![](https://contrib.rocks/image?repo=mini-software/MiniExcel)\n",
    "ContentSha": "R1dg7/S9s5d7m+0T6hpFWdky9lxABxCi5vaXhewbPK4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n\n\n### Limitaciones y advertencias\n\n- Actualmente no se admite xls ni archivos cifrados\n- xlsm solo admite Consulta\n\n\n\n### Referencia\n\n[ExcelDataReader](https://github.com/ExcelDataReader/ExcelDataReader)  / [ClosedXML](https://github.com/ClosedXML/ClosedXML) / [Dapper](https://github.com/DapperLib/Dapper) / [ExcelNumberFormat](https://github.com/andersnm/ExcelNumberFormat)\n\n\n\n### Agradecimientos\n\n####  [Jetbrains](https://www.jetbrains.com/)\n\n![jetbrains-variant-2](https://user-images.githubusercontent.com/12729184/123997015-8456c180-da02-11eb-829a-aec476fe8e94.png)\n\nGracias por proporcionar un IDE All product gratuito para este proyecto ([Licencia](https://user-images.githubusercontent.com/12729184/123988233-6ab17c00-d9fa-11eb-8739-2a08c6a4a263.png))\n\n\n\n### Compartir contribuciones y donaciones\nEnlace https://github.com/orgs/mini-software/discussions/754\n\n### Colaboradores\n\n![](https://contrib.rocks/image?repo=mini-software/MiniExcel)\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Limitaciones y advertencias"
      },
      {
        "row": 5,
        "rowsha": "B1m/dheLCbc29AjxuRohiAkb1KPKHmEl+mSskNJuzJ4=",
        "originContent": "### Limitations and caveats",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "- Actualmente no se admite xls ni archivos cifrados"
      },
      {
        "row": 7,
        "rowsha": "VefIMpFF2F4c2aNt1tsy04sgiRVb9QdR8Je6iehMpkY=",
        "originContent": "- Not support xls and encrypted file now",
        "translatedContent": "- xlsm solo admite Consulta"
      },
      {
        "row": 8,
        "rowsha": "ZwUIa5OqBD9sHC8oYKTLPNkHMU3O2rsRETtuHN+vitA=",
        "originContent": "- xlsm only support Query",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Referencia"
      },
      {
        "row": 12,
        "rowsha": "+7X5XlC/GPk3fVmRvmuJlwQcaZe3kmDJO96CKsyYul0=",
        "originContent": "### Reference",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "[ExcelDataReader](https://github.com/ExcelDataReader/ExcelDataReader)  / [ClosedXML](https://github.com/ClosedXML/ClosedXML) / [Dapper](https://github.com/DapperLib/Dapper) / [ExcelNumberFormat](https://github.com/andersnm/ExcelNumberFormat)"
      },
      {
        "row": 14,
        "rowsha": "tYjdExDVWD5oQ+UDvgDJvWqNwrTn9UXoCdIuj/Un67g=",
        "originContent": "[ExcelDataReader](https://github.com/ExcelDataReader/ExcelDataReader)  / [ClosedXML](https://github.com/ClosedXML/ClosedXML) / [Dapper](https://github.com/DapperLib/Dapper) / [ExcelNumberFormat](https://github.com/andersnm/ExcelNumberFormat)",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Agradecimientos"
      },
      {
        "row": 18,
        "rowsha": "zW0uVRQ2vlI5vYMDhzTglaZ4zamqayxtjNZqTzd1xGc=",
        "originContent": "### Thanks",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "####  [Jetbrains](https://www.jetbrains.com/)"
      },
      {
        "row": 20,
        "rowsha": "XSEZI5c+KBzghMkBzfd7dvjb1bHVSE3/6EcAQ3u+L/E=",
        "originContent": "####  [Jetbrains](https://www.jetbrains.com/)",
        "translatedContent": ""
      },
      {
        "row": 21,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![jetbrains-variant-2](https://user-images.githubusercontent.com/12729184/123997015-8456c180-da02-11eb-829a-aec476fe8e94.png)"
      },
      {
        "row": 22,
        "rowsha": "T3HRdURZCScU9OcrFHrkPxrHJeVm6ejJL2ecy02vyzU=",
        "originContent": "![jetbrains-variant-2](https://user-images.githubusercontent.com/12729184/123997015-8456c180-da02-11eb-829a-aec476fe8e94.png)",
        "translatedContent": ""
      },
      {
        "row": 23,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Gracias por proporcionar un IDE All product gratuito para este proyecto ([Licencia](https://user-images.githubusercontent.com/12729184/123988233-6ab17c00-d9fa-11eb-8739-2a08c6a4a263.png))"
      },
      {
        "row": 24,
        "rowsha": "gQMopdP79y+5tzD+n3kbHB2fR7uBR2cTh/+zLJAWS0A=",
        "originContent": "Thanks for providing a free All product IDE for this project ([License](https://user-images.githubusercontent.com/12729184/123988233-6ab17c00-d9fa-11eb-8739-2a08c6a4a263.png))",
        "translatedContent": ""
      },
      {
        "row": 25,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 26,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 27,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Compartir contribuciones y donaciones"
      },
      {
        "row": 28,
        "rowsha": "R3wa3BZNOm3PjVGZdhp8SxV3ZmJA5lIQ8lW9ovFRFf8=",
        "originContent": "### Contribution sharing donate",
        "translatedContent": "Enlace https://github.com/orgs/mini-software/discussions/754"
      },
      {
        "row": 29,
        "rowsha": "byUdaLYY/bml/b4vTWoG1p0xr+S2m6smeCzGMcRwdbs=",
        "originContent": "Link https://github.com/orgs/mini-software/discussions/754",
        "translatedContent": ""
      },
      {
        "row": 30,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### Colaboradores"
      },
      {
        "row": 31,
        "rowsha": "/4Et9o+Nc2BpGTu6T1BzUrIOmNkSEj9bvHTAdcqb3Zg=",
        "originContent": "### Contributors",
        "translatedContent": ""
      },
      {
        "row": 32,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "![](https://contrib.rocks/image?repo=mini-software/MiniExcel)"
      },
      {
        "row": 33,
        "rowsha": "2eKbRujJS09xSU6L8Oh7x8NLokWUlpbhs5GqNFXcyow=",
        "originContent": "![](https://contrib.rocks/image?repo=mini-software/MiniExcel)",
        "translatedContent": ""
      },
      {
        "row": 34,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  }
]