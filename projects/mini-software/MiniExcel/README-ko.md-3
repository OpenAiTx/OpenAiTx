{
  "id": 3,
  "origin": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. Get Columns\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // get column count\n```\n\n#### 8. Dynamic Query cast row to `IDictionary<string,object>`\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// or\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// or Query specified ranges (capitalized)\n// A2 represents the second row of column A, C3 represents the third row of column C\n// If you don't want to restrict rows, just don't include numbers\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Query Excel return DataTable\n\nNot recommended, because DataTable will load all data into memory and lose MiniExcel's low memory consumption feature.\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Specify the cell to start reading data\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Fill Merged Cells\n\nNote: The efficiency is slower compared to `not using merge fill`\n\nReason: The OpenXml standard puts mergeCells at the bottom of the file, which leads to the need to foreach the sheetxml twice\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nsupport variable length and width multi-row and column filling\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Reading big file by disk-base cache (Disk-Base Cache - SharedString)\n\nIf the SharedStrings size exceeds 5 MB, MiniExcel default will use local disk cache, e.g, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(one million rows data), when disable disk cache the maximum memory usage is 195MB, but able disk cache only needs 65MB. Note, this optimization needs some efficiency cost, so this case will increase reading time from 7.4 seconds to 27.2 seconds, If you don't need it that you can disable disk cache with the following code:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nYou can use `SharedStringCacheSize ` to change the sharedString file size beyond the specified size for disk caching\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n\n\n\n\n",
  "origin_sha": "Th7oEFQjLrBaVMzEWFf1Q2rPewXbroJ5P5dVVNt3/c0=",
  "translate": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. 열 가져오기\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // 예시 결과 : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // 열 개수 가져오기\n```\n\n#### 8. 동적 쿼리에서 행을 `IDictionary<string,object>`로 캐스팅\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// 또는\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// 또는 지정한 범위 쿼리(대문자 사용)\n// A2는 A열의 두 번째 행, C3는 C열의 세 번째 행을 의미함\n// 행을 제한하지 않으려면 숫자를 포함하지 않으면 됨\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Excel 쿼리 결과를 DataTable로 반환\n\n권장하지 않습니다. DataTable은 모든 데이터를 메모리로 로드하여 MiniExcel의 저메모리 소비 특성을 잃게 됩니다.\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. 데이터를 읽기 시작할 셀 지정\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. 병합된 셀 채우기\n\n참고: `병합 채우기 미사용`에 비해 효율이 느립니다.\n\n이유: OpenXml 표준은 mergeCells를 파일의 하단에 위치시키기 때문에 sheetxml을 두 번 foreach 해야 합니다.\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\n가변 길이 및 너비의 다중 행/열 채우기 지원\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. 디스크 기반 캐시로 대용량 파일 읽기 (Disk-Base Cache - SharedString)\n\nSharedStrings의 크기가 5MB를 초과하면, MiniExcel은 기본적으로 로컬 디스크 캐시를 사용합니다. 예시: [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(백만 행 데이터). 디스크 캐시를 비활성화하면 최대 메모리 사용량이 195MB이지만, 디스크 캐시 활성화 시 65MB만 필요합니다. 단, 이 최적화는 효율에 약간의 비용이 들어가므로, 이 경우 읽기 시간이 7.4초에서 27.2초로 증가합니다. 필요하지 않으면 아래 코드로 디스크 캐시를 비활성화할 수 있습니다:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\n`SharedStringCacheSize`를 사용하여 공유 문자열 파일 크기가 지정한 크기를 초과하면 디스크 캐시를 사용하도록 변경할 수 있습니다.\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n```",
  "status": "ok"
}