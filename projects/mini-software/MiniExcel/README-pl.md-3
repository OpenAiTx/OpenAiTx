{
  "id": 3,
  "origin": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. Get Columns\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // get column count\n```\n\n#### 8. Dynamic Query cast row to `IDictionary<string,object>`\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// or\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// or Query specified ranges (capitalized)\n// A2 represents the second row of column A, C3 represents the third row of column C\n// If you don't want to restrict rows, just don't include numbers\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Query Excel return DataTable\n\nNot recommended, because DataTable will load all data into memory and lose MiniExcel's low memory consumption feature.\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Specify the cell to start reading data\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Fill Merged Cells\n\nNote: The efficiency is slower compared to `not using merge fill`\n\nReason: The OpenXml standard puts mergeCells at the bottom of the file, which leads to the need to foreach the sheetxml twice\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nsupport variable length and width multi-row and column filling\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Reading big file by disk-base cache (Disk-Base Cache - SharedString)\n\nIf the SharedStrings size exceeds 5 MB, MiniExcel default will use local disk cache, e.g, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(one million rows data), when disable disk cache the maximum memory usage is 195MB, but able disk cache only needs 65MB. Note, this optimization needs some efficiency cost, so this case will increase reading time from 7.4 seconds to 27.2 seconds, If you don't need it that you can disable disk cache with the following code:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nYou can use `SharedStringCacheSize ` to change the sharedString file size beyond the specified size for disk caching\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n\n\n\n\n",
  "origin_sha": "Th7oEFQjLrBaVMzEWFf1Q2rPewXbroJ5P5dVVNt3/c0=",
  "translate": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. Pobierz kolumny\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // np. wynik : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // pobierz liczbę kolumn\n```\n\n#### 8. Dynamiczne zapytanie rzutujące wiersz na `IDictionary<string,object>`\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// lub\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// lub zapytanie o określone zakresy (wielkie litery)\n// A2 oznacza drugi wiersz kolumny A, C3 oznacza trzeci wiersz kolumny C\n// Jeśli nie chcesz ograniczać wierszy, po prostu nie podawaj liczb\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Zapytanie Excel zwracające DataTable\n\nNiezalecane, ponieważ DataTable załaduje wszystkie dane do pamięci i straci cechę niskiego zużycia pamięci MiniExcel.\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Określ komórkę, od której rozpocząć odczyt danych\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Wypełnianie scalonych komórek\n\nUwaga: Wydajność jest niższa w porównaniu do `nieużywania wypełniania scalonych komórek`\n\nPowód: Standard OpenXml umieszcza mergeCells na końcu pliku, co powoduje konieczność dwukrotnego przechodzenia po sheetxml\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nobsługa zmiennej długości i szerokości wielorzędowego i wielokolumnowego wypełniania\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Odczyt dużych plików przez pamięć podręczną na dysku (Disk-Base Cache - SharedString)\n\nJeśli rozmiar SharedStrings przekracza 5 MB, MiniExcel domyślnie użyje lokalnej pamięci podręcznej na dysku, np. [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx) (milion wierszy danych), gdy wyłączysz cache dyskowy maksymalne zużycie pamięci to 195MB, ale przy włączonej pamięci podręcznej dysku potrzeba tylko 65MB. Uwaga, ta optymalizacja wymaga pewnych kosztów wydajności, więc w tym przypadku czas odczytu wzrasta z 7,4 sekundy do 27,2 sekundy. Jeśli nie potrzebujesz tej funkcji, możesz ją wyłączyć poniższym kodem:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nMożesz użyć `SharedStringCacheSize`, aby zmienić rozmiar pliku sharedString, po przekroczeniu którego używana jest pamięć podręczna na dysku\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n",
  "status": "ok"
}