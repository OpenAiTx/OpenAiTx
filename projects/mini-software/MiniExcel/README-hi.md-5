{
  "id": 5,
  "origin": "}\n```\n\nBelow code will load all data into memory\n\n```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(@\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\");\n    MiniExcel.SaveAs(path, rows);\n}\n```\n\n\n#### 6. SaveAs to MemoryStream  [[Try it]](https://dotnetfiddle.net/JOen0e)\n\n```csharp\nusing (var stream = new MemoryStream()) //support FileStream,MemoryStream ect.\n{\n    stream.SaveAs(values);\n}\n```\n\ne.g : api of export excel\n\n```csharp\npublic IActionResult DownloadExcel()\n{\n    var values = new[] {\n        new { Column1 = \"MiniExcel\", Column2 = 1 },\n        new { Column1 = \"Github\", Column2 = 2}\n    };\n\n    var memoryStream = new MemoryStream();\n    memoryStream.SaveAs(values);\n    memoryStream.Seek(0, SeekOrigin.Begin);\n    return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n    {\n        FileDownloadName = \"demo.xlsx\"\n    };\n}\n```\n\n\n#### 7. Create Multiple Sheets\n\n```csharp\n// 1. Dictionary<string,object>\nvar users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };\nvar department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };\nvar sheets = new Dictionary<string, object>\n{\n    [\"users\"] = users,\n    [\"department\"] = department\n};\nMiniExcel.SaveAs(path, sheets);\n\n// 2. DataSet\nvar sheets = new DataSet();\nsheets.Add(UsersDataTable);\nsheets.Add(DepartmentDataTable);\n//..\nMiniExcel.SaveAs(path, sheets);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118130875-6e7c4580-b430-11eb-9b82-22f02716bd63.png)\n\n\n#### 8. TableStyles Options\n\nDefault style\n\n![image](https://user-images.githubusercontent.com/12729184/138234373-cfa97109-b71f-4711-b7f5-0eaaa4a0a3a6.png)\n\nWithout style configuration\n\n```csharp\nvar config = new OpenXmlConfiguration()\n{\n     TableStyles = TableStyles.None\n};\nMiniExcel.SaveAs(path, value,configuration:config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118784917-f3e57700-b8c2-11eb-8718-8d955b1bc197.png)\n\n\n#### 9. AutoFilter\n\nSince v0.19.0  `OpenXmlConfiguration.AutoFilter` can en/unable AutoFilter , default value is `true`, and setting AutoFilter way:\n\n```csharp\nMiniExcel.SaveAs(path, value, configuration: new OpenXmlConfiguration() { AutoFilter = false });\n```\n\n\n\n#### 10. Create Image\n\n```csharp",
  "origin_sha": "/27lhG0iFNbmlpJFHP2jY/aF5J9kbF303XWTLgf//wE=",
  "translate": "}\n```\n\nनीचे दिया गया कोड सभी डेटा को मेमोरी में लोड करेगा\n\n```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(@\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\");\n    MiniExcel.SaveAs(path, rows);\n}\n```\n\n\n#### 6. मेमोरीस्ट्रीम में SaveAs करें  [[Try it]](https://dotnetfiddle.net/JOen0e)\n\n```csharp\nusing (var stream = new MemoryStream()) // FileStream, MemoryStream आदि को सपोर्ट करता है।\n{\n    stream.SaveAs(values);\n}\n```\n\nउदाहरण : एक्सेल निर्यात (export) के लिए एपीआई\n\n```csharp\npublic IActionResult DownloadExcel()\n{\n    var values = new[] {\n        new { Column1 = \"MiniExcel\", Column2 = 1 },\n        new { Column1 = \"Github\", Column2 = 2}\n    };\n\n    var memoryStream = new MemoryStream();\n    memoryStream.SaveAs(values);\n    memoryStream.Seek(0, SeekOrigin.Begin);\n    return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n    {\n        FileDownloadName = \"demo.xlsx\"\n    };\n}\n```\n\n\n#### 7. मल्टीपल शीट्स बनाएं\n\n```csharp\n// 1. Dictionary<string,object>\nvar users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };\nvar department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };\nvar sheets = new Dictionary<string, object>\n{\n    [\"users\"] = users,\n    [\"department\"] = department\n};\nMiniExcel.SaveAs(path, sheets);\n\n// 2. DataSet\nvar sheets = new DataSet();\nsheets.Add(UsersDataTable);\nsheets.Add(DepartmentDataTable);\n//..\nMiniExcel.SaveAs(path, sheets);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118130875-6e7c4580-b430-11eb-9b82-22f02716bd63.png)\n\n\n#### 8. TableStyles विकल्प\n\nडिफ़ॉल्ट शैली\n\n![image](https://user-images.githubusercontent.com/12729184/138234373-cfa97109-b71f-4711-b7f5-0eaaa4a0a3a6.png)\n\nस्टाइल कॉन्फ़िगरेशन के बिना\n\n```csharp\nvar config = new OpenXmlConfiguration()\n{\n     TableStyles = TableStyles.None\n};\nMiniExcel.SaveAs(path, value,configuration:config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118784917-f3e57700-b8c2-11eb-8718-8d955b1bc197.png)\n\n\n#### 9. AutoFilter\n\nसंस्करण v0.19.0 से `OpenXmlConfiguration.AutoFilter` द्वारा AutoFilter सक्षम/अक्षम किया जा सकता है, डिफ़ॉल्ट मान `true` है, और AutoFilter सेट करने का तरीका:\n\n```csharp\nMiniExcel.SaveAs(path, value, configuration: new OpenXmlConfiguration() { AutoFilter = false });\n```\n\n\n\n#### 10. इमेज बनाना\n\n```csharp",
  "status": "ok"
}