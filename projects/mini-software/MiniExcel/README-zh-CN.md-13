{
  "id": 13,
  "origin": "    };\n    MiniExcel.Insert(path, value);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png)\n\nv1.37.0 support excel insert a new sheet into an existing workbook\n\n```csharp\n// Origin excel\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value, sheetName: \"Sheet1\");\n}\n// Insert a new sheet\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, table, sheetName: \"Sheet2\");\n}\n```\n\n\n\n#### Delete(waiting)\n\n#### Update(waiting)\n\n\n\n### Excel Type Auto Check <a name=\"getstart5\"></a>\n\n- MiniExcel will check whether it is xlsx or csv based on the `file extension` by default, but there may be inaccuracy, please specify it manually.\n- Stream cannot be know from which excel, please specify it manually.\n\n```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//or\nstream.SaveAs(excelType:ExcelType.XLSX);\n//or\nstream.Query(excelType:ExcelType.CSV);\n//or\nstream.Query(excelType:ExcelType.XLSX);\n```\n\n\n\n\n\n### CSV\n\n#### Note\n\n- Default return `string` type, and value will not be converted to numbers or datetime, unless the type is defined by strong typing generic.\n\n\n\n#### Custom separator\n\nThe default is `,` as the separator, you can modify the `Seperator` property for customization\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\nSince V1.30.1 support function to custom separator (thanks @hyzx86)\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```\n\n\n\n#### Custom line break\n\nThe default is `\\r\\n` as the newline character, you can modify the `NewLine` property for customization\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\n\n\n#### Custom coding",
  "origin_sha": "L9HkLzxXU7FGwZczjCauQGs4SUPmaKDck6toO1yCteU=",
  "translate": "```csharp\n};\nMiniExcel.Insert(path, value);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png)\n\nv1.37.0 支持在现有工作簿中插入新工作表\n\n```csharp\n// 原始 excel\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value, sheetName: \"Sheet1\");\n}\n// 插入新工作表\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, table, sheetName: \"Sheet2\");\n}\n```\n\n\n\n#### 删除（待实现）\n\n#### 更新（待实现）\n\n\n\n### Excel 类型自动检测 <a name=\"getstart5\"></a>\n\n- MiniExcel 默认会根据`文件扩展名`来判断是 xlsx 还是 csv，但可能会有不准确的情况，请手动指定类型。\n- Stream 无法识别来源于哪种 excel，请手动指定类型。\n\n```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//或\nstream.SaveAs(excelType:ExcelType.XLSX);\n//或\nstream.Query(excelType:ExcelType.CSV);\n//或\nstream.Query(excelType:ExcelType.XLSX);\n```\n\n\n\n\n\n### CSV\n\n#### 注意\n\n- 默认返回 `string` 类型，且值不会被转换为数字或日期时间，除非通过强类型泛型定义类型。\n\n\n\n#### 自定义分隔符\n\n默认分隔符为 `,`，你可以通过修改 `Seperator` 属性进行自定义\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\n自 V1.30.1 起支持自定义分隔符函数（感谢 @hyzx86）\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```\n\n\n\n#### 自定义换行符\n\n默认换行符为 `\\r\\n`，你可以通过修改 `NewLine` 属性进行自定义\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\n\n\n#### 自定义编码\n```",
  "status": "ok"
}