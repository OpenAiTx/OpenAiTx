{
  "id": 11,
  "origin": "    public string Test1 { get; set; }\n    [ExcelColumnName(\"Column2\")]\n    public string Test2 { get; set; }\n    [ExcelIgnore]\n    public string Test3 { get; set; }\n    [ExcelColumnIndex(\"I\")] // system will convert \"I\" to 8 index\n    public string Test4 { get; set; }\n    public string Test5 { get; } //wihout set will ignore\n    public string Test6 { get; private set; } //un-public set will ignore\n    [ExcelColumnIndex(3)] // start with 0\n    public string Test7 { get; set; }\n}\n\nvar rows = MiniExcel.Query<ExcelAttributeDemo>(path).ToList();\nAssert.Equal(\"Column1\", rows[0].Test1);\nAssert.Equal(\"Column2\", rows[0].Test2);\nAssert.Null(rows[0].Test3);\nAssert.Equal(\"Test7\", rows[0].Test4);\nAssert.Null(rows[0].Test5);\nAssert.Null(rows[0].Test6);\nAssert.Equal(\"Test4\", rows[0].Test7);\n```\n\n\n\n\n\n#### 2. Custom Format (ExcelFormatAttribute)\n\nSince V0.21.0 support class which contains `ToString(string content)` method format\n\nClass\n\n```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n\n    [ExcelFormat(\"MMMM dd, yyyy\")]\n    public DateTime InDate { get; set; }\n}\n```\n\nCode\n\n```csharp\nvar value = new Dto[] {\n    new Issue241Dto{ Name=\"Jack\",InDate=new DateTime(2021,01,04)},\n    new Issue241Dto{ Name=\"Henry\",InDate=new DateTime(2020,04,05)},\n};\nMiniExcel.SaveAs(path, value);\n```\n\nResult\n\n![image](https://user-images.githubusercontent.com/12729184/118910788-ab2bcd80-b957-11eb-8d42-bfce36621b1b.png)\n\nQuery supports custom format conversion\n\n![image](https://user-images.githubusercontent.com/12729184/118911286-87b55280-b958-11eb-9a88-c8ff403d240a.png)\n\n#### 3. Set Column Width(ExcelColumnWidthAttribute)\n\n```csharp\npublic class Dto\n{\n    [ExcelColumnWidth(20)]\n    public int ID { get; set; }\n    [ExcelColumnWidth(15.50)]\n    public string Name { get; set; }\n}\n```\n\n#### 4. Multiple column names mapping to the same property.\n\n```csharp\npublic class Dto\n{\n    [ExcelColumnName(excelColumnName:\"EmployeeNo\",aliases:new[] { \"EmpNo\",\"No\" })]\n    public string Empno { get; set; }\n    public string Name { get; set; }\n}\n```\n\n\n\n#### 5. System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n\nSince 1.24.0, system supports System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n\n```C#\npublic class TestIssueI4TXGTDto\n{\n    public int ID { get; set; }\n    public string Name { get; set; }\n    [DisplayName(\"Specification\")]\n    public string Spc { get; set; }\n    [DisplayName(\"Unit Price\")]\n    public decimal Up { get; set; }\n}",
  "origin_sha": "gcZbMdA2CV05B4NXE9ueeeC4MJdamNBQCdxC5Pqcu08=",
  "translate": "```csharp\npublic string Test1 { get; set; }\n[ExcelColumnName(\"Column2\")]\npublic string Test2 { get; set; }\n[ExcelIgnore]\npublic string Test3 { get; set; }\n[ExcelColumnIndex(\"I\")] // sistem akan mengubah \"I\" menjadi indeks 8\npublic string Test4 { get; set; }\npublic string Test5 { get; } //tanpa set akan diabaikan\npublic string Test6 { get; private set; } //set non-public akan diabaikan\n[ExcelColumnIndex(3)] // mulai dari 0\npublic string Test7 { get; set; }\n}\n\nvar rows = MiniExcel.Query<ExcelAttributeDemo>(path).ToList();\nAssert.Equal(\"Column1\", rows[0].Test1);\nAssert.Equal(\"Column2\", rows[0].Test2);\nAssert.Null(rows[0].Test3);\nAssert.Equal(\"Test7\", rows[0].Test4);\nAssert.Null(rows[0].Test5);\nAssert.Null(rows[0].Test6);\nAssert.Equal(\"Test4\", rows[0].Test7);\n```\n\n\n\n\n\n#### 2. Format Kustom (ExcelFormatAttribute)\n\nSejak V0.21.0 mendukung kelas yang berisi metode `ToString(string content)` untuk format\n\nKelas\n\n```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n\n    [ExcelFormat(\"MMMM dd, yyyy\")]\n    public DateTime InDate { get; set; }\n}\n```\n\nKode\n\n```csharp\nvar value = new Dto[] {\n    new Issue241Dto{ Name=\"Jack\",InDate=new DateTime(2021,01,04)},\n    new Issue241Dto{ Name=\"Henry\",InDate=new DateTime(2020,04,05)},\n};\nMiniExcel.SaveAs(path, value);\n```\n\nHasil\n\n![image](https://user-images.githubusercontent.com/12729184/118910788-ab2bcd80-b957-11eb-8d42-bfce36621b1b.png)\n\nQuery mendukung konversi format kustom\n\n![image](https://user-images.githubusercontent.com/12729184/118911286-87b55280-b958-11eb-9a88-c8ff403d240a.png)\n\n#### 3. Mengatur Lebar Kolom (ExcelColumnWidthAttribute)\n\n```csharp\npublic class Dto\n{\n    [ExcelColumnWidth(20)]\n    public int ID { get; set; }\n    [ExcelColumnWidth(15.50)]\n    public string Name { get; set; }\n}\n```\n\n#### 4. Beberapa nama kolom dipetakan ke properti yang sama.\n\n```csharp\npublic class Dto\n{\n    [ExcelColumnName(excelColumnName:\"EmployeeNo\",aliases:new[] { \"EmpNo\",\"No\" })]\n    public string Empno { get; set; }\n    public string Name { get; set; }\n}\n```\n\n\n\n#### 5. System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n\nSejak 1.24.0, sistem mendukung System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n\n```C#\npublic class TestIssueI4TXGTDto\n{\n    public int ID { get; set; }\n    public string Name { get; set; }\n    [DisplayName(\"Specification\")]\n    public string Spc { get; set; }\n    [DisplayName(\"Unit Price\")]\n    public decimal Up { get; set; }\n}\n```",
  "status": "ok"
}