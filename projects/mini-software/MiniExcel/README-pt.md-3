{
  "id": 3,
  "origin": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. Get Columns\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // get column count\n```\n\n#### 8. Dynamic Query cast row to `IDictionary<string,object>`\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// or\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// or Query specified ranges (capitalized)\n// A2 represents the second row of column A, C3 represents the third row of column C\n// If you don't want to restrict rows, just don't include numbers\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Query Excel return DataTable\n\nNot recommended, because DataTable will load all data into memory and lose MiniExcel's low memory consumption feature.\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Specify the cell to start reading data\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Fill Merged Cells\n\nNote: The efficiency is slower compared to `not using merge fill`\n\nReason: The OpenXml standard puts mergeCells at the bottom of the file, which leads to the need to foreach the sheetxml twice\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nsupport variable length and width multi-row and column filling\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Reading big file by disk-base cache (Disk-Base Cache - SharedString)\n\nIf the SharedStrings size exceeds 5 MB, MiniExcel default will use local disk cache, e.g, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(one million rows data), when disable disk cache the maximum memory usage is 195MB, but able disk cache only needs 65MB. Note, this optimization needs some efficiency cost, so this case will increase reading time from 7.4 seconds to 27.2 seconds, If you don't need it that you can disable disk cache with the following code:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nYou can use `SharedStringCacheSize ` to change the sharedString file size beyond the specified size for disk caching\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n\n\n\n\n",
  "origin_sha": "Th7oEFQjLrBaVMzEWFf1Q2rPewXbroJ5P5dVVNt3/c0=",
  "translate": "```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. Obter Colunas\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // exemplo de resultado: [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // obter a contagem de colunas\n```\n\n#### 8. Consulta Dinâmica converte linha para `IDictionary<string,object>`\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// ou\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// ou Consultar intervalos especificados (com letras maiúsculas)\n// A2 representa a segunda linha da coluna A, C3 representa a terceira linha da coluna C\n// Se você não quiser restringir linhas, basta não incluir números\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Consultar Excel retornando DataTable\n\nNão recomendado, pois o DataTable irá carregar todos os dados na memória e perder a característica de baixo consumo de memória do MiniExcel.\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Especificar a célula para iniciar a leitura dos dados\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Preencher Células Mescladas\n\nNota: A eficiência é menor em comparação com `não usar preenchimento de mesclagem`\n\nMotivo: O padrão OpenXml coloca mergeCells na parte inferior do arquivo, o que leva à necessidade de percorrer o sheetxml duas vezes\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nsuporta preenchimento multilinhas e multicolunas de comprimento e largura variável\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Leitura de arquivos grandes por cache baseado em disco (Disk-Base Cache - SharedString)\n\nSe o tamanho de SharedStrings exceder 5 MB, o MiniExcel, por padrão, usará cache em disco local, por exemplo, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx) (um milhão de linhas de dados), ao desabilitar o cache em disco o uso máximo de memória é de 195MB, mas com o cache em disco habilitado precisa de apenas 65MB. Atenção, essa otimização tem algum custo de eficiência, então esse caso aumentará o tempo de leitura de 7,4 segundos para 27,2 segundos. Se você não precisar disso, pode desabilitar o cache em disco com o código a seguir:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nVocê pode usar `SharedStringCacheSize ` para alterar o tamanho do arquivo sharedString acima do qual será usado o cache em disco\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n",
  "status": "ok"
}