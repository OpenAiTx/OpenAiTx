{
  "id": 2,
  "origin": "var value = new Dictionary<string, object>()\n{\n    [\"Logo\"] = new MiniWordPicture() { Path= PathHelper.GetFile(\"DemoLogo.png\"), Width= 180, Height= 180 }\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n##### Template\n\n![image](https://user-images.githubusercontent.com/12729184/190647953-6f9da393-e666-4658-a56d-b3a7f13c0ea1.png)\n\n##### Result\n\n![image](https://user-images.githubusercontent.com/12729184/190648179-30258d82-723d-4266-b711-43f132d1842d.png)\n\n### List\n\ntag value is `string[]` or `IList<string>` type\n\n##### Example\n\n```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"managers\"] = new[] { \"Jack\" ,\"Alan\"},\n    [\"employees\"] = new[] { \"Mike\" ,\"Henry\"},\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```\n\nTemplate\n\n![image](https://user-images.githubusercontent.com/12729184/190645513-230c54f3-d38f-47af-b844-0c8c1eff2f52.png)\n\n##### Result\n\n![image](https://user-images.githubusercontent.com/12729184/190645704-1f6405e9-71e3-45b9-aa99-2ba52e5e1519.png)\n\n### Table\n\nTag value is `IEmerable<Dictionary<string,object>>` type\n\n##### Example\n\n```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"TripHs\"] = new List<Dictionary<string, object>>\n    {\n        new Dictionary<string, object>\n        {\n            { \"sDate\",DateTime.Parse(\"2022-09-08 08:30:00\")},\n            { \"eDate\",DateTime.Parse(\"2022-09-08 15:00:00\")},\n            { \"How\",\"Discussion requirement part1\"},\n            { \"Photo\",new MiniWordPicture() { Path = PathHelper.GetFile(\"DemoExpenseMeeting02.png\"), Width = 160, Height = 90 }},\n        },\n        new Dictionary<string, object>\n        {\n            { \"sDate\",DateTime.Parse(\"2022-09-09 08:30:00\")},\n            { \"eDate\",DateTime.Parse(\"2022-09-09 17:00:00\")},\n            { \"How\",\"Discussion requirement part2 and development\"},\n            { \"Photo\",new MiniWordPicture() { Path = PathHelper.GetFile(\"DemoExpenseMeeting01.png\"), Width = 160, Height = 90 }},\n        },\n    }\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```\n\n##### Template\n\n![image](https://user-images.githubusercontent.com/12729184/190843632-05bb6459-f1c1-4bdc-a79b-54889afdfeea.png)\n\n\n##### Result\n\n![image](https://user-images.githubusercontent.com/12729184/190843663-c00baf16-21f2-4579-9d08-996a2c8c549b.png)\n\n### List inside list\n\nTag value is `IEnumerable<MiniWordForeach>` type. Adding `{{foreach` and `endforeach}}` tags to template is required.\n\n##### Example\n\n```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"TripHs\"] = new List<Dictionary<string, object>>\n    {\n        new Dictionary<string, object>\n        {\n            { \"sDate\", DateTime.Parse(\"2022-09-08 08:30:00\") },\n            { \"eDate\", DateTime.Parse(\"2022-09-08 15:00:00\") },\n            { \"How\", \"Discussion requirement part1\" },\n            {\n                \"Details\", new List<MiniWordForeach>()\n                {\n                    new MiniWordForeach()\n                    {",
  "origin_sha": "fcrADKrxc7FP5YY+v3IYgPHBB4lzxLJZn7PKtI8lfTg=",
  "translate": "var value = new Dictionary<string, object>()\n{\n    [\"Logo\"] = new MiniWordPicture() { Path= PathHelper.GetFile(\"DemoLogo.png\"), Width= 180, Height= 180 }\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n##### Шаблон\n\n![image](https://user-images.githubusercontent.com/12729184/190647953-6f9da393-e666-4658-a56d-b3a7f13c0ea1.png)\n\n##### Результат\n\n![image](https://user-images.githubusercontent.com/12729184/190648179-30258d82-723d-4266-b711-43f132d1842d.png)\n\n### Список\n\nЗначение тега — это тип `string[]` или `IList<string>`\n\n##### Пример\n\n```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"managers\"] = new[] { \"Jack\" ,\"Alan\"},\n    [\"employees\"] = new[] { \"Mike\" ,\"Henry\"},\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```\n\nШаблон\n\n![image](https://user-images.githubusercontent.com/12729184/190645513-230c54f3-d38f-47af-b844-0c8c1eff2f52.png)\n\n##### Результат\n\n![image](https://user-images.githubusercontent.com/12729184/190645704-1f6405e9-71e3-45b9-aa99-2ba52e5e1519.png)\n\n### Таблица\n\nЗначение тега — тип `IEmerable<Dictionary<string,object>>`\n\n##### Пример\n\n```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"TripHs\"] = new List<Dictionary<string, object>>\n    {\n        new Dictionary<string, object>\n        {\n            { \"sDate\",DateTime.Parse(\"2022-09-08 08:30:00\")},\n            { \"eDate\",DateTime.Parse(\"2022-09-08 15:00:00\")},\n            { \"How\",\"Discussion requirement part1\"},\n            { \"Photo\",new MiniWordPicture() { Path = PathHelper.GetFile(\"DemoExpenseMeeting02.png\"), Width = 160, Height = 90 }},\n        },\n        new Dictionary<string, object>\n        {\n            { \"sDate\",DateTime.Parse(\"2022-09-09 08:30:00\")},\n            { \"eDate\",DateTime.Parse(\"2022-09-09 17:00:00\")},\n            { \"How\",\"Discussion requirement part2 and development\"},\n            { \"Photo\",new MiniWordPicture() { Path = PathHelper.GetFile(\"DemoExpenseMeeting01.png\"), Width = 160, Height = 90 }},\n        },\n    }\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```\n\n##### Шаблон\n\n![image](https://user-images.githubusercontent.com/12729184/190843632-05bb6459-f1c1-4bdc-a79b-54889afdfeea.png)\n\n\n##### Результат\n\n![image](https://user-images.githubusercontent.com/12729184/190843663-c00baf16-21f2-4579-9d08-996a2c8c549b.png)\n\n### Список внутри списка\n\nЗначение тега — тип `IEnumerable<MiniWordForeach>`. Необходимо добавить теги `{{foreach` и `endforeach}}` в шаблон.\n\n##### Пример\n\n```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"TripHs\"] = new List<Dictionary<string, object>>\n    {\n        new Dictionary<string, object>\n        {\n            { \"sDate\", DateTime.Parse(\"2022-09-08 08:30:00\") },\n            { \"eDate\", DateTime.Parse(\"2022-09-08 15:00:00\") },\n            { \"How\", \"Discussion requirement part1\" },\n            {\n                \"Details\", new List<MiniWordForeach>()\n                {\n                    new MiniWordForeach()\n                    {",
  "status": "ok"
}