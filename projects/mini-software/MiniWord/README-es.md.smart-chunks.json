[
  {
    "Id": 1,
    "Content": "<div align=\"center\">\n<p><a href=\"https://www.nuget.org/packages/MiniWord\"><img src=\"https://img.shields.io/nuget/v/MiniWord.svg\" alt=\"NuGet\"></a>  <a href=\"https://www.nuget.org/packages/MiniWord\"><img src=\"https://img.shields.io/nuget/dt/MiniWord.svg\" alt=\"\"></a>\n<a href=\"https://github.com/mini-software/MiniWord\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/mini-software/MiniWord?logo=github\" alt=\"GitHub stars\"></a>\n<a href=\"https://www.nuget.org/packages/MiniWord\"><img src=\"https://img.shields.io/badge/.NET-%3E%3D%204.5-red.svg\" alt=\"version\"></a>\n<a href=\"https://deepwiki.com/mini-software/MiniWord\"><img src=\"https://deepwiki.com/badge.svg\" alt=\"Ask DeepWiki\"></a>\n</p>\n</div>\n\n---\n\n<div style=\"text-align: center\"><p><a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=en\"><img src=\"https://img.shields.io/badge/EN-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=zh-CN\"><img src=\"https://img.shields.io/badge/简中-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=zh-TW\"><img src=\"https://img.shields.io/badge/繁中-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=ja\"><img src=\"https://img.shields.io/badge/日本語-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=ko\"><img src=\"https://img.shields.io/badge/한국어-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=th\"><img src=\"https://img.shields.io/badge/ไทย-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=fr\"><img src=\"https://img.shields.io/badge/Français-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=de\"><img src=\"https://img.shields.io/badge/Deutsch-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=es\"><img src=\"https://img.shields.io/badge/Español-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=it\"><img src=\"https://img.shields.io/badge/Italiano-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=ru\"><img src=\"https://img.shields.io/badge/Русский-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=pt\"><img src=\"https://img.shields.io/badge/Português-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=nl\"><img src=\"https://img.shields.io/badge/Nederlands-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=pl\"><img src=\"https://img.shields.io/badge/Polski-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=ar\"><img src=\"https://img.shields.io/badge/العربية-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=tr\"><img src=\"https://img.shields.io/badge/Türkçe-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=vi\"><img src=\"https://img.shields.io/badge/Tiếng Việt-white\" alt=\"version\"></a> </p></div>\n\n---\n\n<div align=\"center\">\n Your <a href=\"https://github.com/mini-software/MiniWord\">Star</a> and <a href=\"https://miniexcel.github.io\">dotnate</a> can make MiniWord better\n</div>\n\n---\n\n## Introduction\n\nMiniWord is an easy and effective .NET Word Template library.\n\n![image](https://user-images.githubusercontent.com/12729184/190835307-6cd87982-b5f3-4a79-9682-bdd1cc02a4ea.png)\n\n\n\n## Getting Started\n\n### Installation\n\n- nuget link : https://www.nuget.org/packages/MiniWord\n\n### Quick Start\n\nTemplate follow \"WHAT you see is what you get\" design，and the template tag styles are completely preserved.\n",
    "ContentSha": "DHV28cQWuUh9qOjg4y/CRCATXyMAQfF677sbG6igbBI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<div align=\"center\">\n<p><a href=\"https://www.nuget.org/packages/MiniWord\"><img src=\"https://img.shields.io/nuget/v/MiniWord.svg\" alt=\"NuGet\"></a>  <a href=\"https://www.nuget.org/packages/MiniWord\"><img src=\"https://img.shields.io/nuget/dt/MiniWord.svg\" alt=\"\"></a>\n<a href=\"https://github.com/mini-software/MiniWord\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/mini-software/MiniWord?logo=github\" alt=\"GitHub stars\"></a>\n<a href=\"https://www.nuget.org/packages/MiniWord\"><img src=\"https://img.shields.io/badge/.NET-%3E%3D%204.5-red.svg\" alt=\"version\"></a>\n<a href=\"https://deepwiki.com/mini-software/MiniWord\"><img src=\"https://deepwiki.com/badge.svg\" alt=\"Ask DeepWiki\"></a>\n</p>\n</div>\n\n---\n\n<div style=\"text-align: center\"><p><a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=en\"><img src=\"https://img.shields.io/badge/EN-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=zh-CN\"><img src=\"https://img.shields.io/badge/简中-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=zh-TW\"><img src=\"https://img.shields.io/badge/繁中-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=ja\"><img src=\"https://img.shields.io/badge/日本語-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=ko\"><img src=\"https://img.shields.io/badge/한국어-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=th\"><img src=\"https://img.shields.io/badge/ไทย-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=fr\"><img src=\"https://img.shields.io/badge/Français-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=de\"><img src=\"https://img.shields.io/badge/Deutsch-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=es\"><img src=\"https://img.shields.io/badge/Español-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=it\"><img src=\"https://img.shields.io/badge/Italiano-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=ru\"><img src=\"https://img.shields.io/badge/Русский-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=pt\"><img src=\"https://img.shields.io/badge/Português-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=nl\"><img src=\"https://img.shields.io/badge/Nederlands-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=pl\"><img src=\"https://img.shields.io/badge/Polski-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=ar\"><img src=\"https://img.shields.io/badge/العربية-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=tr\"><img src=\"https://img.shields.io/badge/Türkçe-white\" alt=\"version\"></a> <a href=\"https://openaitx.github.io/view.html?user=mini-software&project=MiniWord&lang=vi\"><img src=\"https://img.shields.io/badge/Tiếng Việt-white\" alt=\"version\"></a> </p></div>\n\n---\n\n<div align=\"center\">\n Tu <a href=\"https://github.com/mini-software/MiniWord\">estrella</a> y <a href=\"https://miniexcel.github.io\">donación</a> pueden hacer MiniWord mejor\n</div>\n\n---\n\n## Introducción\n\nMiniWord es una biblioteca de plantillas de Word para .NET fácil y efectiva.\n\n![image](https://user-images.githubusercontent.com/12729184/190835307-6cd87982-b5f3-4a79-9682-bdd1cc02a4ea.png)\n\n\n\n## Primeros pasos\n\n### Instalación\n\n- enlace nuget : https://www.nuget.org/packages/MiniWord\n\n### Inicio rápido\n\nLa plantilla sigue el diseño \"LO QUE ves es lo que obtienes\", y los estilos de las etiquetas de la plantilla se preservan completamente.\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "```csharp\nvar value = new Dictionary<string, object>(){[\"title\"] = \"Hello MiniWord\"};\nMiniSoftware.MiniWord.SaveAsByTemplate(outputPath, templatePath, value);\n```",
    "ContentSha": "1y6zl91RqOjZ3qU3p4r24FkHO2qzdiHf+tYddLdu4mU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new Dictionary<string, object>(){[\"title\"] = \"Hello MiniWord\"};\nMiniSoftware.MiniWord.SaveAsByTemplate(outputPath, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 3,
    "Content": "\n![image](https://user-images.githubusercontent.com/12729184/190875707-6c5639ab-9518-4dc1-85d8-81e20af465e8.png)\n\n### Input, Output\n\n- Input support file path, byte[]\n- Output support file path, byte[], stream\n",
    "ContentSha": "kCxPBRzWcg3+yRVJud9ArAidG6Jz2DJrnwGwdI6sSRQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "![image](https://user-images.githubusercontent.com/12729184/190875707-6c5639ab-9518-4dc1-85d8-81e20af465e8.png)\n\n### Entrada, Salida\n\n- Entrada admite ruta de archivo, byte[]\n- Salida admite ruta de archivo, byte[], flujo\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 4,
    "Content": "```csharp\nSaveAsByTemplate(string path, string templatePath, Dictionary<string, object> value)\nSaveAsByTemplate(string path, byte[] templateBytes, Dictionary<string, object> value)\nSaveAsByTemplate(this Stream stream, string templatePath, Dictionary<string, object> value)\nSaveAsByTemplate(this Stream stream, byte[] templateBytes, Dictionary<string, object> value)\n```",
    "ContentSha": "QGPiJvqIZc7qIRmaswA5jT8zN2ypiZEP2ss+HagZxBw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nSaveAsByTemplate(string path, string templatePath, Dictionary<string, object> value)\nSaveAsByTemplate(string path, byte[] templateBytes, Dictionary<string, object> value)\nSaveAsByTemplate(this Stream stream, string templatePath, Dictionary<string, object> value)\nSaveAsByTemplate(this Stream stream, byte[] templateBytes, Dictionary<string, object> value)\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 5,
    "Content": "\n\n\n## Tags\n\nMiniWord template format string like Vue, React `{{tag}}`，users only need to make sure tag and value parameter key same then system will replace them automatically.\n\n### Text\n",
    "ContentSha": "wJpeLbH8LaJXue5iXagjWsIea7rDz3vBuXvNdcrXhMM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## Etiquetas\n\nCadena de formato de plantilla MiniWord similar a Vue, React `{{tag}}`, los usuarios solo necesitan asegurarse de que la etiqueta y la clave del parámetro valor sean iguales, luego el sistema las reemplazará automáticamente.\n\n### Texto\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 6,
    "Content": "```csharp\n{{tag}}\n```",
    "ContentSha": "7zCP8VSnhx6t8mnEyyWpKE/A77UJWeufiGX7O77PUNQ=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n{{tag}}\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 7,
    "Content": "\n##### Example\n",
    "ContentSha": "S64mbEQ0dDp3fGDziF7v91xy/sv1PgBkGbS5jzIto8k=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "##### Ejemplo\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 8,
    "Content": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"Name\"] = \"Jack\",\n    [\"Department\"] = \"IT Department\",\n    [\"Purpose\"] = \"Shanghai site needs a new system to control HR system.\",\n    [\"StartDate\"] = DateTime.Parse(\"2022-09-07 08:30:00\"),\n    [\"EndDate\"] = DateTime.Parse(\"2022-09-15 15:30:00\"),\n    [\"Approved\"] = true,\n    [\"Total_Amount\"] = 123456,\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "41IH5r/i3I0+bjEzDuzk3mz0FuY0ntb7fEg2Y021eGI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"Name\"] = \"Jack\",\n    [\"Department\"] = \"IT Department\",\n    [\"Purpose\"] = \"Shanghai site needs a new system to control HR system.\",\n    [\"StartDate\"] = DateTime.Parse(\"2022-09-07 08:30:00\"),\n    [\"EndDate\"] = DateTime.Parse(\"2022-09-15 15:30:00\"),\n    [\"Approved\"] = true,\n    [\"Total_Amount\"] = 123456,\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 9,
    "Content": "\n##### Template\n\n![image](https://user-images.githubusercontent.com/12729184/190834360-39b4b799-d523-4b7e-9331-047a61fd5eb9.png)\n\n##### Result\n\n![image](https://user-images.githubusercontent.com/12729184/190834455-ba065211-0f9d-41d1-9b7a-5d9e96ac2eff.png)\n\n### Image\n\nValue type is `MiniWordPicture`\n\n##### Example\n",
    "ContentSha": "+xqm6MYTNVG1lHHAK9bqQu4iUjUj+VdAJiq/Dv5Cdow=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "##### Plantilla\n\n![imagen](https://user-images.githubusercontent.com/12729184/190834360-39b4b799-d523-4b7e-9331-047a61fd5eb9.png)\n\n##### Resultado\n\n![imagen](https://user-images.githubusercontent.com/12729184/190834455-ba065211-0f9d-41d1-9b7a-5d9e96ac2eff.png)\n\n### Imagen\n\nEl tipo de valor es `MiniWordPicture`\n\n##### Ejemplo\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 10,
    "Content": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"Logo\"] = new MiniWordPicture() { Path= PathHelper.GetFile(\"DemoLogo.png\"), Width= 180, Height= 180 }\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "GmvP74Ndcm67kn6WO8HiLSqMi4QiKUYGvWEEAwz5Znw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"Logo\"] = new MiniWordPicture() { Path= PathHelper.GetFile(\"DemoLogo.png\"), Width= 180, Height= 180 }\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 11,
    "Content": "\n\n\n##### Template\n\n![image](https://user-images.githubusercontent.com/12729184/190647953-6f9da393-e666-4658-a56d-b3a7f13c0ea1.png)\n\n##### Result\n\n![image](https://user-images.githubusercontent.com/12729184/190648179-30258d82-723d-4266-b711-43f132d1842d.png)\n\n### List\n\ntag value is `string[]` or `IList<string>` type\n\n##### Example\n",
    "ContentSha": "C8XFiJ1dFZhxqvD+ieERu+nlTFcVF4Am4K/2LHlkFdY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "##### Plantilla\n\n![image](https://user-images.githubusercontent.com/12729184/190647953-6f9da393-e666-4658-a56d-b3a7f13c0ea1.png)\n\n##### Resultado\n\n![image](https://user-images.githubusercontent.com/12729184/190648179-30258d82-723d-4266-b711-43f132d1842d.png)\n\n### Lista\n\nel valor de tag es de tipo `string[]` o `IList<string>`\n\n##### Ejemplo\n\n\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 12,
    "Content": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"managers\"] = new[] { \"Jack\" ,\"Alan\"},\n    [\"employees\"] = new[] { \"Mike\" ,\"Henry\"},\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "zzZ25beMEiWtgarrcXMLQaoSDTvrTdQRYn9bD9us+eg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"managers\"] = new[] { \"Jack\" ,\"Alan\"},\n    [\"employees\"] = new[] { \"Mike\" ,\"Henry\"},\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 13,
    "Content": "\nTemplate\n\n![image](https://user-images.githubusercontent.com/12729184/190645513-230c54f3-d38f-47af-b844-0c8c1eff2f52.png)\n\n##### Result\n\n![image](https://user-images.githubusercontent.com/12729184/190645704-1f6405e9-71e3-45b9-aa99-2ba52e5e1519.png)\n\n### Table\n\nTag value is `IEmerable<Dictionary<string,object>>` type\n\n##### Example\n",
    "ContentSha": "RZCIwNCGoKMDjOAoe5PwtKCs7a71hwZ5/CS6Ff5QfRg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "Plantilla\n\n![imagen](https://user-images.githubusercontent.com/12729184/190645513-230c54f3-d38f-47af-b844-0c8c1eff2f52.png)\n\n##### Resultado\n\n![imagen](https://user-images.githubusercontent.com/12729184/190645704-1f6405e9-71e3-45b9-aa99-2ba52e5e1519.png)\n\n### Tabla\n\nEl valor de la etiqueta es del tipo `IEmerable<Dictionary<string,object>>`\n\n##### Ejemplo\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 14,
    "Content": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"TripHs\"] = new List<Dictionary<string, object>>\n    {\n        new Dictionary<string, object>\n        {\n            { \"sDate\",DateTime.Parse(\"2022-09-08 08:30:00\")},\n            { \"eDate\",DateTime.Parse(\"2022-09-08 15:00:00\")},\n            { \"How\",\"Discussion requirement part1\"},\n            { \"Photo\",new MiniWordPicture() { Path = PathHelper.GetFile(\"DemoExpenseMeeting02.png\"), Width = 160, Height = 90 }},\n        },\n        new Dictionary<string, object>\n        {\n            { \"sDate\",DateTime.Parse(\"2022-09-09 08:30:00\")},\n            { \"eDate\",DateTime.Parse(\"2022-09-09 17:00:00\")},\n            { \"How\",\"Discussion requirement part2 and development\"},\n            { \"Photo\",new MiniWordPicture() { Path = PathHelper.GetFile(\"DemoExpenseMeeting01.png\"), Width = 160, Height = 90 }},\n        },\n    }\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "Q/+IwreJoj/TGNZQsrpXqIjIUnoamlfG4tngyYP+N0o=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"TripHs\"] = new List<Dictionary<string, object>>\n    {\n        new Dictionary<string, object>\n        {\n            { \"sDate\",DateTime.Parse(\"2022-09-08 08:30:00\")},\n            { \"eDate\",DateTime.Parse(\"2022-09-08 15:00:00\")},\n            { \"How\",\"Discussion requirement part1\"},\n            { \"Photo\",new MiniWordPicture() { Path = PathHelper.GetFile(\"DemoExpenseMeeting02.png\"), Width = 160, Height = 90 }},\n        },\n        new Dictionary<string, object>\n        {\n            { \"sDate\",DateTime.Parse(\"2022-09-09 08:30:00\")},\n            { \"eDate\",DateTime.Parse(\"2022-09-09 17:00:00\")},\n            { \"How\",\"Discussion requirement part2 and development\"},\n            { \"Photo\",new MiniWordPicture() { Path = PathHelper.GetFile(\"DemoExpenseMeeting01.png\"), Width = 160, Height = 90 }},\n        },\n    }\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 15,
    "Content": "\n##### Template\n\n![image](https://user-images.githubusercontent.com/12729184/190843632-05bb6459-f1c1-4bdc-a79b-54889afdfeea.png)\n\n\n##### Result\n\n![image](https://user-images.githubusercontent.com/12729184/190843663-c00baf16-21f2-4579-9d08-996a2c8c549b.png)\n\n### List inside list\n\nTag value is `IEnumerable<MiniWordForeach>` type. Adding `{{foreach` and `endforeach}}` tags to template is required.\n\n##### Example\n",
    "ContentSha": "EbiuUQm/3TqBIMg4y++OTjno5W0VXPO3+5xvSaQ0X8k=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "##### Plantilla\n\n![image](https://user-images.githubusercontent.com/12729184/190843632-05bb6459-f1c1-4bdc-a79b-54889afdfeea.png)\n\n\n##### Resultado\n\n![image](https://user-images.githubusercontent.com/12729184/190843663-c00baf16-21f2-4579-9d08-996a2c8c549b.png)\n\n### Lista dentro de lista\n\nEl valor de la etiqueta es de tipo `IEnumerable<MiniWordForeach>`. Es necesario agregar las etiquetas `{{foreach` y `endforeach}}` a la plantilla.\n\n##### Ejemplo\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 16,
    "Content": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"TripHs\"] = new List<Dictionary<string, object>>\n    {\n        new Dictionary<string, object>\n        {\n            { \"sDate\", DateTime.Parse(\"2022-09-08 08:30:00\") },\n            { \"eDate\", DateTime.Parse(\"2022-09-08 15:00:00\") },\n            { \"How\", \"Discussion requirement part1\" },\n            {\n                \"Details\", new List<MiniWordForeach>()\n                {\n                    new MiniWordForeach()\n                    {\n                        Value = new Dictionary<string, object>()\n                        {\n                            {\"Text\", \"Air\"},\n                            {\"Value\", \"Airplane\"}\n                        },\n                        Separator = \" | \"\n                    },\n                    new MiniWordForeach()\n                    {\n                        Value = new Dictionary<string, object>()\n                        {\n                            {\"Text\", \"Parking\"},\n                            {\"Value\", \"Car\"}\n                        },\n                        Separator = \" / \"\n                    }\n                }\n            }\n        }\n    }\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "NEEqQ3iqL4lGud8U9mYIH91c3UOSqNpva5zkc19GhQ4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"TripHs\"] = new List<Dictionary<string, object>>\n    {\n        new Dictionary<string, object>\n        {\n            { \"sDate\", DateTime.Parse(\"2022-09-08 08:30:00\") },\n            { \"eDate\", DateTime.Parse(\"2022-09-08 15:00:00\") },\n            { \"How\", \"Discussion requirement part1\" },\n            {\n                \"Details\", new List<MiniWordForeach>()\n                {\n                    new MiniWordForeach()\n                    {\n                        Value = new Dictionary<string, object>()\n                        {\n                            {\"Text\", \"Air\"},\n                            {\"Value\", \"Airplane\"}\n                        },\n                        Separator = \" | \"\n                    },\n                    new MiniWordForeach()\n                    {\n                        Value = new Dictionary<string, object>()\n                        {\n                            {\"Text\", \"Parking\"},\n                            {\"Value\", \"Car\"}\n                        },\n                        Separator = \" / \"\n                    }\n                }\n            }\n        }\n    }\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 17,
    "Content": "\n##### Template\n\n![before_foreach](https://user-images.githubusercontent.com/38832863/220123955-063c9345-3998-4fd7-982c-8d1e3b48bbf8.PNG)\n\n<img width=\"755\" alt=\"Screenshot 2023-08-08 at 17 59 37\" src=\"https://github.com/mini-software/MiniWord/assets/38832863/7811bf53-48cf-4fa4-85d7-d98663feb119\">\n\n##### Result\n\n![after_foreach](https://user-images.githubusercontent.com/38832863/220123960-913a7140-2fa2-415e-bb3e-456e04167382.PNG)\n\n<img width=\"755\" alt=\"Screenshot 2023-08-08 at 18 00 15\" src=\"https://github.com/mini-software/MiniWord/assets/38832863/9e1afcf7-64b1-441c-8488-9ea2bd3114a1\">\n\n### If statement inside template\n\nFor multip paragraph, use @if and @endif tags.\nFor single paragraph and inside foreach, use `{{if` and `endif}}` tags to template is required.\n\n##### Example\n",
    "ContentSha": "da27ruPzdFfKzPs1fYMh8R8LvmWrS+iFG8LBUbKYxA8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "##### Plantilla\n\n![before_foreach](https://user-images.githubusercontent.com/38832863/220123955-063c9345-3998-4fd7-982c-8d1e3b48bbf8.PNG)\n\n<img width=\"755\" alt=\"Screenshot 2023-08-08 at 17 59 37\" src=\"https://github.com/mini-software/MiniWord/assets/38832863/7811bf53-48cf-4fa4-85d7-d98663feb119\">\n\n##### Resultado\n\n![after_foreach](https://user-images.githubusercontent.com/38832863/220123960-913a7140-2fa2-415e-bb3e-456e04167382.PNG)\n\n<img width=\"755\" alt=\"Screenshot 2023-08-08 at 18 00 15\" src=\"https://github.com/mini-software/MiniWord/assets/38832863/9e1afcf7-64b1-441c-8488-9ea2bd3114a1\">\n\n### Sentencia If dentro de la plantilla\n\nPara múltiples párrafos, use las etiquetas @if y @endif.\nPara un solo párrafo y dentro de foreach, use las etiquetas `{{if` y `endif}}` ya que la plantilla lo requiere.\n\n##### Ejemplo\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 18,
    "Content": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"Name\"] = new List<MiniWordHyperLink>(){\n        new MiniWordHyperLink(){\n            Url = \"https://google.com\",\n            Text = \"測試連結22!!\"\n        },\n        new MiniWordHyperLink(){\n            Url = \"https://google1.com\",\n            Text = \"測試連結11!!\"\n        }\n    },\n    [\"Company_Name\"] = \"MiniSofteware\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123,\n    [\"APP\"] = \"Demo APP\",\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "5da/TR5HLZhayW432FRtPkDF6t0VWvs6LsVsL7XiuzA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"Name\"] = new List<MiniWordHyperLink>(){\n        new MiniWordHyperLink(){\n            Url = \"https://google.com\",\n            Text = \"測試連結22!!\"\n        },\n        new MiniWordHyperLink(){\n            Url = \"https://google1.com\",\n            Text = \"測試連結11!!\"\n        }\n    },\n    [\"Company_Name\"] = \"MiniSofteware\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123,\n    [\"APP\"] = \"Demo APP\",\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 19,
    "Content": "\n##### Template For Multi Paragraph\n\n![before_if](https://user-images.githubusercontent.com/38832863/220125429-7dd6ce94-35c6-478e-8903-064f9cf9361a.PNG)\n\n##### Result Of Multi Paragraph\n\n![after_if](https://user-images.githubusercontent.com/38832863/220125435-72ea24b4-2412-45de-961a-ad4b2134417b.PNG)\n\n##### Template For Single Paragraph\n\n<img width=\"931\" alt=\"Screenshot 2023-08-08 at 17 55 46\" src=\"https://github.com/mini-software/MiniWord/assets/38832863/2adea468-a9c1-422f-a270-167086bc4ba3\">\n\n##### Result Of Single Paragraph\n\n<img width=\"536\" alt=\"Screenshot 2023-08-08 at 17 56 47\" src=\"https://github.com/mini-software/MiniWord/assets/38832863/01f71c0f-eee0-4189-8510-abe063126514\">\n\n### ColorText\n\n##### Example\n",
    "ContentSha": "MvPdfR/4+TTztCAyCyOGDlMVwyKzdHj5VBSbF9xWzWg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "##### Plantilla para varios párrafos\n\n![before_if](https://user-images.githubusercontent.com/38832863/220125429-7dd6ce94-35c6-478e-8903-064f9cf9361a.PNG)\n\n##### Resultado de varios párrafos\n\n![after_if](https://user-images.githubusercontent.com/38832863/220125435-72ea24b4-2412-45de-961a-ad4b2134417b.PNG)\n\n##### Plantilla para un solo párrafo\n\n<img width=\"931\" alt=\"Screenshot 2023-08-08 at 17 55 46\" src=\"https://github.com/mini-software/MiniWord/assets/38832863/2adea468-a9c1-422f-a270-167086bc4ba3\">\n\n##### Resultado de un solo párrafo\n\n<img width=\"536\" alt=\"Screenshot 2023-08-08 at 17 56 47\" src=\"https://github.com/mini-software/MiniWord/assets/38832863/01f71c0f-eee0-4189-8510-abe063126514\">\n\n### ColorText\n\n##### Ejemplo\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 20,
    "Content": "```csharp\nvar value = new\n{\n    Company_Name = new MiniWordColorText { Text = \"MiniSofteware\", FontColor = \"#eb70AB\", },\n    Name = new[] {\n        new MiniWordColorText { Text = \"Ja\", HighlightColor = \"#eb70AB\" },\n        new MiniWordColorText { Text = \"ck\", HighlightColor = \"#a56abe\" }\n    },\n    CreateDate = new MiniWordColorText\n    {\n        Text = new DateTime(2021, 01, 01).ToString(),\n        HighlightColor = \"#eb70AB\",\n        FontColor = \"#ffffff\",\n    },\n    VIP = true,\n    Points = 123,\n    APP = \"Demo APP\",\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "eEjswcKHs3uburRZaDMlUWv1ZcwvPPUbAngvUkT0dJA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new\n{\n    Company_Name = new MiniWordColorText { Text = \"MiniSofteware\", FontColor = \"#eb70AB\", },\n    Name = new[] {\n        new MiniWordColorText { Text = \"Ja\", HighlightColor = \"#eb70AB\" },\n        new MiniWordColorText { Text = \"ck\", HighlightColor = \"#a56abe\" }\n    },\n    CreateDate = new MiniWordColorText\n    {\n        Text = new DateTime(2021, 01, 01).ToString(),\n        HighlightColor = \"#eb70AB\",\n        FontColor = \"#ffffff\",\n    },\n    VIP = true,\n    Points = 123,\n    APP = \"Demo APP\",\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 21,
    "Content": "\n\n## Other\n\n### POCO or dynamic parameter\n\nv0.5.0 support POCO or dynamic parameter\n",
    "ContentSha": "KSRouB51akvHfJwPiDA9quLghjcpLFTgJ+vW62trMSo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## Otro\n\n### Parámetro POCO o dinámico\n\nv0.5.0 soporta parámetro POCO o dinámico\n\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 22,
    "Content": "```csharp\nvar value = new { title = \"Hello MiniWord\" };\nMiniWord.SaveAsByTemplate(outputPath, templatePath, value);\n```",
    "ContentSha": "NsQX7qKo+DHpsZdvHMWuOJts51u4ruVK4LuREVleeaw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new { title = \"Hello MiniWord\" };\nMiniWord.SaveAsByTemplate(outputPath, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 23,
    "Content": "\n### FontColor and HighlightColor",
    "ContentSha": "RZvuDhAOxiwbbyQQy/x1xaP41bHcADSECDOvsKEAttI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### ColorDeFuente y ColorDeResaltado\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 24,
    "Content": "```csharp\nvar value = new\n{\n    Company_Name = new MiniWordColorText { Text = \"MiniSofteware\", FontColor = \"#eb70AB\" },\n    Name = new MiniWordColorText { Text = \"Jack\", HighlightColor = \"#eb70AB\" },\n    CreateDate = new MiniWordColorText { Text = new DateTime(2021, 01, 01).ToString(), HighlightColor = \"#eb70AB\", FontColor = \"#ffffff\" },\n    VIP = true,\n    Points = 123,\n    APP = \"Demo APP\",\n};\n```",
    "ContentSha": "jzI4OCFkvMDIfr/5TBI0vFFzRxCulvP7VAFQ9vAjJbo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new\n{\n    Company_Name = new MiniWordColorText { Text = \"MiniSofteware\", FontColor = \"#eb70AB\" },\n    Name = new MiniWordColorText { Text = \"Jack\", HighlightColor = \"#eb70AB\" },\n    CreateDate = new MiniWordColorText { Text = new DateTime(2021, 01, 01).ToString(), HighlightColor = \"#eb70AB\", FontColor = \"#ffffff\" },\n    VIP = true,\n    Points = 123,\n    APP = \"Demo APP\",\n};\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 25,
    "Content": "\n### HyperLink\n\nIf value type is `MiniWordHyperLink` system will replace template string by hyperlink.\n\n* Url： HyperLink URI target path\n* Text：Description\n",
    "ContentSha": "mPR8+OkfPUgNSokRcd5Qd6flTiqD46MK2LGrGyIfyuw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### Hipervínculo\n\nSi el tipo de valor es `MiniWordHyperLink`, el sistema reemplazará la cadena de la plantilla por un hipervínculo.\n\n* Url： Ruta de destino del URI del hipervínculo\n* Texto：Descripción\n\n",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 26,
    "Content": "```csharp\nvar value = new\n{\n    [\"Name\"] = new MiniWordHyperLink(){\n        Url = \"https://google.com\",\n        Text = \"Test Link!!\"\n    },\n    [\"Company_Name\"] = \"MiniSofteware\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123,\n    [\"APP\"] = \"Demo APP\",\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "ContentSha": "fiuRoKpjAylPu6bLy5fxzRylK/1yE6PDUW8yjjYQBGY=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar value = new\n{\n    [\"Name\"] = new MiniWordHyperLink(){\n        Url = \"https://google.com\",\n        Text = \"Test Link!!\"\n    },\n    [\"Company_Name\"] = \"MiniSofteware\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123,\n    [\"APP\"] = \"Demo APP\",\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 27,
    "Content": "\n\n\n## Examples\n\n\n\n#### ASP.NET Core 3.1 API Export\n",
    "ContentSha": "XHJQksb49hwli6zD18gkG/2ahApLeUmaMnRHjI02LSo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n\n\n## Ejemplos\n\n\n\n#### Exportación de API ASP.NET Core 3.1\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  },
  {
    "Id": 28,
    "Content": "```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing MiniSoftware;\n\npublic class Program\n{\n    public static void Main(string[] args) => CreateHostBuilder(args).Build().Run();\n\n    public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args).ConfigureWebHostDefaults(webBuilder => webBuilder.UseStartup<Startup>());\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services) => services.AddMvc();\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseStaticFiles();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllerRoute(\n                name: \"default\",\n                pattern: \"{controller=api}/{action=Index}/{id?}\");\n        });\n    }\n}\n\npublic class ApiController : Controller\n{\n    public IActionResult Index()\n    {\n        return new ContentResult\n        {\n            ContentType = \"text/html\",\n            StatusCode = (int)HttpStatusCode.OK,\n            Content = @\"<html><body>\n<a href='api/DownloadWordFromTemplatePath'>DownloadWordFromTemplatePath</a><br>\n<a href='api/DownloadWordFromTemplateBytes'>DownloadWordFromTemplateBytes</a><br>\n</body></html>\"\n        };\n    }\n\n    static Dictionary<string, object> defaultValue = new Dictionary<string, object>()\n    {\n        [\"title\"] = \"FooCompany\",\n        [\"managers\"] = new List<Dictionary<string, object>> {\n            new Dictionary<string, object>{{\"name\",\"Jack\"},{ \"department\", \"HR\" } },\n            new Dictionary<string, object> {{ \"name\", \"Loan\"},{ \"department\", \"IT\" } }\n        },\n        [\"employees\"] = new List<Dictionary<string, object>> {\n            new Dictionary<string, object>{{ \"name\", \"Wade\" },{ \"department\", \"HR\" } },\n            new Dictionary<string, object> {{ \"name\", \"Felix\" },{ \"department\", \"HR\" } },\n            new Dictionary<string, object>{{ \"name\", \"Eric\" },{ \"department\", \"IT\" } },\n            new Dictionary<string, object> {{ \"name\", \"Keaton\" },{ \"department\", \"IT\" } }\n        }\n    };\n\n    public IActionResult DownloadWordFromTemplatePath()\n    {\n        string templatePath = \"TestTemplateComplex.docx\";\n\n        Dictionary<string, object> value = defaultValue;\n\n        MemoryStream memoryStream = new MemoryStream();\n        MiniWord.SaveAsByTemplate(memoryStream, templatePath, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\")\n        {\n            FileDownloadName = \"demo.docx\"\n        };\n    }\n\n    private static Dictionary<string, Byte[]> TemplateBytesCache = new Dictionary<string, byte[]>();\n\n    static ApiController()\n    {\n        string templatePath = \"TestTemplateComplex.docx\";\n        byte[] bytes = System.IO.File.ReadAllBytes(templatePath);\n        TemplateBytesCache.Add(templatePath, bytes);\n    }\n\n    public IActionResult DownloadWordFromTemplateBytes()\n    {\n        byte[] bytes = TemplateBytesCache[\"TestTemplateComplex.docx\"];\n\n        Dictionary<string, object> value = defaultValue;\n\n        MemoryStream memoryStream = new MemoryStream();\n        MiniWord.SaveAsByTemplate(memoryStream, bytes, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\")\n        {\n            FileDownloadName = \"demo.docx\"\n        };\n    }\n}\n```",
    "ContentSha": "uLe4vs47oTp0ljrv4PBquPP2Sqz3A0m0N9yCMWzKB8w=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing MiniSoftware;\n\npublic class Program\n{\n    public static void Main(string[] args) => CreateHostBuilder(args).Build().Run();\n\n    public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args).ConfigureWebHostDefaults(webBuilder => webBuilder.UseStartup<Startup>());\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services) => services.AddMvc();\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseStaticFiles();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllerRoute(\n                name: \"default\",\n                pattern: \"{controller=api}/{action=Index}/{id?}\");\n        });\n    }\n}\n\npublic class ApiController : Controller\n{\n    public IActionResult Index()\n    {\n        return new ContentResult\n        {\n            ContentType = \"text/html\",\n            StatusCode = (int)HttpStatusCode.OK,\n            Content = @\"<html><body>\n<a href='api/DownloadWordFromTemplatePath'>DownloadWordFromTemplatePath</a><br>\n<a href='api/DownloadWordFromTemplateBytes'>DownloadWordFromTemplateBytes</a><br>\n</body></html>\"\n        };\n    }\n\n    static Dictionary<string, object> defaultValue = new Dictionary<string, object>()\n    {\n        [\"title\"] = \"FooCompany\",\n        [\"managers\"] = new List<Dictionary<string, object>> {\n            new Dictionary<string, object>{{\"name\",\"Jack\"},{ \"department\", \"HR\" } },\n            new Dictionary<string, object> {{ \"name\", \"Loan\"},{ \"department\", \"IT\" } }\n        },\n        [\"employees\"] = new List<Dictionary<string, object>> {\n            new Dictionary<string, object>{{ \"name\", \"Wade\" },{ \"department\", \"HR\" } },\n            new Dictionary<string, object> {{ \"name\", \"Felix\" },{ \"department\", \"HR\" } },\n            new Dictionary<string, object>{{ \"name\", \"Eric\" },{ \"department\", \"IT\" } },\n            new Dictionary<string, object> {{ \"name\", \"Keaton\" },{ \"department\", \"IT\" } }\n        }\n    };\n\n    public IActionResult DownloadWordFromTemplatePath()\n    {\n        string templatePath = \"TestTemplateComplex.docx\";\n\n        Dictionary<string, object> value = defaultValue;\n\n        MemoryStream memoryStream = new MemoryStream();\n        MiniWord.SaveAsByTemplate(memoryStream, templatePath, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\")\n        {\n            FileDownloadName = \"demo.docx\"\n        };\n    }\n\n    private static Dictionary<string, Byte[]> TemplateBytesCache = new Dictionary<string, byte[]>();\n\n    static ApiController()\n    {\n        string templatePath = \"TestTemplateComplex.docx\";\n        byte[] bytes = System.IO.File.ReadAllBytes(templatePath);\n        TemplateBytesCache.Add(templatePath, bytes);\n    }\n\n    public IActionResult DownloadWordFromTemplateBytes()\n    {\n        byte[] bytes = TemplateBytesCache[\"TestTemplateComplex.docx\"];\n\n        Dictionary<string, object> value = defaultValue;\n\n        MemoryStream memoryStream = new MemoryStream();\n        MiniWord.SaveAsByTemplate(memoryStream, bytes, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\")\n        {\n            FileDownloadName = \"demo.docx\"\n        };\n    }\n}\n```",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": true
  },
  {
    "Id": 29,
    "Content": "\n\n\n\n\n\n## Support : [Donate Link](https://miniexcel.github.io/)\n",
    "ContentSha": "WC/y0WXh2+5MNVbS7ojzpIYEWd9we8q5CZQ15w9bWUk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n\n\n\n\n\n## Soporte : [Enlace de donación](https://miniexcel.github.io/)\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [],
    "IsCodeBlock": false
  }
]