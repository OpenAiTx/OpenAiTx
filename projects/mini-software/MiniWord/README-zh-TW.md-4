{
  "id": 4,
  "origin": "    Points = 123,\n    APP = \"Demo APP\",\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n## Other\n\n### POCO or dynamic parameter\n\nv0.5.0 support POCO or dynamic parameter\n\n```csharp\nvar value = new { title = \"Hello MiniWord\" };\nMiniWord.SaveAsByTemplate(outputPath, templatePath, value);\n```\n\n### FontColor and HighlightColor\n```csharp\nvar value = new\n{\n    Company_Name = new MiniWordColorText { Text = \"MiniSofteware\", FontColor = \"#eb70AB\" },\n    Name = new MiniWordColorText { Text = \"Jack\", HighlightColor = \"#eb70AB\" },\n    CreateDate = new MiniWordColorText { Text = new DateTime(2021, 01, 01).ToString(), HighlightColor = \"#eb70AB\", FontColor = \"#ffffff\" },\n    VIP = true,\n    Points = 123,\n    APP = \"Demo APP\",\n};\n```\n\n### HyperLink\n\nIf value type is `MiniWordHyperLink` system will replace template string by hyperlink.\n\n* Url： HyperLink URI target path\n* Text：Description\n\n```csharp\nvar value = new\n{\n    [\"Name\"] = new MiniWordHyperLink(){\n        Url = \"https://google.com\",\n        Text = \"Test Link!!\"\n    },\n    [\"Company_Name\"] = \"MiniSofteware\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123,\n    [\"APP\"] = \"Demo APP\",\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n## Examples\n\n\n\n#### ASP.NET Core 3.1 API Export\n\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing MiniSoftware;\n\npublic class Program\n{\n    public static void Main(string[] args) => CreateHostBuilder(args).Build().Run();\n\n    public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args).ConfigureWebHostDefaults(webBuilder => webBuilder.UseStartup<Startup>());\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services) => services.AddMvc();\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseStaticFiles();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllerRoute(\n                name: \"default\",\n                pattern: \"{controller=api}/{action=Index}/{id?}\");\n        });\n    }\n}\n\npublic class ApiController : Controller\n{\n    public IActionResult Index()",
  "origin_sha": "v8XBfjzp34j+F66kc2wffaxFo1c0W0ikUGlU56N+4KM=",
  "translate": "```csharp\nPoints = 123,\nAPP = \"Demo APP\",\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```\n\n## 其他\n\n### POCO 或 dynamic 參數\n\nv0.5.0 支援 POCO 或 dynamic 參數\n\n```csharp\nvar value = new { title = \"Hello MiniWord\" };\nMiniWord.SaveAsByTemplate(outputPath, templatePath, value);\n```\n\n### FontColor 與 HighlightColor\n\n```csharp\nvar value = new\n{\n    Company_Name = new MiniWordColorText { Text = \"MiniSofteware\", FontColor = \"#eb70AB\" },\n    Name = new MiniWordColorText { Text = \"Jack\", HighlightColor = \"#eb70AB\" },\n    CreateDate = new MiniWordColorText { Text = new DateTime(2021, 01, 01).ToString(), HighlightColor = \"#eb70AB\", FontColor = \"#ffffff\" },\n    VIP = true,\n    Points = 123,\n    APP = \"Demo APP\",\n};\n```\n\n### 超連結 (HyperLink)\n\n如果 value 型別是 `MiniWordHyperLink`，系統會將範本字串替換為超連結。\n\n* Url：超連結 URI 目標路徑\n* Text：描述文字\n\n```csharp\nvar value = new\n{\n    [\"Name\"] = new MiniWordHyperLink(){\n        Url = \"https://google.com\",\n        Text = \"Test Link!!\"\n    },\n    [\"Company_Name\"] = \"MiniSofteware\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123,\n    [\"APP\"] = \"Demo APP\",\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n```\n\n## 範例\n\n#### ASP.NET Core 3.1 API 匯出\n\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing MiniSoftware;\n\npublic class Program\n{\n    public static void Main(string[] args) => CreateHostBuilder(args).Build().Run();\n\n    public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args).ConfigureWebHostDefaults(webBuilder => webBuilder.UseStartup<Startup>());\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services) => services.AddMvc();\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseStaticFiles();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllerRoute(\n                name: \"default\",\n                pattern: \"{controller=api}/{action=Index}/{id?}\");\n        });\n    }\n}\n\npublic class ApiController : Controller\n{\n    public IActionResult Index()\n```",
  "status": "ok"
}