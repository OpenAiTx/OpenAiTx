{
  "id": 2,
  "origin": "    docker compose pull\n    docker compose up -d\n    ```\n\n3.  **Access the Application:**\n    Once the services are up and running, access SparkyFitness in your web browser at:\n    ```\n    http://localhost:3000\n    ```\n\n4.  **AI Chatbot - Optional Configuration:**\n    To enable the AI Chatbot's full functionality, including secure API key storage and database access, follow these steps:\n\n    *   **Configure `AI_API_ENCRYPTION_KEY`:** Generate a secret in \"Supabase -> Edge Functions\" -> \"Environment Variables\". This key is used for encrypting your AI keys when it is stored within Supabase.\n\n    *   **Generate `SUPABASE_ACCESS_TOKEN`:**\n        1.  Access your Docker console.\n        2.  Run `supabase login` and authenticate using the provided URL.\n        3.  Retrieve the access token by running `cat ~/.supabase/access-token`.\n        4.  Update your `docker-compose.yml` or Portainer configuration with this token to redeploy.\n        5.  After redeployment, log in to SparkyFitness and configure the AI service with your preferred provider.\n     \n\n### Manul Deployment of DB & Functions to Supabase\n**Method 1:  \n**If you don't have IPV6 network connection enabled, DB migration will fail as Supabase's free verssion doesn't support IPV4 direct connection.\n\n   1. Download latest release and unzip to your PC.\n   2. Navigate to the project folder. Docker needs to be up & running.\n   3. Run below commands. (functions deploy is needed only for AI configuration. If you don't need ChatBOT, you can skip it)\n``\n      supabase login  \n      supabase link  \n      supabase db push  \n      supabase functions deploy chat   \n``\nRe-run Docker compose. Front end App will start working.\n\n**Method 2:  \n   1. Download latest release and unzip to your PC.  \n   2. Navigate to the project folder.  \n   3. Go to supabase/migrations. Copy the SQL statements and run them in Supabase-->Project-->SQL Editor one by one in ASC order.  \n   4. [Optional] Do the same for supabase/functions/chat  if you require AI ChatBOT. Copy index.js and run it in Supabase-->Project-->Edge Function-->Deploy new function.  \n\n\n",
  "origin_sha": "r6znWWj0ns4QLCEd2ocJVOflhPH5rNgzKE0nMQYJP/c=",
  "translate": "```\ndocker compose pull\ndocker compose up -d\n```\n\n3.  **アプリケーションへのアクセス:**\n    サービスが起動したら、ウェブブラウザでSparkyFitnessにアクセスします:\n    ```\n    http://localhost:3000\n    ```\n\n4.  **AIチャットボット - オプション設定:**\n    AIチャットボットの全機能（安全なAPIキー保存やデータベースアクセスを含む）を有効にするには、以下の手順を実行してください:\n\n    *   **`AI_API_ENCRYPTION_KEY`の設定:** 「Supabase -> Edge Functions」->「Environment Variables」でシークレットを生成します。このキーはSupabase内にAIキーを保存する際の暗号化に使用されます。\n\n    *   **`SUPABASE_ACCESS_TOKEN`の生成:**\n        1.  Dockerコンソールにアクセスします。\n        2.  `supabase login`を実行し、表示されたURLで認証します。\n        3.  `cat ~/.supabase/access-token`を実行してアクセストークンを取得します。\n        4.  このトークンで`docker-compose.yml`またはPortainerの設定を更新し、再デプロイします。\n        5.  再デプロイ後、SparkyFitnessにログインし、お好みのプロバイダーでAIサービスを構成します。\n     \n\n### SupabaseへのDBおよび関数の手動デプロイ\n**方法1:  \n**IPV6ネットワーク接続が有効になっていない場合、DBマイグレーションは失敗します（Supabaseの無料版はIPV4直接接続をサポートしていません）。\n\n   1. 最新リリースをダウンロードし、PCで解凍します。\n   2. プロジェクトフォルダに移動します。Dockerが起動している必要があります。\n   3. 以下のコマンドを実行します。（functions deployはAI設定時のみ必要。ChatBOTが不要な場合はスキップ可）\n``\n      supabase login  \n      supabase link  \n      supabase db push  \n      supabase functions deploy chat   \n``\nDocker composeを再実行してください。フロントエンドアプリが動作を開始します。\n\n**方法2:  \n   1. 最新リリースをダウンロードし、PCで解凍します。  \n   2. プロジェクトフォルダに移動します。  \n   3. supabase/migrationsに移動し、SQL文をコピーしてSupabase→Project→SQL Editorで順番（ASC）に1つずつ実行します。  \n   4. 【オプション】AI ChatBOTが必要な場合はsupabase/functions/chatも同様に実行します。index.jsをコピーし、Supabase→Project→Edge Function→Deploy new functionで実行します。  \n",
  "status": "ok"
}