{
  "id": 2,
  "origin": "    docker compose pull\n    docker compose up -d\n    ```\n\n3.  **Access the Application:**\n    Once the services are up and running, access SparkyFitness in your web browser at:\n    ```\n    http://localhost:3000\n    ```\n\n4.  **AI Chatbot - Optional Configuration:**\n    To enable the AI Chatbot's full functionality, including secure API key storage and database access, follow these steps:\n\n    *   **Configure `AI_API_ENCRYPTION_KEY`:** Generate a secret in \"Supabase -> Edge Functions\" -> \"Environment Variables\". This key is used for encrypting your AI keys when it is stored within Supabase.\n\n    *   **Generate `SUPABASE_ACCESS_TOKEN`:**\n        1.  Access your Docker console.\n        2.  Run `supabase login` and authenticate using the provided URL.\n        3.  Retrieve the access token by running `cat ~/.supabase/access-token`.\n        4.  Update your `docker-compose.yml` or Portainer configuration with this token to redeploy.\n        5.  After redeployment, log in to SparkyFitness and configure the AI service with your preferred provider.\n     \n\n### Manul Deployment of DB & Functions to Supabase\n**Method 1:  \n**If you don't have IPV6 network connection enabled, DB migration will fail as Supabase's free verssion doesn't support IPV4 direct connection.\n\n   1. Download latest release and unzip to your PC.\n   2. Navigate to the project folder. Docker needs to be up & running.\n   3. Run below commands. (functions deploy is needed only for AI configuration. If you don't need ChatBOT, you can skip it)\n``\n      supabase login  \n      supabase link  \n      supabase db push  \n      supabase functions deploy chat   \n``\nRe-run Docker compose. Front end App will start working.\n\n**Method 2:  \n   1. Download latest release and unzip to your PC.  \n   2. Navigate to the project folder.  \n   3. Go to supabase/migrations. Copy the SQL statements and run them in Supabase-->Project-->SQL Editor one by one in ASC order.  \n   4. [Optional] Do the same for supabase/functions/chat  if you require AI ChatBOT. Copy index.js and run it in Supabase-->Project-->Edge Function-->Deploy new function.  \n\n\n",
  "origin_sha": "r6znWWj0ns4QLCEd2ocJVOflhPH5rNgzKE0nMQYJP/c=",
  "translate": "    docker compose pull\n    docker compose up -d\n    ```\n\n3.  **애플리케이션 접속:**\n    서비스가 모두 실행되면, 웹 브라우저에서 SparkyFitness에 접속하세요:\n    ```\n    http://localhost:3000\n    ```\n\n4.  **AI 챗봇 - 선택적 구성:**\n    AI 챗봇의 전체 기능(보안 API 키 저장 및 데이터베이스 접근 포함)을 활성화하려면 아래 단계를 따르세요:\n\n    *   **`AI_API_ENCRYPTION_KEY` 구성:** \"Supabase -> Edge Functions\" -> \"Environment Variables\"에서 시크릿을 생성하세요. 이 키는 Supabase에 AI 키를 저장할 때 암호화하는 데 사용됩니다.\n\n    *   **`SUPABASE_ACCESS_TOKEN` 생성:**\n        1.  Docker 콘솔에 접속합니다.\n        2.  `supabase login`을 실행하고 제공된 URL로 인증합니다.\n        3.  `cat ~/.supabase/access-token` 명령어를 실행하여 액세스 토큰을 확인합니다.\n        4.  해당 토큰을 `docker-compose.yml`이나 Portainer 설정에 업데이트하여 재배포합니다.\n        5.  재배포 후, SparkyFitness에 로그인하여 선호하는 AI 제공업체로 AI 서비스를 구성합니다.\n     \n\n### Supabase에 DB 및 Functions 수동 배포\n**방법 1:**  \n**IPV6 네트워크 연결이 활성화되어 있지 않으면, Supabase 무료 버전이 IPV4 직접 연결을 지원하지 않으므로 DB 마이그레이션이 실패합니다.\n\n   1. 최신 릴리스를 다운로드하여 PC에서 압축을 풉니다.\n   2. 프로젝트 폴더로 이동합니다. Docker가 실행 중이어야 합니다.\n   3. 아래 명령어를 실행합니다. (functions deploy는 AI 구성 시에만 필요합니다. ChatBOT이 필요 없다면 건너뛸 수 있습니다.)\n``\n      supabase login  \n      supabase link  \n      supabase db push  \n      supabase functions deploy chat   \n``\nDocker compose를 다시 실행하세요. 프론트엔드 앱이 정상적으로 동작합니다.\n\n**방법 2:**  \n   1. 최신 릴리스를 다운로드하여 PC에서 압축을 풉니다.  \n   2. 프로젝트 폴더로 이동합니다.  \n   3. supabase/migrations로 이동하여 SQL 구문들을 복사한 뒤, Supabase-->Project-->SQL Editor에서 하나씩 ASC 순서로 실행합니다.  \n   4. [선택 사항] AI ChatBOT이 필요하다면, supabase/functions/chat에서도 동일하게 진행합니다. index.js를 복사해 Supabase-->Project-->Edge Function-->Deploy new function에서 실행합니다.  \n",
  "status": "ok"
}