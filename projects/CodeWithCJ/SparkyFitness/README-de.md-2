{
  "id": 2,
  "origin": "    docker compose pull\n    docker compose up -d\n    ```\n\n3.  **Access the Application:**\n    Once the services are up and running, access SparkyFitness in your web browser at:\n    ```\n    http://localhost:3000\n    ```\n\n4.  **AI Chatbot - Optional Configuration:**\n    To enable the AI Chatbot's full functionality, including secure API key storage and database access, follow these steps:\n\n    *   **Configure `AI_API_ENCRYPTION_KEY`:** Generate a secret in \"Supabase -> Edge Functions\" -> \"Environment Variables\". This key is used for encrypting your AI keys when it is stored within Supabase.\n\n    *   **Generate `SUPABASE_ACCESS_TOKEN`:**\n        1.  Access your Docker console.\n        2.  Run `supabase login` and authenticate using the provided URL.\n        3.  Retrieve the access token by running `cat ~/.supabase/access-token`.\n        4.  Update your `docker-compose.yml` or Portainer configuration with this token to redeploy.\n        5.  After redeployment, log in to SparkyFitness and configure the AI service with your preferred provider.\n     \n\n### Manul Deployment of DB & Functions to Supabase\n**Method 1:  \n**If you don't have IPV6 network connection enabled, DB migration will fail as Supabase's free verssion doesn't support IPV4 direct connection.\n\n   1. Download latest release and unzip to your PC.\n   2. Navigate to the project folder. Docker needs to be up & running.\n   3. Run below commands. (functions deploy is needed only for AI configuration. If you don't need ChatBOT, you can skip it)\n``\n      supabase login  \n      supabase link  \n      supabase db push  \n      supabase functions deploy chat   \n``\nRe-run Docker compose. Front end App will start working.\n\n**Method 2:  \n   1. Download latest release and unzip to your PC.  \n   2. Navigate to the project folder.  \n   3. Go to supabase/migrations. Copy the SQL statements and run them in Supabase-->Project-->SQL Editor one by one in ASC order.  \n   4. [Optional] Do the same for supabase/functions/chat  if you require AI ChatBOT. Copy index.js and run it in Supabase-->Project-->Edge Function-->Deploy new function.  \n\n\n",
  "origin_sha": "r6znWWj0ns4QLCEd2ocJVOflhPH5rNgzKE0nMQYJP/c=",
  "translate": "```markdown\n    docker compose pull\n    docker compose up -d\n    ```\n\n3.  **Zugriff auf die Anwendung:**\n    Sobald die Dienste laufen, öffne SparkyFitness in deinem Webbrowser unter:\n    ```\n    http://localhost:3000\n    ```\n\n4.  **KI-Chatbot – Optionale Konfiguration:**\n    Um die volle Funktionalität des KI-Chatbots zu aktivieren, einschließlich sicherer API-Schlüssel-Speicherung und Datenbankzugriff, befolge diese Schritte:\n\n    *   **Konfiguriere `AI_API_ENCRYPTION_KEY`:** Erstelle ein Secret unter \"Supabase -> Edge Functions\" -> \"Environment Variables\". Dieser Schlüssel wird verwendet, um deine KI-Schlüssel bei der Speicherung in Supabase zu verschlüsseln.\n\n    *   **Generiere `SUPABASE_ACCESS_TOKEN`:**\n        1.  Greife auf deine Docker-Konsole zu.\n        2.  Führe `supabase login` aus und authentifiziere dich mit der bereitgestellten URL.\n        3.  Rufe das Zugriffstoken mit `cat ~/.supabase/access-token` ab.\n        4.  Aktualisiere deine `docker-compose.yml` oder die Portainer-Konfiguration mit diesem Token, um neu zu deployen.\n        5.  Nach dem Redeployment melde dich bei SparkyFitness an und konfiguriere den KI-Dienst mit deinem bevorzugten Anbieter.\n     \n\n### Manuelle Bereitstellung von DB & Funktionen zu Supabase\n**Methode 1:**  \n**Falls du keine IPV6-Netzwerkverbindung aktiviert hast, wird die DB-Migration fehlschlagen, da die kostenlose Version von Supabase keine direkte IPV4-Verbindung unterstützt.**\n\n   1. Lade das neueste Release herunter und entpacke es auf deinem PC.\n   2. Navigiere in den Projektordner. Docker muss laufen.\n   3. Führe die folgenden Befehle aus. (Das Bereitstellen der Funktionen ist nur für die KI-Konfiguration erforderlich. Falls du keinen ChatBOT benötigst, kannst du diesen Schritt überspringen)\n``\n      supabase login  \n      supabase link  \n      supabase db push  \n      supabase functions deploy chat   \n``\nStarte Docker Compose erneut. Die Frontend-App wird dann funktionieren.\n\n**Methode 2:**  \n   1. Lade das neueste Release herunter und entpacke es auf deinem PC.  \n   2. Navigiere in den Projektordner.  \n   3. Gehe zu supabase/migrations. Kopiere die SQL-Anweisungen und führe sie nacheinander in Supabase --> Projekt --> SQL Editor in aufsteigender Reihenfolge aus.  \n   4. [Optional] Wiederhole dies für supabase/functions/chat, falls du den KI-ChatBOT benötigst. Kopiere die index.js und führe sie in Supabase --> Projekt --> Edge Function --> Neue Funktion bereitstellen aus.  \n```",
  "status": "ok"
}