[
  {
    "Id": 1,
    "Content": "# Scrutor [![Build status](https://ci.appveyor.com/api/projects/status/j00uyvqnm54rdlkb?svg=true)](https://ci.appveyor.com/project/khellang/scrutor) [![NuGet Package](https://img.shields.io/nuget/v/Scrutor.svg)](https://www.nuget.org/packages/Scrutor)\n\n> Scrutor - I search or examine thoroughly; I probe, investigate or scrutinize  \n> From scrūta, as the original sense of the verb was to search through trash. - https://en.wiktionary.org/wiki/scrutor\n\nAssembly scanning and decoration extensions for Microsoft.Extensions.DependencyInjection\n\n## Installation\n\nInstall the [Scrutor NuGet Package](https://www.nuget.org/packages/Scrutor).\n\n### Package Manager Console\n",
    "ContentSha": "TobADfSGW7MOt2St4/JXY4+DZEkf60CyUhtq2TADxZc=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content># Scrutor [![Build status](https://ci.appveyor.com/api/projects/status/j00uyvqnm54rdlkb?svg=true)](https://ci.appveyor.com/project/khellang/scrutor) [![NuGet Package](https://img.shields.io/nuget/v/Scrutor.svg)](https://www.nuget.org/packages/Scrutor)\n\n> Scrutor - 我搜索或彻底检查；我探查、调查或细查  \n> 来源于 scrūta，动词的原始含义是翻找垃圾。- https://en.wiktionary.org/wiki/scrutor\n\nMicrosoft.Extensions.DependencyInjection 的程序集扫描和装饰扩展\n\n## 安装\n\n安装 [Scrutor NuGet 包](https://www.nuget.org/packages/Scrutor)。\n\n### 包管理控制台\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "prXYJgj5MZJdNSKrsn7fp+CuyF11CvWynZnOUoA72wc=",
        "originContent": "# Scrutor [![Build status](https://ci.appveyor.com/api/projects/status/j00uyvqnm54rdlkb?svg=true)](https://ci.appveyor.com/project/khellang/scrutor) [![NuGet Package](https://img.shields.io/nuget/v/Scrutor.svg)](https://www.nuget.org/packages/Scrutor)",
        "translatedContent": "<translate-content># Scrutor [![Build status](https://ci.appveyor.com/api/projects/status/j00uyvqnm54rdlkb?svg=true)](https://ci.appveyor.com/project/khellang/scrutor) [![NuGet Package](https://img.shields.io/nuget/v/Scrutor.svg)](https://www.nuget.org/packages/Scrutor)"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "s5dZA/Rp4vP6UjlWSd3vDjW1LbnF8yrhLIeGkzqM/l8=",
        "originContent": "> Scrutor - I search or examine thoroughly; I probe, investigate or scrutinize  ",
        "translatedContent": "> Scrutor - 我搜索或彻底检查；我探查、调查或细查  "
      },
      {
        "row": 4,
        "rowsha": "xgy8nYnyBH9zLgbbGG1m2CQoxCQkTr75RhL9p5mdqxc=",
        "originContent": "> From scrūta, as the original sense of the verb was to search through trash. - https://en.wiktionary.org/wiki/scrutor",
        "translatedContent": "> 来源于 scrūta，动词的原始含义是翻找垃圾。- https://en.wiktionary.org/wiki/scrutor"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "ggQBbAGeRa6iJgKSB0F/kDYHT32sjkvV4Gwxr4KFVmg=",
        "originContent": "Assembly scanning and decoration extensions for Microsoft.Extensions.DependencyInjection",
        "translatedContent": "Microsoft.Extensions.DependencyInjection 的程序集扫描和装饰扩展"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "oV0SUDvwD2VN8Gi9nlr2JZ2xcDrASmE2W5kc5SVX5eo=",
        "originContent": "## Installation",
        "translatedContent": "## 安装"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "VLKJEm3EOENfT6BLeNYJuv662X//7hZU6fZvO4LbZqo=",
        "originContent": "Install the [Scrutor NuGet Package](https://www.nuget.org/packages/Scrutor).",
        "translatedContent": "安装 [Scrutor NuGet 包](https://www.nuget.org/packages/Scrutor)。"
      },
      {
        "row": 11,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 12,
        "rowsha": "Y6YUXbmWFpDy2xZ5t6/VpvAq0xrRhzigWrkpXcihScA=",
        "originContent": "### Package Manager Console",
        "translatedContent": "### 包管理控制台"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "```\nInstall-Package Scrutor\n```",
    "ContentSha": "YV82K1Bqr5BPhe3rnzg8xOe2PMoh94KYk7jU37gcneM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\nInstall-Package Scrutor\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      },
      {
        "row": 2,
        "rowsha": "5/F/hnKaFYV2OXCZxQ2aUJlImVpboC8jroIpJPc1fY0=",
        "originContent": "Install-Package Scrutor",
        "translatedContent": "Install-Package Scrutor"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 3,
    "Content": "\n### .NET Core CLI\n",
    "ContentSha": "NfKh0zrdZECh5Bu6oS090IfaVED6eX7UL9ZjE1HOgAM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### .NET Core CLI\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "### .NET Core CLI"
      },
      {
        "row": 2,
        "rowsha": "PYYUaVIWO1gif/PDGLHK99IpfZz3BJWPGV/MNOnuYBo=",
        "originContent": "### .NET Core CLI",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 4,
    "Content": "```\ndotnet add package Scrutor\n```",
    "ContentSha": "2DT9H7m7w9I8sCIJPgT93mFW1HfyelnU68dPgyhldTs=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```\ndotnet add package Scrutor\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      },
      {
        "row": 2,
        "rowsha": "ui20VilzFGXOMPgf8+8gdcZ7SD3dewXoMZNUz0MnfkQ=",
        "originContent": "dotnet add package Scrutor",
        "translatedContent": "dotnet add package Scrutor"
      },
      {
        "row": 3,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 5,
    "Content": "\n## Usage\n\nThe library adds two extension methods to `IServiceCollection`:\n\n* `Scan` - This is the entry point to set up your assembly scanning.\n* `Decorate` - This method is used to decorate already registered services.\n\nSee **Examples** below for usage examples.\n\n## Examples\n\n### Scanning\n",
    "ContentSha": "AoAx2DEYqpS1HjkSXLN+opAyYHOoyNNWO4B5+EhI8Rg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n## 用法\n\n该库为 `IServiceCollection` 添加了两个扩展方法：\n\n* `Scan` - 这是设置程序集扫描的入口点。\n* `Decorate` - 此方法用于装饰已注册的服务。\n\n有关用法示例，请参见下面的**示例**。\n\n## 示例\n\n### 扫描\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "Y7/WGgVhslWiyqCi463Qkcp+Mn8voGpAfLsv80G4WNg=",
        "originContent": "## Usage",
        "translatedContent": "## 用法"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "yir6I5XXrYLPrmHzGshIZSmu7amMDWJF7RahwwundOc=",
        "originContent": "The library adds two extension methods to `IServiceCollection`:",
        "translatedContent": "该库为 `IServiceCollection` 添加了两个扩展方法："
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "NsHz3UsdBJ7fUgcbCcorSsfMHaLzocJjwyqEELw2WS0=",
        "originContent": "* `Scan` - This is the entry point to set up your assembly scanning.",
        "translatedContent": "* `Scan` - 这是设置程序集扫描的入口点。"
      },
      {
        "row": 7,
        "rowsha": "FisRc6lhmnV3j4KWJYe9vi1SyTDuCDahI70dRLfBHPA=",
        "originContent": "* `Decorate` - This method is used to decorate already registered services.",
        "translatedContent": "* `Decorate` - 此方法用于装饰已注册的服务。"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "pB8JKwMYH0xq9dGJrcg6NlP6haSoMuac3VgN5BI8Y9U=",
        "originContent": "See **Examples** below for usage examples.",
        "translatedContent": "有关用法示例，请参见下面的**示例**。"
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "DRmrRjGXhXaABVNjE/Ar07m3eartgu6sW/en95atPvE=",
        "originContent": "## Examples",
        "translatedContent": "## 示例"
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "lqWbSHw7Eb6493O6vG1OPJO687qgP7Zp3vWisVA/64g=",
        "originContent": "### Scanning",
        "translatedContent": "### 扫描"
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 6,
    "Content": "```csharp\nvar collection = new ServiceCollection();\n\ncollection.Scan(scan => scan\n     // We start out with all types in the assembly of ITransientService\n    .FromAssemblyOf<ITransientService>()\n        // AddClasses starts out with all public, non-abstract types in this assembly.\n        // These types are then filtered by the delegate passed to the method.\n        // In this case, we filter out only the classes that are assignable to ITransientService.\n        .AddClasses(classes => classes.AssignableTo<ITransientService>())\n            // We then specify what type we want to register these classes as.\n            // In this case, we want to register the types as all of its implemented interfaces.\n            // So if a type implements 3 interfaces; A, B, C, we'd end up with three separate registrations.\n            .AsImplementedInterfaces()\n            // And lastly, we specify the lifetime of these registrations.\n            .WithTransientLifetime()\n        // Here we start again, with a new full set of classes from the assembly above.\n        // This time, filtering out only the classes assignable to IScopedService.\n        .AddClasses(classes => classes.AssignableTo<IScopedService>())\n            // Now, we just want to register these types as a single interface, IScopedService.\n            .As<IScopedService>()\n            // And again, just specify the lifetime.\n            .WithScopedLifetime()\n        // Generic interfaces are also supported too, e.g. public interface IOpenGeneric<T> \n        .AddClasses(classes => classes.AssignableTo(typeof(IOpenGeneric<>)))\n            .AsImplementedInterfaces()\n        // And you scan generics with multiple type parameters too\n        // e.g. public interface IQueryHandler<TQuery, TResult>\n        .AddClasses(classes => classes.AssignableTo(typeof(IQueryHandler<,>)))\n            .AsImplementedInterfaces());\n```",
    "ContentSha": "Y7RYXlYVdpuxTmbNtu8+IcCaYU/hM/Uxmjj7/wCp3mM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar collection = new ServiceCollection();\n\ncollection.Scan(scan => scan\n     // We start out with all types in the assembly of ITransientService\n    .FromAssemblyOf<ITransientService>()\n        // AddClasses starts out with all public, non-abstract types in this assembly.\n        // These types are then filtered by the delegate passed to the method.\n        // In this case, we filter out only the classes that are assignable to ITransientService.\n        .AddClasses(classes => classes.AssignableTo<ITransientService>())\n            // We then specify what type we want to register these classes as.\n            // In this case, we want to register the types as all of its implemented interfaces.\n            // So if a type implements 3 interfaces; A, B, C, we'd end up with three separate registrations.\n            .AsImplementedInterfaces()\n            // And lastly, we specify the lifetime of these registrations.\n            .WithTransientLifetime()\n        // Here we start again, with a new full set of classes from the assembly above.\n        // This time, filtering out only the classes assignable to IScopedService.\n        .AddClasses(classes => classes.AssignableTo<IScopedService>())\n            // Now, we just want to register these types as a single interface, IScopedService.\n            .As<IScopedService>()\n            // And again, just specify the lifetime.\n            .WithScopedLifetime()\n        // Generic interfaces are also supported too, e.g. public interface IOpenGeneric<T> \n        .AddClasses(classes => classes.AssignableTo(typeof(IOpenGeneric<>)))\n            .AsImplementedInterfaces()\n        // And you scan generics with multiple type parameters too\n        // e.g. public interface IQueryHandler<TQuery, TResult>\n        .AddClasses(classes => classes.AssignableTo(typeof(IQueryHandler<,>)))\n            .AsImplementedInterfaces());\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "m7pMdPmyV/au6B9mvjGYw9NLT5ztZxtYTfGiO8rC6WY=",
        "originContent": "var collection = new ServiceCollection();",
        "translatedContent": "var collection = new ServiceCollection();"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "TJPgCDMxAa5R8UU2cC83bTVdz86VWEcDpmEhtlQKo9M=",
        "originContent": "collection.Scan(scan => scan",
        "translatedContent": "collection.Scan(scan => scan"
      },
      {
        "row": 5,
        "rowsha": "lc0HrLpKEKwa1VfuPLbei2+ei45OTXmMKG1lIXX0WRw=",
        "originContent": "     // We start out with all types in the assembly of ITransientService",
        "translatedContent": "     // We start out with all types in the assembly of ITransientService"
      },
      {
        "row": 6,
        "rowsha": "rNMlVhzEzEzcEujKRlRr+lTUWcGnly6DTeGLg2V9RyY=",
        "originContent": "    .FromAssemblyOf<ITransientService>()",
        "translatedContent": "    .FromAssemblyOf<ITransientService>()"
      },
      {
        "row": 7,
        "rowsha": "6ezzMhvDx1LiPnKqKljgWxI6ZslVDlDuQov3vS42vPs=",
        "originContent": "        // AddClasses starts out with all public, non-abstract types in this assembly.",
        "translatedContent": "        // AddClasses starts out with all public, non-abstract types in this assembly."
      },
      {
        "row": 8,
        "rowsha": "aKWkol/EQdCWeCCU6g+OtRSuVNENPW0oOILVONU+0zE=",
        "originContent": "        // These types are then filtered by the delegate passed to the method.",
        "translatedContent": "        // These types are then filtered by the delegate passed to the method."
      },
      {
        "row": 9,
        "rowsha": "OwUlD1+/dQ+AIFdijDuLQykiFifSqYo3KUQOIJZ/xds=",
        "originContent": "        // In this case, we filter out only the classes that are assignable to ITransientService.",
        "translatedContent": "        // In this case, we filter out only the classes that are assignable to ITransientService."
      },
      {
        "row": 10,
        "rowsha": "drtdcm3oScT34MQNJuAG3odlHfHJwtN2Jt9wvEbvHR8=",
        "originContent": "        .AddClasses(classes => classes.AssignableTo<ITransientService>())",
        "translatedContent": "        .AddClasses(classes => classes.AssignableTo<ITransientService>())"
      },
      {
        "row": 11,
        "rowsha": "ugR1iZ2M3rRtQpP2qjMRooDPz9SpA9HOFigVsEsFkuE=",
        "originContent": "            // We then specify what type we want to register these classes as.",
        "translatedContent": "            // We then specify what type we want to register these classes as."
      },
      {
        "row": 12,
        "rowsha": "6q/BWKrMezN5FG1SmnlliEERGoLrQhNsIlhBB5oMaPU=",
        "originContent": "            // In this case, we want to register the types as all of its implemented interfaces.",
        "translatedContent": "            // In this case, we want to register the types as all of its implemented interfaces."
      },
      {
        "row": 13,
        "rowsha": "SqTtGc+vNAzAa2y+JUtxq3wDP6Hqdvn6EdFsdsvyTqs=",
        "originContent": "            // So if a type implements 3 interfaces; A, B, C, we'd end up with three separate registrations.",
        "translatedContent": "            // So if a type implements 3 interfaces; A, B, C, we'd end up with three separate registrations."
      },
      {
        "row": 14,
        "rowsha": "NVk7KlKmzzvp1qdtpCOdLw6T1bunAMuCMNqFIHdz8cA=",
        "originContent": "            .AsImplementedInterfaces()",
        "translatedContent": "            .AsImplementedInterfaces()"
      },
      {
        "row": 15,
        "rowsha": "v4VNSsAvKQ0BTO2wbNgEO1mVfSSOyaza60xXA6DchO0=",
        "originContent": "            // And lastly, we specify the lifetime of these registrations.",
        "translatedContent": "            // And lastly, we specify the lifetime of these registrations."
      },
      {
        "row": 16,
        "rowsha": "TkViPcUOhKOYphzZkDzO7n5EFJkHeZWGJ/lpg5aAqo8=",
        "originContent": "            .WithTransientLifetime()",
        "translatedContent": "            .WithTransientLifetime()"
      },
      {
        "row": 17,
        "rowsha": "ruU0VYR+BsC6QnRw5Tma1tNtIZiwFbpu+koPb5ZntWA=",
        "originContent": "        // Here we start again, with a new full set of classes from the assembly above.",
        "translatedContent": "        // Here we start again, with a new full set of classes from the assembly above."
      },
      {
        "row": 18,
        "rowsha": "r/fPZE8xht83a/LDPNdIBZlYY6Ge4/vDd2z+2a2hIiQ=",
        "originContent": "        // This time, filtering out only the classes assignable to IScopedService.",
        "translatedContent": "        // This time, filtering out only the classes assignable to IScopedService."
      },
      {
        "row": 19,
        "rowsha": "IbtKhRRuWoP/c6hXwK7IS0IZtgjMPrwD4KtzcHkOC4Q=",
        "originContent": "        .AddClasses(classes => classes.AssignableTo<IScopedService>())",
        "translatedContent": "        .AddClasses(classes => classes.AssignableTo<IScopedService>())"
      },
      {
        "row": 20,
        "rowsha": "xAzIamawQRn3G/L3AVMsESqiWXHQwD8HsvLxyoK9wvY=",
        "originContent": "            // Now, we just want to register these types as a single interface, IScopedService.",
        "translatedContent": "            // Now, we just want to register these types as a single interface, IScopedService."
      },
      {
        "row": 21,
        "rowsha": "jSW4vbLGNyjQCpeUI4zpAzwoK4P7mj9LCRFsA/R1bIs=",
        "originContent": "            .As<IScopedService>()",
        "translatedContent": "            .As<IScopedService>()"
      },
      {
        "row": 22,
        "rowsha": "y9z/HA9hgTSqa2rDdJzUAVNatRTot0Ia88VwEWUMpzk=",
        "originContent": "            // And again, just specify the lifetime.",
        "translatedContent": "            // And again, just specify the lifetime."
      },
      {
        "row": 23,
        "rowsha": "LA5ezz+Ov43ND0qGPcxjev5NR0XUM8RuBwKTZQC8bFA=",
        "originContent": "            .WithScopedLifetime()",
        "translatedContent": "            .WithScopedLifetime()"
      },
      {
        "row": 24,
        "rowsha": "hLppSU7JHzqtvGxngPyhLHSbwZNp6qAtH8S9UeN+WA8=",
        "originContent": "        // Generic interfaces are also supported too, e.g. public interface IOpenGeneric<T> ",
        "translatedContent": "        // Generic interfaces are also supported too, e.g. public interface IOpenGeneric<T> "
      },
      {
        "row": 25,
        "rowsha": "pS7iU6lUqjfyJyaA5bBMOs3Q+DmBynUcW7wPsvzt9vA=",
        "originContent": "        .AddClasses(classes => classes.AssignableTo(typeof(IOpenGeneric<>)))",
        "translatedContent": "        .AddClasses(classes => classes.AssignableTo(typeof(IOpenGeneric<>)))"
      },
      {
        "row": 26,
        "rowsha": "NVk7KlKmzzvp1qdtpCOdLw6T1bunAMuCMNqFIHdz8cA=",
        "originContent": "            .AsImplementedInterfaces()",
        "translatedContent": "            .AsImplementedInterfaces()"
      },
      {
        "row": 27,
        "rowsha": "t914oSbEigbTsNbfk4z8RQINnzPUK276g201Nj2HscY=",
        "originContent": "        // And you scan generics with multiple type parameters too",
        "translatedContent": "        // And you scan generics with multiple type parameters too"
      },
      {
        "row": 28,
        "rowsha": "eOYIiJamA/Po7w9eRb3gPT+lALwolaVGDQdLtXyvj4Q=",
        "originContent": "        // e.g. public interface IQueryHandler<TQuery, TResult>",
        "translatedContent": "        // e.g. public interface IQueryHandler<TQuery, TResult>"
      },
      {
        "row": 29,
        "rowsha": "rjV+1LQYj41JyiUp0UBCU0kSB9XlNhRGt+nw+letHMs=",
        "originContent": "        .AddClasses(classes => classes.AssignableTo(typeof(IQueryHandler<,>)))",
        "translatedContent": "        .AddClasses(classes => classes.AssignableTo(typeof(IQueryHandler<,>)))"
      },
      {
        "row": 30,
        "rowsha": "DWgVopNqsyZ9TZenRvqwi56hHlL2IsPYLMqBCDHCyYs=",
        "originContent": "            .AsImplementedInterfaces());",
        "translatedContent": "            .AsImplementedInterfaces());"
      },
      {
        "row": 31,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 7,
    "Content": "\n#### Scanning compiled view (UI) types\nBy default, Scrutor excludes compiler-generated types from the `.AddClasses()` type filters. When loading views from a framework such as [Avalonia UI](https://avaloniaui.net/), we need to opt in to compiler-generated types, like this:\n",
    "ContentSha": "Sgq1Jm9eTKTi6reWCDq9xGDAsW3IJPpkl8i5QJDS/Mo=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "#### 扫描已编译的视图（UI）类型\n默认情况下，Scrutor 会从 `.AddClasses()` 类型过滤器中排除编译器生成的类型。  \n当从像 [Avalonia UI](https://avaloniaui.net/) 这样的框架加载视图时，我们需要选择包含编译器生成的类型，方法如下：\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "#### 扫描已编译的视图（UI）类型"
      },
      {
        "row": 2,
        "rowsha": "W+yrLbn4kIwCgDiivBmXymSKxqGAAg2S9RArKH65dQM=",
        "originContent": "#### Scanning compiled view (UI) types",
        "translatedContent": "默认情况下，Scrutor 会从 `.AddClasses()` 类型过滤器中排除编译器生成的类型。  "
      },
      {
        "row": 3,
        "rowsha": "oSkqZswMgwko3sYB8JmLNLMWvO5KWfdiQ4xVZLPFhg8=",
        "originContent": "By default, Scrutor excludes compiler-generated types from the `.AddClasses()` type filters. When loading views from a framework such as [Avalonia UI](https://avaloniaui.net/), we need to opt in to compiler-generated types, like this:",
        "translatedContent": "当从像 [Avalonia UI](https://avaloniaui.net/) 这样的框架加载视图时，我们需要选择包含编译器生成的类型，方法如下："
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 8,
    "Content": "```csharp\n.AddClasses(classes => classes\n    // Opt-in to compiler-generated types\n    .WithAttribute<CompilerGeneratedAttribute>()\n    // Optionally filter types to reduce number of service registrations.\n    .InNamespaces(\"MyApp.Desktop.Views\")\n    .AssignableToAny(\n        typeof(Window),\n        typeof(UserControl)\n    )\n    .AsSelf()\n    .WithSingletonLifetime()\n```",
    "ContentSha": "9a1co0CZoyGRzarU3TQvcfFiuuK3hLhORnREG2m9tfI=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\n.AddClasses(classes => classes\n    // Opt-in to compiler-generated types\n    .WithAttribute<CompilerGeneratedAttribute>()\n    // Optionally filter types to reduce number of service registrations.\n    .InNamespaces(\"MyApp.Desktop.Views\")\n    .AssignableToAny(\n        typeof(Window),\n        typeof(UserControl)\n    )\n    .AsSelf()\n    .WithSingletonLifetime()\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "zTJkyoq7k4rrzD/01stCxCBek12Goib+sWIrC2PztHk=",
        "originContent": ".AddClasses(classes => classes",
        "translatedContent": ".AddClasses(classes => classes"
      },
      {
        "row": 3,
        "rowsha": "vK1Eydj37309/zJuU7vd7wt3BM2rpEc+CJLl1sRYT3I=",
        "originContent": "    // Opt-in to compiler-generated types",
        "translatedContent": "    // Opt-in to compiler-generated types"
      },
      {
        "row": 4,
        "rowsha": "Eyp/PMYQDhG96+Rt7D8FekLVdd2AnYCltiWrfPoyBP8=",
        "originContent": "    .WithAttribute<CompilerGeneratedAttribute>()",
        "translatedContent": "    .WithAttribute<CompilerGeneratedAttribute>()"
      },
      {
        "row": 5,
        "rowsha": "plEiiQVpZLOneeusbXuEzN6ZDzWvlXUqMhKhT3TMpUc=",
        "originContent": "    // Optionally filter types to reduce number of service registrations.",
        "translatedContent": "    // Optionally filter types to reduce number of service registrations."
      },
      {
        "row": 6,
        "rowsha": "ak37+dHSCyIxqvXozLtlFzijO47zM36uZjCbRJxrXZI=",
        "originContent": "    .InNamespaces(\"MyApp.Desktop.Views\")",
        "translatedContent": "    .InNamespaces(\"MyApp.Desktop.Views\")"
      },
      {
        "row": 7,
        "rowsha": "q79NisJF8jBMZUdvx/80+1p57aK4eMKORPWumTiNvIo=",
        "originContent": "    .AssignableToAny(",
        "translatedContent": "    .AssignableToAny("
      },
      {
        "row": 8,
        "rowsha": "KZtI08WNdNZqx/Gz/YTXjGGorMXB2NDGRPQ+dB47yHI=",
        "originContent": "        typeof(Window),",
        "translatedContent": "        typeof(Window),"
      },
      {
        "row": 9,
        "rowsha": "s6YOyvPq8k2wHuDp6BIBVtgpcTa9GIx2um/o17CA7tw=",
        "originContent": "        typeof(UserControl)",
        "translatedContent": "        typeof(UserControl)"
      },
      {
        "row": 10,
        "rowsha": "/xlEZ1LDPBgeqSMqeVvv8VvD/u3SpYCHs/XDPuti6ZI=",
        "originContent": "    )",
        "translatedContent": "    )"
      },
      {
        "row": 11,
        "rowsha": "0tzSPsmsEaWIpKrvJOyQXe/oMneK5HGc4E8YLT2UNu8=",
        "originContent": "    .AsSelf()",
        "translatedContent": "    .AsSelf()"
      },
      {
        "row": 12,
        "rowsha": "f6wvYJLkyCUGl6Lc1T4wAIIwuavodrUx9eW1mjWrQlg=",
        "originContent": "    .WithSingletonLifetime()",
        "translatedContent": "    .WithSingletonLifetime()"
      },
      {
        "row": 13,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 9,
    "Content": "\nWith some UI frameworks, these compiler-generated views implement quite a few interfaces, so unless you need them, it's probably best to register these classes `.AsSelf()`; in other words, be very precise with your filters that accept compiler generated types.\n\n### Decoration\n",
    "ContentSha": "OzEBPchgCvcp6q4zUGlujmZ97hbUhCHsGAvFvGUZkj4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "<translate-content>\n对于某些UI框架，这些编译器生成的视图实现了相当多的接口，所以除非你需要它们，否则最好将这些类注册为`.AsSelf()`；换句话说，要非常精确地使用接受编译器生成类型的过滤器。\n\n### 装饰\n</translate-content>",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "<translate-content>"
      },
      {
        "row": 2,
        "rowsha": "vBAccbf1L2N88x9Do9PxVv8z6Bq6NugIJQA+6/hLSfc=",
        "originContent": "With some UI frameworks, these compiler-generated views implement quite a few interfaces, so unless you need them, it's probably best to register these classes `.AsSelf()`; in other words, be very precise with your filters that accept compiler generated types.",
        "translatedContent": "对于某些UI框架，这些编译器生成的视图实现了相当多的接口，所以除非你需要它们，否则最好将这些类注册为`.AsSelf()`；换句话说，要非常精确地使用接受编译器生成类型的过滤器。"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "0NoA0/GbWhFpXFyWSXqiIZaHcahpjyw32uZCf9SphvQ=",
        "originContent": "### Decoration",
        "translatedContent": "### 装饰"
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "</translate-content>"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 10,
    "Content": "```csharp\nvar collection = new ServiceCollection();\n\n// First, add our service to the collection.\ncollection.AddSingleton<IDecoratedService, Decorated>();\n\n// Then, decorate Decorated with the Decorator type.\ncollection.Decorate<IDecoratedService, Decorator>();\n\n// Finally, decorate Decorator with the OtherDecorator type.\n// As you can see, OtherDecorator requires a separate service, IService. We can get that from the provider argument.\ncollection.Decorate<IDecoratedService>((inner, provider) => new OtherDecorator(inner, provider.GetRequiredService<IService>()));\n\nvar serviceProvider = collection.BuildServiceProvider();\n\n// When we resolve the IDecoratedService service, we'll get the following structure:\n// OtherDecorator -> Decorator -> Decorated\nvar instance = serviceProvider.GetRequiredService<IDecoratedService>();\n```",
    "ContentSha": "gpfzG+Od7fm0Ikh5krEzVfLleMa2xl8t4bG8KKuqqIs=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "```csharp\nvar collection = new ServiceCollection();\n\n// First, add our service to the collection.\ncollection.AddSingleton<IDecoratedService, Decorated>();\n\n// Then, decorate Decorated with the Decorator type.\ncollection.Decorate<IDecoratedService, Decorator>();\n\n// Finally, decorate Decorator with the OtherDecorator type.\n// As you can see, OtherDecorator requires a separate service, IService. We can get that from the provider argument.\ncollection.Decorate<IDecoratedService>((inner, provider) => new OtherDecorator(inner, provider.GetRequiredService<IService>()));\n\nvar serviceProvider = collection.BuildServiceProvider();\n\n// When we resolve the IDecoratedService service, we'll get the following structure:\n// OtherDecorator -> Decorator -> Decorated\nvar instance = serviceProvider.GetRequiredService<IDecoratedService>();\n```",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "DTYjJUoTRRqUO0UnUYV/AGNkCT3MDXXS9Vynilr5bGs=",
        "originContent": "```csharp",
        "translatedContent": "```csharp"
      },
      {
        "row": 2,
        "rowsha": "m7pMdPmyV/au6B9mvjGYw9NLT5ztZxtYTfGiO8rC6WY=",
        "originContent": "var collection = new ServiceCollection();",
        "translatedContent": "var collection = new ServiceCollection();"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "Wvi25/gwLxvVKRm9hFsDvUhbq6bw7LO9oP0NLoyy7QA=",
        "originContent": "// First, add our service to the collection.",
        "translatedContent": "// First, add our service to the collection."
      },
      {
        "row": 5,
        "rowsha": "HPgQBCdVHL/4FkCOujPsd/8OZkl1pBvzRZc7ECrS+Zg=",
        "originContent": "collection.AddSingleton<IDecoratedService, Decorated>();",
        "translatedContent": "collection.AddSingleton<IDecoratedService, Decorated>();"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "iVsZB3ZL+ae7lGImwvW/enQD45K9HDHH7fr6De0Jx/g=",
        "originContent": "// Then, decorate Decorated with the Decorator type.",
        "translatedContent": "// Then, decorate Decorated with the Decorator type."
      },
      {
        "row": 8,
        "rowsha": "UNuamBFZ8hD1FPdJFe4NB1HVQk/VVyzjxE9BGtv4BVI=",
        "originContent": "collection.Decorate<IDecoratedService, Decorator>();",
        "translatedContent": "collection.Decorate<IDecoratedService, Decorator>();"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 10,
        "rowsha": "X25vvH4I2AhFZVPUrL3m/H1daiH0V/PT8YqgNUbdx20=",
        "originContent": "// Finally, decorate Decorator with the OtherDecorator type.",
        "translatedContent": "// Finally, decorate Decorator with the OtherDecorator type."
      },
      {
        "row": 11,
        "rowsha": "fdRtePnAvgtw1pJzWKMIwyDz/tN9RNXi98JwFNwqM+U=",
        "originContent": "// As you can see, OtherDecorator requires a separate service, IService. We can get that from the provider argument.",
        "translatedContent": "// As you can see, OtherDecorator requires a separate service, IService. We can get that from the provider argument."
      },
      {
        "row": 12,
        "rowsha": "jCdxGQbjkkaTFEWhoESzBqfZ0oodQnU9Bml2sQWNzs0=",
        "originContent": "collection.Decorate<IDecoratedService>((inner, provider) => new OtherDecorator(inner, provider.GetRequiredService<IService>()));",
        "translatedContent": "collection.Decorate<IDecoratedService>((inner, provider) => new OtherDecorator(inner, provider.GetRequiredService<IService>()));"
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 14,
        "rowsha": "flnZpc4aTAECfAZSdHxJEARea8X8+WyK8AkuZ1CeAHk=",
        "originContent": "var serviceProvider = collection.BuildServiceProvider();",
        "translatedContent": "var serviceProvider = collection.BuildServiceProvider();"
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 16,
        "rowsha": "Qo2h0Kw5m2Z9Yc+pNhgKSCSPQdWYq9iI6hHAag9Xq98=",
        "originContent": "// When we resolve the IDecoratedService service, we'll get the following structure:",
        "translatedContent": "// When we resolve the IDecoratedService service, we'll get the following structure:"
      },
      {
        "row": 17,
        "rowsha": "M4DMbfoWMea7GNtJoaEi4OjooFPQT0XQvbBnbW6E65E=",
        "originContent": "// OtherDecorator -> Decorator -> Decorated",
        "translatedContent": "// OtherDecorator -> Decorator -> Decorated"
      },
      {
        "row": 18,
        "rowsha": "cFb0O14YPdfqRQMVC+YqTuyGcZzmCfnA0dtLR0sb7NI=",
        "originContent": "var instance = serviceProvider.GetRequiredService<IDecoratedService>();",
        "translatedContent": "var instance = serviceProvider.GetRequiredService<IDecoratedService>();"
      },
      {
        "row": 19,
        "rowsha": "8bkBhHOQsO1+N058HkZOwXtGpCfEh6WtbL0pBkBQg9U=",
        "originContent": "```",
        "translatedContent": "```"
      }
    ],
    "IsCodeBlock": true
  },
  {
    "Id": 11,
    "Content": "\n## Sponsors\n\n[Entity Framework Extensions](https://entityframework-extensions.net/?utm_source=khellang&utm_medium=Scrutor) and [Dapper Plus](https://dapper-plus.net/?utm_source=khellang&utm_medium=Scrutor) are major sponsors and proud to contribute to the development of Scrutor.\n\n[![Entity Framework Extensions](https://raw.githubusercontent.com/khellang/khellang/refs/heads/master/.github/entity-framework-extensions-sponsor.png)](https://entityframework-extensions.net/bulk-insert?utm_source=khellang&utm_medium=Scrutor)\n\n[![Dapper Plus](https://raw.githubusercontent.com/khellang/khellang/refs/heads/master/.github/dapper-plus-sponsor.png)](https://dapper-plus.net/bulk-insert?utm_source=khellang&utm_medium=Scrutor)\n",
    "ContentSha": "otr65cb5m0qy0jqZNtjfDlZ96V3LQwJt219ySLNkQIk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "\n## Sponsors\n\n[Entity Framework Extensions](https://entityframework-extensions.net/?utm_source=khellang&utm_medium=Scrutor) and [Dapper Plus](https://dapper-plus.net/?utm_source=khellang&utm_medium=Scrutor) are major sponsors and proud to contribute to the development of Scrutor.\n\n[![Entity Framework Extensions](https://raw.githubusercontent.com/khellang/khellang/refs/heads/master/.github/entity-framework-extensions-sponsor.png)](https://entityframework-extensions.net/bulk-insert?utm_source=khellang&utm_medium=Scrutor)\n\n[![Dapper Plus](https://raw.githubusercontent.com/khellang/khellang/refs/heads/master/.github/dapper-plus-sponsor.png)](https://dapper-plus.net/bulk-insert?utm_source=khellang&utm_medium=Scrutor)\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 2,
        "rowsha": "bbxamqCRr2Gnwz/Ik2k3WbSF+jc4YntpaZKLSrEXOWQ=",
        "originContent": "## Sponsors",
        "translatedContent": "## Sponsors"
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 4,
        "rowsha": "DlodV/ajfLB0oMM+0QbpaAESTX3T4fvalmCDpiAKaXI=",
        "originContent": "[Entity Framework Extensions](https://entityframework-extensions.net/?utm_source=khellang&utm_medium=Scrutor) and [Dapper Plus](https://dapper-plus.net/?utm_source=khellang&utm_medium=Scrutor) are major sponsors and proud to contribute to the development of Scrutor.",
        "translatedContent": "[Entity Framework Extensions](https://entityframework-extensions.net/?utm_source=khellang&utm_medium=Scrutor) and [Dapper Plus](https://dapper-plus.net/?utm_source=khellang&utm_medium=Scrutor) are major sponsors and proud to contribute to the development of Scrutor."
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 6,
        "rowsha": "U7wcnpaIHXE6as4qRdi4w/cjhjdEdRPrm+Iqo3u8w2I=",
        "originContent": "[![Entity Framework Extensions](https://raw.githubusercontent.com/khellang/khellang/refs/heads/master/.github/entity-framework-extensions-sponsor.png)](https://entityframework-extensions.net/bulk-insert?utm_source=khellang&utm_medium=Scrutor)",
        "translatedContent": "[![Entity Framework Extensions](https://raw.githubusercontent.com/khellang/khellang/refs/heads/master/.github/entity-framework-extensions-sponsor.png)](https://entityframework-extensions.net/bulk-insert?utm_source=khellang&utm_medium=Scrutor)"
      },
      {
        "row": 7,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 8,
        "rowsha": "6u46dUBG9btyiKqztDvTe5rsFXoLOyXjWdGw+lmxbOc=",
        "originContent": "[![Dapper Plus](https://raw.githubusercontent.com/khellang/khellang/refs/heads/master/.github/dapper-plus-sponsor.png)](https://dapper-plus.net/bulk-insert?utm_source=khellang&utm_medium=Scrutor)",
        "translatedContent": "[![Dapper Plus](https://raw.githubusercontent.com/khellang/khellang/refs/heads/master/.github/dapper-plus-sponsor.png)](https://dapper-plus.net/bulk-insert?utm_source=khellang&utm_medium=Scrutor)"
      },
      {
        "row": 9,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  }
]