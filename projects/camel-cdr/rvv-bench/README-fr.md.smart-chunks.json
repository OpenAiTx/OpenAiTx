[
  {
    "Id": 1,
    "Content": "# RISC-V Vector benchmark\n\nA collection of RISC-V Vector (RVV) benchmarks to help developers write portably performant RVV code.\n\nBenchmark results can be found at: https://camel-cdr.github.io/rvv-bench-results\n\n## Benchmarks ([./bench/](./bench/))\n\nContains a bunch of benchmark of different implementations of certain algorithms.\n\n## Instruction cycle count ([./instructions/](./instructions/))\n\nMeasures the cycle count of RVV instructions by unrolling and looping over the given instruction repeatedly.\n\n## Getting started\n\nStart by configuring [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk), such that `make` works and optionally [./run.sh](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./run.sh), which allows you to compile and run using `make run`.\n\nThe default configuration should work with all recent clang builds and doesn't require a full cross compilation toolchain, because it builds in freestanding mode.\nThis means it will only work on linux, or linux syscall compatible OS.\n\nOn recent linux versions, the performance counters aren't exposed by default, you may have to execute `echo 2 >/proc/sys/kernel/perf_user_access` and append `-DUSE_PERF_EVENT` to the `CFLAGS=...` line in [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk) (if that doesn't work, try `-DUSE_PERF_EVENT_SLOW` instead).\n\nYou can configure [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk) to build a hosted build or configure it with your custom toolchain, add the `-DCUSTOM_HOST` define, and implement the unimplemented functions under `#ifdef CUSTOM_HOST` in [./nolibc.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./nolibc.h).\n\nXTheadVector isn't supported anymore.\n\n### Running benchmarks ([./bench/](./bench/))\n\nTo run the benchmarks, first look through ([./bench/config.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./bench/config.h)) and adjust it to your processor (e.g. set `HAS_E64`). If it takes too long to execute, try lowering `MAX_MEM`, which is used to scale the benchmark, and play around with the other constants until it executes in a reasonable amount of time and gives a relatively smooth graph.\n\nNow you can just run the benchmarks using `make run` in the ([./bench/](./bench/)) directory, or `make` to just build the executables.\n\n### Measuring cycle count ([./instructions/](./instructions/))\n\nTo run the cycle count measurement, first configure [instructions/rvv/config.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/instructions/rvv/config.h) to your processor.\n\nNow you can run the measurement using `make run` in the ([./instructions/rvv/](./instructions/rvv/)) directory, or `make` to just build the executables.\n\nFor XTheadVector use the ([./instructions/xtheadvector/](./instructions/xtheadvector/)) directory instead. (this isn't maintained anymore)",
    "ContentSha": "Nn3cvjgTp7tMYRR85kLRjeFSVm+jUplVlEuOiOBmEV8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# Benchmark Vector RISC-V\n\nUne collection de benchmarks Vector RISC-V (RVV) pour aider les développeurs à écrire du code RVV performant et portable.\n\nLes résultats des benchmarks sont disponibles sur : https://camel-cdr.github.io/rvv-bench-results\n\n## Benchmarks ([./bench/](./bench/))\n\nContient plusieurs benchmarks de différentes implémentations de certains algorithmes.\n\n## Comptage des cycles d’instruction ([./instructions/](./instructions/))\n\nMesure le nombre de cycles des instructions RVV en déroulant et en répétant l’instruction donnée.\n\n## Pour commencer\n\nCommencez par configurer [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk), de sorte que `make` fonctionne et éventuellement [./run.sh](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./run.sh), qui permet de compiler et d’exécuter avec `make run`.\n\nLa configuration par défaut devrait fonctionner avec toutes les versions récentes de clang et ne nécessite pas de chaîne de compilation croisée complète, car elle compile en mode freestanding.\nCela signifie qu’elle ne fonctionnera que sous Linux, ou un système compatible syscall Linux.\n\nSur les versions récentes de Linux, les compteurs de performance ne sont pas exposés par défaut, vous devrez peut-être exécuter `echo 2 >/proc/sys/kernel/perf_user_access` et ajouter `-DUSE_PERF_EVENT` à la ligne `CFLAGS=...` dans [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk) (si cela ne fonctionne pas, essayez plutôt `-DUSE_PERF_EVENT_SLOW`).\n\nVous pouvez configurer [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk) pour effectuer une compilation hébergée ou la configurer avec votre chaîne d’outils personnalisée, ajoutez la définition `-DCUSTOM_HOST` et implémentez les fonctions non implémentées sous `#ifdef CUSTOM_HOST` dans [./nolibc.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./nolibc.h).\n\nXTheadVector n’est plus supporté.\n\n### Exécution des benchmarks ([./bench/](./bench/))\n\nPour lancer les benchmarks, commencez par consulter ([./bench/config.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./bench/config.h)) et ajustez-le à votre processeur (par exemple, définissez `HAS_E64`). Si l’exécution est trop longue, essayez de réduire `MAX_MEM`, qui est utilisé pour dimensionner le benchmark, et modifiez les autres constantes jusqu’à obtenir un temps d’exécution raisonnable et un graphique relativement fluide.\n\nVous pouvez maintenant simplement exécuter les benchmarks avec `make run` dans le répertoire ([./bench/](./bench/)), ou `make` pour simplement construire les exécutables.\n\n### Mesure du nombre de cycles ([./instructions/](./instructions/))\n\nPour effectuer la mesure du nombre de cycles, commencez par configurer [instructions/rvv/config.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/instructions/rvv/config.h) pour votre processeur.\n\nVous pouvez ensuite lancer la mesure avec `make run` dans le répertoire ([./instructions/rvv/](./instructions/rvv/)), ou `make` pour construire uniquement les exécutables.\n\nPour XTheadVector, utilisez plutôt le répertoire ([./instructions/xtheadvector/](./instructions/xtheadvector/)). (ceci n’est plus maintenu)",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "ORHkZy1aZEOTqS4/AqneAQ8W2kXn7ZXQinKydUXb/Yw=",
        "originContent": "# RISC-V Vector benchmark",
        "translatedContent": "# Benchmark Vector RISC-V"
      },
      {
        "row": 2,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "FSmW3ivRY3MYq56AmMpjtwQdkSsBIjG1lqQmf9TmcUE=",
        "originContent": "A collection of RISC-V Vector (RVV) benchmarks to help developers write portably performant RVV code.",
        "translatedContent": "Une collection de benchmarks Vector RISC-V (RVV) pour aider les développeurs à écrire du code RVV performant et portable."
      },
      {
        "row": 4,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "0vhtGt+ZlgXOgITSo1iF9LMqLelNoJY5HzfAdM6RRK4=",
        "originContent": "Benchmark results can be found at: https://camel-cdr.github.io/rvv-bench-results",
        "translatedContent": "Les résultats des benchmarks sont disponibles sur : https://camel-cdr.github.io/rvv-bench-results"
      },
      {
        "row": 6,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 7,
        "rowsha": "atAsnd+Imf0Koh1YsWCDB/sFMv4GpkEVu02FPmK1uUo=",
        "originContent": "## Benchmarks ([./bench/](./bench/))",
        "translatedContent": "## Benchmarks ([./bench/](./bench/))"
      },
      {
        "row": 8,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 9,
        "rowsha": "PK4CnG++cvbZvYpzuLgBC3ZxlkREiGexDmwmjfeSTpk=",
        "originContent": "Contains a bunch of benchmark of different implementations of certain algorithms.",
        "translatedContent": "Contient plusieurs benchmarks de différentes implémentations de certains algorithmes."
      },
      {
        "row": 10,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 11,
        "rowsha": "3YmBfYhdK+HTo06a7dQjEUfuVFNie/N7lyWzciDDsQc=",
        "originContent": "## Instruction cycle count ([./instructions/](./instructions/))",
        "translatedContent": "## Comptage des cycles d’instruction ([./instructions/](./instructions/))"
      },
      {
        "row": 12,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "AMmALKgqh75UryFWjmXdWs+tY4aYNF5eSdQj3c7aihU=",
        "originContent": "Measures the cycle count of RVV instructions by unrolling and looping over the given instruction repeatedly.",
        "translatedContent": "Mesure le nombre de cycles des instructions RVV en déroulant et en répétant l’instruction donnée."
      },
      {
        "row": 14,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "eetlngBf9IRRYZknBdo+Zo5q71Wk5hbFmnHDAzfrtps=",
        "originContent": "## Getting started",
        "translatedContent": "## Pour commencer"
      },
      {
        "row": 16,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "RATqtRwnHlBfbneNgql/2Fludl4qUf7zGgLPqvLpT+k=",
        "originContent": "Start by configuring [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk), such that `make` works and optionally [./run.sh](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./run.sh), which allows you to compile and run using `make run`.",
        "translatedContent": "Commencez par configurer [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk), de sorte que `make` fonctionne et éventuellement [./run.sh](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./run.sh), qui permet de compiler et d’exécuter avec `make run`."
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 19,
        "rowsha": "MhZZ7phZTBX2DGWuxewP3StXIx2hJgYfylpZkhLVVL0=",
        "originContent": "The default configuration should work with all recent clang builds and doesn't require a full cross compilation toolchain, because it builds in freestanding mode.",
        "translatedContent": "La configuration par défaut devrait fonctionner avec toutes les versions récentes de clang et ne nécessite pas de chaîne de compilation croisée complète, car elle compile en mode freestanding."
      },
      {
        "row": 20,
        "rowsha": "FJ+maq7xiFb21vAVXU0ficI4xVZC/fXbijKeMvZ/7zg=",
        "originContent": "This means it will only work on linux, or linux syscall compatible OS.",
        "translatedContent": "Cela signifie qu’elle ne fonctionnera que sous Linux, ou un système compatible syscall Linux."
      },
      {
        "row": 21,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 22,
        "rowsha": "OuTaq2UdZvS6857Cil8hZ+glV8F4w7yOnWmUYSZaRqw=",
        "originContent": "On recent linux versions, the performance counters aren't exposed by default, you may have to execute `echo 2 >/proc/sys/kernel/perf_user_access` and append `-DUSE_PERF_EVENT` to the `CFLAGS=...` line in [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk) (if that doesn't work, try `-DUSE_PERF_EVENT_SLOW` instead).",
        "translatedContent": "Sur les versions récentes de Linux, les compteurs de performance ne sont pas exposés par défaut, vous devrez peut-être exécuter `echo 2 >/proc/sys/kernel/perf_user_access` et ajouter `-DUSE_PERF_EVENT` à la ligne `CFLAGS=...` dans [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk) (si cela ne fonctionne pas, essayez plutôt `-DUSE_PERF_EVENT_SLOW`)."
      },
      {
        "row": 23,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 24,
        "rowsha": "wUQRkKYbx9qCypZK4u3lwuJyLpsdvBV9bdz/QgdHrmM=",
        "originContent": "You can configure [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk) to build a hosted build or configure it with your custom toolchain, add the `-DCUSTOM_HOST` define, and implement the unimplemented functions under `#ifdef CUSTOM_HOST` in [./nolibc.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./nolibc.h).",
        "translatedContent": "Vous pouvez configurer [./config.mk](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./config.mk) pour effectuer une compilation hébergée ou la configurer avec votre chaîne d’outils personnalisée, ajoutez la définition `-DCUSTOM_HOST` et implémentez les fonctions non implémentées sous `#ifdef CUSTOM_HOST` dans [./nolibc.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./nolibc.h)."
      },
      {
        "row": 25,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 26,
        "rowsha": "QRFDvlLEfnqVJ7RdOPfbJ9BdOg2Q3B8Y00dVWWStkx4=",
        "originContent": "XTheadVector isn't supported anymore.",
        "translatedContent": "XTheadVector n’est plus supporté."
      },
      {
        "row": 27,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 28,
        "rowsha": "pq/plj5gqTE4Q0XCTVhuV7298OqC731xEj7r6fR+2AA=",
        "originContent": "### Running benchmarks ([./bench/](./bench/))",
        "translatedContent": "### Exécution des benchmarks ([./bench/](./bench/))"
      },
      {
        "row": 29,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 30,
        "rowsha": "1k6Axz94UWWc0Bsegctd7ts37gcdhTKiyvQz8YS8+cM=",
        "originContent": "To run the benchmarks, first look through ([./bench/config.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./bench/config.h)) and adjust it to your processor (e.g. set `HAS_E64`). If it takes too long to execute, try lowering `MAX_MEM`, which is used to scale the benchmark, and play around with the other constants until it executes in a reasonable amount of time and gives a relatively smooth graph.",
        "translatedContent": "Pour lancer les benchmarks, commencez par consulter ([./bench/config.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/./bench/config.h)) et ajustez-le à votre processeur (par exemple, définissez `HAS_E64`). Si l’exécution est trop longue, essayez de réduire `MAX_MEM`, qui est utilisé pour dimensionner le benchmark, et modifiez les autres constantes jusqu’à obtenir un temps d’exécution raisonnable et un graphique relativement fluide."
      },
      {
        "row": 31,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 32,
        "rowsha": "uOlVPPF/VE+7OKIaFzxzy/DF4alRHNigKLxiGwlBJEo=",
        "originContent": "Now you can just run the benchmarks using `make run` in the ([./bench/](./bench/)) directory, or `make` to just build the executables.",
        "translatedContent": "Vous pouvez maintenant simplement exécuter les benchmarks avec `make run` dans le répertoire ([./bench/](./bench/)), ou `make` pour simplement construire les exécutables."
      },
      {
        "row": 33,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 34,
        "rowsha": "3P6meKSCPE5J4W3ClsBBwKPoV14SH3bmeDNEJJs3d+k=",
        "originContent": "### Measuring cycle count ([./instructions/](./instructions/))",
        "translatedContent": "### Mesure du nombre de cycles ([./instructions/](./instructions/))"
      },
      {
        "row": 35,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 36,
        "rowsha": "okN6ed2j+2Y8j5TB2iibQQOnTeJelgsF3a7jGOVVEhQ=",
        "originContent": "To run the cycle count measurement, first configure [instructions/rvv/config.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/instructions/rvv/config.h) to your processor.",
        "translatedContent": "Pour effectuer la mesure du nombre de cycles, commencez par configurer [instructions/rvv/config.h](https://raw.githubusercontent.com/camel-cdr/rvv-bench/main/instructions/rvv/config.h) pour votre processeur."
      },
      {
        "row": 37,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 38,
        "rowsha": "MHva9rFWPs7Y64Pjrls/VBT5wsSQwOmCqcUucjCGWBQ=",
        "originContent": "Now you can run the measurement using `make run` in the ([./instructions/rvv/](./instructions/rvv/)) directory, or `make` to just build the executables.",
        "translatedContent": "Vous pouvez ensuite lancer la mesure avec `make run` dans le répertoire ([./instructions/rvv/](./instructions/rvv/)), ou `make` pour construire uniquement les exécutables."
      },
      {
        "row": 39,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 40,
        "rowsha": "dq8cZCLUwsRTjkkYqYw2+RWdxFEo11yoUoZqau9HvyA=",
        "originContent": "For XTheadVector use the ([./instructions/xtheadvector/](./instructions/xtheadvector/)) directory instead. (this isn't maintained anymore)",
        "translatedContent": "Pour XTheadVector, utilisez plutôt le répertoire ([./instructions/xtheadvector/](./instructions/xtheadvector/)). (ceci n’est plus maintenu)"
      }
    ],
    "IsCodeBlock": false
  },
  {
    "Id": 2,
    "Content": "\n## Contributing\n\nHere are some suggestions of things that still need to be done.\n\n* contribute a measurement of a new CPU to: https://github.com/camel-cdr/rvv-bench-results \\\n  You can just create an issue with a single json file, which contains all concatenated [./bench/](./bench/) results. (after proper setup, `make run > out.json` should do the trick). \\\n* implement non memory bound benchmarks\n* implement more benchmarks\n* better cycle count measurements: throughput vs latency (also: can we figure out the execution port configuration?)\n* cycle count for load/stores\n* cycle count for vsetvl\n\n## License\n\nThis repository is licensed under the MIT [LICENSE](LICENSE).\n\n",
    "ContentSha": "O6MHXXQB5RqhuHrx9R6kVjC2WwrnmUl6du+t6zCtow4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "## Contribution\n\nVoici quelques suggestions de tâches encore à réaliser.\n\n* contribuer à la mesure d’un nouveau CPU sur : https://github.com/camel-cdr/rvv-bench-results \\\n  Vous pouvez simplement créer une issue avec un fichier json unique, qui contient tous les résultats concaténés de [./bench/](./bench/). (après configuration adéquate, `make run > out.json` devrait faire l’affaire). \\\n* implémenter des benchmarks non limités par la mémoire\n* implémenter davantage de benchmarks\n* meilleures mesures de cycles : débit vs latence (également : pouvons-nous déterminer la configuration des ports d’exécution ?)\n* nombre de cycles pour les chargements/stocks\n* nombre de cycles pour vsetvl\n\n## Licence\n\nCe dépôt est sous licence MIT [LICENSE](LICENSE).\n\n\n",
    "Status": "ok",
    "RowTranslations": [
      {
        "row": 1,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## Contribution"
      },
      {
        "row": 2,
        "rowsha": "R5ZPLZ4vkE9tjX5qe8QB7AkTfWZsuNTGFLFKMp2KUzM=",
        "originContent": "## Contributing",
        "translatedContent": ""
      },
      {
        "row": 3,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Voici quelques suggestions de tâches encore à réaliser."
      },
      {
        "row": 4,
        "rowsha": "qY/ETJS2ixFUyg30/IJDyi8g8WvYoZDhUk09CR/No3k=",
        "originContent": "Here are some suggestions of things that still need to be done.",
        "translatedContent": ""
      },
      {
        "row": 5,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "* contribuer à la mesure d’un nouveau CPU sur : https://github.com/camel-cdr/rvv-bench-results \\"
      },
      {
        "row": 6,
        "rowsha": "xE/r3EAKCIliSuFWjm0sUAfnXhhwCRu2HsbJqS9RdCE=",
        "originContent": "* contribute a measurement of a new CPU to: https://github.com/camel-cdr/rvv-bench-results \\",
        "translatedContent": "  Vous pouvez simplement créer une issue avec un fichier json unique, qui contient tous les résultats concaténés de [./bench/](./bench/). (après configuration adéquate, `make run > out.json` devrait faire l’affaire). \\"
      },
      {
        "row": 7,
        "rowsha": "xoSG9N0qa4hiqyPdJJeyJoXd7g/sqJVYxTo6tUZsFtE=",
        "originContent": "  You can just create an issue with a single json file, which contains all concatenated [./bench/](./bench/) results. (after proper setup, `make run > out.json` should do the trick). \\",
        "translatedContent": "* implémenter des benchmarks non limités par la mémoire"
      },
      {
        "row": 8,
        "rowsha": "yT6iwcWiQsSpos2Q+/4m6nTcwthVciNSQmozzlk4aI4=",
        "originContent": "* implement non memory bound benchmarks",
        "translatedContent": "* implémenter davantage de benchmarks"
      },
      {
        "row": 9,
        "rowsha": "QFwgp1N3p+8fohBHFjhKAlSBOJ8GOH88jodQwVpUHsk=",
        "originContent": "* implement more benchmarks",
        "translatedContent": "* meilleures mesures de cycles : débit vs latence (également : pouvons-nous déterminer la configuration des ports d’exécution ?)"
      },
      {
        "row": 10,
        "rowsha": "MlzK0xJ4PogmG/VcU7h8DKcqEXnZ8UKzoXGs3FAytxM=",
        "originContent": "* better cycle count measurements: throughput vs latency (also: can we figure out the execution port configuration?)",
        "translatedContent": "* nombre de cycles pour les chargements/stocks"
      },
      {
        "row": 11,
        "rowsha": "6KnPE9TQgqJNz+Ieg6+CBYw3XipmrFINEpvAEoulWuk=",
        "originContent": "* cycle count for load/stores",
        "translatedContent": "* nombre de cycles pour vsetvl"
      },
      {
        "row": 12,
        "rowsha": "9Iv85q1v+dIdR5osJ30VNVRHh8a/ZgUlbQ1t1WbvSU4=",
        "originContent": "* cycle count for vsetvl",
        "translatedContent": ""
      },
      {
        "row": 13,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "## Licence"
      },
      {
        "row": 14,
        "rowsha": "bFSaVtsB4CHySNjaeCiaMZfT24b+DTbTM4HQ38cR6Lw=",
        "originContent": "## License",
        "translatedContent": ""
      },
      {
        "row": 15,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": "Ce dépôt est sous licence MIT [LICENSE](LICENSE)."
      },
      {
        "row": 16,
        "rowsha": "ICc4Vy1/+XdoO5LcZNVtAYO6qdFgMziQHTgyb6OU4IE=",
        "originContent": "This repository is licensed under the MIT [LICENSE](LICENSE).",
        "translatedContent": ""
      },
      {
        "row": 17,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      },
      {
        "row": 18,
        "rowsha": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
        "originContent": "",
        "translatedContent": ""
      }
    ],
    "IsCodeBlock": false
  }
]