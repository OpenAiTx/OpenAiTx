[
  {
    "Id": 1,
    "Content": "# Git Smart Squash\n\nStop wasting time manually reorganizing commits. Let AI do it for you.\n\n## The Problem\n\nYou've been there: 15 commits for a feature, half of them are \"fix\", \"typo\", or \"WIP\". Now you need to clean it up for PR review. Manually squashing and rewriting is tedious.\n\n## The Solution\n\nGit Smart Squash analyzes your changes and reorganizes them into logical commits with proper messages:\n\n```bash\n# Before: your messy branch\n* fix tests\n* typo  \n* more auth changes\n* WIP: working on auth\n* update tests\n* initial auth implementation\n",
    "ContentSha": "YH9fY4xY/lXi3x+BR8NmyNqmDID4lmWiXBc3LGsn598=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# Git Smart Squash\n\n커밋을 수동으로 재정렬하는 데 시간을 낭비하지 마세요. AI가 대신 해드립니다.\n\n## 문제점\n\n누구나 이런 경험이 있습니다: 기능 하나에 15개의 커밋, 그 중 절반은 \"fix\", \"typo\", 또는 \"WIP\"입니다. 이제 PR 리뷰를 위해 정리해야 합니다. 커밋을 수동으로 합치고 메시지를 다시 쓰는 것은 번거롭습니다.\n\n## 해결책\n\nGit Smart Squash는 변경사항을 분석하여 논리적인 커밋과 적절한 메시지로 재구성합니다:\n\n```bash\n# 이전: 지저분한 브랜치\n* fix tests\n* typo  \n* more auth changes\n* WIP: working on auth\n* update tests\n* initial auth implementation\n",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "# After: clean, logical commits\n* feat: implement JWT authentication system\n* test: add auth endpoint coverage\n```\n\n## Quick Start\n\n### 1. Install\n\n```bash\n# Using pip\npip install git-smart-squash\n\n# Using pipx (recommended for isolated install)\npipx install git-smart-squash\n\n# Using uv (fast Python package manager)\nuv tool install git-smart-squash\n```\n",
    "ContentSha": "pCxRMKQBu7AVNIWAqJtAKbTpwM6cJjK4yafCwq44TOU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# After: clean, logical commits\n* feat: JWT 인증 시스템 구현\n* test: 인증 엔드포인트 커버리지 추가\n```\n\n## 빠른 시작\n\n### 1. 설치\n\n```bash\n# pip 사용\npip install git-smart-squash\n\n# pipx 사용 (격리된 설치 권장)\npipx install git-smart-squash\n\n# uv 사용 (빠른 Python 패키지 매니저)\nuv tool install git-smart-squash\n```",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "### 2. Set up AI\n\n**Option A: Local (Free, Private)**\n```bash\n# Install Ollama from https://ollama.com\nollama pull devstral  # Default model\n```\n\n**Option B: Cloud (Better results)**\n```bash\nexport OPENAI_API_KEY=\"your-key\"\nexport ANTHROPIC_API_KEY=\"your-key\"\nexport GEMINI_API_KEY=\"your-key\"\n```\n\n### 3. Run\n\n```bash\ncd your-repo\ngit-smart-squash\n```",
    "ContentSha": "E2AGy4/eSi9FJ42apR9qXMYSpkkZrzqrl3Mn22oJODw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### 2. AI 설정\n\n**옵션 A: 로컬 (무료, 프라이빗)**\n```bash\n# https://ollama.com 에서 Ollama 설치\nollama pull devstral  # 기본 모델\n```\n\n**옵션 B: 클라우드 (더 나은 결과)**\n```bash\nexport OPENAI_API_KEY=\"your-key\"\nexport ANTHROPIC_API_KEY=\"your-key\"\nexport GEMINI_API_KEY=\"your-key\"\n```\n\n### 3. 실행\n\n```bash\ncd your-repo\ngit-smart-squash\n```",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "\nThat's it. Review the plan and approve.\n\n## Command Line Parameters\n\n| Parameter | Description | Default |\n|-----------|-------------|---------|\n| `--base` | Base branch to compare against | Config file or `main` |\n| `--ai-provider` | AI provider to use (openai, anthropic, local, gemini) | Configured in settings |\n| `--model` | Specific AI model to use (see recommended models below) | Provider default |\n| `--config` | Path to custom configuration file | `.git-smart-squash.yml` or `~/.git-smart-squash.yml` |\n| `--auto-apply` | Apply commit plan without confirmation prompt | `false` |\n| `--instructions`, `-i` | Custom instructions for AI (e.g., \"Group by feature area\") | None |\n| `--no-attribution` | Disable attribution message in commits | `false` |\n| `--debug` | Enable debug logging for detailed information | `false` |\n\n## Recommended Models\n\n### Default Models\n- **OpenAI**: `gpt-4.1` (default)\n- **Anthropic**: `claude-sonnet-4-20250514` (default)\n- **Gemini**: `gemini-2.5-pro` (default)\n- **Local/Ollama**: `devstral` (default)\n",
    "ContentSha": "FHYkiFSoZVlQv4AVehbXxD+gtFweeUnhmkjMtC2rCb4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "이것으로 끝입니다. 계획을 검토하고 승인하세요.\n\n## 커맨드 라인 파라미터\n\n| 파라미터 | 설명 | 기본값 |\n|-----------|-------------|---------|\n| `--base` | 비교할 기준 브랜치 | 설정 파일 또는 `main` |\n| `--ai-provider` | 사용할 AI 제공자 (openai, anthropic, local, gemini) | 설정에서 구성됨 |\n| `--model` | 사용할 특정 AI 모델 (아래 추천 모델 참고) | 제공자 기본값 |\n| `--config` | 사용자 지정 설정 파일 경로 | `.git-smart-squash.yml` 또는 `~/.git-smart-squash.yml` |\n| `--auto-apply` | 확인 프롬프트 없이 커밋 계획 적용 | `false` |\n| `--instructions`, `-i` | AI를 위한 사용자 지정 지침 (예: \"기능 영역별로 그룹화\") | 없음 |\n| `--no-attribution` | 커밋에서 귀속 메시지 비활성화 | `false` |\n| `--debug` | 상세 정보를 위한 디버그 로깅 활성화 | `false` |\n\n## 추천 모델\n\n### 기본 모델\n- **OpenAI**: `gpt-4.1` (기본값)\n- **Anthropic**: `claude-sonnet-4-20250514` (기본값)\n- **Gemini**: `gemini-2.5-pro` (기본값)\n- **Local/Ollama**: `devstral` (기본값)\n",
    "Status": "ok"
  },
  {
    "Id": 5,
    "Content": "### Model Selection\n```bash\n# Specify a different model\ngit-smart-squash --ai-provider openai --model gpt-4.1-mini\n\n# For local Ollama\ngit-smart-squash --ai-provider local --model llama-3.1\n```\n\n## Custom Instructions\n\nThe `--instructions` parameter lets you control how commits are organized:\n\n### Examples\n```bash\n# Add ticket prefixes\ngit-smart-squash -i \"Prefix all commits with [ABC-1234]\"\n\n# Separate by type\ngit-smart-squash -i \"Keep backend and frontend changes in separate commits\"\n",
    "ContentSha": "59gf0Ud/6VrjgyVEVt6QJCKgcdF63NaibO10tb7S2Gg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### 모델 선택\n```bash\n# 다른 모델 지정\ngit-smart-squash --ai-provider openai --model gpt-4.1-mini\n\n# 로컬 Ollama 사용 시\ngit-smart-squash --ai-provider local --model llama-3.1\n```\n\n## 사용자 정의 지침\n\n`--instructions` 파라미터를 사용하면 커밋이 정리되는 방식을 제어할 수 있습니다:\n\n### 예시\n```bash\n# 티켓 접두사 추가\ngit-smart-squash -i \"모든 커밋 앞에 [ABC-1234]를 붙이세요\"\n\n# 유형별로 분리\ngit-smart-squash -i \"백엔드와 프론트엔드 변경 사항을 별도의 커밋으로 유지하세요\"\n```",
    "Status": "ok"
  },
  {
    "Id": 6,
    "Content": "# Limit commit count\ngit-smart-squash -i \"Create at most 3 commits total\"\n```\n\n### Tips for Better Results\n- **Be specific**: \"Group database migrations separately\" works better than \"organize nicely\"\n- **One instruction at a time**: Complex multi-part instructions may be partially ignored\n- **Use better models**: Larger models follow instructions more reliably than smaller models\n\n## Common Use Cases\n\n### \"I need to clean up before PR review\"\n```bash\ngit-smart-squash              # Shows plan and prompts for confirmation\ngit-smart-squash --auto-apply # Auto-applies without prompting\n```\n\n### \"I work with a different main branch\"\n```bash\ngit-smart-squash --base develop\n```",
    "ContentSha": "7nTUyDnFpIUxSGbqAObHJzIk8bye8cMxqP2qS/Y3PbA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# 커밋 수 제한하기\ngit-smart-squash -i \"총 3개의 커밋만 생성\"\n\n```\n\n### 더 나은 결과를 위한 팁\n- **구체적으로 작성하세요**: \"데이터베이스 마이그레이션을 별도로 그룹화\"가 \"깔끔하게 정리\"보다 더 효과적입니다\n- **한 번에 한 가지 지시만**: 복잡한 다중 지시는 일부만 무시될 수 있습니다\n- **더 나은 모델 사용**: 더 큰 모델이 작은 모델보다 지시를 더 잘 따릅니다\n\n## 일반적인 사용 사례\n\n### \"PR 리뷰 전에 커밋을 정리하고 싶어요\"\n```bash\ngit-smart-squash              # 계획을 보여주고 확인을 요청합니다\ngit-smart-squash --auto-apply # 확인 없이 자동으로 적용합니다\n```\n\n### \"메인 브랜치가 다를 때 사용해요\"\n```bash\ngit-smart-squash --base develop\n```",
    "Status": "ok"
  },
  {
    "Id": 7,
    "Content": "\n### \"I want to use a specific AI provider\"\n```bash\ngit-smart-squash --ai-provider openai\n```\n\n## Safety\n\n**Your code is safe:**\n- Shows plan before making changes\n- Creates automatic backup branch\n- Requires clean working directory\n- Never pushes without your command\n\n**If something goes wrong:**\n```bash\n# Find backup\ngit branch | grep backup\n\n# Restore",
    "ContentSha": "jqyM7EpZCqjhGFDKwBL5vcbG/ueNzkXRL+XYCfGmMWk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### \"특정 AI 공급자를 사용하고 싶습니다\"\n```bash\ngit-smart-squash --ai-provider openai\n```\n\n## 안전\n\n**당신의 코드는 안전합니다:**\n- 변경 사항을 적용하기 전에 계획을 보여줍니다\n- 자동 백업 브랜치를 생성합니다\n- 작업 디렉토리가 깨끗해야 합니다\n- 사용자의 명령 없이 절대 푸시하지 않습니다\n\n**문제가 발생한 경우:**\n```bash\n# 백업 찾기\ngit branch | grep backup\n\n# 복원",
    "Status": "ok"
  },
  {
    "Id": 8,
    "Content": "git reset --hard your-branch-backup-[timestamp]\n```\n\n## AI Providers\n\n| Provider | Cost | Privacy |\n|----------|------|---------|\n| **Ollama** | Free | Local |\n| **OpenAI** | ~$0.01 | Cloud |\n| **Anthropic** | ~$0.01 | Cloud |\n| **Gemini** | ~$0.01 | Cloud |\n\n## Advanced Configuration (Optional)\n\nWant to customize? Create a config file:\n\n**Project-specific** (`.git-smart-squash.yml` in your repo):\n```yaml\nai:\n  provider: openai  # Use OpenAI for this project\nbase: develop       # Use develop as the base branch for this project\n```",
    "ContentSha": "cbvq8zqp7rEHJXGfenotUkrPuefqa6+NRO/YEUMQDwg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "git reset --hard your-branch-backup-[timestamp]\n```\n\n## AI 제공자\n\n| 제공자      | 비용    | 프라이버시 |\n|-------------|---------|------------|\n| **Ollama**  | 무료    | 로컬       |\n| **OpenAI**  | 약 $0.01 | 클라우드   |\n| **Anthropic** | 약 $0.01 | 클라우드   |\n| **Gemini**  | 약 $0.01 | 클라우드   |\n\n## 고급 설정 (선택 사항)\n\n커스터마이즈하고 싶으신가요? 설정 파일을 생성하세요:\n\n**프로젝트별** (`.git-smart-squash.yml` 파일을 저장소에 생성):\n```yaml\nai:\n  provider: openai  # 이 프로젝트에 OpenAI 사용\nbase: develop       # 이 프로젝트의 기본 브랜치를 develop으로 사용\n```",
    "Status": "ok"
  },
  {
    "Id": 9,
    "Content": "\n**Global default** (`~/.git-smart-squash.yml`):\n```yaml\nai:\n  provider: local   # Always use local AI by default\nbase: main          # Default base branch for all projects\n```\n\n## Troubleshooting\n\n### \"Invalid JSON\" Error\nThis usually means the AI model couldn't format the response properly:\n- **With Ollama**: Switch from `llama2` to `mistral` or `mixtral`\n- **Solution**: `ollama pull mistral` then retry\n- **Alternative**: Use a cloud provider with `--ai-provider openai`\n\n### Model Not Following Instructions\nSome models struggle with complex instructions:\n- **Use better models**: `--model gpt-4-turbo` or `--model claude-3-opus`\n- **Simplify instructions**: One clear directive works better than multiple\n- **Be explicit**: \"Prefix with [ABC-123]\" not \"add ticket number\"\n",
    "ContentSha": "ruyVxIfT4WTr9bP+5oPa/qMG4IErv3+CDdE6eUC1i40=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "**Global default** (`~/.git-smart-squash.yml`):\n```yaml\nai:\n  provider: local   # 항상 로컬 AI를 기본값으로 사용\nbase: main          # 모든 프로젝트의 기본 베이스 브랜치\n```\n\n## 문제 해결\n\n### \"Invalid JSON\" 오류\n이 오류는 보통 AI 모델이 응답을 올바르게 포맷하지 못했을 때 발생합니다:\n- **Ollama 사용 시**: `llama2`에서 `mistral` 또는 `mixtral`로 전환\n- **해결 방법**: `ollama pull mistral` 실행 후 재시도\n- **대안**: `--ai-provider openai` 옵션으로 클라우드 공급자 사용\n\n### 모델이 지시를 따르지 않음\n일부 모델은 복잡한 지시를 잘 처리하지 못합니다:\n- **더 좋은 모델 사용**: `--model gpt-4-turbo` 또는 `--model claude-3-opus`\n- **지시를 단순화**: 여러 지시보다 명확한 하나의 지시가 더 효과적임\n- **명확하게 작성**: \"앞에 [ABC-123]을 붙이세요\"처럼 구체적으로 작성 (단순히 \"티켓 번호 추가\"보다 명확하게)",
    "Status": "ok"
  },
  {
    "Id": 10,
    "Content": "### \"Ollama not found\" \n```bash\n# Install from https://ollama.com\nollama serve\nollama pull devstral  # Default model\n```\n\n### Poor Commit Grouping\nIf the AI creates too many commits or doesn't group well:\n- **Insufficient model**: Use a larger model\n- **Add instructions**: `-i \"Group related changes, max 3 commits\"`\n- **Provide Feedback**: Create an issue on GitHub and let us know what happened\n\n### Installation Issues (Mac)\nIf you don't have pip or prefer isolated installs:\n```bash\n# Using pipx (recommended)\nbrew install pipx\npipx install git-smart-squash\n```",
    "ContentSha": "hQidcRHXIHVp8HWTIk4gtBeFiqIMKxkhn/WP2kGe4O8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### \"Ollama를 찾을 수 없음\"\n```bash\n# https://ollama.com에서 설치\nollama serve\nollama pull devstral  # 기본 모델\n```\n\n### 커밋 그룹화가 미흡함\nAI가 너무 많은 커밋을 생성하거나 잘 그룹화하지 못한다면:\n- **모델이 충분하지 않음**: 더 큰 모델을 사용하세요\n- **지침 추가**: `-i \"관련 변경 사항을 그룹화하고, 최대 3개의 커밋으로 제한\"`\n- **피드백 제공**: GitHub에 이슈를 생성하여 어떤 일이 있었는지 알려주세요\n\n### 설치 문제 (Mac)\npip이 없거나 격리된 설치를 선호한다면:\n```bash\n# pipx 사용 (권장)\nbrew install pipx\npipx install git-smart-squash\n```",
    "Status": "ok"
  },
  {
    "Id": 11,
    "Content": "\n### \"No changes to reorganize\"\n```bash\ngit log --oneline main..HEAD  # Check you have commits\ngit diff main                 # Check you have changes\n```\n\n### Large Diffs / Token Limits\nLocal models have a ~32k token limit. For large changes:\n- Use `--base` with a more recent commit\n- Switch to cloud: `--ai-provider openai`\n- Split into smaller PRs\n\n### Need More Help?\n\nCheck out our [detailed documentation](https://raw.githubusercontent.com/edverma/git-smart-squash/main/DOCUMENTATION.md) or open an issue!\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n",
    "ContentSha": "k1D47P387wrc5Isgrv1an4BozuTmAFJ//QE6JVvzSQM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### \"재구성할 변경 사항 없음\"\n```bash\ngit log --oneline main..HEAD  # 커밋이 있는지 확인\ngit diff main                 # 변경 사항이 있는지 확인\n```\n\n### 대용량 Diff / 토큰 제한\n로컬 모델에는 약 32k 토큰 제한이 있습니다. 대규모 변경의 경우:\n- 더 최근 커밋과 함께 `--base` 사용\n- 클라우드로 전환: `--ai-provider openai`\n- 더 작은 PR로 분할\n\n### 추가 도움이 필요하신가요?\n\n[자세한 문서](https://raw.githubusercontent.com/edverma/git-smart-squash/main/DOCUMENTATION.md)를 확인하거나 이슈를 등록하세요!\n\n## 라이선스\n\nMIT 라이선스 - 자세한 내용은 [LICENSE](LICENSE) 파일을 참조하세요.\n",
    "Status": "ok"
  }
]