[
  {
    "Id": 1,
    "Content": "# Git Smart Squash\n\nStop wasting time manually reorganizing commits. Let AI do it for you.\n\n## The Problem\n\nYou've been there: 15 commits for a feature, half of them are \"fix\", \"typo\", or \"WIP\". Now you need to clean it up for PR review. Manually squashing and rewriting is tedious.\n\n## The Solution\n\nGit Smart Squash analyzes your changes and reorganizes them into logical commits with proper messages:\n\n```bash\n# Before: your messy branch\n* fix tests\n* typo  \n* more auth changes\n* WIP: working on auth\n* update tests\n* initial auth implementation\n",
    "ContentSha": "YH9fY4xY/lXi3x+BR8NmyNqmDID4lmWiXBc3LGsn598=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# Git Smart Squash\n\nコミットの手動整理に時間を無駄にするのはやめましょう。AIに任せてください。\n\n## 問題点\n\nこんな経験はありませんか？機能追加のための15個のコミット、その半分が「fix」「typo」「WIP」。そして、PRレビューのためにきれいにまとめる必要があります。手作業でのsquashや書き換えは面倒です。\n\n## 解決策\n\nGit Smart Squashは、あなたの変更内容を分析し、論理的なコミットと適切なメッセージに再編成します。\n\n```bash\n# Before: your messy branch\n* fix tests\n* typo  \n* more auth changes\n* WIP: working on auth\n* update tests\n* initial auth implementation\n```",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "# After: clean, logical commits\n* feat: implement JWT authentication system\n* test: add auth endpoint coverage\n```\n\n## Quick Start\n\n### 1. Install\n\n```bash\n# Using pip\npip install git-smart-squash\n\n# Using pipx (recommended for isolated install)\npipx install git-smart-squash\n\n# Using uv (fast Python package manager)\nuv tool install git-smart-squash\n```\n",
    "ContentSha": "pCxRMKQBu7AVNIWAqJtAKbTpwM6cJjK4yafCwq44TOU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# After: clean, logical commits\n* feat: JWT認証システムを実装\n* test: 認証エンドポイントのカバレッジを追加\n```\n\n## クイックスタート\n\n### 1. インストール\n\n```bash\n# pipを使用\npip install git-smart-squash\n\n# pipxを使用（分離インストール推奨）\npipx install git-smart-squash\n\n# uvを使用（高速なPythonパッケージマネージャー）\nuv tool install git-smart-squash\n```",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "### 2. Set up AI\n\n**Option A: Local (Free, Private)**\n```bash\n# Install Ollama from https://ollama.com\nollama pull devstral  # Default model\n```\n\n**Option B: Cloud (Better results)**\n```bash\nexport OPENAI_API_KEY=\"your-key\"\nexport ANTHROPIC_API_KEY=\"your-key\"\nexport GEMINI_API_KEY=\"your-key\"\n```\n\n### 3. Run\n\n```bash\ncd your-repo\ngit-smart-squash\n```",
    "ContentSha": "E2AGy4/eSi9FJ42apR9qXMYSpkkZrzqrl3Mn22oJODw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### 2. AIのセットアップ\n\n**オプションA: ローカル（無料、プライベート）**\n```bash\n# https://ollama.com からOllamaをインストール\nollama pull devstral  # デフォルトモデル\n```\n\n**オプションB: クラウド（より良い結果）**\n```bash\nexport OPENAI_API_KEY=\"your-key\"\nexport ANTHROPIC_API_KEY=\"your-key\"\nexport GEMINI_API_KEY=\"your-key\"\n```\n\n### 3. 実行\n\n```bash\ncd your-repo\ngit-smart-squash\n```",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "\nThat's it. Review the plan and approve.\n\n## Command Line Parameters\n\n| Parameter | Description | Default |\n|-----------|-------------|---------|\n| `--base` | Base branch to compare against | Config file or `main` |\n| `--ai-provider` | AI provider to use (openai, anthropic, local, gemini) | Configured in settings |\n| `--model` | Specific AI model to use (see recommended models below) | Provider default |\n| `--config` | Path to custom configuration file | `.git-smart-squash.yml` or `~/.git-smart-squash.yml` |\n| `--auto-apply` | Apply commit plan without confirmation prompt | `false` |\n| `--instructions`, `-i` | Custom instructions for AI (e.g., \"Group by feature area\") | None |\n| `--no-attribution` | Disable attribution message in commits | `false` |\n| `--debug` | Enable debug logging for detailed information | `false` |\n\n## Recommended Models\n\n### Default Models\n- **OpenAI**: `gpt-4.1` (default)\n- **Anthropic**: `claude-sonnet-4-20250514` (default)\n- **Gemini**: `gemini-2.5-pro` (default)\n- **Local/Ollama**: `devstral` (default)\n",
    "ContentSha": "FHYkiFSoZVlQv4AVehbXxD+gtFweeUnhmkjMtC2rCb4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "以上です。プランを確認し、承認してください。\n\n## コマンドラインパラメータ\n\n| パラメータ | 説明 | デフォルト |\n|------------|------|------------|\n| `--base` | 比較対象となるベースブランチ | 設定ファイルまたは `main` |\n| `--ai-provider` | 使用するAIプロバイダー（openai、anthropic、local、gemini） | 設定で構成 |\n| `--model` | 使用する特定のAIモデル（下記の推奨モデルを参照） | プロバイダーのデフォルト |\n| `--config` | カスタム設定ファイルへのパス | `.git-smart-squash.yml` または `~/.git-smart-squash.yml` |\n| `--auto-apply` | 確認プロンプトなしでコミットプランを適用 | `false` |\n| `--instructions`, `-i` | AIへのカスタム指示（例：「機能エリアごとにグループ化」） | なし |\n| `--no-attribution` | コミットでの帰属メッセージを無効化 | `false` |\n| `--debug` | 詳細情報のデバッグログを有効化 | `false` |\n\n## 推奨モデル\n\n### デフォルトモデル\n- **OpenAI**: `gpt-4.1`（デフォルト）\n- **Anthropic**: `claude-sonnet-4-20250514`（デフォルト）\n- **Gemini**: `gemini-2.5-pro`（デフォルト）\n- **Local/Ollama**: `devstral`（デフォルト）",
    "Status": "ok"
  },
  {
    "Id": 5,
    "Content": "### Model Selection\n```bash\n# Specify a different model\ngit-smart-squash --ai-provider openai --model gpt-4.1-mini\n\n# For local Ollama\ngit-smart-squash --ai-provider local --model llama-3.1\n```\n\n## Custom Instructions\n\nThe `--instructions` parameter lets you control how commits are organized:\n\n### Examples\n```bash\n# Add ticket prefixes\ngit-smart-squash -i \"Prefix all commits with [ABC-1234]\"\n\n# Separate by type\ngit-smart-squash -i \"Keep backend and frontend changes in separate commits\"\n",
    "ContentSha": "59gf0Ud/6VrjgyVEVt6QJCKgcdF63NaibO10tb7S2Gg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### モデル選択\n```bash\n# 別のモデルを指定する\ngit-smart-squash --ai-provider openai --model gpt-4.1-mini\n\n# ローカルOllamaの場合\ngit-smart-squash --ai-provider local --model llama-3.1\n```\n\n## カスタムインストラクション\n\n`--instructions` パラメータを使用すると、コミットの整理方法を制御できます。\n\n### 例\n```bash\n# チケットのプレフィックスを追加\ngit-smart-squash -i \"すべてのコミットに [ABC-1234] をプレフィックスとして追加する\"\n\n# 種類ごとに分ける\ngit-smart-squash -i \"バックエンドとフロントエンドの変更を別々のコミットにする\"\n```",
    "Status": "ok"
  },
  {
    "Id": 6,
    "Content": "# Limit commit count\ngit-smart-squash -i \"Create at most 3 commits total\"\n```\n\n### Tips for Better Results\n- **Be specific**: \"Group database migrations separately\" works better than \"organize nicely\"\n- **One instruction at a time**: Complex multi-part instructions may be partially ignored\n- **Use better models**: Larger models follow instructions more reliably than smaller models\n\n## Common Use Cases\n\n### \"I need to clean up before PR review\"\n```bash\ngit-smart-squash              # Shows plan and prompts for confirmation\ngit-smart-squash --auto-apply # Auto-applies without prompting\n```\n\n### \"I work with a different main branch\"\n```bash\ngit-smart-squash --base develop\n```",
    "ContentSha": "7nTUyDnFpIUxSGbqAObHJzIk8bye8cMxqP2qS/Y3PbA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# コミット数の制限\ngit-smart-squash -i \"コミット数を合計3つまでにする\"\n```\n\n### より良い結果を得るためのヒント\n- **具体的に指示する**：「データベースマイグレーションは別々にまとめてください」の方が「きれいに整理してください」より効果的です\n- **1回につき1つの指示**：複雑な複数指示は一部無視される場合があります\n- **より良いモデルを使う**：大規模モデルの方が小規模モデルより指示に忠実です\n\n## よくあるユースケース\n\n### 「PRレビュー前にクリーンアップしたい」\n```bash\ngit-smart-squash              # プランを表示し、確認を求めます\ngit-smart-squash --auto-apply # 確認なしで自動適用します\n```\n\n### 「メインブランチが異なる場合」\n```bash\ngit-smart-squash --base develop\n```",
    "Status": "ok"
  },
  {
    "Id": 7,
    "Content": "\n### \"I want to use a specific AI provider\"\n```bash\ngit-smart-squash --ai-provider openai\n```\n\n## Safety\n\n**Your code is safe:**\n- Shows plan before making changes\n- Creates automatic backup branch\n- Requires clean working directory\n- Never pushes without your command\n\n**If something goes wrong:**\n```bash\n# Find backup\ngit branch | grep backup\n\n# Restore",
    "ContentSha": "jqyM7EpZCqjhGFDKwBL5vcbG/ueNzkXRL+XYCfGmMWk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### 「特定のAIプロバイダーを使用したい」\n```bash\ngit-smart-squash --ai-provider openai\n```\n\n## セーフティ\n\n**あなたのコードは安全です：**\n- 変更を行う前に計画を表示\n- 自動バックアップブランチを作成\n- クリーンな作業ディレクトリが必要\n- あなたのコマンドなしにプッシュしません\n\n**もし何か問題が発生した場合：**\n```bash\n# バックアップを探す\ngit branch | grep backup\n\n# 復元",
    "Status": "ok"
  },
  {
    "Id": 8,
    "Content": "git reset --hard your-branch-backup-[timestamp]\n```\n\n## AI Providers\n\n| Provider | Cost | Privacy |\n|----------|------|---------|\n| **Ollama** | Free | Local |\n| **OpenAI** | ~$0.01 | Cloud |\n| **Anthropic** | ~$0.01 | Cloud |\n| **Gemini** | ~$0.01 | Cloud |\n\n## Advanced Configuration (Optional)\n\nWant to customize? Create a config file:\n\n**Project-specific** (`.git-smart-squash.yml` in your repo):\n```yaml\nai:\n  provider: openai  # Use OpenAI for this project\nbase: develop       # Use develop as the base branch for this project\n```",
    "ContentSha": "cbvq8zqp7rEHJXGfenotUkrPuefqa6+NRO/YEUMQDwg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "git reset --hard your-branch-backup-[timestamp]\n```\n\n## AIプロバイダー\n\n| プロバイダー | コスト | プライバシー |\n|--------------|--------|--------------|\n| **Ollama**   | 無料   | ローカル     |\n| **OpenAI**   | 約$0.01 | クラウド     |\n| **Anthropic**| 約$0.01 | クラウド     |\n| **Gemini**   | 約$0.01 | クラウド     |\n\n## 高度な設定（オプション）\n\nカスタマイズしたい場合は、設定ファイルを作成してください：\n\n**プロジェクト固有**（リポジトリ内の`.git-smart-squash.yml`）:\n```yaml\nai:\n  provider: openai  # このプロジェクトではOpenAIを使用\nbase: develop       # このプロジェクトのベースブランチとしてdevelopを使用\n```",
    "Status": "ok"
  },
  {
    "Id": 9,
    "Content": "\n**Global default** (`~/.git-smart-squash.yml`):\n```yaml\nai:\n  provider: local   # Always use local AI by default\nbase: main          # Default base branch for all projects\n```\n\n## Troubleshooting\n\n### \"Invalid JSON\" Error\nThis usually means the AI model couldn't format the response properly:\n- **With Ollama**: Switch from `llama2` to `mistral` or `mixtral`\n- **Solution**: `ollama pull mistral` then retry\n- **Alternative**: Use a cloud provider with `--ai-provider openai`\n\n### Model Not Following Instructions\nSome models struggle with complex instructions:\n- **Use better models**: `--model gpt-4-turbo` or `--model claude-3-opus`\n- **Simplify instructions**: One clear directive works better than multiple\n- **Be explicit**: \"Prefix with [ABC-123]\" not \"add ticket number\"\n",
    "ContentSha": "ruyVxIfT4WTr9bP+5oPa/qMG4IErv3+CDdE6eUC1i40=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "**グローバルデフォルト**（`~/.git-smart-squash.yml`）:\n```yaml\nai:\n  provider: local   # デフォルトで常にローカルAIを使用\nbase: main          # すべてのプロジェクトのデフォルトベースブランチ\n```\n\n## トラブルシューティング\n\n### 「無効なJSON」エラー\nこれは通常、AIモデルがレスポンスを正しくフォーマットできなかったことを意味します。\n- **Ollamaの場合**: `llama2`から`mistral`または`mixtral`に切り替えてください\n- **解決方法**: `ollama pull mistral` を実行してから再試行\n- **代替案**: `--ai-provider openai` を指定してクラウドプロバイダを利用\n\n### モデルが指示に従わない\n一部のモデルは複雑な指示が苦手です。\n- **より良いモデルを使用**: `--model gpt-4-turbo` または `--model claude-3-opus`\n- **指示を簡潔に**: 複数よりも一つの明確な指示が効果的\n- **明示的に伝える**: 「[ABC-123] を前置してください」と伝え、「チケット番号を追加して」ではなく",
    "Status": "ok"
  },
  {
    "Id": 10,
    "Content": "### \"Ollama not found\" \n```bash\n# Install from https://ollama.com\nollama serve\nollama pull devstral  # Default model\n```\n\n### Poor Commit Grouping\nIf the AI creates too many commits or doesn't group well:\n- **Insufficient model**: Use a larger model\n- **Add instructions**: `-i \"Group related changes, max 3 commits\"`\n- **Provide Feedback**: Create an issue on GitHub and let us know what happened\n\n### Installation Issues (Mac)\nIf you don't have pip or prefer isolated installs:\n```bash\n# Using pipx (recommended)\nbrew install pipx\npipx install git-smart-squash\n```",
    "ContentSha": "hQidcRHXIHVp8HWTIk4gtBeFiqIMKxkhn/WP2kGe4O8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### \"Ollama が見つかりません\"\n```bash\n# https://ollama.com からインストール\nollama serve\nollama pull devstral  # デフォルトモデル\n```\n\n### コミットのグループ化が不十分\nAI がコミットを作りすぎたり、うまくグループ化できない場合:\n- **モデルが不十分**: より大きなモデルを使用してください\n- **指示を追加**: `-i \"関連する変更をまとめて、最大3コミットにする\"`\n- **フィードバックを提供**: GitHubでIssueを作成し、何が起こったかお知らせください\n\n### インストールの問題（Mac）\npipがない場合や、分離されたインストールを希望する場合:\n```bash\n# pipxを使用（推奨）\nbrew install pipx\npipx install git-smart-squash\n```",
    "Status": "ok"
  },
  {
    "Id": 11,
    "Content": "\n### \"No changes to reorganize\"\n```bash\ngit log --oneline main..HEAD  # Check you have commits\ngit diff main                 # Check you have changes\n```\n\n### Large Diffs / Token Limits\nLocal models have a ~32k token limit. For large changes:\n- Use `--base` with a more recent commit\n- Switch to cloud: `--ai-provider openai`\n- Split into smaller PRs\n\n### Need More Help?\n\nCheck out our [detailed documentation](https://raw.githubusercontent.com/edverma/git-smart-squash/main/DOCUMENTATION.md) or open an issue!\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n",
    "ContentSha": "k1D47P387wrc5Isgrv1an4BozuTmAFJ//QE6JVvzSQM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### 「再編成する変更はありません」\n```bash\ngit log --oneline main..HEAD  # コミットがあるか確認\ngit diff main                 # 変更があるか確認\n```\n\n### 大きな差分 / トークン制限\nローカルモデルには約32kトークンの制限があります。大きな変更の場合：\n- より新しいコミットで `--base` を使用する\n- クラウドに切り替える: `--ai-provider openai`\n- 小さなPRに分割する\n\n### さらにヘルプが必要ですか？\n\n[詳細なドキュメント](https://raw.githubusercontent.com/edverma/git-smart-squash/main/DOCUMENTATION.md)をご覧いただくか、issueを作成してください！\n\n## ライセンス\n\nMITライセンス - 詳細は [LICENSE](LICENSE) ファイルをご覧ください。\n",
    "Status": "ok"
  }
]