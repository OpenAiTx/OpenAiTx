[
  {
    "Id": 1,
    "Content": "# Git Smart Squash\n\nStop wasting time manually reorganizing commits. Let AI do it for you.\n\n## The Problem\n\nYou've been there: 15 commits for a feature, half of them are \"fix\", \"typo\", or \"WIP\". Now you need to clean it up for PR review. Manually squashing and rewriting is tedious.\n\n## The Solution\n\nGit Smart Squash analyzes your changes and reorganizes them into logical commits with proper messages:\n\n```bash\n# Before: your messy branch\n* fix tests\n* typo  \n* more auth changes\n* WIP: working on auth\n* update tests\n* initial auth implementation\n",
    "ContentSha": "YH9fY4xY/lXi3x+BR8NmyNqmDID4lmWiXBc3LGsn598=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# Git Smart Squash\n\nसमय बर्बाद करना बंद करें और कमिट्स को मैन्युअली पुनर्गठित करने की जगह AI को यह करने दें।\n\n## समस्या\n\nआप इस स्थिति में रहे हैं: किसी फीचर के लिए 15 कमिट्स, जिनमें से आधे \"fix\", \"typo\", या \"WIP\" हैं। अब आपको PR रिव्यू के लिए इन्हें साफ-सुथरा बनाना है। मैन्युअली स्क्वैशिंग और री-राइटिंग करना थकाऊ है।\n\n## समाधान\n\nGit Smart Squash आपके बदलावों का विश्लेषण करता है और उन्हें तार्किक कमिट्स में उचित संदेशों के साथ पुनर्गठित करता है:\n\n```bash\n# पहले: आपकी अव्यवस्थित ब्रांच\n* fix tests\n* typo  \n* more auth changes\n* WIP: working on auth\n* update tests\n* initial auth implementation\n```",
    "Status": "ok"
  },
  {
    "Id": 2,
    "Content": "# After: clean, logical commits\n* feat: implement JWT authentication system\n* test: add auth endpoint coverage\n```\n\n## Quick Start\n\n### 1. Install\n\n```bash\n# Using pip\npip install git-smart-squash\n\n# Using pipx (recommended for isolated install)\npipx install git-smart-squash\n\n# Using uv (fast Python package manager)\nuv tool install git-smart-squash\n```\n",
    "ContentSha": "pCxRMKQBu7AVNIWAqJtAKbTpwM6cJjK4yafCwq44TOU=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# After: clean, logical commits\n* feat: JWT प्रमाणीकरण सिस्टम लागू करें\n* test: auth एंडपॉइंट कवरेज जोड़ें\n```\n\n## त्वरित प्रारंभ\n\n### 1. इंस्टॉल करें\n\n```bash\n# पिप का उपयोग करते हुए\npip install git-smart-squash\n\n# pipx का उपयोग करते हुए (आइसोलेटेड इंस्टॉल के लिए अनुशंसित)\npipx install git-smart-squash\n\n# uv का उपयोग करते हुए (तेज Python पैकेज मैनेजर)\nuv tool install git-smart-squash\n```",
    "Status": "ok"
  },
  {
    "Id": 3,
    "Content": "### 2. Set up AI\n\n**Option A: Local (Free, Private)**\n```bash\n# Install Ollama from https://ollama.com\nollama pull devstral  # Default model\n```\n\n**Option B: Cloud (Better results)**\n```bash\nexport OPENAI_API_KEY=\"your-key\"\nexport ANTHROPIC_API_KEY=\"your-key\"\nexport GEMINI_API_KEY=\"your-key\"\n```\n\n### 3. Run\n\n```bash\ncd your-repo\ngit-smart-squash\n```",
    "ContentSha": "E2AGy4/eSi9FJ42apR9qXMYSpkkZrzqrl3Mn22oJODw=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### 2. एआई सेट करें\n\n**विकल्प A: लोकल (नि:शुल्क, निजी)**\n```bash\n# https://ollama.com से Ollama इंस्टॉल करें\nollama pull devstral  # डिफ़ॉल्ट मॉडल\n```\n\n**विकल्प B: क्लाउड (बेहतर परिणाम)**\n```bash\nexport OPENAI_API_KEY=\"your-key\"\nexport ANTHROPIC_API_KEY=\"your-key\"\nexport GEMINI_API_KEY=\"your-key\"\n```\n\n### 3. चलाएँ\n\n```bash\ncd your-repo\ngit-smart-squash\n```",
    "Status": "ok"
  },
  {
    "Id": 4,
    "Content": "\nThat's it. Review the plan and approve.\n\n## Command Line Parameters\n\n| Parameter | Description | Default |\n|-----------|-------------|---------|\n| `--base` | Base branch to compare against | Config file or `main` |\n| `--ai-provider` | AI provider to use (openai, anthropic, local, gemini) | Configured in settings |\n| `--model` | Specific AI model to use (see recommended models below) | Provider default |\n| `--config` | Path to custom configuration file | `.git-smart-squash.yml` or `~/.git-smart-squash.yml` |\n| `--auto-apply` | Apply commit plan without confirmation prompt | `false` |\n| `--instructions`, `-i` | Custom instructions for AI (e.g., \"Group by feature area\") | None |\n| `--no-attribution` | Disable attribution message in commits | `false` |\n| `--debug` | Enable debug logging for detailed information | `false` |\n\n## Recommended Models\n\n### Default Models\n- **OpenAI**: `gpt-4.1` (default)\n- **Anthropic**: `claude-sonnet-4-20250514` (default)\n- **Gemini**: `gemini-2.5-pro` (default)\n- **Local/Ollama**: `devstral` (default)\n",
    "ContentSha": "FHYkiFSoZVlQv4AVehbXxD+gtFweeUnhmkjMtC2rCb4=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "बस इतना ही। योजना की समीक्षा करें और अनुमोदन करें।\n\n## कमांड लाइन पैरामीटर\n\n| पैरामीटर | विवरण | डिफ़ॉल्ट |\n|-----------|-------------|---------|\n| `--base` | तुलना के लिए बेस ब्रांच | कॉन्फ़िग फ़ाइल या `main` |\n| `--ai-provider` | उपयोग करने के लिए एआई प्रदाता (openai, anthropic, local, gemini) | सेटिंग्स में कॉन्फ़िगर किया गया |\n| `--model` | उपयोग करने के लिए विशिष्ट एआई मॉडल (नीचे अनुशंसित मॉडल देखें) | प्रदाता डिफ़ॉल्ट |\n| `--config` | कस्टम कॉन्फ़िगरेशन फ़ाइल का पथ | `.git-smart-squash.yml` या `~/.git-smart-squash.yml` |\n| `--auto-apply` | बिना पुष्टि के कमिट योजना लागू करें | `false` |\n| `--instructions`, `-i` | एआई के लिए कस्टम निर्देश (जैसे, \"फ़ीचर क्षेत्र के अनुसार समूहित करें\") | कोई नहीं |\n| `--no-attribution` | कमिट्स में एट्रिब्यूशन संदेश अक्षम करें | `false` |\n| `--debug` | विस्तृत जानकारी के लिए डिबग लॉगिंग सक्षम करें | `false` |\n\n## अनुशंसित मॉडल\n\n### डिफ़ॉल्ट मॉडल\n- **OpenAI**: `gpt-4.1` (डिफ़ॉल्ट)\n- **Anthropic**: `claude-sonnet-4-20250514` (डिफ़ॉल्ट)\n- **Gemini**: `gemini-2.5-pro` (डिफ़ॉल्ट)\n- **Local/Ollama**: `devstral` (डिफ़ॉल्ट)",
    "Status": "ok"
  },
  {
    "Id": 5,
    "Content": "### Model Selection\n```bash\n# Specify a different model\ngit-smart-squash --ai-provider openai --model gpt-4.1-mini\n\n# For local Ollama\ngit-smart-squash --ai-provider local --model llama-3.1\n```\n\n## Custom Instructions\n\nThe `--instructions` parameter lets you control how commits are organized:\n\n### Examples\n```bash\n# Add ticket prefixes\ngit-smart-squash -i \"Prefix all commits with [ABC-1234]\"\n\n# Separate by type\ngit-smart-squash -i \"Keep backend and frontend changes in separate commits\"\n",
    "ContentSha": "59gf0Ud/6VrjgyVEVt6QJCKgcdF63NaibO10tb7S2Gg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### मॉडल चयन\n```bash\n# एक अलग मॉडल निर्दिष्ट करें\ngit-smart-squash --ai-provider openai --model gpt-4.1-mini\n\n# लोकल Ollama के लिए\ngit-smart-squash --ai-provider local --model llama-3.1\n```\n\n## कस्टम निर्देश\n\n`--instructions` पैरामीटर आपको यह नियंत्रित करने देता है कि कमिट्स को कैसे व्यवस्थित किया जाए:\n\n### उदाहरण\n```bash\n# टिकट प्रीफिक्स जोड़ें\ngit-smart-squash -i \"सभी कमिट्स की शुरुआत [ABC-1234] से करें\"\n\n# प्रकार के अनुसार अलग करें\ngit-smart-squash -i \"बैकएंड और फ्रंटएंड बदलावों को अलग-अलग कमिट्स में रखें\"\n```",
    "Status": "ok"
  },
  {
    "Id": 6,
    "Content": "# Limit commit count\ngit-smart-squash -i \"Create at most 3 commits total\"\n```\n\n### Tips for Better Results\n- **Be specific**: \"Group database migrations separately\" works better than \"organize nicely\"\n- **One instruction at a time**: Complex multi-part instructions may be partially ignored\n- **Use better models**: Larger models follow instructions more reliably than smaller models\n\n## Common Use Cases\n\n### \"I need to clean up before PR review\"\n```bash\ngit-smart-squash              # Shows plan and prompts for confirmation\ngit-smart-squash --auto-apply # Auto-applies without prompting\n```\n\n### \"I work with a different main branch\"\n```bash\ngit-smart-squash --base develop\n```",
    "ContentSha": "7nTUyDnFpIUxSGbqAObHJzIk8bye8cMxqP2qS/Y3PbA=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "# कमिट काउंट सीमित करें\ngit-smart-squash -i \"कुल मिलाकर अधिकतम 3 कमिट बनाएं\"\n```\n\n### बेहतर परिणामों के लिए सुझाव\n- **विशिष्ट रहें**: \"डेटाबेस माइग्रेशन को अलग-अलग समूहित करें\" \"अच्छी तरह व्यवस्थित करें\" से बेहतर काम करता है\n- **एक बार में एक निर्देश**: जटिल बहु-भागीय निर्देश आंशिक रूप से अनदेखे किए जा सकते हैं\n- **बेहतर मॉडल का उपयोग करें**: बड़े मॉडल छोटे मॉडलों की तुलना में निर्देशों का अधिक विश्वसनीय रूप से पालन करते हैं\n\n## सामान्य उपयोग के मामले\n\n### \"मुझे PR समीक्षा से पहले साफ-सफाई करनी है\"\n```bash\ngit-smart-squash              # योजना दिखाता है और पुष्टि के लिए पूछता है\ngit-smart-squash --auto-apply # बिना पूछे स्वतः लागू करता है\n```\n\n### \"मैं एक अलग मुख्य ब्रांच के साथ काम करता हूँ\"\n```bash\ngit-smart-squash --base develop\n```",
    "Status": "ok"
  },
  {
    "Id": 7,
    "Content": "\n### \"I want to use a specific AI provider\"\n```bash\ngit-smart-squash --ai-provider openai\n```\n\n## Safety\n\n**Your code is safe:**\n- Shows plan before making changes\n- Creates automatic backup branch\n- Requires clean working directory\n- Never pushes without your command\n\n**If something goes wrong:**\n```bash\n# Find backup\ngit branch | grep backup\n\n# Restore",
    "ContentSha": "jqyM7EpZCqjhGFDKwBL5vcbG/ueNzkXRL+XYCfGmMWk=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### \"मैं एक विशिष्ट AI प्रदाता का उपयोग करना चाहता हूँ\"\n```bash\ngit-smart-squash --ai-provider openai\n```\n\n## सुरक्षा\n\n**आपका कोड सुरक्षित है:**\n- परिवर्तन करने से पहले योजना दिखाता है\n- स्वचालित बैकअप ब्रांच बनाता है\n- स्वच्छ वर्किंग डाइरेक्टरी की आवश्यकता होती है\n- आपके आदेश के बिना कभी भी पुश नहीं करता\n\n**यदि कुछ गलत हो जाता है:**\n```bash\n# बैकअप खोजें\ngit branch | grep backup\n\n# पुनर्स्थापित करें",
    "Status": "ok"
  },
  {
    "Id": 8,
    "Content": "git reset --hard your-branch-backup-[timestamp]\n```\n\n## AI Providers\n\n| Provider | Cost | Privacy |\n|----------|------|---------|\n| **Ollama** | Free | Local |\n| **OpenAI** | ~$0.01 | Cloud |\n| **Anthropic** | ~$0.01 | Cloud |\n| **Gemini** | ~$0.01 | Cloud |\n\n## Advanced Configuration (Optional)\n\nWant to customize? Create a config file:\n\n**Project-specific** (`.git-smart-squash.yml` in your repo):\n```yaml\nai:\n  provider: openai  # Use OpenAI for this project\nbase: develop       # Use develop as the base branch for this project\n```",
    "ContentSha": "cbvq8zqp7rEHJXGfenotUkrPuefqa6+NRO/YEUMQDwg=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "git reset --hard your-branch-backup-[timestamp]\n```\n\n## एआई प्रदाता\n\n| प्रदाता | लागत | गोपनीयता |\n|----------|------|---------|\n| **Ollama** | नि:शुल्क | स्थानीय |\n| **OpenAI** | ~$0.01 | क्लाउड |\n| **Anthropic** | ~$0.01 | क्लाउड |\n| **Gemini** | ~$0.01 | क्लाउड |\n\n## उन्नत विन्यास (वैकल्पिक)\n\nअनुकूलित करना चाहते हैं? एक कॉन्फ़िग फ़ाइल बनाएं:\n\n**प्रोजेक्ट-विशिष्ट** (`.git-smart-squash.yml` आपके रिपॉजिटरी में):\n```yaml\nai:\n  provider: openai  # इस प्रोजेक्ट के लिए OpenAI का उपयोग करें\nbase: develop       # इस प्रोजेक्ट के लिए develop को बेस ब्रांच के रूप में उपयोग करें\n```",
    "Status": "ok"
  },
  {
    "Id": 9,
    "Content": "\n**Global default** (`~/.git-smart-squash.yml`):\n```yaml\nai:\n  provider: local   # Always use local AI by default\nbase: main          # Default base branch for all projects\n```\n\n## Troubleshooting\n\n### \"Invalid JSON\" Error\nThis usually means the AI model couldn't format the response properly:\n- **With Ollama**: Switch from `llama2` to `mistral` or `mixtral`\n- **Solution**: `ollama pull mistral` then retry\n- **Alternative**: Use a cloud provider with `--ai-provider openai`\n\n### Model Not Following Instructions\nSome models struggle with complex instructions:\n- **Use better models**: `--model gpt-4-turbo` or `--model claude-3-opus`\n- **Simplify instructions**: One clear directive works better than multiple\n- **Be explicit**: \"Prefix with [ABC-123]\" not \"add ticket number\"\n",
    "ContentSha": "ruyVxIfT4WTr9bP+5oPa/qMG4IErv3+CDdE6eUC1i40=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "**ग्लोबल डिफ़ॉल्ट** (`~/.git-smart-squash.yml`):\n```yaml\nai:\n  provider: local   # डिफ़ॉल्ट रूप से हमेशा लोकल AI का उपयोग करें\nbase: main          # सभी प्रोजेक्ट्स के लिए डिफ़ॉल्ट बेस ब्रांच\n```\n\n## समस्या निवारण\n\n### \"अमान्य JSON\" त्रुटि\nआमतौर पर इसका अर्थ है कि AI मॉडल प्रतिक्रिया को सही ढंग से फ़ॉर्मेट नहीं कर सका:\n- **Ollama के साथ**: `llama2` से `mistral` या `mixtral` पर स्विच करें\n- **समाधान**: `ollama pull mistral` फिर पुनः प्रयास करें\n- **वैकल्पिक**: `--ai-provider openai` के साथ क्लाउड प्रोवाइडर का उपयोग करें\n\n### मॉडल निर्देशों का पालन नहीं कर रहा है\nकुछ मॉडल जटिल निर्देशों के साथ संघर्ष करते हैं:\n- **बेहतर मॉडल का उपयोग करें**: `--model gpt-4-turbo` या `--model claude-3-opus`\n- **निर्देशों को सरल बनाएं**: एक स्पष्ट निर्देश कई की तुलना में बेहतर काम करता है\n- **स्पष्ट रहें**: \"Prefix with [ABC-123]\" कहें, न कि \"add ticket number\"",
    "Status": "ok"
  },
  {
    "Id": 10,
    "Content": "### \"Ollama not found\" \n```bash\n# Install from https://ollama.com\nollama serve\nollama pull devstral  # Default model\n```\n\n### Poor Commit Grouping\nIf the AI creates too many commits or doesn't group well:\n- **Insufficient model**: Use a larger model\n- **Add instructions**: `-i \"Group related changes, max 3 commits\"`\n- **Provide Feedback**: Create an issue on GitHub and let us know what happened\n\n### Installation Issues (Mac)\nIf you don't have pip or prefer isolated installs:\n```bash\n# Using pipx (recommended)\nbrew install pipx\npipx install git-smart-squash\n```",
    "ContentSha": "hQidcRHXIHVp8HWTIk4gtBeFiqIMKxkhn/WP2kGe4O8=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### \"Ollama नहीं मिला\"\n```bash\n# https://ollama.com से इंस्टॉल करें\nollama serve\nollama pull devstral  # डिफ़ॉल्ट मॉडल\n```\n\n### कमिट ग्रुपिंग सही नहीं है\nअगर एआई बहुत ज्यादा कमिट बना रहा है या अच्छे से ग्रुप नहीं कर रहा है:\n- **अपर्याप्त मॉडल**: एक बड़ा मॉडल इस्तेमाल करें\n- **निर्देश जोड़ें**: `-i \"संबंधित बदलावों को एक साथ ग्रुप करें, अधिकतम 3 कमिट\"`\n- **प्रतिक्रिया दें**: GitHub पर एक issue बनाएं और हमें बताएं कि क्या हुआ\n\n### इंस्टॉलेशन समस्याएँ (Mac)\nअगर आपके पास pip नहीं है या आप आइसोलेटेड इंस्टॉल पसंद करते हैं:\n```bash\n# pipx का उपयोग करें (अनुशंसित)\nbrew install pipx\npipx install git-smart-squash\n```",
    "Status": "ok"
  },
  {
    "Id": 11,
    "Content": "\n### \"No changes to reorganize\"\n```bash\ngit log --oneline main..HEAD  # Check you have commits\ngit diff main                 # Check you have changes\n```\n\n### Large Diffs / Token Limits\nLocal models have a ~32k token limit. For large changes:\n- Use `--base` with a more recent commit\n- Switch to cloud: `--ai-provider openai`\n- Split into smaller PRs\n\n### Need More Help?\n\nCheck out our [detailed documentation](https://raw.githubusercontent.com/edverma/git-smart-squash/main/DOCUMENTATION.md) or open an issue!\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n",
    "ContentSha": "k1D47P387wrc5Isgrv1an4BozuTmAFJ//QE6JVvzSQM=",
    "SectionType": "",
    "StartLine": 0,
    "EndLine": 0,
    "Translation": "### \"पुनर्गठन के लिए कोई परिवर्तन नहीं\"\n```bash\ngit log --oneline main..HEAD  # जांचें कि आपके पास कमिट्स हैं\ngit diff main                 # जांचें कि आपके पास परिवर्तन हैं\n```\n\n### बड़े डिफ्स / टोकन सीमाएँ\nलोकल मॉडल की टोकन सीमा लगभग ~32k है। बड़े परिवर्तनों के लिए:\n- किसी हालिया कमिट के साथ `--base` का उपयोग करें\n- क्लाउड पर स्विच करें: `--ai-provider openai`\n- छोटे-छोटे PR में विभाजित करें\n\n### और सहायता चाहिए?\n\nहमारे [विस्तृत दस्तावेज़](https://raw.githubusercontent.com/edverma/git-smart-squash/main/DOCUMENTATION.md) देखें या एक इश्यू खोलें!\n\n## लाइसेंस\n\nMIT लाइसेंस - अधिक जानकारी के लिए [LICENSE](LICENSE) फ़ाइल देखें।\n",
    "Status": "ok"
  }
]